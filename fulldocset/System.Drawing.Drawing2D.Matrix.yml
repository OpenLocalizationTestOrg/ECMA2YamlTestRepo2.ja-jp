### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.Matrix
  id: Matrix
  children:
  - System.Drawing.Drawing2D.Matrix.#ctor
  - System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])
  - System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])
  - System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Clone
  - System.Drawing.Drawing2D.Matrix.Dispose
  - System.Drawing.Drawing2D.Matrix.Elements
  - System.Drawing.Drawing2D.Matrix.Equals(System.Object)
  - System.Drawing.Drawing2D.Matrix.Finalize
  - System.Drawing.Drawing2D.Matrix.GetHashCode
  - System.Drawing.Drawing2D.Matrix.Invert
  - System.Drawing.Drawing2D.Matrix.IsIdentity
  - System.Drawing.Drawing2D.Matrix.IsInvertible
  - System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.OffsetX
  - System.Drawing.Drawing2D.Matrix.OffsetY
  - System.Drawing.Drawing2D.Matrix.Reset
  - System.Drawing.Drawing2D.Matrix.Rotate(System.Single)
  - System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)
  - System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])
  - System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])
  - System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])
  langs:
  - csharp
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
  type: Class
  summary: "ジオメトリック変換を表す 3-3 でのアフィン行列をカプセル化します。 このクラスは継承できません。"
  remarks: "[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]アフィン変換行列オブジェクトに格納できます。 表すアフィン変換行列の 3 番目の列は常にので (0, 0, 1) マトリックス オブジェクトを構築するときに、最初の 2 つの列で 6 つの数字のみを指定します。 ステートメント`Matrix myMatrix = new Matrix(0, 1, -1, 0, 3, 4)`次の図に示すように、マトリックスを構築します。       ![変換](~/add/media/aboutgdip05-art10.gif &quot;変換&quot;)## 複合変換 A 複合変換は、変換後、その他の&1; つのシーケンス。 マトリックスおよび次の一覧内の変換を検討してください: | | |  |-|-|  |行列 A |90 度回転 |  |マトリックス B |X 軸方向の 2 倍スケール |  |マトリックス C |Y 方向の 3 つの単位を翻訳 |      かどうかはまず、点 (2, 1): [2 1 1] マトリックスで表される — しを a、B、C、点 (2, 1) が使用される順番で 3 つの変換し、します。       [2 1 1]ABC = [-2 5 1] ではなく 3 つの独立した行列に複合変換の 3 つの部分を格納は、A を掛けることができますを複合変換全体を格納する 1 つの 3 倍 3 行列を取得するには、同時に、B、および C です。 たとえば、ABC D. を =D を掛けたポイントが A、B、C を掛けたポイントと同じ結果を提供し、      [2 1 1]D = [-2 5 1]、次の図 A、B、C および D のマトリックス      ![変換](~/add/media/aboutgdip05-art12.gif &quot;変換&quot;)複合変換の行列を個々 の変換行列を乗算することによって作成できますが、ファクトは、任意のアフィン変換の並びを 1 つの行列オブジェクトに格納できることを意味します。      > [!CAUTION] > 複合変換の順序は重要です。 一般に、回転してから、スケールを設定し、変換が同じではありません、スケーリング、回転、しに変換します。 同様に、行列乗算の順序が重要です。 一般に、ABC はいない BAC と同じです。       マトリックス クラス複合変換を作成するためのいくつかのメソッドを提供します<xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>、 <xref:System.Drawing.Drawing2D.Matrix.Rotate%2A>、 <xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A>、 <xref:System.Drawing.Drawing2D.Matrix.Scale%2A>、 <xref:System.Drawing.Drawing2D.Matrix.Shear%2A>、 <xref:System.Drawing.Drawing2D.Matrix.Translate%2A>。</xref:System.Drawing.Drawing2D.Matrix.Translate%2A> </xref:System.Drawing.Drawing2D.Matrix.Shear%2A> </xref:System.Drawing.Drawing2D.Matrix.Scale%2A> </xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A> </xref:System.Drawing.Drawing2D.Matrix.Rotate%2A> </xref:System.Drawing.Drawing2D.Matrix.Multiply%2A> 。 次の例は、回転角度 (30) し、y 方向の 2 倍のスケールを設定し、x 軸方向に 5 単位に変換する複合変換の行列を作成します[!code-vb [System.Drawing.CoordinateSystems#11](~/add/codesnippet/visualbasic/t-system.drawing.drawing_10_1.vb)][!code-cs[System.Drawing.CoordinateSystems#11。  ](~/add/codesnippet/csharp/t-system.drawing.drawing_10_1.cs)]"
  syntax:
    content: 'public sealed class Matrix : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor
  id: '#ctor'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix()
  nameWithType: Matrix.Matrix()
  fullName: System.Drawing.Drawing2D.Matrix.Matrix()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>単位行列としてクラスです。"
  syntax:
    content: public Matrix ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])
  id: '#ctor(System.Drawing.Rectangle,System.Drawing.Point[])'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix(Rectangle,Point[])
  nameWithType: Matrix.Matrix(Rectangle,Point[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Rectangle,Point[])
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>クラス、指定した四角形および点の配列で定義されたジオメトリック変換をします。"
  remarks: "によって指定される四角形をマップするジオメトリック変換を表すように、このメソッドがマトリックスの新規作成を初期化、`rect`パラメーターに&3; つの点によって定義された平行四辺形を`plgpts`パラメーター。 四角形の左上隅は最初の要素にマップされて、`plgpts`配列は、右上隅は&2; 番目のポイントにマップされ、左下隅は、3 番目のポイントにマップされます。 平行四辺形の右下隅の点は、最初の&3; つによって暗黙的に指定します。"
  syntax:
    content: public Matrix (System.Drawing.Rectangle rect, System.Drawing.Point[] plgpts);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref>を変換する四角形を表す構造です。"
    - id: plgpts
      type: System.Drawing.Point[]
      description: "3 つの配列<xref href=&quot;System.Drawing.Point&quot;></xref>は、四角形の左、右、上および左下隅の変換先となる平行四辺形の点を表す構造体。 平行四辺形の右下隅は、最初の&3; つのコーナーによって暗黙的に指定します。"
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])
  id: '#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix(RectangleF,PointF[])
  nameWithType: Matrix.Matrix(RectangleF,PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(RectangleF,PointF[])
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>クラス、指定した四角形および点の配列で定義されたジオメトリック変換をします。"
  remarks: "このメソッドは、新しい初期化<xref:System.Drawing.Drawing2D.Matrix>などを表すジオメトリック変換によって指定される四角形のマップを`rect`パラメーター内の次の&3; つの点によって定義されている平行四辺形を`plgpts`パラメーター</xref:System.Drawing.Drawing2D.Matrix> 。 四角形の左上隅は最初の要素にマップされて、`plgpts`配列は、右上隅は&2; 番目のポイントにマップされ、左下隅は、3 番目のポイントにマップされます。 平行四辺形の右下隅の点は、最初の&3; つによって暗黙的に指定します。"
  syntax:
    content: public Matrix (System.Drawing.RectangleF rect, System.Drawing.PointF[] plgpts);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>を変換する四角形を表す構造です。"
    - id: plgpts
      type: System.Drawing.PointF[]
      description: "3 つの配列<xref href=&quot;System.Drawing.PointF&quot;></xref>は、四角形の左、右、上および左下隅の変換先となる平行四辺形の点を表す構造体。 平行四辺形の右下隅は、最初の&3; つのコーナーによって暗黙的に指定します。"
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix(Single,Single,Single,Single,Single,Single)
  nameWithType: Matrix.Matrix(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Single,Single,Single,Single,Single,Single)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>指定した要素のクラスです。"
  syntax:
    content: public Matrix (float m11, float m12, float m21, float m22, float dx, float dy);
    parameters:
    - id: m11
      type: System.Single
      description: "最初の行の最初の列の新しい値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: m12
      type: System.Single
      description: "新しい最初の行と&2; 番目の列の値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: m21
      type: System.Single
      description: "2 番目の行の最初の列の新しい値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: m22
      type: System.Single
      description: "新しい&2; 番目の行と&2; 番目の列の値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: dx
      type: System.Single
      description: "3 番目の行と、新しいの最初の列の値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: dy
      type: System.Single
      description: "新しい&3; 番目の行と&2; 番目の列の値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Clone
  id: Clone
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Clone()
  nameWithType: Matrix.Clone()
  fullName: System.Drawing.Drawing2D.Matrix.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これの正確なコピーが作成<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  syntax:
    content: public System.Drawing.Drawing2D.Matrix Clone ();
    parameters: []
    return:
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>このメソッドが作成されます。"
  overload: System.Drawing.Drawing2D.Matrix.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Dispose
  id: Dispose
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Dispose()
  nameWithType: Matrix.Dispose()
  fullName: System.Drawing.Drawing2D.Matrix.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これによって使用されるすべてのリソースを解放<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  remarks: "呼び出す`Dispose`により、これによって使用されるリソース<xref:System.Drawing.Drawing2D.Matrix>を他の目的を再割り当てするオブジェクト</xref:System.Drawing.Drawing2D.Matrix>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Elements
  id: Elements
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Elements
  nameWithType: Matrix.Elements
  fullName: System.Drawing.Drawing2D.Matrix.Elements
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "この要素を表す浮動小数点値の配列を取得<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  remarks: "要素 m11、m12、m21、m22、dx と dy の<xref:System.Drawing.Drawing2D.Matrix>をこの順序で配列内の値によって表されます</xref:System.Drawing.Drawing2D.Matrix>。"
  syntax:
    content: public float[] Elements { get; }
    return:
      type: System.Single[]
      description: "この要素を表す浮動小数点値の配列<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.Elements*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Matrix.Equals(Object)
  fullName: System.Drawing.Drawing2D.Matrix.Equals(Object)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定したオブジェクトがあるかどうかをテストする<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>これと同じ<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "テストするオブジェクト。"
    return:
      type: System.Boolean
      description: "このメソッドが戻る<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<code> obj </code>は、指定された<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>これと同じ<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Finalize
  id: Finalize
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Finalize()
  nameWithType: Matrix.Finalize()
  fullName: System.Drawing.Drawing2D.Matrix.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "リソースを解放し、それがガベージ コレクションによって回収される前に、他のクリーンアップ操作を実行しようとするオブジェクトを許可します。"
  syntax:
    content: ~Matrix ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.GetHashCode
  id: GetHashCode
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Matrix.GetHashCode()
  fullName: System.Drawing.Drawing2D.Matrix.GetHashCode()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "ハッシュ コードを返します。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "ハッシュ コードをこの<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Invert
  id: Invert
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Invert()
  nameWithType: Matrix.Invert()
  fullName: System.Drawing.Drawing2D.Matrix.Invert()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "この<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>が反転できる場合、します。"
  remarks: ''
  example:
  - "The following code example creates a matrix and inverts it:  \n  \n```c#  \nMatrix myMatrix = new Matrix(3, 5, 1, 2, 2, 4);  \n myMatrix.Invert();  \n```"
  syntax:
    content: public void Invert ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Invert*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.IsIdentity
  id: IsIdentity
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: IsIdentity
  nameWithType: Matrix.IsIdentity
  fullName: System.Drawing.Drawing2D.Matrix.IsIdentity
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "示す値を取得するかどうかこの<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>が単位行列。"
  syntax:
    content: public bool IsIdentity { get; }
    return:
      type: System.Boolean
      description: "このプロパティは<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>この<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> [is identity]、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.IsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.IsInvertible
  id: IsInvertible
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: IsInvertible
  nameWithType: Matrix.IsInvertible
  fullName: System.Drawing.Drawing2D.Matrix.IsInvertible
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "示す値を取得するかどうかこの<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>が反転できます。"
  syntax:
    content: public bool IsInvertible { get; }
    return:
      type: System.Boolean
      description: "このプロパティは<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>この<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>が反転できる場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.IsInvertible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)
  id: Multiply(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Multiply(Matrix)
  nameWithType: Matrix.Multiply(Matrix)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これを乗算<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>で指定した行列の<code> matrix </code>パラメーターを指定した付加することによって<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>.
  syntax:
    content: public void Multiply (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>によってこの<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>と乗算します。"
  overload: System.Drawing.Drawing2D.Matrix.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  id: Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Multiply(Matrix,MatrixOrder)
  nameWithType: Matrix.Multiply(Matrix,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これを乗算<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>で指定した行列の<code> matrix </code>パラメーターで指定された順序で、 <code> order </code>パラメーター。"
  remarks: "指定した順序が場合<xref:System.Drawing.Drawing2D.MatrixOrder>、この<xref:System.Drawing.Drawing2D.Matrix>が先頭に追加された順序で指定した行列乗算します</xref:System.Drawing.Drawing2D.Matrix></xref:System.Drawing.Drawing2D.MatrixOrder>。 指定した順序が場合<xref:System.Drawing.Drawing2D.MatrixOrder>、この<xref:System.Drawing.Drawing2D.Matrix>が追加された順序で指定した行列乗算します</xref:System.Drawing.Drawing2D.Matrix></xref:System.Drawing.Drawing2D.MatrixOrder>。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates three matrices.  \n  \n-   Lists the contents of matrix 1 to the screen.  \n  \n-   Multiplies matrix 1 by matrix 2 and stores the result in matrix 1.  \n  \n-   Lists the contents of matrix 1 to the screen.  \n  \n-   Multiplies the result stored in matrix 1 by matrix 3, and again stores the result in matrix 1.  \n  \n-   Lists the contents of matrix 1 to the screen.  \n  \n-   Draws a rectangle to the screen prior to applying the matrix 1 transform (the blue rectangle).  \n  \n-   Applies the transform to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle), using the same coordinates as the previous rectangle.  \n  \n Notice that the red rectangle has been scaled by a factor of two in the horizontal direction, then rotated 90 degrees, and then moved (translated) 250 points in the x direction and 50 points in the y direction.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/cpp/8671b24d-b76c-4435-bbb4-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/visualbasic/8671b24d-b76c-4435-bbb4-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/csharp/8671b24d-b76c-4435-bbb4-_1.cs)]"
  syntax:
    content: public void Multiply (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>によってこの<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>と乗算します。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "<xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>乗算の順序を表すです。"
  overload: System.Drawing.Drawing2D.Matrix.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.OffsetX
  id: OffsetX
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: OffsetX
  nameWithType: Matrix.OffsetX
  fullName: System.Drawing.Drawing2D.Matrix.OffsetX
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "この x の平行移動値 (dx 値、または&3; 番目の行と列の最初の要素) を取得<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  syntax:
    content: public float OffsetX { get; }
    return:
      type: System.Single
      description: "この x 平行移動値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.OffsetX*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.OffsetY
  id: OffsetY
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: OffsetY
  nameWithType: Matrix.OffsetY
  fullName: System.Drawing.Drawing2D.Matrix.OffsetY
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "この y の平行移動値 (dy 値、または&3; 番目の行と&2; 番目の列内の要素) を取得<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  syntax:
    content: public float OffsetY { get; }
    return:
      type: System.Single
      description: "この y 平行移動値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.OffsetY*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Reset
  id: Reset
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Reset()
  nameWithType: Matrix.Reset()
  fullName: System.Drawing.Drawing2D.Matrix.Reset()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これをリセット<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>を単位行列の要素があります。"
  remarks: "単位行列のメイン対角線上の要素は 1 です。 単位行列の他のすべての要素は、0 です。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates a scaling matrix.  \n  \n-   Lists the matrix elements to the screen.  \n  \n-   Resets the matrix to identity.  \n  \n-   Lists the elements to the screen.  \n  \n-   Translates the matrix by 50 points in the x-axis and 40 points in the y-axis.  \n  \n-   Lists the elements of the translated matrix to the screen.  \n  \n-   Draws a rectangle is drawn to the screen prior to applying the matrix transform (the blue rectangle).  \n  \n-   Applies the transform to the rectangle.  \n  \n-   Draws the transformed rectangle is drawn to the screen (the red rectangle), using the same coordinates as the previous rectangle.  \n  \n Notice that the red rectangle was not scaled (because of the reset) but was translated in the x-axis and y-axis.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/cpp/m-system.drawing.drawing_5_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/visualbasic/m-system.drawing.drawing_5_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/csharp/m-system.drawing.drawing_5_1.cs)]"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single)
  id: Rotate(System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Rotate(Single)
  nameWithType: Matrix.Rotate(Single)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "先頭にこの追加<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>原点の周囲と、指定した角度の時計回りの回転、します。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Rotate%28System.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.
  syntax:
    content: public void Rotate (float angle);
    parameters:
    - id: angle
      type: System.Single
      description: "回転の角度。"
  overload: System.Drawing.Drawing2D.Matrix.Rotate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Rotate(Single,MatrixOrder)
  nameWithType: Matrix.Rotate(Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定した量の時計回りの回転を適用、 <code> angle </code>原点の周囲のパラメーター (0 x 座標と y 座標) この<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).  \n  \n-   Creates a matrix and rotates it 45 degrees.  \n  \n-   Applies this matrix transform to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been rotated around the 0, 0 screen coordinates.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/cpp/4dc64a49-8a71-40e5-a40b-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/visualbasic/4dc64a49-8a71-40e5-a40b-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/csharp/4dc64a49-8a71-40e5-a40b-_1.cs)]"
  syntax:
    content: public void Rotate (float angle, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: angle
      type: System.Single
      description: "(度単位)、回転の角度 (エクステント)。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>順序を指定する (追加や後または前) にこれを適用する回転<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.Rotate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)
  id: RotateAt(System.Single,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: RotateAt(Single,PointF)
  nameWithType: Matrix.RotateAt(Single,PointF)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これに時計回りに回転を適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>で指定されたポイントを中心、 <code> point </code>パラメーター、および回転を付加することによってです。"
  remarks: ''
  example:
  - "The following code example demonstrates using a <xref:System.Drawing.Drawing2D.Matrix> and the <xref:System.Drawing.Drawing2D.GraphicsPath.Transform%2A> method to rotate a string. This example is designed to be used with Windows Forms. Create a form and paste the following code into it. Call the `DrawVerticalStringFromBottomUp` method in the form's <xref:System.Windows.Forms.Control.Paint> event handler, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cs[System.Drawing.MiscExamples#5](~/add/codesnippet/csharp/m-system.drawing.drawing_11_1.cs)]\n [!code-cpp[System.Drawing.MiscExamples#5](~/add/codesnippet/cpp/m-system.drawing.drawing_11_1.cpp)]\n [!code-vb[System.Drawing.MiscExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.drawing_11_1.vb)]"
  syntax:
    content: public void RotateAt (float angle, System.Drawing.PointF point);
    parameters:
    - id: angle
      type: System.Single
      description: "(度単位)、回転の角度 (エクステント)。"
    - id: point
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>回転の中心を表すです。"
  overload: System.Drawing.Drawing2D.Matrix.RotateAt*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  id: RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: RotateAt(Single,PointF,MatrixOrder)
  nameWithType: Matrix.RotateAt(Single,PointF,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これを指定した点の時計回りの回転を適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定した順序で。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).  \n  \n-   Creates a matrix and rotates it 45 degrees around a specified point.  \n  \n-   Applies this matrix transform is to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been rotated around the upper left-hand corner of the rectangle (the rotation point specified the RotateAt method).  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/cpp/fc8aec2b-1f13-41da-9f14-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/visualbasic/fc8aec2b-1f13-41da-9f14-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/csharp/fc8aec2b-1f13-41da-9f14-_1.cs)]"
  syntax:
    content: public void RotateAt (float angle, System.Drawing.PointF point, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: angle
      type: System.Single
      description: "回転の角度。"
    - id: point
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>回転の中心を表すです。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>順序を指定する (追加や後または前) に回転を適用します。"
  overload: System.Drawing.Drawing2D.Matrix.RotateAt*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)
  id: Scale(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Scale(Single,Single)
  nameWithType: Matrix.Scale(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これを指定したスケール ベクターを適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>スケール ベクターを付加することによってです。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Scale%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.
  syntax:
    content: public void Scale (float scaleX, float scaleY);
    parameters:
    - id: scaleX
      type: System.Single
      description: "これをスケールする値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> x 軸方向にします。"
    - id: scaleY
      type: System.Single
      description: "これをスケールする値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> y 軸方向にします。"
  overload: System.Drawing.Drawing2D.Matrix.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Scale(Single,Single,MatrixOrder)
  nameWithType: Matrix.Scale(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定したスケール ベクターを適用 (<code> scaleX </code>と<code> scaleY </code>) をこの<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定した順序を使用します。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a scaling transform (the blue rectangle).  \n  \n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.  \n  \n-   Applies this matrix transform to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/cpp/05985bb7-69b2-4fd4-9c7f-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/visualbasic/05985bb7-69b2-4fd4-9c7f-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/csharp/05985bb7-69b2-4fd4-9c7f-_1.cs)]"
  syntax:
    content: public void Scale (float scaleX, float scaleY, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: scaleX
      type: System.Single
      description: "これをスケールする値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> x 軸方向にします。"
    - id: scaleY
      type: System.Single
      description: "これをスケールする値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> y 軸方向にします。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>順序を指定する (追加や後または前) にこれを適用するスケール ベクター <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)
  id: Shear(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Shear(Single,Single)
  nameWithType: Matrix.Shear(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これを指定した傾斜ベクターを適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>傾斜変換を付加することによってです。"
  remarks: "このメソッドに適用される変換は、0 は、パラメーターのいずれかの場合にのみ、純粋な傾斜です。 原点に四角形に適用されるときに、`shearY`要素が 0 の場合、変換、下端をで水平方向に移動する`shearX`四角形の高さがタイムアウトします。 ときに、 `shearX` factor が 0 の場合、垂直方向に右のエッジを移動`shearY`四角形の幅がタイムアウトします。 注意は順序では、結果は予測できないために、両方のパラメーターが&0; でない場合です。 たとえば、両方の要素が 1 の場合は、変換は特異な (したがって押しつぶされて)、なり、平面全体を 1 行です。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following action:  \n  \n-   Draws a rectangle to the screen, using a green pen, prior to applying a scaling transform.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.Matrix> and uses it to set a world-coordinate transform for the <xref:System.Drawing.Graphics>.  \n  \n-   Draws another rectangle using a red pen.  \n  \n-   Draws an ellipse using a blue pen.  \n  \n The result is a green rectangle, a red parallelogram and a transformed, blue ellipse. Notice that the green rectangle (drawn prior to setting the transform) directly uses the coordinates supplied in the <xref:System.Drawing.Graphics.DrawRectangle%2A> call. The other two figures are transformed prior to drawing. The rectangle is transformed to a parallelogram (red), and the ellipse (blue) is transformed to fit into the transformed parallelogram. Notice the bottom of the rectangle is moved (sheared) in the x-axis by a factor of two times the height of the rectangle, thus forming the parallelogram.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/cpp/m-system.drawing.drawing_3_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.drawing_3_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/csharp/m-system.drawing.drawing_3_1.cs)]"
  syntax:
    content: public void Shear (float shearX, float shearY);
    parameters:
    - id: shearX
      type: System.Single
      description: "水平方向の傾斜係数。"
    - id: shearY
      type: System.Single
      description: "垂直方向の傾斜係数。"
  overload: System.Drawing.Drawing2D.Matrix.Shear*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Shear(Single,Single,MatrixOrder)
  nameWithType: Matrix.Shear(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これを指定した傾斜ベクターを適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定した順序で。"
  remarks: "このメソッドに適用される変換は、0 は、パラメーターのいずれかの場合にのみ、純粋な傾斜です。 原点に四角形に適用されるときに、`shearY`要素が 0 の場合、変換、下端をで水平方向に移動する`shearX`四角形の高さがタイムアウトします。 ときに、 `shearX` factor が 0 の場合、垂直方向に右のエッジを移動`shearY`四角形の幅がタイムアウトします。 注意は順序では、結果は予測できないために、両方のパラメーターが&0; でない場合です。 たとえば、両方の要素が 1 の場合は、変換は特異な (したがって押しつぶされて)、なり、平面全体を 1 行です。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Shear%28System.Single%2CSystem.Single%29>.
  syntax:
    content: public void Shear (float shearX, float shearY, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: shearX
      type: System.Single
      description: "水平方向の傾斜係数。"
    - id: shearY
      type: System.Single
      description: "垂直方向の傾斜係数。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>順序を指定する (追加や後または前)、傾斜を適用します。"
  overload: System.Drawing.Drawing2D.Matrix.Shear*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])
  id: TransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformPoints(Point[])
  nameWithType: Matrix.TransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これが表すジオメトリック変換を適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>ポイントの指定した配列にします。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates an array of points that form a rectangle.  \n  \n-   Draws this array of points (to the screen prior to applying a scaling transform (the blue rectangle).  \n  \n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.  \n  \n-   Applies this matrix transform to the array of points.  \n  \n-   Draws the transformed array to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/cpp/m-system.drawing.drawing_1_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/visualbasic/m-system.drawing.drawing_1_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/csharp/m-system.drawing.drawing_1_1.cs)]"
  syntax:
    content: public void TransformPoints (System.Drawing.Point[] pts);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "配列<xref href=&quot;System.Drawing.Point&quot;></xref>を変換する点を表す構造体。"
  overload: System.Drawing.Drawing2D.Matrix.TransformPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])
  id: TransformPoints(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformPoints(PointF[])
  nameWithType: Matrix.TransformPoints(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これが表すジオメトリック変換を適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>ポイントの指定した配列にします。"
  remarks: ''
  example:
  - For an example, see [TransformPoints(Point\[\])](assetId:///M:System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void TransformPoints (System.Drawing.PointF[] pts);
    parameters:
    - id: pts
      type: System.Drawing.PointF[]
      description: "配列<xref href=&quot;System.Drawing.PointF&quot;></xref>を変換する点を表す構造体。"
  overload: System.Drawing.Drawing2D.Matrix.TransformPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])
  id: TransformVectors(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformVectors(Point[])
  nameWithType: Matrix.TransformVectors(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "スケールおよび回転の成分のこれのみに適用される<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>ポイントの指定した配列にします。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates an array of points that form a rectangle.  \n  \n-   Draws this array of points to the screen prior to applying a scaling transform (the blue rectangle).  \n  \n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis, and translates it by 100 in both axes.  \n  \n-   Lists the matrix elements to the screen.  \n  \n-   Applies this matrix transform to the array of points.  \n  \n-   Draws the transformed array to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle) but the translation vector (the last two elements of the matrix) is ignored.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/cpp/m-system.drawing.drawing_12_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/visualbasic/m-system.drawing.drawing_12_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/csharp/m-system.drawing.drawing_12_1.cs)]"
  syntax:
    content: public void TransformVectors (System.Drawing.Point[] pts);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "配列<xref href=&quot;System.Drawing.Point&quot;></xref>を変換する点を表す構造体。"
  overload: System.Drawing.Drawing2D.Matrix.TransformVectors*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])
  id: TransformVectors(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformVectors(PointF[])
  nameWithType: Matrix.TransformVectors(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "マトリックスで配列内の各ベクターを乗算します。 この行列の平行移動要素 (3 番目の行) は無視されます。"
  remarks: ''
  example:
  - For an example, see [TransformVectors(Point\[\])](assetId:///M:System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void TransformVectors (System.Drawing.PointF[] pts);
    parameters:
    - id: pts
      type: System.Drawing.PointF[]
      description: "配列<xref href=&quot;System.Drawing.Point&quot;></xref>を変換する点を表す構造体。"
  overload: System.Drawing.Drawing2D.Matrix.TransformVectors*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)
  id: Translate(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Translate(Single,Single)
  nameWithType: Matrix.Translate(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定の平行移動ベクターを適用 (<code> offsetX </code>と<code> offsetY </code>) をこの<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>平行移動ベクターを付加することによってです。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Translate%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.
  syntax:
    content: public void Translate (float offsetX, float offsetY);
    parameters:
    - id: offsetX
      type: System.Single
      description: "この変換に使用する x 値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: offsetY
      type: System.Single
      description: "この変換に使用する y 値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Translate(Single,Single,MatrixOrder)
  nameWithType: Matrix.Translate(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "これを指定した平行移動ベクターを適用<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定した順序で。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a translate transform (the blue rectangle).  \n  \n-   Creates a matrix and translates it by 100 in both axes.  \n  \n-   Applies this matrix transform to the rectangle,  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the beginning of the red rectangle is located 100 points in both axes from the beginning of the blue triangle.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/cpp/48411d65-00d9-48ff-a809-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/visualbasic/48411d65-00d9-48ff-a809-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/csharp/48411d65-00d9-48ff-a809-_1.cs)]"
  syntax:
    content: public void Translate (float offsetX, float offsetY, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: offsetX
      type: System.Single
      description: "この変換に使用する x 値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: offsetY
      type: System.Single
      description: "この変換に使用する y 値<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>順序を指定する (追加や後または前) にこれを適用する翻訳<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>です。"
  overload: System.Drawing.Drawing2D.Matrix.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])
  id: VectorTransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: VectorTransformPoints(Point[])
  nameWithType: Matrix.VectorTransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "マトリックスで配列内の各ベクターを乗算します。 この行列の平行移動要素 (3 番目の行) は無視されます。"
  syntax:
    content: public void VectorTransformPoints (System.Drawing.Point[] pts);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "配列<xref href=&quot;System.Drawing.Point&quot;></xref>を変換する点を表す構造体。"
  overload: System.Drawing.Drawing2D.Matrix.VectorTransformPoints*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Drawing2D.Matrix.#ctor
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix()
  nameWithType: Matrix.Matrix()
  fullName: System.Drawing.Drawing2D.Matrix.Matrix()
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix(Rectangle,Point[])
  nameWithType: Matrix.Matrix(Rectangle,Point[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Rectangle,Point[])
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Point[]
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point[]
  spec.csharp:
  - uid: System.Drawing.Point
    name: Point
    nameWithType: Point
    fullName: Point[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix(RectangleF,PointF[])
  nameWithType: Matrix.Matrix(RectangleF,PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(RectangleF,PointF[])
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.PointF[]
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF[]
  spec.csharp:
  - uid: System.Drawing.PointF
    name: PointF
    nameWithType: PointF
    fullName: PointF[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix(Single,Single,Single,Single,Single,Single)
  nameWithType: Matrix.Matrix(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Single,Single,Single,Single,Single,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Drawing2D.Matrix.Clone
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Clone()
  nameWithType: Matrix.Clone()
  fullName: System.Drawing.Drawing2D.Matrix.Clone()
- uid: System.Drawing.Drawing2D.Matrix
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
- uid: System.Drawing.Drawing2D.Matrix.Dispose
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Dispose()
  nameWithType: Matrix.Dispose()
  fullName: System.Drawing.Drawing2D.Matrix.Dispose()
- uid: System.Drawing.Drawing2D.Matrix.Elements
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Elements
  nameWithType: Matrix.Elements
  fullName: System.Drawing.Drawing2D.Matrix.Elements
- uid: System.Single[]
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single[]
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.Matrix.Equals(System.Object)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Equals(Object)
  nameWithType: Matrix.Equals(Object)
  fullName: System.Drawing.Drawing2D.Matrix.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.Drawing2D.Matrix.Finalize
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Finalize()
  nameWithType: Matrix.Finalize()
  fullName: System.Drawing.Drawing2D.Matrix.Finalize()
- uid: System.Drawing.Drawing2D.Matrix.GetHashCode
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: GetHashCode()
  nameWithType: Matrix.GetHashCode()
  fullName: System.Drawing.Drawing2D.Matrix.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Drawing2D.Matrix.Invert
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Invert()
  nameWithType: Matrix.Invert()
  fullName: System.Drawing.Drawing2D.Matrix.Invert()
- uid: System.Drawing.Drawing2D.Matrix.IsIdentity
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsIdentity
  nameWithType: Matrix.IsIdentity
  fullName: System.Drawing.Drawing2D.Matrix.IsIdentity
- uid: System.Drawing.Drawing2D.Matrix.IsInvertible
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsInvertible
  nameWithType: Matrix.IsInvertible
  fullName: System.Drawing.Drawing2D.Matrix.IsInvertible
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Multiply(Matrix)
  nameWithType: Matrix.Multiply(Matrix)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix)
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Multiply(Matrix,MatrixOrder)
  nameWithType: Matrix.Multiply(Matrix,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix,MatrixOrder)
- uid: System.Drawing.Drawing2D.MatrixOrder
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: MatrixOrder
  nameWithType: MatrixOrder
  fullName: System.Drawing.Drawing2D.MatrixOrder
- uid: System.Drawing.Drawing2D.Matrix.OffsetX
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetX
  nameWithType: Matrix.OffsetX
  fullName: System.Drawing.Drawing2D.Matrix.OffsetX
- uid: System.Drawing.Drawing2D.Matrix.OffsetY
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetY
  nameWithType: Matrix.OffsetY
  fullName: System.Drawing.Drawing2D.Matrix.OffsetY
- uid: System.Drawing.Drawing2D.Matrix.Reset
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Reset()
  nameWithType: Matrix.Reset()
  fullName: System.Drawing.Drawing2D.Matrix.Reset()
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Rotate(Single)
  nameWithType: Matrix.Rotate(Single)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single)
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Rotate(Single,MatrixOrder)
  nameWithType: Matrix.Rotate(Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: RotateAt(Single,PointF)
  nameWithType: Matrix.RotateAt(Single,PointF)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF)
- uid: System.Drawing.PointF
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: RotateAt(Single,PointF,MatrixOrder)
  nameWithType: Matrix.RotateAt(Single,PointF,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Scale(Single,Single)
  nameWithType: Matrix.Scale(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single)
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Scale(Single,Single,MatrixOrder)
  nameWithType: Matrix.Scale(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Shear(Single,Single)
  nameWithType: Matrix.Shear(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single)
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Shear(Single,Single,MatrixOrder)
  nameWithType: Matrix.Shear(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformPoints(Point[])
  nameWithType: Matrix.TransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(Point[])
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformPoints(PointF[])
  nameWithType: Matrix.TransformPoints(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(PointF[])
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformVectors(Point[])
  nameWithType: Matrix.TransformVectors(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(Point[])
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformVectors(PointF[])
  nameWithType: Matrix.TransformVectors(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(PointF[])
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Translate(Single,Single)
  nameWithType: Matrix.Translate(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single)
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Translate(Single,Single,MatrixOrder)
  nameWithType: Matrix.Translate(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: VectorTransformPoints(Point[])
  nameWithType: Matrix.VectorTransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(Point[])
- uid: System.Drawing.Drawing2D.Matrix.#ctor*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix
  nameWithType: Matrix.Matrix
- uid: System.Drawing.Drawing2D.Matrix.Clone*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Clone
  nameWithType: Matrix.Clone
- uid: System.Drawing.Drawing2D.Matrix.Dispose*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Dispose
  nameWithType: Matrix.Dispose
- uid: System.Drawing.Drawing2D.Matrix.Elements*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Elements
  nameWithType: Matrix.Elements
- uid: System.Drawing.Drawing2D.Matrix.Equals*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Equals
  nameWithType: Matrix.Equals
- uid: System.Drawing.Drawing2D.Matrix.Finalize*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Finalize
  nameWithType: Matrix.Finalize
- uid: System.Drawing.Drawing2D.Matrix.GetHashCode*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: GetHashCode
  nameWithType: Matrix.GetHashCode
- uid: System.Drawing.Drawing2D.Matrix.Invert*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Invert
  nameWithType: Matrix.Invert
- uid: System.Drawing.Drawing2D.Matrix.IsIdentity*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsIdentity
  nameWithType: Matrix.IsIdentity
- uid: System.Drawing.Drawing2D.Matrix.IsInvertible*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsInvertible
  nameWithType: Matrix.IsInvertible
- uid: System.Drawing.Drawing2D.Matrix.Multiply*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Multiply
  nameWithType: Matrix.Multiply
- uid: System.Drawing.Drawing2D.Matrix.OffsetX*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetX
  nameWithType: Matrix.OffsetX
- uid: System.Drawing.Drawing2D.Matrix.OffsetY*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetY
  nameWithType: Matrix.OffsetY
- uid: System.Drawing.Drawing2D.Matrix.Reset*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Reset
  nameWithType: Matrix.Reset
- uid: System.Drawing.Drawing2D.Matrix.Rotate*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Rotate
  nameWithType: Matrix.Rotate
- uid: System.Drawing.Drawing2D.Matrix.RotateAt*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: RotateAt
  nameWithType: Matrix.RotateAt
- uid: System.Drawing.Drawing2D.Matrix.Scale*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Scale
  nameWithType: Matrix.Scale
- uid: System.Drawing.Drawing2D.Matrix.Shear*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Shear
  nameWithType: Matrix.Shear
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformPoints
  nameWithType: Matrix.TransformPoints
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformVectors
  nameWithType: Matrix.TransformVectors
- uid: System.Drawing.Drawing2D.Matrix.Translate*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Translate
  nameWithType: Matrix.Translate
- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: VectorTransformPoints
  nameWithType: Matrix.VectorTransformPoints
