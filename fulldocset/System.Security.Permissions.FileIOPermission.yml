### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.FileIOPermission
  id: FileIOPermission
  children:
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.AllFiles
  - System.Security.Permissions.FileIOPermission.AllLocalFiles
  - System.Security.Permissions.FileIOPermission.Copy
  - System.Security.Permissions.FileIOPermission.Equals(System.Object)
  - System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.FileIOPermission.GetHashCode
  - System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  - System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.FileIOPermission.IsUnrestricted
  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  - System.Security.Permissions.FileIOPermission.ToXml
  - System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: FileIOPermission
  nameWithType: FileIOPermission
  fullName: System.Security.Permissions.FileIOPermission
  type: Class
  summary: "ファイルやフォルダーにアクセスを制御します。 このクラスは継承できません。"
  remarks: "This permission distinguishes between the following four types of file IO access provided by <xref:System.Security.Permissions.FileIOPermissionAccess>:  \n  \n-   `Read`: Read access to the contents of the file or access to information about the file, such as its length or last modification time.  \n  \n-   `Write`: Write access to the contents of the file or access to change information about the file, such as its name. Also allows for deletion and overwriting.  \n  \n-   `Append`: Ability to write to the end of a file only. No ability to read.  \n  \n-   `PathDiscovery`: Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure that is revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  Giving <xref:System.Security.Permissions.FileIOPermissionAccess> access to an assembly is similar to granting it full trust. If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess> access.  \n  \n All these permissions are independent, meaning that rights to one do not imply rights to another. For example, `Write` permission does not imply permission to `Read` or `Append`. If more than one permission is desired, they can be combined using a bitwise OR as shown in the code example that follows. File permission is defined in terms of canonical absolute paths; calls should always be made with canonical file paths.  \n  \n FileIOPermission describes protected operations on files and folders. The <xref:System.IO.File> class helps provide secure access to files and folders. The security access check is performed when the handle to the file is created. By doing the check at creation time, the performance impact of the security check is minimized. Opening a file happens once, while reading and writing can happen multiple times. Once the file is opened, no further checks are done. If the object is passed to an untrusted caller, it can be misused. For example, file handles should not be stored in public global statics where code with less permission can access them.  \n  \n <xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder. In addition, these actions can be combined using a bitwise OR to form complex instances.  \n  \n Access to a folder implies access to all the files it contains, as well as access to all the files and folders in its subfolders. For example, `Read` access to C:\\folder1\\ implies `Read` access to C:\\folder1\\file1.txt, C:\\folder1\\folder2\\\\, C:\\folder1\\folder2\\file2.txt, and so on.  \n  \n> [!NOTE]\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following examples illustrate code that uses FileIOPermission. After the following two lines of code, the object `f` represents permission to read all files on the client computer's local disks. The code example then demands the permission to determine whether the application has permission to read the files.  \n  \n [!code-cs[Classic FileIOPermission Example#1](~/add/codesnippet/csharp/t-system.security.permis_23_1.cs)]\n [!code-vb[Classic FileIOPermission Example#1](~/add/codesnippet/visualbasic/t-system.security.permis_23_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#1](~/add/codesnippet/cpp/t-system.security.permis_23_1.cpp)]  \n  \n After the following two lines of code, the object `f2` represents permissions to read C:\\test_r and read and write to C:\\example\\out.txt. `Read` and `Write` represent the file/folder permissions as previously described. After creating the permission, the code demands the permission to determine whether the application has the right to read and write to the file.  \n  \n [!code-cs[Classic FileIOPermission Example#2](~/add/codesnippet/csharp/t-system.security.permis_23_2.cs)]\n [!code-vb[Classic FileIOPermission Example#2](~/add/codesnippet/visualbasic/t-system.security.permis_23_2.vb)]\n [!code-cpp[Classic FileIOPermission Example#2](~/add/codesnippet/cpp/t-system.security.permis_23_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class FileIOPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(PermissionState)
  nameWithType: FileIOPermission.FileIOPermission(PermissionState)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>指定に従って完全に制限されているまたは無制限のアクセス許可を持つクラス。"
  remarks: "完全に制限されているいずれかが作成されます (`None`) または`Unrestricted`ファイルとディレクトリにアクセスします。"
  example:
  - "The following code example creates a new instance of the <xref:System.Security.Permissions.FileIOPermission> class with fully restricted read access.  \n  \n [!code-cs[Classic FileIOPermission Example#1](~/add/codesnippet/csharp/77d769e4-2464-4991-ba06-_1.cs)]\n [!code-vb[Classic FileIOPermission Example#1](~/add/codesnippet/visualbasic/77d769e4-2464-4991-ba06-_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#1](~/add/codesnippet/cpp/77d769e4-2464-4991-ba06-_1.cpp)]"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "1 つ、 <xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>列挙値。"
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>指定したファイルまたはディレクトリへのアクセスを持つクラス。"
  remarks: "このコンス トラクターでの&1; つだけ、<xref:System.Security.Permissions.FileIOPermissionAccess>値を指定したファイルまたはディレクトリを指定する</xref:System.Security.Permissions.FileIOPermissionAccess>。 使用して、<xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>複雑なアクセス許可を定義するメソッド</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>。"
  example:
  - "The following code example shows the use of the FileIOPermission constructor to create a new instance of the <xref:System.Security.Permissions.FileIOPermission> class, which provides complete access to the C:\\test_r file.  \n  \n [!code-cs[Classic FileIOPermission Example#2](~/add/codesnippet/csharp/51a3f39e-30ae-4011-8c38-_1.cs)]\n [!code-vb[Classic FileIOPermission Example#2](~/add/codesnippet/visualbasic/51a3f39e-30ae-4011-8c38-_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#2](~/add/codesnippet/cpp/51a3f39e-30ae-4011-8c38-_1.cpp)]"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>列挙値。"
    - id: path
      type: System.String
      description: "ファイルまたはディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または -、 <code> path </code>パラメーターは有効な文字列ではありません。       - または -、 <code> path </code>パラメーターは、ファイルまたはディレクトリへの絶対パスを指定していません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>指定されたファイルおよびディレクトリへのアクセスを持つクラス。"
  remarks: "このコンス トラクターは、1 つだけ<xref:System.Security.Permissions.FileIOPermissionAccess>値の指定したファイルおよびディレクトリを指定しなければなりません</xref:System.Security.Permissions.FileIOPermissionAccess>。 使用して、<xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>複雑なアクセス許可を定義するメソッド</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>。"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>列挙値。"
    - id: pathList
      type: System.String[]
      description: "ファイルとディレクトリの絶対パスを格納する配列。"
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または - 内のエントリ、 <code> pathList </code>配列は有効な文字列ではありません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>指定したファイルまたはディレクトリへのアクセスとファイル制御情報への指定したアクセス権を持つクラス。"
  remarks: "このコンス トラクターは、1 つだけ<xref:System.Security.Permissions.FileIOPermissionAccess>を指定したファイルまたはディレクトリを指定する値</xref:System.Security.Permissions.FileIOPermissionAccess>。 使用して、<xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>複雑なアクセス許可を定義するメソッド</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>。       `control`パラメーターを指定するかどうかのアクセス制御リスト (ACL) で指定されたディレクトリの`path`変更できますが、表示、またはアクセスできません。      > [!IMPORTANT] > アクセス制御リスト (ACL) には、個人またはグループがある、または権限がない、特定のファイルとそのプロパティに特定のアクションをユーザーがについて説明します。  変更したり、ACL を表示できるように重大なアクセス許可は、慎重に付与する必要があります。"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>列挙値。"
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.AccessControl.AccessControlActions&quot;> </xref>列挙値。"
    - id: path
      type: System.String
      description: "ファイルまたはディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または -、 <code> path </code>パラメーターは有効な文字列ではありません。       - または -、 <code> path </code>パラメーターは、ファイルまたはディレクトリへの絶対パスを指定していません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])'
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>指定されたファイルとディレクトリへのアクセスとファイル制御情報への指定したアクセス権を持つクラス。"
  remarks: "このコンス トラクターは、1 つだけ<xref:System.Security.Permissions.FileIOPermissionAccess>値の指定したファイルおよびディレクトリを指定しなければなりません</xref:System.Security.Permissions.FileIOPermissionAccess>。 使用して、<xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>複雑なアクセス許可を定義するメソッド</xref:System.Security.Permissions.FileIOPermission.AddPathList%2A>。       `control`パラメーターを指定するかどうかのアクセス制御リスト (ACL) で指定されたディレクトリの`path`変更できますが、表示、またはアクセスできません。      > [!IMPORTANT] > アクセス制御リスト (ACL) には、個人またはグループがある、または権限がない、特定のファイルとそのプロパティに特定のアクションをユーザーがについて説明します。  変更したり、ACL を表示できるように重大なアクセス許可は、慎重に付与する必要があります。"
  syntax:
    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>列挙値。"
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.AccessControl.AccessControlActions&quot;> </xref>列挙値。"
    - id: pathList
      type: System.String[]
      description: "ファイルとディレクトリの絶対パスを格納する配列。"
  overload: System.Security.Permissions.FileIOPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または - 内のエントリ、 <code> pathList </code>配列は有効な文字列ではありません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AddPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "既存のアクセス許可の状態を指定したファイルまたはディレクトリへのアクセスを追加します。"
  remarks: "このメソッドを使用すると、現在のアクセス許可の状態を追加することでファイルとディレクトリのアクセスを変更できます。"
  example:
  - "The following code example shows the use of the AddPathList method.  \n  \n [!code-cs[Classic FileIOPermission Example#2](~/add/codesnippet/csharp/179395dd-6ede-43e0-bf6e-_1.cs)]\n [!code-vb[Classic FileIOPermission Example#2](~/add/codesnippet/visualbasic/179395dd-6ede-43e0-bf6e-_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#2](~/add/codesnippet/cpp/179395dd-6ede-43e0-bf6e-_1.cpp)]"
  syntax:
    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>値。"
    - id: path
      type: System.String
      description: "ファイルまたはディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermission.AddPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または -、 <code> path </code>パラメーターは有効な文字列ではありません。       - または -、 <code> path </code>パラメーターでは、ファイルまたはディレクトリへの絶対パスが指定されませんでした。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code> path </code>のパラメーターが無効な形式です。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AddPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "既存のアクセス許可の状態を指定したファイルおよびディレクトリのアクセスを追加します。"
  remarks: "このメソッドを使用すると、現在のアクセス許可の状態を追加することでファイルとディレクトリのアクセスを変更できます。"
  syntax:
    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>値。"
    - id: pathList
      type: System.String[]
      description: "ファイルとディレクトリの絶対パスを格納する配列。"
  overload: System.Security.Permissions.FileIOPermission.AddPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または - 内のエントリ、 <code> pathList </code>配列は有効ではありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "内のエントリ、 <code> pathList </code>配列には、形式が無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>pathList</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AllFiles
  id: AllFiles
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
  fullName: System.Security.Permissions.FileIOPermission.AllFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはすべてのファイルへのアクセス許可を設定します。"
  remarks: "このプロパティを取得またはローカル コンピューターとネットワーク ドライブ上のすべてのファイルへのアクセス許可を設定します。       個人<xref:System.Security.Permissions.FileIOPermissionAccess>をビットごとの AND 演算を使用する値をチェックすることができます</xref:System.Security.Permissions.FileIOPermissionAccess>。"
  example:
  - "The following code example shows the use of the AllFiles property.  \n  \n [!code-cs[Classic FileIOPermission Example#3](~/add/codesnippet/csharp/p-system.security.permis_9_1.cs)]\n [!code-vb[Classic FileIOPermission Example#3](~/add/codesnippet/visualbasic/p-system.security.permis_9_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#3](~/add/codesnippet/cpp/p-system.security.permis_9_1.cpp)]"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ファイル I/O のセットは、すべてのファイルのフラグします。"
  overload: System.Security.Permissions.FileIOPermission.AllFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles
  id: AllLocalFiles
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermission.AllLocalFiles
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "取得またはすべてのローカル ファイルへのアクセス許可を設定します。"
  remarks: "ローカル ファイルは、ローカル コンピューター上に含まれるファイルです。 ネットワーク ドライブを通じてアクセスされていない任意のファイルは、ローカル ファイルです。       個人<xref:System.Security.Permissions.FileIOPermissionAccess>をビットごとの AND 演算を使用する値をチェックすることができます</xref:System.Security.Permissions.FileIOPermissionAccess>。"
  example:
  - "The following code example shows the use of the AllLocalFiles property.  \n  \n [!code-cs[Classic FileIOPermission Example#1](~/add/codesnippet/csharp/p-system.security.permis_10_1.cs)]\n [!code-vb[Classic FileIOPermission Example#1](~/add/codesnippet/visualbasic/p-system.security.permis_10_1.vb)]\n [!code-cpp[Classic FileIOPermission Example#1](~/add/codesnippet/cpp/p-system.security.permis_10_1.cpp)]"
  syntax:
    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ファイル I/O のセットは、すべてのローカル ファイルのフラグします。"
  overload: System.Security.Permissions.FileIOPermission.AllLocalFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Copy
  id: Copy
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: FileIOPermission.Copy()
  fullName: System.Security.Permissions.FileIOPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "作成して、現在のアクセス許可の完全なコピーを返します。"
  remarks: "アクセス許可のコピーは、元のアクセス許可としてリソースに対して同じアクセス権を表します。"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可のコピー。"
  overload: System.Security.Permissions.FileIOPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: FileIOPermission.Equals(Object)
  fullName: System.Security.Permissions.FileIOPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "決定するかどうか、指定した<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>オブジェクトが現在<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>です。"
  remarks: "詳細については、 <xref:System.Object.Equals%2A>。</xref:System.Object.Equals%2A>を参照してください。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>現在と比較するオブジェクト<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定した<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>が現在に等しい<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>オブジェクト。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Permissions.FileIOPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: FileIOPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.FileIOPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "XML エンコードから指定された状態で、アクセス許可を再構築します。"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "アクセス許可の再構築に使用する XML エンコーディングします。"
  overload: System.Security.Permissions.FileIOPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> esd </code>パラメーターが有効なアクセス許可要素ではありません。       - または -、 <code> esd </code>パラメーターのバージョン番号は互換性がありません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: FileIOPermission.GetHashCode()
  fullName: System.Security.Permissions.FileIOPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "ハッシュ コードを取得、 <xref href=&quot;System.Security.Permissions.FileIOPermission&quot;> </xref>ハッシュ ハッシュ テーブルなどのアルゴリズムとデータ構造で使用するために適切なオブジェクトです。"
  remarks: "同じアクセス許可の&2; つのインスタンスのハッシュ コードが異なる可能性があります、ためハッシュ コードを比較する&2; つ使用するされません<xref:System.Security.Permissions.FileIOPermission>オブジェクト</xref:System.Security.Permissions.FileIOPermission>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在のハッシュ コード<xref href=&quot;System.Security.Permissions.FileIOPermission&quot;></xref>オブジェクト。"
  overload: System.Security.Permissions.FileIOPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  id: GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: GetPathList(FileIOPermissionAccess)
  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)
  fullName: System.Security.Permissions.FileIOPermission.GetPathList(FileIOPermissionAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "すべてのファイルと、指定したディレクトリを取得<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。"
  remarks: "このメソッドを使用すると、現在のアクセス許可の状態を取得します。 両方の状態を取得する`Read`と`Write`アクセス、このメソッドに&2; つの呼び出しが必要です。      > [!NOTE] >、`access`パラメーターがの値に制限<xref:System.Security.Permissions.FileIOPermissionAccess>、ファイル アクセスの&1; つの型として表示されている</xref:System.Security.Permissions.FileIOPermissionAccess>。 それらの値が<xref:System.Security.Permissions.FileIOPermissionAccess>、 <xref:System.Security.Permissions.FileIOPermissionAccess>、 <xref:System.Security.Permissions.FileIOPermissionAccess>、 <xref:System.Security.Permissions.FileIOPermissionAccess></xref:System.Security.Permissions.FileIOPermissionAccess> </xref:System.Security.Permissions.FileIOPermissionAccess> </xref:System.Security.Permissions.FileIOPermissionAccess> </xref:System.Security.Permissions.FileIOPermissionAccess> 。 値を許容できる`access`を含めないでください<xref:System.Security.Permissions.FileIOPermissionAccess>と<xref:System.Security.Permissions.FileIOPermissionAccess>、ファイル アクセスの&1; つの型を表していない</xref:System.Security.Permissions.FileIOPermissionAccess></xref:System.Security.Permissions.FileIOPermissionAccess>。"
  example:
  - "The following code example shows the use of the GetPathList method. This example is part of a larger example provided for the <xref:System.Security.Permissions.FileIOPermission> class.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/cpp/996247c6-c512-46ad-9cab-_1.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/csharp/996247c6-c512-46ad-9cab-_1.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/visualbasic/996247c6-c512-46ad-9cab-_1.vb)]"
  syntax:
    content: public string[] GetPathList (System.Security.Permissions.FileIOPermissionAccess access);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "1 つ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>ファイルへのアクセスの単一の型を表す値です。"
    return:
      type: System.String[]
      description: "ファイルとで指定された、アクセスをディレクトリのパスを含む配列、 <code> access </code>パラメーターを許可します。"
  overload: System.Security.Permissions.FileIOPermission.GetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>access</code>有効な値ではない<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または -<code>access</code>は<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>、ファイルへのアクセスの&2; つ以上の型を表しているか、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>、ファイル アクセスのどの型も表していません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: FileIOPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "作成し、現在のアクセス許可と指定したアクセス許可の積集合であるアクセス許可を返します。"
  remarks: "2 つのアクセス許可の積集合は、一連の両方に共通する操作を説明する権限です。 元の両方の権限を通過する要求だけでは、積集合を渡されます。"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "現在のアクセス許可と交差するアクセス許可。 現在のアクセス許可と同じ型の可能性があります。"
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可と指定したアクセス許可の積集合を表す新しいアクセス許可。 この新しいアクセス許可は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>積集合が空の場合。"
  overload: System.Security.Permissions.FileIOPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と現在のアクセス許可と同じ型でもありません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: FileIOPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "現在のアクセス許可が指定したアクセス許可のサブセットであるかどうかを判断します。"
  remarks: "現在のアクセス許可は、現在のアクセス許可を指定した権限に格納されている一連の操作を指定する場合、指定したアクセス許可のサブセットです。 たとえば、C:\\example.txt への読み取りアクセス権を表すアクセス許可は、c: への読み取りアクセス権を表すためのアクセス許可のサブセット\\\\です。 このメソッドが戻る場合`true`、現在のアクセス許可は、アクセスは保護されたリソースには、指定した権限を表します。"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "サブセットの関係をテストするのには権限です。 このアクセス許可は、現在のアクセス許可と同じ型である必要があります。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のアクセス許可が指定した権限のサブセットの場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Permissions.FileIOPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と現在のアクセス許可と同じ型でもありません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: FileIOPermission.IsUnrestricted()
  fullName: System.Security.Permissions.FileIOPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "現在のアクセス許可が無制限かどうかを示す値を返します。"
  remarks: "無制限のアクセス許可は、アクセス許可によって保護されているすべてのリソースへのアクセスを表します。"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のアクセス許可が無制限ではない場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Permissions.FileIOPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: SetPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "指定したファイルまたはディレクトリにアクセス許可の既存の状態を置換するには、指定したアクセスを設定します。"
  remarks: "The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess>.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#12](~/add/codesnippet/cpp/21456ab4-f876-4c97-b331-_1.cpp)]\n [!code-vb[System.Security.Permissions.FileIOPermission#12](~/add/codesnippet/visualbasic/21456ab4-f876-4c97-b331-_1.vb)]\n [!code-cs[System.Security.Permissions.FileIOPermission#12](~/add/codesnippet/csharp/21456ab4-f876-4c97-b331-_1.cs)]  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#13](~/add/codesnippet/cpp/21456ab4-f876-4c97-b331-_2.cpp)]\n [!code-vb[System.Security.Permissions.FileIOPermission#13](~/add/codesnippet/visualbasic/21456ab4-f876-4c97-b331-_2.vb)]\n [!code-cs[System.Security.Permissions.FileIOPermission#13](~/add/codesnippet/csharp/21456ab4-f876-4c97-b331-_2.cs)]"
  example:
  - "The following code example shows the use of the SetPathList method.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/cpp/21456ab4-f876-4c97-b331-_3.cpp)]\n [!code-cs[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/csharp/21456ab4-f876-4c97-b331-_3.cs)]\n [!code-vb[System.Security.Permissions.FileIOPermission#7](~/add/codesnippet/visualbasic/21456ab4-f876-4c97-b331-_3.vb)]"
  syntax:
    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>値。"
    - id: path
      type: System.String
      description: "ファイルまたはディレクトリの絶対パス。"
  overload: System.Security.Permissions.FileIOPermission.SetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または -、 <code> path </code>パラメーターは有効な文字列ではありません。       - または -、 <code> path </code>パラメーターでは、ファイルまたはディレクトリへの絶対パスが指定されませんでした。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: SetPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "指定したファイルおよびディレクトリの場合、新しいパスのセットで指定したアクセスの現在の状態を交換するには、指定したアクセスを設定します。"
  remarks: "The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess>.  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#15](~/add/codesnippet/cpp/653665a4-6451-42cc-8bd1-_1.cpp)]\n [!code-vb[System.Security.Permissions.FileIOPermission#15](~/add/codesnippet/visualbasic/653665a4-6451-42cc-8bd1-_1.vb)]\n [!code-cs[System.Security.Permissions.FileIOPermission#15](~/add/codesnippet/csharp/653665a4-6451-42cc-8bd1-_1.cs)]"
  syntax:
    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "ビットごとの組み合わせ、 <xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>値。"
    - id: pathList
      type: System.String[]
      description: "ファイルとディレクトリの絶対パスを格納する配列。"
  overload: System.Security.Permissions.FileIOPermission.SetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>パラメーターがの有効な値ではありません<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;></xref>です。       - または - 内のエントリ、 <code> pathList </code>パラメーターは有効な文字列ではありません。"
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: FileIOPermission.ToXml()
  fullName: System.Security.Permissions.FileIOPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "アクセス許可と、現在の状態の XML エンコードを作成します。"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "状態情報を含む、アクセス許可の XML エンコード。"
  overload: System.Security.Permissions.FileIOPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: FileIOPermission.Union(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "現在のアクセス許可と、指定した権限の和集合であるアクセス許可を作成します。"
  remarks: "共用体への呼び出しの結果は、現在のアクセス許可と、指定した権限の両方で表されるすべての操作を表すアクセス許可です。 いずれかのアクセス許可に適合する要求は、その共用体を渡します。"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "現在のアクセス許可と結合するアクセス許可。 現在のアクセス許可と同じ型の可能性があります。"
    return:
      type: System.Security.IPermission
      description: "現在のアクセス許可と、指定した権限の和集合を表す新しいアクセス許可。"
  overload: System.Security.Permissions.FileIOPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> other </code>パラメーターではありません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>と現在のアクセス許可と同じ型でもありません。"
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(PermissionState)
  nameWithType: FileIOPermission.FileIOPermission(PermissionState)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String)
- uid: System.Security.AccessControl.AccessControlActions
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlActions
  nameWithType: AccessControlActions
  fullName: System.Security.AccessControl.AccessControlActions
- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
  fullName: System.Security.Permissions.FileIOPermission.FileIOPermission(FileIOPermissionAccess,AccessControlActions,String[])
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.AddPathList(FileIOPermissionAccess,String[])
- uid: System.Security.Permissions.FileIOPermission.AllFiles
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
  fullName: System.Security.Permissions.FileIOPermission.AllFiles
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
  fullName: System.Security.Permissions.FileIOPermission.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermission.Copy
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Copy()
  nameWithType: FileIOPermission.Copy()
  fullName: System.Security.Permissions.FileIOPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: FileIOPermission.Equals(Object)
  fullName: System.Security.Permissions.FileIOPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: FileIOPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.FileIOPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.FileIOPermission.GetHashCode
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: FileIOPermission.GetHashCode()
  fullName: System.Security.Permissions.FileIOPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetPathList(FileIOPermissionAccess)
  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)
  fullName: System.Security.Permissions.FileIOPermission.GetPathList(FileIOPermissionAccess)
- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: FileIOPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Intersect(IPermission)
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: FileIOPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.IsSubsetOf(IPermission)
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: FileIOPermission.IsUnrestricted()
  fullName: System.Security.Permissions.FileIOPermission.IsUnrestricted()
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList(FileIOPermissionAccess,String)
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String)
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String)
- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList(FileIOPermissionAccess,String[])
  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
  fullName: System.Security.Permissions.FileIOPermission.SetPathList(FileIOPermissionAccess,String[])
- uid: System.Security.Permissions.FileIOPermission.ToXml
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: ToXml()
  nameWithType: FileIOPermission.ToXml()
  fullName: System.Security.Permissions.FileIOPermission.ToXml()
- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: FileIOPermission.Union(IPermission)
  fullName: System.Security.Permissions.FileIOPermission.Union(IPermission)
- uid: System.Security.Permissions.FileIOPermission.#ctor*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FileIOPermission
  nameWithType: FileIOPermission.FileIOPermission
- uid: System.Security.Permissions.FileIOPermission.AddPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AddPathList
  nameWithType: FileIOPermission.AddPathList
- uid: System.Security.Permissions.FileIOPermission.AllFiles*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllFiles
  nameWithType: FileIOPermission.AllFiles
- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: AllLocalFiles
  nameWithType: FileIOPermission.AllLocalFiles
- uid: System.Security.Permissions.FileIOPermission.Copy*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Copy
  nameWithType: FileIOPermission.Copy
- uid: System.Security.Permissions.FileIOPermission.Equals*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Equals
  nameWithType: FileIOPermission.Equals
- uid: System.Security.Permissions.FileIOPermission.FromXml*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: FromXml
  nameWithType: FileIOPermission.FromXml
- uid: System.Security.Permissions.FileIOPermission.GetHashCode*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetHashCode
  nameWithType: FileIOPermission.GetHashCode
- uid: System.Security.Permissions.FileIOPermission.GetPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: GetPathList
  nameWithType: FileIOPermission.GetPathList
- uid: System.Security.Permissions.FileIOPermission.Intersect*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Intersect
  nameWithType: FileIOPermission.Intersect
- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: FileIOPermission.IsSubsetOf
- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: FileIOPermission.IsUnrestricted
- uid: System.Security.Permissions.FileIOPermission.SetPathList*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: SetPathList
  nameWithType: FileIOPermission.SetPathList
- uid: System.Security.Permissions.FileIOPermission.ToXml*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: ToXml
  nameWithType: FileIOPermission.ToXml
- uid: System.Security.Permissions.FileIOPermission.Union*
  parent: System.Security.Permissions.FileIOPermission
  isExternal: false
  name: Union
  nameWithType: FileIOPermission.Union
