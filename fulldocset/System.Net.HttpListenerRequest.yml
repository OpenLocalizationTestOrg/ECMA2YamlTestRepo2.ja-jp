### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerRequest
  id: HttpListenerRequest
  children:
  - System.Net.HttpListenerRequest.AcceptTypes
  - System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  - System.Net.HttpListenerRequest.ClientCertificateError
  - System.Net.HttpListenerRequest.ContentEncoding
  - System.Net.HttpListenerRequest.ContentLength64
  - System.Net.HttpListenerRequest.ContentType
  - System.Net.HttpListenerRequest.Cookies
  - System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  - System.Net.HttpListenerRequest.GetClientCertificate
  - System.Net.HttpListenerRequest.GetClientCertificateAsync
  - System.Net.HttpListenerRequest.HasEntityBody
  - System.Net.HttpListenerRequest.Headers
  - System.Net.HttpListenerRequest.HttpMethod
  - System.Net.HttpListenerRequest.InputStream
  - System.Net.HttpListenerRequest.IsAuthenticated
  - System.Net.HttpListenerRequest.IsLocal
  - System.Net.HttpListenerRequest.IsSecureConnection
  - System.Net.HttpListenerRequest.IsWebSocketRequest
  - System.Net.HttpListenerRequest.KeepAlive
  - System.Net.HttpListenerRequest.LocalEndPoint
  - System.Net.HttpListenerRequest.ProtocolVersion
  - System.Net.HttpListenerRequest.QueryString
  - System.Net.HttpListenerRequest.RawUrl
  - System.Net.HttpListenerRequest.RemoteEndPoint
  - System.Net.HttpListenerRequest.RequestTraceIdentifier
  - System.Net.HttpListenerRequest.ServiceName
  - System.Net.HttpListenerRequest.TransportContext
  - System.Net.HttpListenerRequest.Url
  - System.Net.HttpListenerRequest.UrlReferrer
  - System.Net.HttpListenerRequest.UserAgent
  - System.Net.HttpListenerRequest.UserHostAddress
  - System.Net.HttpListenerRequest.UserHostName
  - System.Net.HttpListenerRequest.UserLanguages
  langs:
  - csharp
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
  type: Class
  summary: "受信 HTTP 要求について説明します、 <xref href=&quot;System.Net.HttpListener&quot;> </xref>オブジェクト。 このクラスは継承できません。"
  remarks: "によって処理されるときにクライアントが要求に、Uniform Resource Identifier ()、<xref:System.Net.HttpListener>オブジェクト、<xref:System.Net.HttpListener>提供、<xref:System.Net.HttpListenerContext>送信者、要求、およびクライアントに送信される応答に関する情報を含むオブジェクトです</xref:System.Net.HttpListenerContext></xref:System.Net.HttpListener></xref:System.Net.HttpListener>。 <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName>プロパティが要求を記述する HttpListenerRequest オブジェクトを返します</xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName>。       HttpListenerRequest オブジェクトには、要求などの要求に関する情報が含まれています<xref:System.Net.HttpListenerRequest.HttpMethod%2A>、文字列<xref:System.Net.HttpListenerRequest.UserAgent%2A>の文字列、および本文データの要求 (を参照してください、<xref:System.Net.HttpListenerRequest.InputStream%2A>プロパティ)。</xref:System.Net.HttpListenerRequest.InputStream%2A> </xref:System.Net.HttpListenerRequest.UserAgent%2A> </xref:System.Net.HttpListenerRequest.HttpMethod%2A> 。       要求に応答してを使用して、関連する応答を取得する必要があります、<xref:System.Net.HttpListenerContext.Response%2A>プロパティ</xref:System.Net.HttpListenerContext.Response%2A>。"
  example:
  - "The following code example demonstrates how to receive and respond to a HttpListenerRequest.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistene_3_1.cs)]"
  syntax:
    content: public sealed class HttpListenerRequest
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.AcceptTypes
  id: AcceptTypes
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
  fullName: System.Net.HttpListenerRequest.AcceptTypes
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントが受け入れる MIME の種類を取得します。"
  remarks: "`Accept`ヘッダーは、Multipurpose Internet Mail Extensions (MIME) の型名をスペースで区切られた文字列 (たとえば、 `image/jpeg`)、MIME の種類、クライアントはそのまま使用し、応答で処理する準備を示すです。 `*/*`エントリは、クライアントが任意の MIME 型を受け入れることを示します。 詳細の詳細については、`Accept`ヘッダーで使用できる RFC 2616 を参照してください[http://www.rfc-editor.org](http://www.rfc-editor.org/)です。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙体です</xref:System.Net.HttpRequestHeader>。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_37_1.cs)]"
  syntax:
    content: public string[] AcceptTypes { get; }
    return:
      type: System.String[]
      description: "A <xref:System.String>、要求で指定された型名を格納する配列<xref uid=&quot;langword_csharp_Accept&quot; name=&quot;Accept&quot; href=&quot;&quot;></xref>ヘッダーまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>クライアント要求を含んでいない場合、 <xref uid=&quot;langword_csharp_Accept&quot; name=&quot;Accept&quot; href=&quot;&quot;> </xref>ヘッダー</xref:System.String> 。"
  overload: System.Net.HttpListenerRequest.AcceptTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  id: BeginGetClientCertificate(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: BeginGetClientCertificate(AsyncCallback,Object)
  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントの X.509 v.3 証明書への非同期要求を開始します。"
  syntax:
    content: public IAsyncResult BeginGetClientCertificate (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "操作に関する情報を含むユーザー定義のオブジェクト。 このオブジェクトは、操作が完了すると、コールバック デリゲートに渡されます。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>操作の状態を示す</xref:System.IAsyncResult>。"
  overload: System.Net.HttpListenerRequest.BeginGetClientCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ClientCertificateError
  id: ClientCertificateError
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
  fullName: System.Net.HttpListenerRequest.ClientCertificateError
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "問題を識別するエラー コードを取得、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref>クライアントによって指定します。"
  remarks: "このプロパティには、によって、Secure Channel (Schannel) セキュリティ サポート プロバイダー インターフェイス (SSPI)、証明書の検証に使用されるを返された Windows エラー コードが含まれています。 Schannel の SSPI サポートに関する詳細については、マニュアルを参照して&quot;を作成する、セキュリティで保護された接続を使用して Schannel&quot;セキュリティで[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)です。"
  example:
  - "The following code example checks this property to determine whether the request includes a valid client certificate.  \n  \n [!code-vb[NCLListener#3](~/add/codesnippet/visualbasic/p-system.net.httplistene_33_1.vb)]\n [!code-cs[NCLListener#3](~/add/codesnippet/csharp/p-system.net.httplistene_33_1.cs)]"
  syntax:
    content: public int ClientCertificateError { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>Windows エラー コードを含む値です</xref:System.Int32>。"
  overload: System.Net.HttpListenerRequest.ClientCertificateError*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "クライアント証明書がへの呼び出しによってまだ初期化されていませんが、 <> </> *> または<> *> メソッドまたは操作が進行中です。"
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentEncoding
  id: ContentEncoding
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
  fullName: System.Net.HttpListenerRequest.ContentEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "要求で送信されるデータで使用できるコンテンツ エンコーディングを取得します。"
  remarks: "<xref:System.Text.Encoding>バイト シーケンスを文字セット (コード ページ) と文字をバイト シーケンスに変換するオブジェクトを使用できます</xref:System.Text.Encoding>。 このプロパティには、文字セット値が使用されます、`Content-Type`ヘッダー エンコード方法を判断します。 その情報が使用できない場合は、このプロパティは、 <xref:System.Text.Encoding.Default%2A?displayProperty=fullName>。</xref:System.Text.Encoding.Default%2A?displayProperty=fullName>でを返します。"
  example:
  - "The following code example demonstrates using the ContentEncoding property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_40_1.cs)]"
  syntax:
    content: public System.Text.Encoding ContentEncoding { get; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>オブジェクト内のデータで使用するのに適した、<xref:System.Net.HttpListenerRequest.InputStream*>プロパティ</xref:System.Net.HttpListenerRequest.InputStream*></xref:System.Text.Encoding>。"
  overload: System.Net.HttpListenerRequest.ContentEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentLength64
  id: ContentLength64
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
  fullName: System.Net.HttpListenerRequest.ContentLength64
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "要求に含まれる本文データの長さを取得します。"
  remarks: "`Content-Length`ヘッダーが要求に付随する本文データの長さをバイト単位で表されます。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙体です</xref:System.Net.HttpRequestHeader>。"
  example:
  - "The following code example uses the ContentLength64 property while processing body data.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_8_1.cs)]"
  syntax:
    content: public long ContentLength64 { get; }
    return:
      type: System.Int64
      description: "要求の値<xref uid=&quot;langword_csharp_Content-Length&quot; name=&quot;Content-Length&quot; href=&quot;&quot;></xref>ヘッダー。 コンテンツの長さが不明の場合、この値は-1 です。"
  overload: System.Net.HttpListenerRequest.ContentLength64*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ContentType
  id: ContentType
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
  fullName: System.Net.HttpListenerRequest.ContentType
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "要求に含める本文データの MIME の種類を取得します。"
  remarks: "本文のデータの Multipurpose Internet Mail Extensions (MIME) の型を宣言、クライアントには、要求の本文データが含まれている場合、`Content-Type`ヘッダー。 たとえば、Web フォームを使用して、データの既定の MIME タイプが返されます、`POST`メソッドは`application/x-www-form-urlencoded`します。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙および RFC 2616 で利用可能な[http://www.rfc-editor.org](http://www.rfc-editor.org/)</xref:System.Net.HttpRequestHeader> 。       ContentType が null である場合にない`Content-Type`要求のヘッダー。"
  example:
  - "The following code example demonstrates how to use this property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_12_1.cs)]"
  syntax:
    content: public string ContentType { get; }
    return:
      type: System.String
      description: "A<xref:System.String>の要求のテキストを含む<xref uid=&quot;langword_csharp_Content-Type&quot; name=&quot;Content-Type&quot; href=&quot;&quot;></xref>ヘッダー</xref:System.String> 。"
  overload: System.Net.HttpListenerRequest.ContentType*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Cookies
  id: Cookies
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
  fullName: System.Net.HttpListenerRequest.Cookies
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "要求で送信されたクッキーを取得します。"
  remarks: "Cookie とは、ローカル (クライアント) コンピューターに格納されている Web サーバーから名前/値のテキスト データです。"
  example:
  - "The following code example displays the values of cookies sent with the request.  \n  \n [!code-cs[Net_Listener_Basic#18](~/add/codesnippet/csharp/p-system.net.httplistene_7_1.cs)]"
  syntax:
    content: public System.Net.CookieCollection Cookies { get; }
    return:
      type: System.Net.CookieCollection
      description: "A<xref:System.Net.CookieCollection>要求に付随する cookie を格納している</xref:System.Net.CookieCollection>。 このプロパティは、cookie が要求に含まれていない場合、空のコレクションを返します。"
  overload: System.Net.HttpListenerRequest.Cookies*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  id: EndGetClientCertificate(System.IAsyncResult)
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: EndGetClientCertificate(IAsyncResult)
  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントの X.509 v.3 証明書への非同期要求を終了します。"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 EndGetClientCertificate (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "保留中の証明書の要求。"
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "<xref:System.IAsyncResult>操作が開始されたときに返されるオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Net.HttpListenerRequest.EndGetClientCertificate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>呼び出して取得されませんでした。<xref:System.Net.HttpListenerRequest.BeginGetClientCertificate*><code>e.</code>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "によって識別される操作に対してこのメソッドが既に呼び出さ<code> asyncResult</code>です。"
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.GetClientCertificate
  id: GetClientCertificate
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: GetClientCertificate()
  nameWithType: HttpListenerRequest.GetClientCertificate()
  fullName: System.Net.HttpListenerRequest.GetClientCertificate()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントの X.509 v.3 証明書を取得します。"
  remarks: "このメソッドは、証明書を取得するまでブロックします。"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 GetClientCertificate ();
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "A <xref href=&quot;System.Security.Cryptography.X509Certificates&quot;> </xref>クライアントの X.509 v.3 証明書を含むオブジェクトです。"
  overload: System.Net.HttpListenerRequest.GetClientCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "進行状況では、クライアントの X.509 v.3 証明書を取得するには、このメソッドを呼び出すと、そのため、このメソッドに別の呼び出しを確立できません。"
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync
  id: GetClientCertificateAsync
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: GetClientCertificateAsync()
  nameWithType: HttpListenerRequest.GetClientCertificateAsync()
  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "非同期操作として、クライアントの X.509 v.3 証明書を取得します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、証明書が取得されたときに、完了します</xref:System.Threading.Tasks.Task%601>。       クライアントの X.509 v.3 証明書を取得するには、このメソッドを呼び出すが進行中に、このメソッドに別の呼び出しを確立できません。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2> GetClientCertificateAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;です。       非同期操作を表すタスク オブジェクト。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;タスク オブジェクトのプロパティを返します、 <xref href=&quot;System.Security.Cryptography.X509Certificates&quot;> </xref>クライアントの X.509 v.3 証明書を含むオブジェクトです。"
  overload: System.Net.HttpListenerRequest.GetClientCertificateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.HasEntityBody
  id: HasEntityBody
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
  fullName: System.Net.HttpListenerRequest.HasEntityBody
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、<xref:System.Boolean>要求に本文データが関連付けられているかどうかを示す値</xref:System.Boolean>。"
  remarks: "使用して、サーバーにデータを送信する要求、`POST`メソッドはたとえば、エンティティ本体を持つ必要があります。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_17_1.cs)]"
  syntax:
    content: public bool HasEntityBody { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求の本文のデータが関連付けられている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.HttpListenerRequest.HasEntityBody*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Headers
  id: Headers
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Headers
  nameWithType: HttpListenerRequest.Headers
  fullName: System.Net.HttpListenerRequest.Headers
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "要求で送信ヘッダーの名前/値ペアのコレクションを取得します。"
  remarks: "要求ヘッダーには、メタデータ情報が格納されます。 たとえば、ヘッダーは、サーバーをクライアントを参照するリソースの Uniform リソース識別子 (URI) を含めることができます、応答本文内のデータ型のクライアント、および、許容される MIME で使用されるユーザー エージェントの id。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙体です</xref:System.Net.HttpRequestHeader>。"
  example:
  - "The following code example displays all the information in a given <xref:System.Net.WebHeaderCollection> object.  \n  \n [!code-cs[Net_Listener_Basic#21](~/add/codesnippet/csharp/p-system.net.httplistene_14_1.cs)]"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection Headers { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "A<xref:System.Net.WebHeaderCollection>要求に含まれる HTTP ヘッダーを格納している</xref:System.Net.WebHeaderCollection>。"
  overload: System.Net.HttpListenerRequest.Headers*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.HttpMethod
  id: HttpMethod
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
  fullName: System.Net.HttpListenerRequest.HttpMethod
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントによって指定された HTTP メソッドを取得します。"
  remarks: "HTTP メソッドは通常 GET または POST、クライアントで必要なアクションに応じてです。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_10_1.cs)]"
  syntax:
    content: public string HttpMethod { get; }
    return:
      type: System.String
      description: "A<xref:System.String>要求で使用されるメソッドを格納している</xref:System.String>。"
  overload: System.Net.HttpListenerRequest.HttpMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.InputStream
  id: InputStream
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
  fullName: System.Net.HttpListenerRequest.InputStream
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントによって送信される本文データを格納しているストリームを取得します。"
  remarks: "クライアントには、データが転送される場合 (たとえば、HTTP を使用して`POST`メソッド)、このメソッドによって返されるストリームには、そのデータが含まれています。      > [!NOTE] >、リクエストを終了すると、このプロパティによって返されたストリームが閉じられません。 ストリームが不要になったときに呼び出すことで閉じる必要があります、<xref:System.IO.Stream.Close%2A>メソッド</xref:System.IO.Stream.Close%2A>。"
  example:
  - "The following code example demonstrates using this property to read the data sent with a request.  \n  \n [!code-cs[Net_Listener_Basic#16](~/add/codesnippet/csharp/p-system.net.httplistene_27_1.cs)]"
  syntax:
    content: public System.IO.Stream InputStream { get; }
    return:
      type: System.IO.Stream
      description: "読み取り可能な<xref:System.IO.Stream>要求の本文内のクライアントから送信されたバイト数を含むオブジェクトです</xref:System.IO.Stream>。 このプロパティを返します<xref:System.IO.Stream>場合は、要求と一緒に送信されるデータがありません</xref:System.IO.Stream>。"
  overload: System.Net.HttpListenerRequest.InputStream*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
  fullName: System.Net.HttpListenerRequest.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、<xref:System.Boolean>この要求を送信するクライアントが認証されたかどうかを示す値</xref:System.Boolean>。"
  remarks: "アプリケーションが要求を使用してクライアント認証、<xref:System.Net.HttpListener.AuthenticationSchemes%2A>または<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>プロパティ</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A></xref:System.Net.HttpListener.AuthenticationSchemes%2A>。       アプリケーションが受信されません、<xref:System.Net.HttpListenerContext>が正常に認証されていないクライアントからの要求</xref:System.Net.HttpListenerContext>。"
  example:
  - "The following code example displays the value of the IsAuthenticated property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_1_1.cs)]"
  syntax:
    content: public bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、クライアントが認証されています。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.HttpListenerRequest.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsLocal
  id: IsLocal
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
  fullName: System.Net.HttpListenerRequest.IsLocal
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得する<xref:System.Boolean>要求がローカル コンピューターから送信されたかどうかを示す値</xref:System.Boolean>。"
  remarks: "アプリケーションは、このプロパティを使用して、要求は、ローカル コンピューターとは、特別な処理を実行することができます。"
  example:
  - "The following code example demonstrates using the IsLocal property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_28_1.cs)]"
  syntax:
    content: public bool IsLocal { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>同じコンピューターで、要求が発生した場合、 <xref href=&quot;System.Net.HttpListener&quot;> </xref> ; 要求を提供するオブジェクトそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.HttpListenerRequest.IsLocal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsSecureConnection
  id: IsSecureConnection
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
  fullName: System.Net.HttpListenerRequest.IsSecureConnection
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、<xref:System.Boolean>要求を送信するために使用する TCP 接続が Secure Sockets Layer (SSL) プロトコルを使用するかどうかを示す値</xref:System.Boolean>。"
  remarks: "セキュリティで保護された接続を要求するには、クライアント要求は<xref:System.Uri.UriSchemeHttps><xref:System.Uri.UriSchemeHttp>。</xref:System.Uri.UriSchemeHttp>の代わりに</xref:System.Uri.UriSchemeHttps>は SSL を使用して接続を確立できない場合、クライアントが受信、<xref:System.Net.WebException>エラーに関する情報を提供します</xref:System.Net.WebException>。"
  example:
  - "The following code example demonstrates using the IsSecureConnection property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_3_1.cs)]"
  syntax:
    content: public bool IsSecureConnection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>TCP 接続が SSL; を使用する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.HttpListenerRequest.IsSecureConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest
  id: IsWebSocketRequest
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得する<xref:System.Boolean>TCP 接続が WebSocket 要求であるかどうかを示す値</xref:System.Boolean>。"
  syntax:
    content: public bool IsWebSocketRequest { get; }
    return:
      type: System.Boolean
      description: "<xref:System.Boolean>。</xref:System.Boolean>を返します。       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>TCP 接続が WebSocket 要求である場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.HttpListenerRequest.IsWebSocketRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.KeepAlive
  id: KeepAlive
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
  fullName: System.Net.HttpListenerRequest.KeepAlive
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得する<xref:System.Boolean>をクライアントが永続的な接続を要求するかどうかを示す値</xref:System.Boolean>。"
  remarks: "場合は、HTTP クライアントとサーバーを短時間で複数回データを交換する、永続的な接続、通信速度を各メッセージ用の TCP 接続を開いたり、閉じたりするために必要なオーバーヘッドを回避することができます。 このプロパティの既定値は、http/1.1 を使用するクライアント、`true`です。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_5_1.cs)]"
  syntax:
    content: public bool KeepAlive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、接続を開いておく必要があります。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.HttpListenerRequest.KeepAlive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.LocalEndPoint
  id: LocalEndPoint
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
  fullName: System.Net.HttpListenerRequest.LocalEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "サーバーに、要求を転送する IP アドレスとポート番号を取得します。"
  remarks: "このプロパティは、これらのアドレスは方法に基づいて、要求に応答する場合に便利です。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_38_1.cs)]"
  syntax:
    content: public System.Net.IPEndPoint LocalEndPoint { get; }
    return:
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>要求に送信される IP アドレスを表す</xref:System.Net.IPEndPoint>。"
  overload: System.Net.HttpListenerRequest.LocalEndPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ProtocolVersion
  id: ProtocolVersion
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
  fullName: System.Net.HttpListenerRequest.ProtocolVersion
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "要求元のクライアントで使用される HTTP バージョンを取得します。"
  remarks: "利用できるドキュメントのさまざまな HTTP バージョンの機能が指定されて[http://www.rfc-editor.org](http://www.rfc-editor.org/)です。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_9_1.cs)]"
  syntax:
    content: public Version ProtocolVersion { get; }
    return:
      type: System.Version
      description: "A <xref:System.Version>HTTP クライアントのバージョンを識別します</xref:System.Version>。"
  overload: System.Net.HttpListenerRequest.ProtocolVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.QueryString
  id: QueryString
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
  fullName: System.Net.HttpListenerRequest.QueryString
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "要求に含まれるクエリ文字列を取得します。"
  remarks: "URL をクエリの情報は、パス情報、疑問符 (?) で区切られます。 名前/値ペアは等号 (=) で区切られます。 1 つの文字列としてクエリ データにアクセスするには、 <xref:System.Uri.Query%2A> <xref:System.Uri> <xref:System.Net.HttpListenerRequest.Url%2A>。</xref:System.Net.HttpListenerRequest.Url%2A>によって返されるオブジェクト</xref:System.Uri>からプロパティ値</xref:System.Uri.Query%2A>を取得します      > [!NOTE] > 等号 (=) なしのクエリ (例: [http://www.contoso.com/query.htm?Name](http://www.contoso.com/query.htm?Name) ) に追加されます、 `null` <xref:System.Collections.Specialized.NameValueCollection></xref:System.Collections.Specialized.NameValueCollection>キー。"
  example:
  - "The following code example demonstrates using the QueryString property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_4_1.cs)]"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection QueryString { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> <xref:System.Net.HttpListenerRequest.Url*>.</xref:System.Net.HttpListenerRequest.Url*>要求に含まれるクエリ データを格納しているオブジェクト"
  overload: System.Net.HttpListenerRequest.QueryString*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RawUrl
  id: RawUrl
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
  fullName: System.Net.HttpListenerRequest.RawUrl
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントが要求 (せずに、ホストとポート) URL 情報を取得します。"
  remarks: "生の URL は、次のドメイン情報の URL の一部として定義されます。 URL 文字列で`http://www.contoso.com/articles/recent.aspx`、生の URL は`/articles/recent.aspx`します。 生の URL には、存在する場合、クエリ文字列が含まれます。       ホストとポートの情報を取得するを使用して、<xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>プロパティ</xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A>。"
  example:
  - "The following code example demonstrates using the RawUrl property.  \n  \n [!code-cs[Net_Listener_Basic#11](~/add/codesnippet/csharp/p-system.net.httplistene_29_1.cs)]"
  syntax:
    content: public string RawUrl { get; }
    return:
      type: System.String
      description: "A<xref:System.String>この要求の生の URL を格納している</xref:System.String>。"
  overload: System.Net.HttpListenerRequest.RawUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
  fullName: System.Net.HttpListenerRequest.RemoteEndPoint
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアント要求の送信元 IP アドレスとポート番号を取得します。"
  remarks: ''
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#17](~/add/codesnippet/csharp/p-system.net.httplistene_11_1.cs)]"
  syntax:
    content: public System.Net.IPEndPoint RemoteEndPoint { get; }
    return:
      type: System.Net.IPEndPoint
      description: "<xref:System.Net.IPEndPoint>要求の送信元 IP アドレスとポート番号を表す</xref:System.Net.IPEndPoint>。"
  overload: System.Net.HttpListenerRequest.RemoteEndPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier
  id: RequestTraceIdentifier
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "受信 HTTP 要求の要求識別子を取得します。"
  syntax:
    content: public Guid RequestTraceIdentifier { get; }
    return:
      type: System.Guid
      description: "A <xref:System.Guid>HTTP 要求の識別子を含むオブジェクトです</xref:System.Guid>。"
  overload: System.Net.HttpListenerRequest.RequestTraceIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.ServiceName
  id: ServiceName
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
  fullName: System.Net.HttpListenerRequest.ServiceName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントが要求を送信したサービス プロバイダー名 (SPN) を取得します。"
  remarks: "アプリケーションは、カスタムのサービス提供名 (SPN) の検証を実行するのに ServiceName プロパティを使用できます。"
  syntax:
    content: public string ServiceName { get; }
    return:
      type: System.String
      description: "A <xref:System.String>SPN 要求で送信されたクライアントを格納している</xref:System.String>。"
  overload: System.Net.HttpListenerRequest.ServiceName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.TransportContext
  id: TransportContext
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
  fullName: System.Net.HttpListenerRequest.TransportContext
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、<xref:System.Net.TransportContext>クライアント要求に応じた</xref:System.Net.TransportContext>。"
  remarks: "<xref:System.Net.TransportContext>に対してチャネル バインディング トークン (CBT) を取得するプロパティを使用できます、 <xref:System.Net.HttpListenerRequest>HTTPS を使用して送信されました</xref:System.Net.HttpListenerRequest></xref:System.Net.TransportContext>。       アプリケーションを使用して、<xref:System.Net.TransportContext>ネイティブ Win32 への呼び出しを使用したカスタム認証を実行するプロパティ[AcceptSecurityContext](http://go.microsoft.com/fwlink/?LinkId=147021)関数</xref:System.Net.TransportContext>。       アプリケーションが、この TransportContext プロパティを使用して、チャネル バインディング トークン (CBT) を取得しようとしています場合、<xref:System.Net.TransportContext.GetChannelBinding%2A>メソッドおよび<xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>は<xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind>、 <xref:System.Net.HttpListenerRequest> <xref:System.NotSupportedException>。</xref:System.NotSupportedException>をスロー</xref:System.Net.HttpListenerRequest>し、</xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> </xref:System.Security.Authentication.ExtendedProtection.ChannelBindingKind> </xref:System.Net.TransportContext.GetChannelBinding%2A> 。 <xref:System.Net.HttpListenerRequest>よりも優先、<xref:System.Net.TransportContext.GetChannelBinding%2A>内部実装を持つメソッドです</xref:System.Net.TransportContext.GetChannelBinding%2A></xref:System.Net.HttpListenerRequest>。"
  syntax:
    content: public System.Net.TransportContext TransportContext { get; }
    return:
      type: System.Net.TransportContext
      description: "A<xref:System.Net.TransportContext>クライアントの要求に対するオブジェクト</xref:System.Net.TransportContext>。"
  overload: System.Net.HttpListenerRequest.TransportContext*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.Url
  id: Url
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: Url
  nameWithType: HttpListenerRequest.Url
  fullName: System.Net.HttpListenerRequest.Url
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得、<xref:System.Uri>クライアントによって要求されたオブジェクト</xref:System.Uri>。"
  remarks: "Url プロパティをから利用可能なすべての情報を取得できるように、<xref:System.Uri>オブジェクト</xref:System.Uri>。 URI の要求の生のテキストのみを知っている必要がある場合は、使用を検討して、<xref:System.Net.HttpListenerRequest.RawUrl%2A>プロパティ代わりにします</xref:System.Net.HttpListenerRequest.RawUrl%2A>。       Url プロパティが null の場合、<xref:System.Uri>クライアントから解析できませんでした</xref:System.Uri>。       <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>場合にプロパティが示す<xref:System.Net.HttpListener>変換された URI でパーセント エンコード値を変換し、その他の正規化手順は実行ではなく生のエスケープ解除された URI を使用します</xref:System.Net.HttpListener></xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>。       ときに、<xref:System.Net.HttpListener>インスタンスを介して要求を受け取ると、`http.sys`サービスによって提供される URI 文字列のインスタンス作成`http.sys`、し、Url のプロパティとして公開します</xref:System.Net.HttpListener>。       `http.sys`サービスは&2; つの要求の URI 文字列を公開: 変換 URI の生 URI の生の URI は、<xref:System.Uri?displayProperty=fullName>の HTTP 要求の要求行で提供される: `GET /path/` `Host: www.contoso.com`によって提供される生の URI `http.sys` 、上記で説明した要求は「/path/」です       </xref:System.Uri?displayProperty=fullName>。 これは、ネットワーク経由で送信された HTTP 動詞の後に、文字列を表します。       `http.sys`サービスが HTTP 要求の行で提供される URI を使用して、要求で提供される情報から変換された URI を作成しに、元のサーバー要求を決定するホスト ヘッダーを転送する必要があります。 これは、一連の登録済み URI プレフィックスの要求からの情報を比較することによって行います。 これらの値を比較できるようにするには、するために、要求に正規化をいくつか行う必要があります。 変換された URI 上記のサンプルは次のようになります: `http://www.contoso.com/path/` 、`http.sys`を組み合わせたものをサービス、 <xref:System.Uri.Host%2A?displayProperty=fullName>、変換された URI を作成する要求行の文字列とプロパティの値</xref:System.Uri.Host%2A?displayProperty=fullName>。 さらに、`http.sys`と<xref:System.Uri?displayProperty=fullName>クラスも、次の操作:-エスケープすべてパーセント エンコード値を解除します</xref:System.Uri?displayProperty=fullName>。      -非 ASCII 文字のパーセント エンコードを utf-16 文字表現に変換します。 Unicode 文字 (Unicode エンコーディング %uxxxx 形式を使用して) だけでなく utf-8 と ANSI や DBCS 文字はサポートされていることに注意してください。      パスの圧縮など、他の正規化の手順を実行します。       要求には、パーセントでエンコードされた値に使用されるエンコーディングに関する情報が含まれていない、ためには、パーセント エンコード値を解析するだけ、正しいエンコーディングを決定することはできません。       したがって`http.sys`プロセスを変更するための&2; つのレジストリ キーを提供します |。レジストリ キー |既定値 |説明 |  |------------------|-------------------|-----------------|  |EnableNonUTF8 |&1; |0 の場合、 `http.sys` UTF で&8; でエンコードされた Url のみを受け入れます。<br /><br /> 0 以外の場合`http.sys`も要求で ANSI でエンコードされたまたは DBCS でエンコードされた Url を受け取ります |。  |FavorUTF8 |&1; |0 以外の場合`http.sys`し、変換に失敗したし、EnableNonUTF8 が&0; でない場合に utf-8 として URL を先にデコードすると常に、Http.sys を ANSI または DBCS としてデコードしようとします。<br /><br /> 0 の場合 (そして EnableNonUTF8&0; ではない)、`http.sys`場合は、その ANSI または DBCS; としてデコードする試行が成功しない、utf-8 の変換を試みます |。      ときに<xref:System.Net.HttpListener>要求を受信して変換された URI を使用して`http.sys`Url プロパティへの入力として</xref:System.Net.HttpListener>。       Uri の文字と数字以外の文字をサポートする必要があります。 例としては次の URI は、顧客の顧客情報の取得に使用される「1/3812」番号: `http://www.contoso.com/Customer(&quot;1%2F3812&quot;)/` Uri (%2f) で、パーセント エンコードのスラッシュを注意してください。 これは、ここでスラッシュ文字を表し、データはパス区切り記号ではないため、必要に応じて。       次の URI につながる Uri のコンス トラクターに文字列を渡します: `http://www.contoso.com/Customer(&quot;1/3812&quot;)/` 、次の要素に分割して、パスのセグメントになります: `Customer(&quot;1` `3812&quot;)`これは、要求の送信元の目的ではありません。              場合、<xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>プロパティが false に設定し、<xref:System.Net.HttpListener>要求を受信から変換された URI ではなく生の URI を使用して、 `http.sys` Url プロパティへの入力として</xref:System.Net.HttpListener></xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A>。"
  example:
  - "The following code example demonstrates using the Url property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_20_1.cs)]"
  syntax:
    content: public Uri Url { get; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>クライアントによって要求されたリソースを識別するオブジェクト</xref:System.Uri>。"
  overload: System.Net.HttpListenerRequest.Url*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UrlReferrer
  id: UrlReferrer
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
  fullName: System.Net.HttpListenerRequest.UrlReferrer
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "サーバーにクライアントを参照するリソースの Uniform リソース識別子 (URI) を取得します。"
  remarks: "クライアントは要求された URI へのハイパーリンクを後に、その要求があります、`Referrer`ハイパーリンクが含まれているリソースの URI を識別するヘッダー。       クライアントが偽るまたは表示をしない、<xref:System.Net.HttpRequestHeader>ヘッダー</xref:System.Net.HttpRequestHeader> 。 したがって、while、UrlReferrer プロパティは、Web トラフィックの基本的な傾向の識別に役立ちます必要がありますいないとして使用する認証スキームの一部のデータへのアクセスを制御します。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙体です</xref:System.Net.HttpRequestHeader>。       UrlReferrer の場合は null があるない`Referrer`要求のヘッダー場合や、`Referrer`ヘッダーは要求内に存在が、有効な<xref:System.Uri></xref:System.Uri>を解析しません。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_22_1.cs)]"
  syntax:
    content: public Uri UrlReferrer { get; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>の要求のテキストを格納しているオブジェクト<xref:System.Net.HttpRequestHeader>ヘッダー、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>ヘッダーが要求に含まれていない場合</xref:System.Net.HttpRequestHeader></xref:System.Uri>。"
  overload: System.Net.HttpListenerRequest.UrlReferrer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserAgent
  id: UserAgent
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
  fullName: System.Net.HttpListenerRequest.UserAgent
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "クライアントから提示されたユーザー エージェントを取得します。"
  remarks: "`User-Agent`ヘッダーには通常の要求の生成に使用するソフトウェアの名前とバージョン番号を識別するテキストが含まれています。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙体です</xref:System.Net.HttpRequestHeader>。       UserAgent の場合は null があるない`User-Agent`要求のヘッダー。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_42_1.cs)]"
  syntax:
    content: public string UserAgent { get; }
    return:
      type: System.String
      description: "A<xref:System.String>の要求のテキストを格納しているオブジェクト<xref uid=&quot;langword_csharp_User-Agent&quot; name=&quot;User-Agent&quot; href=&quot;&quot;></xref>ヘッダー</xref:System.String> 。"
  overload: System.Net.HttpListenerRequest.UserAgent*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserHostAddress
  id: UserHostAddress
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
  fullName: System.Net.HttpListenerRequest.UserHostAddress
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "サーバーに、要求を転送する IP アドレスとポート番号を取得します。"
  remarks: "このプロパティによって返される情報はまた、<xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>プロパティの値</xref:System.Net.HttpListenerRequest.LocalEndPoint%2A>。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_6_1.cs)]"
  syntax:
    content: public string UserHostAddress { get; }
    return:
      type: System.String
      description: "A<xref:System.String>ホスト アドレス情報を含む</xref:System.String>。"
  overload: System.Net.HttpListenerRequest.UserHostAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserHostName
  id: UserHostName
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
  fullName: System.Net.HttpListenerRequest.UserHostName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "DNS 名を取得し、指定した場合、ポート番号が、クライアントによって指定します。"
  remarks: "`Host`ヘッダーには、要求されたサーバーのホスト名が含まれています。 ポート番号を指定すると、場合をコロンで区切ってと (たとえば、 `www.contoso.com:8080`)。       このプロパティを使用して、要求で指定されたホスト名に応じた別の応答を返すことができます。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙体です</xref:System.Net.HttpRequestHeader>。"
  example:
  - "The following code example demonstrates using this property.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_39_1.cs)]"
  syntax:
    content: public string UserHostName { get; }
    return:
      type: System.String
      description: "A<xref:System.String>の要求のテキストを含む値<xref uid=&quot;langword_csharp_Host&quot; name=&quot;Host&quot; href=&quot;&quot;></xref>ヘッダー</xref:System.String> 。"
  overload: System.Net.HttpListenerRequest.UserHostName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerRequest.UserLanguages
  id: UserLanguages
  parent: System.Net.HttpListenerRequest
  langs:
  - csharp
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
  fullName: System.Net.HttpListenerRequest.UserLanguages
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "応答として優先される自然言語を取得します。"
  remarks: "詳細の詳細については、`Accept-Language`ヘッダーを参照してください RFC 2616 14.4 で利用可能な[http://www.rfc-editor.org](http://www.rfc-editor.org/)です。       要求ヘッダーの完全な一覧については、<xref:System.Net.HttpRequestHeader>列挙体です</xref:System.Net.HttpRequestHeader>。"
  example:
  - "The following code example displays the languages from the request's `Accept-Language` header.  \n  \n [!code-cs[Net_Listener_Basic#15](~/add/codesnippet/csharp/p-system.net.httplistene_18_1.cs)]"
  syntax:
    content: public string[] UserLanguages { get; }
    return:
      type: System.String[]
      description: "A <xref:System.String>、要求で指定された言語を含む配列<xref:System.Net.HttpRequestHeader>ヘッダーまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>クライアント要求を含んでいない場合、<xref:System.Net.HttpRequestHeader>ヘッダー</xref:System.Net.HttpRequestHeader> </xref:System.Net.HttpRequestHeader> </xref:System.String> 。"
  overload: System.Net.HttpListenerRequest.UserLanguages*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.HttpListenerRequest.AcceptTypes
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
  fullName: System.Net.HttpListenerRequest.AcceptTypes
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: BeginGetClientCertificate(AsyncCallback,Object)
  nameWithType: HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
  fullName: System.Net.HttpListenerRequest.BeginGetClientCertificate(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.HttpListenerRequest.ClientCertificateError
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
  fullName: System.Net.HttpListenerRequest.ClientCertificateError
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerRequest.ContentEncoding
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
  fullName: System.Net.HttpListenerRequest.ContentEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Net.HttpListenerRequest.ContentLength64
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
  fullName: System.Net.HttpListenerRequest.ContentLength64
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.HttpListenerRequest.ContentType
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
  fullName: System.Net.HttpListenerRequest.ContentType
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerRequest.Cookies
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
  fullName: System.Net.HttpListenerRequest.Cookies
- uid: System.Net.CookieCollection
  parent: System.Net
  isExternal: true
  name: CookieCollection
  nameWithType: CookieCollection
  fullName: System.Net.CookieCollection
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: EndGetClientCertificate(IAsyncResult)
  nameWithType: HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
  fullName: System.Net.HttpListenerRequest.EndGetClientCertificate(IAsyncResult)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Net.HttpListenerRequest.GetClientCertificate
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificate()
  nameWithType: HttpListenerRequest.GetClientCertificate()
  fullName: System.Net.HttpListenerRequest.GetClientCertificate()
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificateAsync()
  nameWithType: HttpListenerRequest.GetClientCertificateAsync()
  fullName: System.Net.HttpListenerRequest.GetClientCertificateAsync()
- uid: System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<X509Certificate2>
  nameWithType: Task<X509Certificate2>
  fullName: System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Security.Cryptography.X509Certificates.X509Certificate2>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    nameWithType: X509Certificate2
    fullName: X509Certificate2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerRequest.HasEntityBody
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
  fullName: System.Net.HttpListenerRequest.HasEntityBody
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.HttpListenerRequest.Headers
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Headers
  nameWithType: HttpListenerRequest.Headers
  fullName: System.Net.HttpListenerRequest.Headers
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Net.HttpListenerRequest.HttpMethod
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
  fullName: System.Net.HttpListenerRequest.HttpMethod
- uid: System.Net.HttpListenerRequest.InputStream
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
  fullName: System.Net.HttpListenerRequest.InputStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.HttpListenerRequest.IsAuthenticated
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
  fullName: System.Net.HttpListenerRequest.IsAuthenticated
- uid: System.Net.HttpListenerRequest.IsLocal
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
  fullName: System.Net.HttpListenerRequest.IsLocal
- uid: System.Net.HttpListenerRequest.IsSecureConnection
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
  fullName: System.Net.HttpListenerRequest.IsSecureConnection
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
  fullName: System.Net.HttpListenerRequest.IsWebSocketRequest
- uid: System.Net.HttpListenerRequest.KeepAlive
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
  fullName: System.Net.HttpListenerRequest.KeepAlive
- uid: System.Net.HttpListenerRequest.LocalEndPoint
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
  fullName: System.Net.HttpListenerRequest.LocalEndPoint
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.HttpListenerRequest.ProtocolVersion
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
  fullName: System.Net.HttpListenerRequest.ProtocolVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Net.HttpListenerRequest.QueryString
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
  fullName: System.Net.HttpListenerRequest.QueryString
- uid: System.Net.HttpListenerRequest.RawUrl
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
  fullName: System.Net.HttpListenerRequest.RawUrl
- uid: System.Net.HttpListenerRequest.RemoteEndPoint
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
  fullName: System.Net.HttpListenerRequest.RemoteEndPoint
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
  fullName: System.Net.HttpListenerRequest.RequestTraceIdentifier
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Net.HttpListenerRequest.ServiceName
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
  fullName: System.Net.HttpListenerRequest.ServiceName
- uid: System.Net.HttpListenerRequest.TransportContext
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
  fullName: System.Net.HttpListenerRequest.TransportContext
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.HttpListenerRequest.Url
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Url
  nameWithType: HttpListenerRequest.Url
  fullName: System.Net.HttpListenerRequest.Url
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.HttpListenerRequest.UrlReferrer
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
  fullName: System.Net.HttpListenerRequest.UrlReferrer
- uid: System.Net.HttpListenerRequest.UserAgent
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
  fullName: System.Net.HttpListenerRequest.UserAgent
- uid: System.Net.HttpListenerRequest.UserHostAddress
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
  fullName: System.Net.HttpListenerRequest.UserHostAddress
- uid: System.Net.HttpListenerRequest.UserHostName
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
  fullName: System.Net.HttpListenerRequest.UserHostName
- uid: System.Net.HttpListenerRequest.UserLanguages
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
  fullName: System.Net.HttpListenerRequest.UserLanguages
- uid: System.Net.HttpListenerRequest.AcceptTypes*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: AcceptTypes
  nameWithType: HttpListenerRequest.AcceptTypes
- uid: System.Net.HttpListenerRequest.BeginGetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: BeginGetClientCertificate
  nameWithType: HttpListenerRequest.BeginGetClientCertificate
- uid: System.Net.HttpListenerRequest.ClientCertificateError*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ClientCertificateError
  nameWithType: HttpListenerRequest.ClientCertificateError
- uid: System.Net.HttpListenerRequest.ContentEncoding*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpListenerRequest.ContentEncoding
- uid: System.Net.HttpListenerRequest.ContentLength64*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentLength64
  nameWithType: HttpListenerRequest.ContentLength64
- uid: System.Net.HttpListenerRequest.ContentType*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ContentType
  nameWithType: HttpListenerRequest.ContentType
- uid: System.Net.HttpListenerRequest.Cookies*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Cookies
  nameWithType: HttpListenerRequest.Cookies
- uid: System.Net.HttpListenerRequest.EndGetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: EndGetClientCertificate
  nameWithType: HttpListenerRequest.EndGetClientCertificate
- uid: System.Net.HttpListenerRequest.GetClientCertificate*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificate
  nameWithType: HttpListenerRequest.GetClientCertificate
- uid: System.Net.HttpListenerRequest.GetClientCertificateAsync*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: GetClientCertificateAsync
  nameWithType: HttpListenerRequest.GetClientCertificateAsync
- uid: System.Net.HttpListenerRequest.HasEntityBody*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HasEntityBody
  nameWithType: HttpListenerRequest.HasEntityBody
- uid: System.Net.HttpListenerRequest.Headers*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Headers
  nameWithType: HttpListenerRequest.Headers
- uid: System.Net.HttpListenerRequest.HttpMethod*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: HttpMethod
  nameWithType: HttpListenerRequest.HttpMethod
- uid: System.Net.HttpListenerRequest.InputStream*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: InputStream
  nameWithType: HttpListenerRequest.InputStream
- uid: System.Net.HttpListenerRequest.IsAuthenticated*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsAuthenticated
  nameWithType: HttpListenerRequest.IsAuthenticated
- uid: System.Net.HttpListenerRequest.IsLocal*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsLocal
  nameWithType: HttpListenerRequest.IsLocal
- uid: System.Net.HttpListenerRequest.IsSecureConnection*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsSecureConnection
  nameWithType: HttpListenerRequest.IsSecureConnection
- uid: System.Net.HttpListenerRequest.IsWebSocketRequest*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpListenerRequest.IsWebSocketRequest
- uid: System.Net.HttpListenerRequest.KeepAlive*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: KeepAlive
  nameWithType: HttpListenerRequest.KeepAlive
- uid: System.Net.HttpListenerRequest.LocalEndPoint*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: LocalEndPoint
  nameWithType: HttpListenerRequest.LocalEndPoint
- uid: System.Net.HttpListenerRequest.ProtocolVersion*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ProtocolVersion
  nameWithType: HttpListenerRequest.ProtocolVersion
- uid: System.Net.HttpListenerRequest.QueryString*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: QueryString
  nameWithType: HttpListenerRequest.QueryString
- uid: System.Net.HttpListenerRequest.RawUrl*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RawUrl
  nameWithType: HttpListenerRequest.RawUrl
- uid: System.Net.HttpListenerRequest.RemoteEndPoint*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RemoteEndPoint
  nameWithType: HttpListenerRequest.RemoteEndPoint
- uid: System.Net.HttpListenerRequest.RequestTraceIdentifier*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: RequestTraceIdentifier
  nameWithType: HttpListenerRequest.RequestTraceIdentifier
- uid: System.Net.HttpListenerRequest.ServiceName*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: ServiceName
  nameWithType: HttpListenerRequest.ServiceName
- uid: System.Net.HttpListenerRequest.TransportContext*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: TransportContext
  nameWithType: HttpListenerRequest.TransportContext
- uid: System.Net.HttpListenerRequest.Url*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: Url
  nameWithType: HttpListenerRequest.Url
- uid: System.Net.HttpListenerRequest.UrlReferrer*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UrlReferrer
  nameWithType: HttpListenerRequest.UrlReferrer
- uid: System.Net.HttpListenerRequest.UserAgent*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserAgent
  nameWithType: HttpListenerRequest.UserAgent
- uid: System.Net.HttpListenerRequest.UserHostAddress*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostAddress
  nameWithType: HttpListenerRequest.UserHostAddress
- uid: System.Net.HttpListenerRequest.UserHostName*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserHostName
  nameWithType: HttpListenerRequest.UserHostName
- uid: System.Net.HttpListenerRequest.UserLanguages*
  parent: System.Net.HttpListenerRequest
  isExternal: false
  name: UserLanguages
  nameWithType: HttpListenerRequest.UserLanguages
