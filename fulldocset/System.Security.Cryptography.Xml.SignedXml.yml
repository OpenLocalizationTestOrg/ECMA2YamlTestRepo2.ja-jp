### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Xml.SignedXml
  id: SignedXml
  children:
  - System.Security.Cryptography.Xml.SignedXml.#ctor
  - System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)
  - System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)
  - System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)
  - System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)
  - System.Security.Cryptography.Xml.SignedXml.CheckSignature
  - System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)
  - System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  - System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)
  - System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)
  - System.Security.Cryptography.Xml.SignedXml.ComputeSignature
  - System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  - System.Security.Cryptography.Xml.SignedXml.EncryptedXml
  - System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)
  - System.Security.Cryptography.Xml.SignedXml.GetPublicKey
  - System.Security.Cryptography.Xml.SignedXml.GetXml
  - System.Security.Cryptography.Xml.SignedXml.KeyInfo
  - System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)
  - System.Security.Cryptography.Xml.SignedXml.m_signature
  - System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName
  - System.Security.Cryptography.Xml.SignedXml.Resolver
  - System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods
  - System.Security.Cryptography.Xml.SignedXml.Signature
  - System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator
  - System.Security.Cryptography.Xml.SignedXml.SignatureLength
  - System.Security.Cryptography.Xml.SignedXml.SignatureMethod
  - System.Security.Cryptography.Xml.SignedXml.SignatureValue
  - System.Security.Cryptography.Xml.SignedXml.SignedInfo
  - System.Security.Cryptography.Xml.SignedXml.SigningKey
  - System.Security.Cryptography.Xml.SignedXml.SigningKeyName
  - System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl
  - System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl
  langs:
  - csharp
  name: SignedXml
  nameWithType: SignedXml
  fullName: System.Security.Cryptography.Xml.SignedXml
  type: Class
  summary: "XML 署名の作成を容易にするのには、コア XML 署名オブジェクトのラッパーを提供します。"
  remarks: "SignedXml クラスは、World Wide Web コンソーシアム (W3C) の .NET Framework の実装[XML 署名の構文と処理の仕様](http://www.w3.org/TR/xmldsig-core/)XMLDSIG (XML デジタル署名) とも呼ばれます。  XMLDSIG は、署名および XML ドキュメントまたは統一リソース識別子 (URI) からアドレス指定可能であるその他のデータの一部またはすべてを検証する、標準ベースの相互運用可能な方法です。       共有する必要がある場合は、SignedXml クラスを使用するには、標準的な方法でアプリケーションや組織の間で XML データが署名済みです。  XMLDSIG の W3C 仕様に準拠する実装によっては、このクラスを使用して署名されたデータを検証できます。       SignedXml クラスでは、次の&3; 種類の XML デジタル署名を作成することができます |。署名の種類 |説明 |  |--------------------|-----------------|  |エンベロープ署名 |署名されている XML 要素内で、署名が含まれている |。  |エンベロープ署名 |署名付き XML に含まれる、 `Signature`> 要素です |。  |内部のデタッチされた署名 |署名と署名付き XML は、同じドキュメントが、他のいずれの要素が含まれています |。     &4; 番目の種類のデータと署名が別個の XML ドキュメント内である外部のデタッチされた署名と呼ばれるシグネチャもあります。 SignedXml クラスでは、外部のデタッチされた署名はサポートされていません。      ## XML 署名 XMLDSIG の構造を作成、 `Signature`> 要素は、XML ドキュメントまたは URI からアドレス指定できるはその他のデータのデジタル署名が含まれています。  `Signature`> 要素は、署名を検証するキーを検索する場所についての情報を含めることができます必要に応じてされ、署名に使用されている暗号アルゴリズム。 基本的な構造体は、次のように:```xml      <Signature xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot;>       <SignedInfo>         <CanonicalizationMethod Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot;/>         <SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;/>         <Reference URI=&quot;&quot;>           <Transforms>             <Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;/>           </Transforms>           <DigestMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#sha1&quot;/>           <DigestValue>Base64EncodedValue==</DigestValue>         </Reference>       </SignedInfo>       <SignatureValue>AnotherBase64EncodedValue===</SignatureValue>     </Signature>      ```この構造体の主要な部分は、: `CanonicalizationMethod`> 要素の書き直しの規則を指定する、`Signature`署名の検証のバイト数に要素を XML]、[テキストからです。 .NET Framework での既定値は、信頼できるアルゴリズムを識別する http://www.w3.org/TR/2001/REC-xml-c14n-20010315 です。 この要素で表される、<xref:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod%2A?displayProperty=fullName>プロパティ</xref:System.Security.Cryptography.Xml.SignedInfo.CanonicalizationMethod%2A?displayProperty=fullName>。       `SignatureMethod`> 要素は、署名の生成とに適用されたの検証に使用するアルゴリズムを指定、 `Signature`> 要素の値を生成する`SignatureValue`> です。 上記の例では、値 http://www.w3.org/2000/09/xmldsig#rsa-sha1 は RSA PKCS1 sha-1 署名を識別します。 この要素で表される、<xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.SignatureMethod%2A>。       `SignatureValue`> 要素の暗号化署名を指定する、 `Signature`> 要素。 かどうかはこの署名を検証しませんの一部から、 `Signature`> ブロックが改ざんし、ドキュメントが無効と見なされます。 限り、 `CanonicalizationMethod`> 値が信頼できる、この値は高度な改ざんにくくします。 この要素で表される、<xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.SignatureValue%2A>。       `URI`の属性、 `Reference`> 要素は、URI 参照を使用してデータ オブジェクトを指定します。 この属性で表される、<xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=fullName>プロパティ</xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=fullName>。      の指定することない、`URI`属性、つまり、設定、<xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=fullName>プロパティを`null`、受信側のアプリケーション オブジェクトの id を把握する必要のあることを意味します</xref:System.Security.Cryptography.Xml.Reference.Uri%2A?displayProperty=fullName>。 ほとんどの場合、 `null` URI と例外がスローされます。 使用しないで、 `null` URI、アプリケーションが必要とするプロトコルと相互運用する場合を除き、します。      設定、`URI`属性は空の文字列には、ドキュメントのルート要素は署名されていることを示しますエンベロープ署名の形式です。      If の値`URI`属性が # で始まる、現在のドキュメント内の要素値を解決する必要があります。 このフォームは、サポートされている署名の種類 (エンベロープ署名、署名または内部のデタッチされた署名をエンベロープ) のいずれかで使用できます。      -その他の要素は、外部リソースの署名をデタッチおよび SignedXml クラスでサポートされていないと見なされます。       `Transforms`> 要素には、順番に並べた一覧が含まれています。 `Transform`> digested が署名者を取得する方法、データ オブジェクトを記述する要素。 変換アルゴリズムはのような正規化メソッドが書き換えではなく、 `Signature`> 要素で識別されるコンテンツ書き換える、`URI`の属性、 `Reference`> 要素。 `Transforms`> 要素は、<xref:System.Security.Cryptography.Xml.TransformChain>クラス</xref:System.Security.Cryptography.Xml.TransformChain>によって表されます      -各変換アルゴリズムは、入力として XML (XPath ノード セット) またはバイトのいずれかを取るものと定義されます。 現在のデータの形式と異なる場合、変換の入力要件、変換規則が適用されます。      -各変換アルゴリズムは、出力として XML またはバイトのいずれかを生成するものとして定義されます。      の場合最後の変換アルゴリズムの出力がバイト単位で定義されていない (または変換が指定されていません)、正規化メソッド http://www.w3.org/TR/2001/REC-xml-c14n-20010315 が暗黙的な変換として使用 (別のアルゴリズムがで指定された場合でも、 `CanonicalizationMethod`> 要素)。      -変換アルゴリズムの http://www.w3.org/2000/09/xmldsig#enveloped-signature の値は削除として解釈されますが、ルールをエンコード、 `Signature`> ドキュメントから要素。 それ以外の場合、エンベロープ署名の検証方法はダイジェストの署名を含め、ドキュメントが、署名者が digested ドキュメント署名が適用された、前に異なる回答に先行します。       `DigestMethod`> 要素で識別される変換済みのコンテンツに適用するダイジェスト (暗号化ハッシュ) メソッドを識別する、`URI`の属性、 `Reference`> 要素。 これで表されますが、<xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A?displayProperty=fullName>プロパティ</xref:System.Security.Cryptography.Xml.Reference.DigestMethod%2A?displayProperty=fullName>。      ## 正規化方法を選択するには、別の値の使用を必要とする仕様と相互運用する場合を除き、値を持つ http://www.w3.org/TR/2001/REC-xml-c14n-20010315 XML C14N 1.0 アルゴリズムである .NET Framework では、既定の正規化方法を使用することお勧めします。 暗黙の最終的な変換を適用するように特に XMLDSIG のすべての実装でサポートする XML C14N 1.0 アルゴリズムが必要です。       コメントの保持のサポートの正規化アルゴリズムのバージョンがあります。 「署名に認識される」の原則に違反しているために、標準化メソッドのコメントの保持は推奨されません。 内のコメントは、 `Signature`> 署名を実行する方法は、要素は、処理ロジックを変わりません。 だけでどのようなシグネチャ、値は、します。 組み合わせると、攻撃者に、ハッシュの競合を強制的に不要な自由度を示しています。 含まれるコメントを許可する、脆弱な署名アルゴリズムでは、表示、正当な改ざんされたドキュメントを確立しています。  .NET Framework では、組み込み canonicalizers のみが既定ではサポートされます。 追加またはカスタム canonicalizers をサポートするために、次を参照してください、<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>プロパティ。</xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A> 。 ドキュメントによって表されるコレクションに含まれていない正規化メソッドを使用している場合、 <xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>、プロパティ、<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>メソッドが返す`false`</xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A></xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>。      > [!NOTE] > 非常に守勢のアプリケーションから使用する署名者が想定されていない任意の値を削除できます、<xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>コレクションです</xref:System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods%2A>。      ## 参照の値は、改ざんから保護しますか。    [はい]、 `Reference`> 値は改ざんから保護します。  .NET framework の検証、 `SignatureValue`> のいずれかを処理する前に計算、 `Reference`> 値とそれに関連付けられた変換、および悪意のある処理命令を避けるために早く中止されます。      ## 署名する要素の選択の値を使用することをお勧め&quot;&quot;の`URI`属性 (設定、または、<xref:System.Security.Cryptography.Xml.Reference.Uri%2A>プロパティを空の文字列に) 可能であれば、</xref:System.Security.Cryptography.Xml.Reference.Uri%2A> 。 つまり、ドキュメント全体が改ざんから保護されていることを意味ダイジェストの計算はドキュメント全体と見なされます。       表示する、非常に一般的`URI`#foo、ID 属性が&quot;foo&quot;の要素を参照するなどのアンカーのフォーム内の値。 残念ながら、このコンテキストではなく、ターゲット要素のコンテンツのみが含まれているために、改ざんするは簡単です。 この区別を悪用すると、XML 署名の折り返し (XSW) として、呼ばれます。       アプリケーションは、セマンティックにコメントを考慮し、(これは一般的な場合に処理する XML) 場合、する必要がありますを使用する&quot;#xpointer(/)&quot;の代わりに&quot;&quot;、&quot;#foo&quot;ではなく&quot;#xpointer(id(&quot;foo&quot;))&quot;とします。 #Xpointer バージョンは、shortname フォームは、コメントを除く、中に、コメントを含むとして解釈されます。       部分的にしか保護されているドキュメントをそのまま使用する必要があり、同じコンテンツを入手することを保証する場合、署名が保護されているを使用して、<xref:System.Security.Cryptography.Xml.SignedXml.GetIdElement%2A>メソッド</xref:System.Security.Cryptography.Xml.SignedXml.GetIdElement%2A>。      ## 必要な KeyInfo 要素の省略可能なデータに関するセキュリティの考慮事項`KeyInfo`> 要素 (つまり、<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>プロパティ)、署名を検証するためにキーを含む必要がありますが信頼されていない</xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>。       ときに、特定の<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>値は、ベア RSA や DSA、ECDSA 公開キーを表す、ドキュメントを改ざんすることがありますに関係なく、<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>メソッドの署名が有効であるレポートを作成します</xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A></xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo%2A>。  これは、新しいキーを生成し、その新しいキーを持つ、改ざんされたドキュメントを再署名するだけの改ざんを行うエンティティがあるために発生します。 そのため、アプリケーションは、公開キーが予期される値であることを確認、しない限り、ドキュメントを扱う改ざんされた場合、します。 これには、アプリケーションがドキュメントに埋め込まれたパブリック キーを調べるし、ドキュメントのコンテキストの既知の値のリストと照合することを確認が必要です。 たとえば、既知のユーザーによって発行されるドキュメントを認識することが場合は、そのユーザーが使用される既知のキーの一覧に対してキーを確認はします。       使用して、ドキュメントを処理した後、キーを確認することも、<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey%2A>メソッドを使用する代わりに、<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>メソッド</xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A></xref:System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey%2A>。 ただし、最適なセキュリティを確認してください、キー事前います。       読み取りするのではなく、代わりに、公開キーは、登録されているユーザーのしようとしているを検討してください、 `KeyInfo`> 要素。      ## 省略可能な X509Data 要素に関するセキュリティの考慮事項`X509Data`> 要素の子では、 `KeyInfo`> 要素れ、1 つまたは複数の X509 証明書または X509 の識別子の証明書。 内のデータ、 `X509Data`> 要素も本質的には信頼できません。       埋め込まれているを持つドキュメントを検証するときに`X509Data`> 要素、.NET Framework だけを確認、データが、X509 に解決される証明書の公開キーを持つはドキュメントの署名の検証に正常に使用できます。 呼び出し元とは異なり、<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>メソッドを`verifySignatureOnly`パラメーターに設定`false`、失効チェックは行われません、信頼チェーンがチェックされていない、有効期限がないことを確認します</xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>。 場合でも、アプリケーションは、証明書自体を抽出しに渡します、<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>メソッドを`verifySignatureOnly`にパラメーターが設定`false`はドキュメントの改ざんを防ぐための十分な検証をまだ</xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>。 証明書は、署名されているドキュメントに適したものとして検証する必要があります。       埋め込み署名証明書を使用できる便利キー ローテーション手法については、かどうかで、 `X509Data`> セクションまたはドキュメントの内容にします。 このアプローチを使用するときに、アプリケーションする必要があります、証明書を手動で抽出検証を行うに似ています。 - 証明書が直接発行されたか、アプリケーションに証明書機関 (CA) によって、チェーンによってパブリック証明書を所有が埋め込まれています。           既知のサブジェクト名など、追加のチェックなし OS に用意されている信頼リストを使用することは、SignedXml の改ざんを防止するのに十分ではありません。      -証明書がドキュメントの署名時に期限が切れてされていないことを確認 (または「現在」ドキュメントのリアルタイム処理付近)。      失効をサポートする CA によって発行された有効期間が長い証明書の証明書が失効していないことを確認します。      -証明書のサブジェクトは、現在のドキュメントに適切なものとして検証されます。      ## (XrML) などの特定の値が規定されている仕様と相互運用する場合、変換アルゴリズムの選択、し、従う必要があります、仕様です。  エンベロープ署名がある場合 (ときなどドキュメント全体を署名)、http://www.w3.org/2000/09/xmldsig#enveloped-signature を使用する必要があります (によって表される、<xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>クラス).</xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> 同様に、暗黙的な XML C14N 変換の指定することができますが、必要はありません。  エンベロープまたはデタッチ済みの署名では、変換は必要ありません。 すべての暗黙の型の XML C14N 変換が行われます。       更新セキュリティによって導入された、 [Microsoft セキュリティ情報の MS16&035;](https://technet.microsoft.com/en-us/library/security/ms16-035.aspx)、変換ができる、.NET Framework が制限されて信頼されていない変換が原因で、既定では、ドキュメントの検証に使用<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>を常に返す`false`</xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>。 具体的には、追加の入力 (XML 内の子要素として指定) を必要とする変換は許可されません。 不正使用の脆弱性のため悪意のあるユーザー。 W3C では、これらの制限の影響を受ける&2; つの主要な変換は、XPath と XSLT 変換を回避するように勧めます。      ## 多くのセキュリティの脆弱性が (サービス拒否攻撃、分散リフレクション サービス拒否攻撃、情報漏えいが起こる、署名の回避、およびリモートでコードが実行を含む) を提供する外部参照が現在のコンテキストに適していないと思われますの方法で、悪用される可能性があるアプリケーションが検証されない場合、外部参照の問題。 場合でも、アプリケーションが外部参照の URI を検証すると、あるはまま残り、2 回読み込まれているリソースの問題: ときに、アプリケーションが読み取り、されとき SignedXml によって読み取られるとします。 アプリケーションの読み取りとドキュメントを確認の手順は、同じコンテンツを持つという保証がないため、シグネチャでは信頼性が提供されません。       外部参照のリスクを与え、SignedXml 例外がスローされます外部参照が発生したときにします。  この問題の詳細については、次を参照してください。[サポート技術情報記事 3148821](https://support.microsoft.com/en-us/kb/3148821)です。"
  example:
  - "The following code example shows how to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/csharp/t-system.security.crypto_96_1.cs)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/cpp/t-system.security.crypto_96_1.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/visualbasic/t-system.security.crypto_96_1.vb)]  \n  \n The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  \n  \n [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/cpp/t-system.security.crypto_96_2.cpp)]\n [!code-cs[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/csharp/t-system.security.crypto_96_2.cs)]\n [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/visualbasic/t-system.security.crypto_96_2.vb)]"
  syntax:
    content: public class SignedXml
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignedXml()
  nameWithType: SignedXml.SignedXml()
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedXml()
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>クラスです。"
  remarks: ''
  example:
  - "The following code example shows how to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/csharp/m-system.security.crypto_88_1.cs)]\n [!code-vb[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/visualbasic/m-system.security.crypto_88_1.vb)]\n [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/cpp/m-system.security.crypto_88_1.cpp)]  \n  \n The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[XMLDSIG - Signature - Detached#1](~/add/codesnippet/cpp/m-system.security.crypto_88_2.cpp)]\n [!code-cs[XMLDSIG - Signature - Detached#1](~/add/codesnippet/csharp/m-system.security.crypto_88_2.cs)]\n [!code-vb[XMLDSIG - Signature - Detached#1](~/add/codesnippet/visualbasic/m-system.security.crypto_88_2.vb)]  \n  \n The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  \n  \n [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/cpp/m-system.security.crypto_88_3.cpp)]\n [!code-cs[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/csharp/m-system.security.crypto_88_3.cs)]\n [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/visualbasic/m-system.security.crypto_88_3.vb)]"
  syntax:
    content: public SignedXml ();
    parameters: []
  overload: System.Security.Cryptography.Xml.SignedXml.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)
  id: '#ctor(System.Xml.XmlDocument)'
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignedXml(XmlDocument)
  nameWithType: SignedXml.SignedXml(XmlDocument)
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedXml(XmlDocument)
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>指定した XML ドキュメントからのクラスです。"
  remarks: ''
  example:
  - "The following code example shows how to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/csharp/m-system.security.crypto_111_1.cs)]\n [!code-vb[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/visualbasic/m-system.security.crypto_111_1.vb)]\n [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/cpp/m-system.security.crypto_111_1.cpp)]  \n  \n The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[XMLDSIG - Signature - Detached#1](~/add/codesnippet/cpp/m-system.security.crypto_111_2.cpp)]\n [!code-cs[XMLDSIG - Signature - Detached#1](~/add/codesnippet/csharp/m-system.security.crypto_111_2.cs)]\n [!code-vb[XMLDSIG - Signature - Detached#1](~/add/codesnippet/visualbasic/m-system.security.crypto_111_2.vb)]  \n  \n The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  \n  \n [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/cpp/m-system.security.crypto_111_3.cpp)]\n [!code-cs[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/csharp/m-system.security.crypto_111_3.cs)]\n [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/visualbasic/m-system.security.crypto_111_3.vb)]"
  syntax:
    content: public SignedXml (System.Xml.XmlDocument document);
    parameters:
    - id: document
      type: System.Xml.XmlDocument
      description: "<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>の新しいインスタンスを初期化するために使用するオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>です。"
  overload: System.Security.Cryptography.Xml.SignedXml.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>document</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -、 <code> document </code>パラメーターには、null 値が含まれています<xref:System.Xml.XmlDocument.DocumentElement*>プロパティ。</xref:System.Xml.XmlDocument.DocumentElement*> 。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)
  id: '#ctor(System.Xml.XmlElement)'
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignedXml(XmlElement)
  nameWithType: SignedXml.SignedXml(XmlElement)
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedXml(XmlElement)
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>から、指定したクラス<xref href=&quot;System.Xml.XmlElement&quot;></xref>オブジェクト。"
  syntax:
    content: public SignedXml (System.Xml.XmlElement elem);
    parameters:
    - id: elem
      type: System.Xml.XmlElement
      description: "<xref href=&quot;System.Xml.XmlElement&quot;> </xref>の新しいインスタンスを初期化するために使用するオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>です。"
  overload: System.Security.Cryptography.Xml.SignedXml.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)
  id: AddObject(System.Security.Cryptography.Xml.DataObject)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: AddObject(DataObject)
  nameWithType: SignedXml.AddObject(DataObject)
  fullName: System.Security.Cryptography.Xml.SignedXml.AddObject(DataObject)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.Xml.DataObject&quot;> </xref>オブジェクトに署名するオブジェクトの一覧にします。"
  remarks: "AddObject メソッドを追加、 `Object`> 要素に署名するオブジェクトを表す、 `Signature`> XML デジタル署名の要素。       内部的に AddObject メソッドを呼び出して、<xref:System.Security.Cryptography.Xml.Signature.AddObject%2A>のメソッド、<xref:System.Security.Cryptography.Xml.Signature>オブジェクトによってカプセル化、<xref:System.Security.Cryptography.Xml.SignedXml>オブジェクト</xref:System.Security.Cryptography.Xml.SignedXml></xref:System.Security.Cryptography.Xml.Signature></xref:System.Security.Cryptography.Xml.Signature.AddObject%2A>。  追加することも、<xref:System.Security.Cryptography.Xml.DataObject>オブジェクトを直接呼び出すことにより、<xref:System.Security.Cryptography.Xml.Signature.AddObject%2A>メソッドから、<xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.Signature%2A></xref:System.Security.Cryptography.Xml.Signature.AddObject%2A></xref:System.Security.Cryptography.Xml.DataObject>。       XML デジタル署名の詳細については、www.w3.org/TR/xmldsig-core/ で利用可能な XMLDSIG の仕様を参照してください。"
  example:
  - "The following code example computes and XML signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/add/codesnippet/csharp/cc2302c9-707b-486f-888b-_1.cs)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/add/codesnippet/cpp/cc2302c9-707b-486f-888b-_1.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml-AddObject-AddReference#1](~/add/codesnippet/visualbasic/cc2302c9-707b-486f-888b-_1.vb)]"
  syntax:
    content: public void AddObject (System.Security.Cryptography.Xml.DataObject dataObject);
    parameters:
    - id: dataObject
      type: System.Security.Cryptography.Xml.DataObject
      description: "<xref href=&quot;System.Security.Cryptography.Xml.DataObject&quot;> </xref>に署名するオブジェクトの一覧に追加するオブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.AddObject*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)
  id: AddReference(System.Security.Cryptography.Xml.Reference)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: AddReference(Reference)
  nameWithType: SignedXml.AddReference(Reference)
  fullName: System.Security.Cryptography.Xml.SignedXml.AddReference(Reference)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "追加、 <xref href=&quot;System.Security.Cryptography.Xml.Reference&quot;> </xref>オブジェクトを<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>ダイジェストの作成方法、ダイジェスト値、および XML デジタル署名の作成に使用する変換を記述するオブジェクト。"
  remarks: "AddReference メソッドを追加、 `Reference`> 要素を<xref:System.Security.Cryptography.Xml.SignedXml>ダイジェストの作成方法、ダイジェスト値、および XML デジタル署名の作成に使用する変換を記述するオブジェクト</xref:System.Security.Cryptography.Xml.SignedXml>。  `Reference`> 要素のサブ要素は、 `SignedInfo`> 要素。       AddReference メソッドが内部的には、<xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A>のメソッド、<xref:System.Security.Cryptography.Xml.SignedInfo>オブジェクトによってカプセル化、<xref:System.Security.Cryptography.Xml.SignedXml>オブジェクト</xref:System.Security.Cryptography.Xml.SignedXml></xref:System.Security.Cryptography.Xml.SignedInfo></xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A>。  追加することも、<xref:System.Security.Cryptography.Xml.Reference>オブジェクトを直接呼び出すことにより、<xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A>メソッドから、<xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.SignedInfo%2A></xref:System.Security.Cryptography.Xml.SignedInfo.AddReference%2A></xref:System.Security.Cryptography.Xml.Reference>。       XML デジタル署名の詳細については、www.w3.org/TR/xmldsig-core/ で利用可能な XMLDSIG の仕様を参照してください。"
  example:
  - "The following code example shows how to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/csharp/86d65b61-ebc7-4a08-b833-_1.cs)]\n [!code-vb[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/visualbasic/86d65b61-ebc7-4a08-b833-_1.vb)]\n [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/cpp/86d65b61-ebc7-4a08-b833-_1.cpp)]  \n  \n The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[XMLDSIG - Signature - Detached#1](~/add/codesnippet/cpp/86d65b61-ebc7-4a08-b833-_2.cpp)]\n [!code-cs[XMLDSIG - Signature - Detached#1](~/add/codesnippet/csharp/86d65b61-ebc7-4a08-b833-_2.cs)]\n [!code-vb[XMLDSIG - Signature - Detached#1](~/add/codesnippet/visualbasic/86d65b61-ebc7-4a08-b833-_2.vb)]  \n  \n The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  \n  \n [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/cpp/86d65b61-ebc7-4a08-b833-_3.cpp)]\n [!code-cs[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/csharp/86d65b61-ebc7-4a08-b833-_3.cs)]\n [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/visualbasic/86d65b61-ebc7-4a08-b833-_3.vb)]"
  syntax:
    content: public void AddReference (System.Security.Cryptography.Xml.Reference reference);
    parameters:
    - id: reference
      type: System.Security.Cryptography.Xml.Reference
      description: "<xref href=&quot;System.Security.Cryptography.Xml.Reference&quot;> </xref>ダイジェストの作成方法、ダイジェスト値、および XML デジタル署名の作成に使用する変換を記述するオブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.AddReference*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature
  id: CheckSignature
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: CheckSignature()
  nameWithType: SignedXml.CheckSignature()
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "指定するかどうか、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティは、署名の公開キーを使用することを確認します</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
  remarks: "また、このメソッドは、参照のダイジェストと署名の値を計算します。       XML ドキュメントは、X.509 署名で署名された、CheckSignature メソッドは、検証のための適切な証明書の&quot;AddressBook&quot;ストアを検索します。 たとえば、証明書のサブジェクト キー識別子 (SKI) によってが参照されている場合、<xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>メソッドはこの SKI で証明書の選択し、に&1; つずつするまで試行しますが、証明書を確認してください</xref:System.Security.Cryptography.Xml.SignedXml.CheckSignature%2A>。"
  example:
  - "The following code example shows how to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/csharp/m-system.security.crypto_17_1.cs)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/cpp/m-system.security.crypto_17_1.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/visualbasic/m-system.security.crypto_17_1.vb)]  \n  \n The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/cpp/m-system.security.crypto_17_2.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/visualbasic/m-system.security.crypto_17_2.vb)]\n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/csharp/m-system.security.crypto_17_2.cs)]  \n  \n The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  \n  \n [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/cpp/m-system.security.crypto_17_3.cpp)]\n [!code-cs[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/csharp/m-system.security.crypto_17_3.cs)]\n [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/visualbasic/m-system.security.crypto_17_3.vb)]"
  syntax:
    content: public bool CheckSignature ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティを確認しますそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Security.Cryptography.Xml.SignedXml.Signature*> 。"
  overload: System.Security.Cryptography.Xml.SignedXml.CheckSignature*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<> </> *> 署名の公開キーのプロパティが一致しない、 <> </> *> プロパティです。       または、署名の説明を作成できませんでした。       - かハッシュ アルゴリズムを作成できませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)
  id: CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: CheckSignature(AsymmetricAlgorithm)
  nameWithType: SignedXml.CheckSignature(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "決定するかどうか、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティが指定されたキーのことを確認します</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
  remarks: ''
  example:
  - "The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/cpp/3bad083a-16aa-4e4b-9114-_1.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/visualbasic/3bad083a-16aa-4e4b-9114-_1.vb)]\n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/csharp/3bad083a-16aa-4e4b-9114-_1.cs)]  \n  \n The following code example shows how to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/csharp/3bad083a-16aa-4e4b-9114-_2.cs)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/cpp/3bad083a-16aa-4e4b-9114-_2.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/visualbasic/3bad083a-16aa-4e4b-9114-_2.vb)]"
  syntax:
    content: public bool CheckSignature (System.Security.Cryptography.AsymmetricAlgorithm key);
    parameters:
    - id: key
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "実装、 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>ことを確認するために使用するキーを保持するプロパティ、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティを指定された検証キー、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Security.Cryptography.Xml.SignedXml.Signature*> 。"
  overload: System.Security.Cryptography.Xml.SignedXml.CheckSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<> </> *> のプロパティ、 <code> key </code>パラメーターと一致しません、 <> </> *> プロパティです。       または、署名の説明を作成できませんでした。       - かハッシュ アルゴリズムを作成できませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  id: CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: CheckSignature(KeyedHashAlgorithm)
  nameWithType: SignedXml.CheckSignature(KeyedHashAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature(KeyedHashAlgorithm)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "決定するかどうか、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティが指定されたメッセージ認証コード (MAC) アルゴリズムのことを確認します</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
  remarks: ''
  example:
  - "The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/add/codesnippet/csharp/90ca4404-0fd2-4d7f-a2b2-_1.cs)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/add/codesnippet/visualbasic/90ca4404-0fd2-4d7f-a2b2-_1.vb)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/add/codesnippet/cpp/90ca4404-0fd2-4d7f-a2b2-_1.cpp)]  \n  \n The following code example shows how to sign and verify an entire XML document using an enveloping signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/add/codesnippet/csharp/90ca4404-0fd2-4d7f-a2b2-_2.cs)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/add/codesnippet/cpp/90ca4404-0fd2-4d7f-a2b2-_2.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/add/codesnippet/visualbasic/90ca4404-0fd2-4d7f-a2b2-_2.vb)]"
  syntax:
    content: public bool CheckSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);
    parameters:
    - id: macAlg
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "実装<xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;></xref>ことを確認するために使用される MAC を保持する、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティが指定された MAC; の検証それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Security.Cryptography.Xml.SignedXml.Signature*> 。"
  overload: System.Security.Cryptography.Xml.SignedXml.CheckSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>macAlg</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<> </> *> したプロパティの<xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;></xref>オブジェクトが無効です。      -or-       The <>*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       または、署名の確認に使用される暗号変換を作成できませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)
  id: CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: CheckSignature(X509Certificate2,Boolean)
  nameWithType: SignedXml.CheckSignature(X509Certificate2,Boolean)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "決定するかどうか、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティが、指定されたことを確認<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;></xref>オブジェクトと、必要に応じて、証明書が有効かどうか</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
  remarks: ".NET Framework のバージョン 1.1 では、X.509 証明書は検証されません。  バージョン 2.0 以降では、X.509 証明書が検証されます。       バージョン 2.0、.NET Framework の以降では、CheckSignature メソッドは、検証のための適切な証明書の&quot;AddressBook&quot;ストアを検索します。 たとえば、参照する場合、証明書のサブジェクト キー識別子 (SKI) によって、CheckSignature メソッドはこの SKI で証明書の選択やり直してくださいに&1; つずつ証明書を確認できるまで。"
  example:
  - "The following code example uses an X.509 certificate from a certificate store to sign and verify an XML document.  \n  \n [!code-vb[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/add/codesnippet/visualbasic/e51a3b72-eabb-4d0b-b51a-_1.vb)]\n [!code-cs[Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)#1](~/add/codesnippet/csharp/e51a3b72-eabb-4d0b-b51a-_1.cs)]"
  syntax:
    content: public bool CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, bool verifySignatureOnly);
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate2&quot;> </xref>検証に使用するオブジェクト、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
    - id: verifySignatureOnly
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>だけです。 署名を検証するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>署名および証明書の両方を確認します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、署名が無効です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。       - または - <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> 、署名と証明書が有効なそれ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.Xml.SignedXml.CheckSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>certificate</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "署名の説明を作成できませんでした、 <code> certificate </code>パラメーター。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)
  id: CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: CheckSignatureReturningKey(AsymmetricAlgorithm)
  nameWithType: SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "指定するかどうか、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティは、署名の公開キーを使用することを確認します</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
  remarks: ''
  example:
  - "The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/add/codesnippet/cpp/193181f3-8100-4b63-8720-_1.cpp)]\n [!code-cs[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/add/codesnippet/csharp/193181f3-8100-4b63-8720-_1.cs)]\n [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Detached#1](~/add/codesnippet/visualbasic/193181f3-8100-4b63-8720-_1.vb)]  \n  \n The following code example shows how to sign and verify an entire XML document using an enveloping signature.  \n  \n [!code-cpp[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/add/codesnippet/cpp/193181f3-8100-4b63-8720-_2.cpp)]\n [!code-cs[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/add/codesnippet/csharp/193181f3-8100-4b63-8720-_2.cs)]\n [!code-vb[System.Security.Cryptography.XML.SignedXML_CheckReturnValue_Envelope#1](~/add/codesnippet/visualbasic/193181f3-8100-4b63-8720-_2.vb)]"
  syntax:
    content: public bool CheckSignatureReturningKey (out System.Security.Cryptography.AsymmetricAlgorithm signingKey);
    parameters:
    - id: signingKey
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "このメソッドが戻るときの実装が含まれています。 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>署名の公開キーを保持します。 このパラメーターは初期化せずに渡されます。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティは、パブリックなを使用することを確認、それ以外の署名にキー <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Security.Cryptography.Xml.SignedXml.Signature*> 。"
  overload: System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> signingKey </code>パラメーターが null です。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<> </> *> 署名の公開キーのプロパティが一致しない、 <> </> *> プロパティです。       または、署名の説明を作成できませんでした。       - かハッシュ アルゴリズムを作成できませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.ComputeSignature
  id: ComputeSignature
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: ComputeSignature()
  nameWithType: SignedXml.ComputeSignature()
  fullName: System.Security.Cryptography.Xml.SignedXml.ComputeSignature()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML デジタル署名を計算します。"
  remarks: "ComputeSignature メソッドは、XML デジタル署名を作成し、多くのために必要な XML 要素を構築します。       署名されたデータを設定する必要があります、<xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A>このメソッドを呼び出す前に、プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.SigningKey%2A>。"
  example:
  - "The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cs[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/csharp/m-system.security.crypto_74_1.cs)]\n [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/visualbasic/m-system.security.crypto_74_1.vb)]\n [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/cpp/m-system.security.crypto_74_1.cpp)]  \n  \n The following code example shows how to sign and verify an entire XML document using an enveloping signature.  \n  \n [!code-cs[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/csharp/m-system.security.crypto_74_2.cs)]\n [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/cpp/m-system.security.crypto_74_2.cpp)]\n [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/visualbasic/m-system.security.crypto_74_2.vb)]"
  syntax:
    content: public void ComputeSignature ();
    parameters: []
  overload: System.Security.Cryptography.Xml.SignedXml.ComputeSignature*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The <>*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.      - または -、 <> </> *> プロパティは使用されません、 <xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>オブジェクトまたは<xref href=&quot;System.Security.Cryptography.RSA&quot;></xref>オブジェクト。       または、キーを読み込むことができませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  id: ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: ComputeSignature(KeyedHashAlgorithm)
  nameWithType: SignedXml.ComputeSignature(KeyedHashAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.ComputeSignature(KeyedHashAlgorithm)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "指定したメッセージ認証コード (MAC) アルゴリズムを使用して XML デジタル署名を計算します。"
  remarks: "ComputeSignature メソッドは、指定された MAC アルゴリズムを使用して XML デジタル署名を作成し、多くのために必要な XML 要素を構築します。       このメソッドを呼び出す前に署名するデータを設定する必要があります。"
  example:
  - "The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/add/codesnippet/csharp/a3e65477-6e59-4270-bb2f-_1.cs)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/add/codesnippet/visualbasic/a3e65477-6e59-4270-bb2f-_1.vb)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Detached#1](~/add/codesnippet/cpp/a3e65477-6e59-4270-bb2f-_1.cpp)]  \n  \n The following code example shows how to sign and verify an entire XML document using an enveloping signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/add/codesnippet/csharp/a3e65477-6e59-4270-bb2f-_2.cs)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/add/codesnippet/cpp/a3e65477-6e59-4270-bb2f-_2.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-KeyedHash-Envelope#1](~/add/codesnippet/visualbasic/a3e65477-6e59-4270-bb2f-_2.vb)]"
  syntax:
    content: public void ComputeSignature (System.Security.Cryptography.KeyedHashAlgorithm macAlg);
    parameters:
    - id: macAlg
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "A <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref>の値を計算するために使用される MAC を保持するオブジェクト、<xref:System.Security.Cryptography.Xml.SignedXml.Signature*>プロパティ</xref:System.Security.Cryptography.Xml.SignedXml.Signature*>。"
  overload: System.Security.Cryptography.Xml.SignedXml.ComputeSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>macAlg</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref>で指定されたオブジェクト、 <code> macAlg </code>パラメーターがのインスタンスではない<xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref>です。       - または -、<xref:System.Security.Cryptography.HashAlgorithm.HashSize*>したプロパティの<xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;></xref>オブジェクトが無効です</xref:System.Security.Cryptography.HashAlgorithm.HashSize*>。       または、署名の確認に使用される暗号変換を作成できませんでした。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.EncryptedXml
  id: EncryptedXml
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: EncryptedXml
  nameWithType: SignedXml.EncryptedXml
  fullName: System.Security.Cryptography.Xml.SignedXml.EncryptedXml
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定、 <xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml&quot;> </xref> XML 暗号化の処理規則を定義するオブジェクト。"
  syntax:
    content: public System.Security.Cryptography.Xml.EncryptedXml EncryptedXml { get; set; }
    return:
      type: System.Security.Cryptography.Xml.EncryptedXml
      description: "<xref href=&quot;System.Security.Cryptography.Xml.EncryptedXml&quot;> </xref> XML 暗号化の処理規則を定義するオブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.EncryptedXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)
  id: GetIdElement(System.Xml.XmlDocument,System.String)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: GetIdElement(XmlDocument,String)
  nameWithType: SignedXml.GetIdElement(XmlDocument,String)
  fullName: System.Security.Cryptography.Xml.SignedXml.GetIdElement(XmlDocument,String)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "返します、 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>指定された対象から指定した ID を持つオブジェクト<xref href=&quot;System.Xml.XmlDocument&quot;></xref>オブジェクト。"
  syntax:
    content: public virtual System.Xml.XmlElement GetIdElement (System.Xml.XmlDocument document, string idValue);
    parameters:
    - id: document
      type: System.Xml.XmlDocument
      description: "<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>を取得するオブジェクト、 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>オブジェクトからです。"
    - id: idValue
      type: System.String
      description: "ID、 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>から取得するオブジェクト、 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>オブジェクト。"
    return:
      type: System.Xml.XmlElement
      description: "<xref href=&quot;System.Xml.XmlElement&quot;> </xref>指定された対象から指定した ID を持つオブジェクト<xref href=&quot;System.Xml.XmlDocument&quot;></xref>オブジェクト、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合に見つかりませんでした。"
  overload: System.Security.Cryptography.Xml.SignedXml.GetIdElement*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.GetPublicKey
  id: GetPublicKey
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: GetPublicKey()
  nameWithType: SignedXml.GetPublicKey()
  fullName: System.Security.Cryptography.Xml.SignedXml.GetPublicKey()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "署名の公開キーを返します。"
  remarks: "GetPublicKey メソッドを返します、 <xref:System.Security.Cryptography.AsymmetricAlgorithm>XML デジタル署名の検証に使用できる公開キーを含むオブジェクトです</xref:System.Security.Cryptography.AsymmetricAlgorithm>。       キーはいずれかである必要があります、<xref:System.Security.Cryptography.DSA>または<xref:System.Security.Cryptography.RSA>キー</xref:System.Security.Cryptography.RSA> </xref:System.Security.Cryptography.DSA> 。"
  syntax:
    content: protected virtual System.Security.Cryptography.AsymmetricAlgorithm GetPublicKey ();
    parameters: []
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> 、署名の公開キーを格納しているオブジェクトまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>キーが見つからない場合。"
  overload: System.Security.Cryptography.Xml.SignedXml.GetPublicKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo*>プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref></xref:System.Security.Cryptography.Xml.SignedXml.KeyInfo*> 。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.GetXml
  id: GetXml
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: GetXml()
  nameWithType: SignedXml.GetXml()
  fullName: System.Security.Cryptography.Xml.SignedXml.GetXml()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML 表現を返します、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>オブジェクト。"
  syntax:
    content: public System.Xml.XmlElement GetXml ();
    parameters: []
    return:
      type: System.Xml.XmlElement
      description: "XML 表現、 <xref href=&quot;System.Security.Cryptography.Xml.Signature&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.GetXml*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "The <>*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.      -or-       The <>*> property is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.KeyInfo
  id: KeyInfo
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: KeyInfo
  nameWithType: SignedXml.KeyInfo
  fullName: System.Security.Cryptography.Xml.SignedXml.KeyInfo
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定、 <xref href=&quot;System.Security.Cryptography.Xml.KeyInfo&quot;> </xref> 、現在のオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  remarks: "必要な KeyInfo プロパティを表す、 `KeyInfo`>、デジタル署名を使用して XML の要素、<xref:System.Security.Cryptography.Xml.KeyInfo>プロパティ内に含まれるオブジェクト</xref:System.Security.Cryptography.Xml.KeyInfo>。  `KeyInfo`> 要素のサブ要素は、 `Signature`> 要素。       XML ドキュメントの検証に必要なキーを識別するのにためのもので、キーに関連する情報を埋め込むには、必要な KeyInfo プロパティを使用します。       詳細については、`<KeyInfo>`要素は www.w3.org/TR/xmldsig-core/ XMLDSIG の仕様を参照してください。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfo> object when signing a resource represented by a Universal Resource Identifier (URI).  This example saves the signature in a new file.  \n  \n [!code-cs[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/csharp/p-system.security.crypto_31_1.cs)]\n [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/visualbasic/p-system.security.crypto_31_1.vb)]\n [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#1](~/add/codesnippet/cpp/p-system.security.crypto_31_1.cpp)]  \n  \n The following code example uses the <xref:System.Security.Cryptography.Xml.KeyInfo> object when signing an XML document.  This example saves the signature in a new file.  \n  \n [!code-cs[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/csharp/p-system.security.crypto_31_2.cs)]\n [!code-cpp[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/cpp/p-system.security.crypto_31_2.cpp)]\n [!code-vb[System.Security.Cryptography.XML-XMLDsigEnvelope#1](~/add/codesnippet/visualbasic/p-system.security.crypto_31_2.vb)]"
  syntax:
    content: public System.Security.Cryptography.Xml.KeyInfo KeyInfo { get; set; }
    return:
      type: System.Security.Cryptography.Xml.KeyInfo
      description: "<xref href=&quot;System.Security.Cryptography.Xml.KeyInfo&quot;> </xref> 、現在のオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.KeyInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)
  id: LoadXml(System.Xml.XmlElement)
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: LoadXml(XmlElement)
  nameWithType: SignedXml.LoadXml(XmlElement)
  fullName: System.Security.Cryptography.Xml.SignedXml.LoadXml(XmlElement)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "読み込み、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>状態の XML 要素からです。"
  remarks: ''
  example:
  - "The following code example shows how to use the LoadXml method to verify an XML document.  \n  \n [!code-cs[System.Security.Cryptography.XML-XMLDsigDetached#3](~/add/codesnippet/csharp/m-system.security.crypto_14_1.cs)]\n [!code-vb[System.Security.Cryptography.XML-XMLDsigDetached#3](~/add/codesnippet/visualbasic/m-system.security.crypto_14_1.vb)]\n [!code-cpp[System.Security.Cryptography.XML-XMLDsigDetached#3](~/add/codesnippet/cpp/m-system.security.crypto_14_1.cpp)]"
  syntax:
    content: public void LoadXml (System.Xml.XmlElement value);
    parameters:
    - id: value
      type: System.Xml.XmlElement
      description: "XML 要素を読み込む、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>状態からです。"
  overload: System.Security.Cryptography.Xml.SignedXml.LoadXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>value</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code> value </code>パラメーターが有効な含まれていない<> *> プロパティです。      - または -、 <code> value </code>パラメーターが有効な含まれていない<> *> プロパティです。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.m_signature
  id: m_signature
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: m_signature
  nameWithType: SignedXml.m_signature
  fullName: System.Security.Cryptography.Xml.SignedXml.m_signature
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "表す、 <xref href=&quot;System.Security.Cryptography.Xml.Signature&quot;> </xref> 、現在のオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  syntax:
    content: protected System.Security.Cryptography.Xml.Signature m_signature;
    return:
      type: System.Security.Cryptography.Xml.Signature
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName
  id: m_strSigningKeyName
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: m_strSigningKeyName
  nameWithType: SignedXml.m_strSigningKeyName
  fullName: System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "署名に使用するインストールされているキーの名前を表す、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>オブジェクト。"
  syntax:
    content: protected string m_strSigningKeyName;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.Resolver
  id: Resolver
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: Resolver
  nameWithType: SignedXml.Resolver
  fullName: System.Security.Cryptography.Xml.SignedXml.Resolver
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在の設定<xref href=&quot;System.Xml.XmlResolver&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Xml.XmlResolver>クラスによって、Uniform Resource Identifier () をという名前の外部 XML リソースを解決します</xref:System.Xml.XmlResolver>。 XML ファイルの作成元を信頼していない場合、URI でという名前のコンピューター リソースにアクセスする XML ファイルを許可する場合がありますされません。 競合回避モジュールのプロパティを使用するにはレベルを制御する XML ファイルがさまざまなを指定してがコンピューター リソースにアクセスする<xref:System.Xml.XmlResolver>オブジェクト</xref:System.Xml.XmlResolver>。 任意のアクセスを許可しないようにする場合このプロパティを設定することができます`null`(`Nothing` Visual Basic で)。"
  syntax:
    content: public System.Xml.XmlResolver Resolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "現在<xref href=&quot;System.Xml.XmlResolver&quot;></xref>オブジェクト。 既定値は、 <xref href=&quot;System.Xml.XmlSecureResolver&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.Resolver*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods
  id: SafeCanonicalizationMethods
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SafeCanonicalizationMethods
  nameWithType: SignedXml.SafeCanonicalizationMethods
  fullName: System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "[.NET Framework 4.5.1 以降のバージョンでサポート]      正規化アルゴリズムが明示的に許可されているメソッドの名前を取得します。"
  remarks: "標準化メソッドは、XML ドキュメントを正規の形式に変換します。 正規 XML の詳細については、次を参照してください。[正規 XML](http://www.w3.org/TR/xml-c14n) 、W3C web サイトにします。"
  syntax:
    content: public System.Collections.ObjectModel.Collection<string> SafeCanonicalizationMethods { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.String}
      description: "安全に標準 XML を生成するメソッドの名前のコレクション。"
  overload: System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.Signature
  id: Signature
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: Signature
  nameWithType: SignedXml.Signature
  fullName: System.Security.Cryptography.Xml.SignedXml.Signature
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得、 <xref href=&quot;System.Security.Cryptography.Xml.Signature&quot;> </xref> 、現在のオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  remarks: "署名プロパティを表す、 `Signature`>、デジタル署名を使用して XML の要素、<xref:System.Security.Cryptography.Xml.Signature>プロパティ内に含まれるオブジェクト</xref:System.Security.Cryptography.Xml.Signature>。  `Signature`> 要素は、XML デジタル署名の作成および検証に使用されるルート要素です。       署名プロパティを使用して取得する、<xref:System.Security.Cryptography.Xml.Signature>によって使用されるオブジェクト、<xref:System.Security.Cryptography.Xml.SignedXml>オブジェクト</xref:System.Security.Cryptography.Xml.SignedXml></xref:System.Security.Cryptography.Xml.Signature>。       詳細については、`<Signature>`要素は www.w3.org/TR/xmldsig-core/ XMLDSIG の仕様を参照してください。"
  example:
  - "The following code example uses the Signature property to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/csharp/p-system.security.crypto_9_1.cs)]\n [!code-vb[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/visualbasic/p-system.security.crypto_9_1.vb)]\n [!code-cpp[Cryptography.XML.Signature - Envelope#1](~/add/codesnippet/cpp/p-system.security.crypto_9_1.cpp)]  \n  \n The following code example uses the Signature property to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[XMLDSIG - Signature - Detached#1](~/add/codesnippet/cpp/p-system.security.crypto_9_2.cpp)]\n [!code-cs[XMLDSIG - Signature - Detached#1](~/add/codesnippet/csharp/p-system.security.crypto_9_2.cs)]\n [!code-vb[XMLDSIG - Signature - Detached#1](~/add/codesnippet/visualbasic/p-system.security.crypto_9_2.vb)]"
  syntax:
    content: public System.Security.Cryptography.Xml.Signature Signature { get; }
    return:
      type: System.Security.Cryptography.Xml.Signature
      description: "<xref href=&quot;System.Security.Cryptography.Xml.Signature&quot;> </xref> 、現在のオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.Signature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator
  id: SignatureFormatValidator
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignatureFormatValidator
  nameWithType: SignedXml.SignatureFormatValidator
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML 署名の形式 (暗号のセキュリティではなく) を検証すると呼び出されるデリゲートを取得します。"
  remarks: "このメソッドは、特定の変換だけを使用するハッシュ アルゴリズム、およびように、署名を使用することを確認を使用できます。       プロパティを設定`null`からすべての署名形式の検証を削除、<xref:System.Security.Cryptography.Xml.SignedXml>オブジェクト</xref:System.Security.Cryptography.Xml.SignedXml>。       場合にも、オブジェクトの現在のデリゲートとそれにチェーンを読み取ることができます。       入力パラメーターとして指定するデリゲートを受け取ります形式検証コントロールを設定する場合、<xref:System.Security.Cryptography.Xml.SignedXml>検証されているオブジェクトの値を返すブール値 –`true`形式が使用できる場合、`false`されていない場合</xref:System.Security.Cryptography.Xml.SignedXml>。 デリゲートを返す場合`false`何らかの理由で、 <xref:System.Security.Cryptography.Xml.SignedXml>XML 署名が無効であるオブジェクトを報告します</xref:System.Security.Cryptography.Xml.SignedXml>。"
  syntax:
    content: public Func<System.Security.Cryptography.Xml.SignedXml,bool> SignatureFormatValidator { get; set; }
    return:
      type: System.Func{System.Security.Cryptography.Xml.SignedXml,System.Boolean}
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>形式が使用できる場合です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureLength
  id: SignatureLength
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignatureLength
  nameWithType: SignedXml.SignatureLength
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureLength
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在の署名の長さを取得<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  syntax:
    content: public string SignatureLength { get; }
    return:
      type: System.String
      description: "現在の署名の長さ<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.SignatureLength*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureMethod
  id: SignatureMethod
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignatureMethod
  nameWithType: SignedXml.SignatureMethod
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureMethod
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在の署名メソッドを取得<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  remarks: "SignatureMethod プロパティを表す、 `SignatureMethod`> プロパティ内に含まれる (Uniform Resource Identifier) 文字列を使用して、XML デジタル署名の要素。 `SignatureMethod`> 要素のサブ要素は、 `SignedInfo`> 要素。       SignatureMethod プロパティを使用して取得する、 `SignatureMethod`> URI を使用して、<xref:System.Security.Cryptography.Xml.SignedXml>オブジェクト</xref:System.Security.Cryptography.Xml.SignedXml>。 このプロパティは読み取り専用です。 プログラムでの URI を指定の詳細については、 `SignatureMethod`> 要素を参照してください、<xref:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod%2A>プロパティ</xref:System.Security.Cryptography.Xml.SignedInfo.SignatureMethod%2A>。       詳細については、`<SignatureMethod>`要素は www.w3.org/TR/xmldsig-core/ XMLDSIG の仕様を参照してください。"
  syntax:
    content: public string SignatureMethod { get; }
    return:
      type: System.String
      description: "現在の署名方法<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.SignatureMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureValue
  id: SignatureValue
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignatureValue
  nameWithType: SignedXml.SignatureValue
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureValue
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在の署名の値を取得<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  remarks: "SignatureValue プロパティを表す、 `SignatureValue`> プロパティ内に含まれるバイトの配列を使用して、XML デジタル署名の要素。  `SignatureValue`> 要素のサブ要素は、`Signature>`要素。       SignatureValue プロパティを使用して、XML デジタル署名の値を取得します。  呼び出しに成功すると、このプロパティが自動的に設定されます、<xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>メソッド</xref:System.Security.Cryptography.Xml.SignedXml.ComputeSignature%2A>。       詳細については、`<SignatureValue>`要素は www.w3.org/TR/xmldsig-core/ XMLDSIG の仕様を参照してください。"
  syntax:
    content: public byte[] SignatureValue { get; }
    return:
      type: System.Byte[]
      description: "現在の署名の値を格納するバイト配列<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.SignatureValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SignedInfo
  id: SignedInfo
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SignedInfo
  nameWithType: SignedXml.SignedInfo
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedInfo
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得、 <xref href=&quot;System.Security.Cryptography.Xml.SignedInfo&quot;> </xref> 、現在のオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  remarks: "SignedInfo プロパティを表す、 `SignedInfo`> プロパティ内に含まれるバイトの配列を使用して、XML デジタル署名の要素。  `SignedInfo`> 要素のサブ要素は、`Signature>`要素。       SignedInfo プロパティを使用して取得する、<xref:System.Security.Cryptography.Xml.SignedInfo>オブジェクトによって使用される、 <xref:System.Security.Cryptography.Xml.SignedXml>XML デジタル署名を作成するオブジェクト</xref:System.Security.Cryptography.Xml.SignedXml></xref:System.Security.Cryptography.Xml.SignedInfo>。       詳細については、`<SignedInfo>`要素は www.w3.org/TR/xmldsig-core/ XMLDSIG の仕様を参照してください。"
  syntax:
    content: public System.Security.Cryptography.Xml.SignedInfo SignedInfo { get; }
    return:
      type: System.Security.Cryptography.Xml.SignedInfo
      description: "<xref href=&quot;System.Security.Cryptography.Xml.SignedInfo&quot;> </xref> 、現在のオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.SignedInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SigningKey
  id: SigningKey
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SigningKey
  nameWithType: SignedXml.SigningKey
  fullName: System.Security.Cryptography.Xml.SignedXml.SigningKey
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定の署名に使用する非対称アルゴリズムのキー、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>オブジェクト。"
  remarks: "SigningKey プロパティを使用すると、XML デジタル署名の作成に使用する非対称キーを指定できます。"
  example:
  - "The following code example shows how to sign and verify an entire XML document using an enveloped signature.  \n  \n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/csharp/p-system.security.crypto_40_1.cs)]\n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/cpp/p-system.security.crypto_40_1.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Envelope#1](~/add/codesnippet/visualbasic/p-system.security.crypto_40_1.vb)]  \n  \n The following code example shows how to sign and verify a Uniform Resource Identifier (URI) addressable object using a detached signature.  \n  \n [!code-cpp[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/cpp/p-system.security.crypto_40_2.cpp)]\n [!code-vb[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/visualbasic/p-system.security.crypto_40_2.vb)]\n [!code-cs[System.Security.Cryptography.XML.SignedXml.ComputeSig-Check-AsymetricAlg-Detached#1](~/add/codesnippet/csharp/p-system.security.crypto_40_2.cs)]  \n  \n The following code example shows how to sign and verify a single element of an XML document using an enveloping signature.  \n  \n [!code-cpp[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/cpp/p-system.security.crypto_40_3.cpp)]\n [!code-cs[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/csharp/p-system.security.crypto_40_3.cs)]\n [!code-vb[Cryptography.XML.SignVerifyEnvelope - Specify Element#1](~/add/codesnippet/visualbasic/p-system.security.crypto_40_3.vb)]"
  syntax:
    content: public System.Security.Cryptography.AsymmetricAlgorithm SigningKey { get; set; }
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "署名に使用する非対称アルゴリズムのキー、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.SigningKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.SigningKeyName
  id: SigningKeyName
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: SigningKeyName
  nameWithType: SignedXml.SigningKeyName
  fullName: System.Security.Cryptography.Xml.SignedXml.SigningKeyName
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定の署名に使用するインストールされているキーの名前、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>オブジェクト。"
  syntax:
    content: public string SigningKeyName { get; set; }
    return:
      type: System.String
      description: "署名に使用するインストールされているキーの名前、 <xref href=&quot;System.Security.Cryptography.Xml.SignedXml&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.SignedXml.SigningKeyName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl
  id: XmlDecryptionTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDecryptionTransformUrl
  nameWithType: SignedXml.XmlDecryptionTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML モード復号化変換の統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDecryptionTransformUrl フィールドの値は、&quot;http://www.w3.org/2002/07/decrypt#XML&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細については、http://www.w3.org/2002/07/decrypt#XML に World Wide Web Consortium (W3C) 仕様を参照してください。"
  syntax:
    content: public const string XmlDecryptionTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl
  id: XmlDsigBase64TransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigBase64TransformUrl
  nameWithType: SignedXml.XmlDsigBase64TransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "Base 64 変換の統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigBase64TransformUrl フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#base64&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform>XmlDsigBase64TransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform>。       詳細については、http://www.w3.org/2000/09/xmldsig#base64 に World Wide Web Consortium (W3C) 仕様を参照してください。"
  example:
  - "The following code example demonstrates how to use members of the <xref:System.Security.Cryptography.Xml.XmlDsigBase64Transform> class.  \n  \n [!code-cs[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/add/codesnippet/csharp/f-system.security.crypto_0_1.cs)]\n [!code-vb[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/add/codesnippet/visualbasic/f-system.security.crypto_0_1.vb)]\n [!code-cpp[System.Security.Cryptography.Xml.XmlDsigBase64Transform#2](~/add/codesnippet/cpp/f-system.security.crypto_0_1.cpp)]"
  syntax:
    content: public const string XmlDsigBase64TransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl
  id: XmlDsigC14NTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigC14NTransformUrl
  nameWithType: SignedXml.XmlDsigC14NTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "Uniform Resource Identifier () の標準的な XML 変換を表します。 このフィールドは定数です。"
  remarks: "XmlDsigC14NTransformUrl フィールドの値は、&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>XmlDsigC14NTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>。       詳細については、http://www.w3.org/TR/2001/REC-xml-c14n-20010315 に World Wide Web Consortium (W3C) 仕様を参照してください。       このフィールドと同じ値には、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>フィールド</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl>。"
  example:
  - "The following code example demonstrates how to call members of the <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform> class.  \n  \n [!code-cpp[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/add/codesnippet/cpp/f-system.security.crypto_4_1.cpp)]\n [!code-cs[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/add/codesnippet/csharp/f-system.security.crypto_4_1.cs)]\n [!code-vb[System.Security.Cryptography.XML.XMLDsigC14NTransform#2](~/add/codesnippet/visualbasic/f-system.security.crypto_4_1.vb)]"
  syntax:
    content: public const string XmlDsigC14NTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl
  id: XmlDsigC14NWithCommentsTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigC14NWithCommentsTransformUrl
  nameWithType: SignedXml.XmlDsigC14NWithCommentsTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "コメントで、標準的な XML 変換の統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigC14NWithCommentsTransformUrl フィールドの値は、&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>XmlDsigC14NWithCommentsTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>。       詳細については、http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments に World Wide Web Consortium (W3C) 仕様を参照してください。       このフィールドと同じ値には、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>フィールド</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl>。"
  syntax:
    content: public const string XmlDsigC14NWithCommentsTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl
  id: XmlDsigCanonicalizationUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigCanonicalizationUrl
  nameWithType: SignedXml.XmlDsigCanonicalizationUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML デジタル署名の標準の正規化アルゴリズムを統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigCanonicalizationUrl フィールドの値は、&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>XmlDsigCanonicalizationUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigC14NTransform>。       詳細については、http://www.w3.org/TR/2001/REC-xml-c14n-20010315 に World Wide Web Consortium (W3C) 仕様を参照してください。       このフィールドと同じ値には、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>フィールド</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl>。"
  syntax:
    content: public const string XmlDsigCanonicalizationUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl
  id: XmlDsigCanonicalizationWithCommentsUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigCanonicalizationWithCommentsUrl
  nameWithType: SignedXml.XmlDsigCanonicalizationWithCommentsUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML デジタル署名の標準の正規化アルゴリズムを統一リソース識別子 (URI) を表し、コメントが含まれています。 このフィールドは定数です。"
  remarks: "XmlDsigCanonicalizationWithCommentsUrl フィールドの値は、&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>XmlDsigCanonicalizationWithCommentsUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform>。       詳細については、http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments に World Wide Web Consortium (W3C) 仕様を参照してください。       このフィールドと同じ値には、<xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>フィールド</xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl>。"
  syntax:
    content: public const string XmlDsigCanonicalizationWithCommentsUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl
  id: XmlDsigDSAUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigDSAUrl
  nameWithType: SignedXml.XmlDsigDSAUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "標準の統一リソース識別子 (URI) を表す<xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref> XML デジタル署名するためのアルゴリズムです。 このフィールドは定数です。"
  remarks: "XmlDsigDSAUrl フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#dsa-sha1&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細については、http://www.w3.org/2000/09/xmldsig#dsa-sha1 に World Wide Web Consortium (W3C) 仕様を参照してください。"
  syntax:
    content: public const string XmlDsigDSAUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl
  id: XmlDsigEnvelopedSignatureTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigEnvelopedSignatureTransformUrl
  nameWithType: SignedXml.XmlDsigEnvelopedSignatureTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "エンベロープ署名変換の統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigEnvelopedSignatureTransformUrl フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>XmlDsigEnvelopedSignatureTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform>。       詳細については、http://www.w3.org/2000/09/xmldsig#enveloped-signature に World Wide Web Consortium (W3C) 仕様を参照してください。"
  example:
  - "The following code example demonstrates how to use members of the <xref:System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform> class.  \n  \n [!code-cs[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/add/codesnippet/csharp/62dc9f7e-cdc8-4569-bf73-_1.cs)]\n [!code-cpp[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/add/codesnippet/cpp/62dc9f7e-cdc8-4569-bf73-_1.cpp)]\n [!code-vb[System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2](~/add/codesnippet/visualbasic/62dc9f7e-cdc8-4569-bf73-_1.vb)]"
  syntax:
    content: public const string XmlDsigEnvelopedSignatureTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl
  id: XmlDsigExcC14NTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigExcC14NTransformUrl
  nameWithType: SignedXml.XmlDsigExcC14NTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "排他的 XML 正規化の統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigExcC14NTransformUrl フィールドの値は、&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform>XmlDsigExcC14NTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform>。       詳細については、http://www.w3.org/2001/10/xml-exc-c14n# に World Wide Web Consortium (W3C) 仕様を参照してください。"
  example:
  - "The following code example shows how to sign and verify an XML document using the <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NTransform> class.  This sample creates an envelope signature.  \n  \n [!code-cs[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/add/codesnippet/csharp/f-system.security.crypto_9_1.cs)]\n [!code-cpp[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/add/codesnippet/cpp/f-system.security.crypto_9_1.cpp)]\n [!code-vb[Cryptography.Xml.XmlDsigExcC14NTransform#1](~/add/codesnippet/visualbasic/f-system.security.crypto_9_1.vb)]"
  syntax:
    content: public const string XmlDsigExcC14NTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl
  id: XmlDsigExcC14NWithCommentsTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigExcC14NWithCommentsTransformUrl
  nameWithType: SignedXml.XmlDsigExcC14NWithCommentsTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "コメント付きの排他的 XML 正規化の統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigExcC14NWithCommentsTransformUrl フィールドの値は、&quot;http://www.w3.org/2001/10/xml-exc-c14n#WithComments&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform>XmlDsigExcC14NWithCommentsTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform>。       詳細については、http://www.w3.org/2001/10/xml-exc-c14n#WithComments に World Wide Web Consortium (W3C) 仕様を参照してください。"
  example:
  - "The following code example shows how to sign and verify an XML document using the <xref:System.Security.Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform> class.  This sample creates an envelope signature.  \n  \n [!code-cs[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/add/codesnippet/csharp/15045a8f-c740-45e0-8c9c-_1.cs)]\n [!code-cpp[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/add/codesnippet/cpp/15045a8f-c740-45e0-8c9c-_1.cpp)]\n [!code-vb[Cryptography.Xml.XmlDsigExcC14NWithCommentsTransform#1](~/add/codesnippet/visualbasic/15045a8f-c740-45e0-8c9c-_1.vb)]"
  syntax:
    content: public const string XmlDsigExcC14NWithCommentsTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url
  id: XmlDsigHMACSHA1Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigHMACSHA1Url
  nameWithType: SignedXml.XmlDsigHMACSHA1Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "標準の統一リソース識別子 (URI) を表す<xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> XML デジタル署名するためのアルゴリズムです。 このフィールドは定数です。"
  remarks: "XmlDsigHMACSHA1Url フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#hmac-sha1&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細については、http://www.w3.org/2000/09/xmldsig#hmac-sha1 に World Wide Web Consortium (W3C) 仕様を参照してください。"
  syntax:
    content: public const string XmlDsigHMACSHA1Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl
  id: XmlDsigMinimalCanonicalizationUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigMinimalCanonicalizationUrl
  nameWithType: SignedXml.XmlDsigMinimalCanonicalizationUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML デジタル署名の標準の最小の正規化アルゴリズムを統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigMinimalCanonicalizationUrl フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#minimal&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細については、http://www.w3.org/2000/09/xmldsig#minimal で World Wide Web Consortium (W3C) 仕様を参照してください。"
  syntax:
    content: public const string XmlDsigMinimalCanonicalizationUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl
  id: XmlDsigNamespaceUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigNamespaceUrl
  nameWithType: SignedXml.XmlDsigNamespaceUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML デジタル署名の標準の名前空間の Uniform リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigNamespaceUrl フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細については、http://www.w3.org/2000/09/xmldsig# に World Wide Web Consortium (W3C) 仕様を参照してください。"
  syntax:
    content: public const string XmlDsigNamespaceUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url
  id: XmlDsigRSASHA1Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigRSASHA1Url
  nameWithType: SignedXml.XmlDsigRSASHA1Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "標準の統一リソース識別子 (URI) を表す<xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> XML デジタル署名の署名方法です。 このフィールドは定数です。"
  remarks: "XmlDsigRSASHA1Url フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細については、http://www.w3.org/2000/09/xmldsig#rsa-sha1 に World Wide Web Consortium (W3C) 仕様を参照してください。"
  syntax:
    content: public const string XmlDsigRSASHA1Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url
  id: XmlDsigRSASHA256Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigRSASHA256Url
  nameWithType: SignedXml.XmlDsigRSASHA256Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "統一リソース識別子 (URI) を表す、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> XML デジタル署名の SHA&256; 署名メソッド バリエーションです。 このフィールドは定数です。"
  remarks: "XmlDsigRSASHA256Url フィールドの値は、&quot;http://www.w3.org/2001/04/xmldsig-more#rsa-sha256&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細についてにある World Wide Web Consortium (W3C) 仕様を参照して[http://www.w3.org/2001/04/xmldsig-more#rsa-sha256](http://www.w3.org/2001/04/xmldsig-more)です。"
  syntax:
    content: public const string XmlDsigRSASHA256Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url
  id: XmlDsigRSASHA384Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigRSASHA384Url
  nameWithType: SignedXml.XmlDsigRSASHA384Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "統一リソース識別子 (URI) を表す、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> XML デジタル署名のため、sha-384 署名メソッド バリエーションです。 このフィールドは定数です。"
  remarks: "XmlDsigRSASHA384Url フィールドの値は、&quot;http://www.w3.org/2001/04/xmldsig-more#rsa-sha384&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細についてにある World Wide Web Consortium (W3C) 仕様を参照して[http://www.w3.org/2001/04/xmldsig-more#rsa-sha384](http://www.w3.org/2001/04/xmldsig-more#rsa-sha384)です。"
  syntax:
    content: public const string XmlDsigRSASHA384Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url
  id: XmlDsigRSASHA512Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigRSASHA512Url
  nameWithType: SignedXml.XmlDsigRSASHA512Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "統一リソース識別子 (URI) を表す、 <xref href=&quot;System.Security.Cryptography.RSA&quot;> </xref> sha-512 署名メソッド バリエーションの&1; つの XML デジタル署名します。 このフィールドは定数です。"
  remarks: "XmlDsigRSASHA512Url フィールドの値は、&quot;http://www.w3.org/2001/04/xmldsig-more#rsa-sha512&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細についてにある World Wide Web Consortium (W3C) 仕様を参照して[http://www.w3.org/2001/04/xmldsig-more#rsa-sha512](http://www.w3.org/2001/04/xmldsig-more#rsa-sha512)です。"
  syntax:
    content: public const string XmlDsigRSASHA512Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url
  id: XmlDsigSHA1Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigSHA1Url
  nameWithType: SignedXml.XmlDsigSHA1Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "標準の統一リソース識別子 (URI) を表す<xref href=&quot;System.Security.Cryptography.SHA1&quot;></xref>ダイジェスト XML デジタル署名のためのメソッドです。 このフィールドは定数です。"
  remarks: "XmlDsigSHA1Url フィールドの値は、&quot;http://www.w3.org/2000/09/xmldsig#sha1&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細については、http://www.w3.org/2000/09/xmldsig#sha1 で World Wide Web Consortium (W3C) 仕様を参照してください。"
  syntax:
    content: public const string XmlDsigSHA1Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url
  id: XmlDsigSHA256Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigSHA256Url
  nameWithType: SignedXml.XmlDsigSHA256Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "標準の統一リソース識別子 (URI) を表す<xref href=&quot;System.Security.Cryptography.SHA256&quot;></xref>ダイジェスト XML デジタル署名のためのメソッドです。 このフィールドは定数です。"
  remarks: "XmlDsigSHA256Url フィールドの値は、&quot;http://www.w3.org/2001/04/xmlenc#sha256&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細についてにある World Wide Web Consortium (W3C) 仕様を参照して[http://www.w3.org/2001/04/xmlenc#sha256](http://www.w3.org/2001/04/xmlenc#sha256)です。"
  syntax:
    content: public const string XmlDsigSHA256Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url
  id: XmlDsigSHA384Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigSHA384Url
  nameWithType: SignedXml.XmlDsigSHA384Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "標準の統一リソース識別子 (URI) を表す<xref href=&quot;System.Security.Cryptography.SHA384&quot;></xref>ダイジェスト XML デジタル署名のためのメソッドです。 このフィールドは定数です。"
  remarks: "XmlDsigSHA384Url フィールドの値は、&quot;http://www.w3.org/2001/04/xmldsig-more#sha384&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細についてにある World Wide Web Consortium (W3C) 仕様を参照して[http://www.w3.org/2001/04/xmldsig-more#sha384](http://www.w3.org/2001/04/xmldsig-more#sha384)です。"
  syntax:
    content: public const string XmlDsigSHA384Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url
  id: XmlDsigSHA512Url
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigSHA512Url
  nameWithType: SignedXml.XmlDsigSHA512Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "標準の統一リソース識別子 (URI) を表す<xref href=&quot;System.Security.Cryptography.SHA512&quot;></xref>ダイジェスト XML デジタル署名のためのメソッドです。 このフィールドは定数です。"
  remarks: "XmlDsigSHA512Url フィールドの値は、&quot;http://www.w3.org/2001/04/xmlenc#sha512&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       詳細についてにある World Wide Web Consortium (W3C) 仕様を参照して[http://www.w3.org/2001/04/xmlenc#sha512](http://www.w3.org/2001/04/xmlenc#sha512)です。"
  syntax:
    content: public const string XmlDsigSHA512Url;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl
  id: XmlDsigXPathTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigXPathTransformUrl
  nameWithType: SignedXml.XmlDsigXPathTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XML パス言語 (XPath) の Uniform Resource Identifier (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigXPathTransformUrl フィールドの値は、&quot;http://www.w3.org/TR/1999/REC-xpath-19991116&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform>XmlDsigXPathTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform>。       詳細については、http://www.w3.org/TR/1999/REC-xpath-19991116 に World Wide Web Consortium (W3C) 仕様を参照してください。"
  example:
  - "The following code example demonstrates how to call members of the <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform> class.  \n  \n [!code-vb[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/add/codesnippet/visualbasic/f-system.security.crypto_1_1.vb)]\n [!code-cs[System.Security.Cryptography.Xml.XmlDsigXPathTransform#2](~/add/codesnippet/csharp/f-system.security.crypto_1_1.cs)]"
  syntax:
    content: public const string XmlDsigXPathTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl
  id: XmlDsigXsltTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlDsigXsltTransformUrl
  nameWithType: SignedXml.XmlDsigXsltTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "XSLT 変換の統一リソース識別子 (URI) を表します。 このフィールドは定数です。"
  remarks: "XmlDsigXsltTransformUrl フィールドの値は、&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot;です。       このフィールドを使用して、XMLDSIG 用の要素の URI 属性のいずれかに値を提供します。       <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform>XmlDsigXsltTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform>。       詳細については、http://www.w3.org/TR/1999/REC-xslt-19991116 に World Wide Web Consortium (W3C) 仕様を参照してください。"
  example:
  - "The following code example demonstrates how to use members of the <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> class.  \n  \n [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/add/codesnippet/cpp/f-system.security.crypto_3_1.cpp)]\n [!code-cs[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/add/codesnippet/csharp/f-system.security.crypto_3_1.cs)]\n [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/add/codesnippet/visualbasic/f-system.security.crypto_3_1.vb)]"
  syntax:
    content: public const string XmlDsigXsltTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl
  id: XmlLicenseTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  langs:
  - csharp
  name: XmlLicenseTransformUrl
  nameWithType: SignedXml.XmlLicenseTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl
  type: Field
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "署名の XrML ライセンスに正規化するためのライセンス変換アルゴリズムの統一リソース識別子 (URI) を表します。"
  remarks: "XmlLicenseTransformUrl フィールドの値は、&quot;urn: mpeg:mpeg21:2003:01-REL-R-NS:licenseTransform&quot;XMLDSIG 用の要素の URI 属性のいずれかに値を提供するこのフィールドを使用します。       <xref:System.Security.Cryptography.Xml.XmlLicenseTransform>XmlLicenseTransformUrl フィールドで説明されている変換を実装するクラス</xref:System.Security.Cryptography.Xml.XmlLicenseTransform>。"
  syntax:
    content: public const string XmlLicenseTransformUrl;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.Xml.SignedXml.#ctor
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignedXml()
  nameWithType: SignedXml.SignedXml()
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedXml()
- uid: System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlDocument)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignedXml(XmlDocument)
  nameWithType: SignedXml.SignedXml(XmlDocument)
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedXml(XmlDocument)
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Security.Cryptography.Xml.SignedXml.#ctor(System.Xml.XmlElement)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignedXml(XmlElement)
  nameWithType: SignedXml.SignedXml(XmlElement)
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedXml(XmlElement)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Security.Cryptography.Xml.SignedXml.AddObject(System.Security.Cryptography.Xml.DataObject)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: AddObject(DataObject)
  nameWithType: SignedXml.AddObject(DataObject)
  fullName: System.Security.Cryptography.Xml.SignedXml.AddObject(DataObject)
- uid: System.Security.Cryptography.Xml.DataObject
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: DataObject
  nameWithType: DataObject
  fullName: System.Security.Cryptography.Xml.DataObject
- uid: System.Security.Cryptography.Xml.SignedXml.AddReference(System.Security.Cryptography.Xml.Reference)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: AddReference(Reference)
  nameWithType: SignedXml.AddReference(Reference)
  fullName: System.Security.Cryptography.Xml.SignedXml.AddReference(Reference)
- uid: System.Security.Cryptography.Xml.Reference
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: Reference
  nameWithType: Reference
  fullName: System.Security.Cryptography.Xml.Reference
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: CheckSignature()
  nameWithType: SignedXml.CheckSignature()
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.AsymmetricAlgorithm)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: CheckSignature(AsymmetricAlgorithm)
  nameWithType: SignedXml.CheckSignature(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: CheckSignature(KeyedHashAlgorithm)
  nameWithType: SignedXml.CheckSignature(KeyedHashAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature(KeyedHashAlgorithm)
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: CheckSignature(X509Certificate2,Boolean)
  nameWithType: SignedXml.CheckSignature(X509Certificate2,Boolean)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignature(X509Certificate2,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(System.Security.Cryptography.AsymmetricAlgorithm@)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: CheckSignatureReturningKey(AsymmetricAlgorithm)
  nameWithType: SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey(AsymmetricAlgorithm)
- uid: System.Security.Cryptography.Xml.SignedXml.ComputeSignature
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: ComputeSignature()
  nameWithType: SignedXml.ComputeSignature()
  fullName: System.Security.Cryptography.Xml.SignedXml.ComputeSignature()
- uid: System.Security.Cryptography.Xml.SignedXml.ComputeSignature(System.Security.Cryptography.KeyedHashAlgorithm)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: ComputeSignature(KeyedHashAlgorithm)
  nameWithType: SignedXml.ComputeSignature(KeyedHashAlgorithm)
  fullName: System.Security.Cryptography.Xml.SignedXml.ComputeSignature(KeyedHashAlgorithm)
- uid: System.Security.Cryptography.Xml.SignedXml.EncryptedXml
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: EncryptedXml
  nameWithType: SignedXml.EncryptedXml
  fullName: System.Security.Cryptography.Xml.SignedXml.EncryptedXml
- uid: System.Security.Cryptography.Xml.EncryptedXml
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: EncryptedXml
  nameWithType: EncryptedXml
  fullName: System.Security.Cryptography.Xml.EncryptedXml
- uid: System.Security.Cryptography.Xml.SignedXml.GetIdElement(System.Xml.XmlDocument,System.String)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: GetIdElement(XmlDocument,String)
  nameWithType: SignedXml.GetIdElement(XmlDocument,String)
  fullName: System.Security.Cryptography.Xml.SignedXml.GetIdElement(XmlDocument,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.Xml.SignedXml.GetPublicKey
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: GetPublicKey()
  nameWithType: SignedXml.GetPublicKey()
  fullName: System.Security.Cryptography.Xml.SignedXml.GetPublicKey()
- uid: System.Security.Cryptography.Xml.SignedXml.GetXml
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: GetXml()
  nameWithType: SignedXml.GetXml()
  fullName: System.Security.Cryptography.Xml.SignedXml.GetXml()
- uid: System.Security.Cryptography.Xml.SignedXml.KeyInfo
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: KeyInfo
  nameWithType: SignedXml.KeyInfo
  fullName: System.Security.Cryptography.Xml.SignedXml.KeyInfo
- uid: System.Security.Cryptography.Xml.KeyInfo
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: KeyInfo
  nameWithType: KeyInfo
  fullName: System.Security.Cryptography.Xml.KeyInfo
- uid: System.Security.Cryptography.Xml.SignedXml.LoadXml(System.Xml.XmlElement)
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: LoadXml(XmlElement)
  nameWithType: SignedXml.LoadXml(XmlElement)
  fullName: System.Security.Cryptography.Xml.SignedXml.LoadXml(XmlElement)
- uid: System.Security.Cryptography.Xml.SignedXml.m_signature
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: m_signature
  nameWithType: SignedXml.m_signature
  fullName: System.Security.Cryptography.Xml.SignedXml.m_signature
- uid: System.Security.Cryptography.Xml.Signature
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: Signature
  nameWithType: Signature
  fullName: System.Security.Cryptography.Xml.Signature
- uid: System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: m_strSigningKeyName
  nameWithType: SignedXml.m_strSigningKeyName
  fullName: System.Security.Cryptography.Xml.SignedXml.m_strSigningKeyName
- uid: System.Security.Cryptography.Xml.SignedXml.Resolver
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: Resolver
  nameWithType: SignedXml.Resolver
  fullName: System.Security.Cryptography.Xml.SignedXml.Resolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SafeCanonicalizationMethods
  nameWithType: SignedXml.SafeCanonicalizationMethods
  fullName: System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods
- uid: System.Collections.ObjectModel.Collection{System.String}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<String>
  nameWithType: Collection<String>
  fullName: System.Collections.ObjectModel.Collection<System.String>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.Xml.SignedXml.Signature
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: Signature
  nameWithType: SignedXml.Signature
  fullName: System.Security.Cryptography.Xml.SignedXml.Signature
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureFormatValidator
  nameWithType: SignedXml.SignatureFormatValidator
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator
- uid: System.Func{System.Security.Cryptography.Xml.SignedXml,System.Boolean}
  parent: System
  isExternal: true
  name: Func<SignedXml,Boolean>
  nameWithType: Func<SignedXml,Boolean>
  fullName: System.Func<System.Security.Cryptography.Xml.SignedXml,System.Boolean>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Security.Cryptography.Xml.SignedXml,System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.Xml.SignedXml
    name: SignedXml
    nameWithType: SignedXml
    fullName: SignedXml
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureLength
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureLength
  nameWithType: SignedXml.SignatureLength
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureLength
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureMethod
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureMethod
  nameWithType: SignedXml.SignatureMethod
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureMethod
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureValue
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureValue
  nameWithType: SignedXml.SignatureValue
  fullName: System.Security.Cryptography.Xml.SignedXml.SignatureValue
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Xml.SignedXml.SignedInfo
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignedInfo
  nameWithType: SignedXml.SignedInfo
  fullName: System.Security.Cryptography.Xml.SignedXml.SignedInfo
- uid: System.Security.Cryptography.Xml.SignedInfo
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: SignedInfo
  nameWithType: SignedInfo
  fullName: System.Security.Cryptography.Xml.SignedInfo
- uid: System.Security.Cryptography.Xml.SignedXml.SigningKey
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SigningKey
  nameWithType: SignedXml.SigningKey
  fullName: System.Security.Cryptography.Xml.SignedXml.SigningKey
- uid: System.Security.Cryptography.Xml.SignedXml.SigningKeyName
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SigningKeyName
  nameWithType: SignedXml.SigningKeyName
  fullName: System.Security.Cryptography.Xml.SignedXml.SigningKeyName
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDecryptionTransformUrl
  nameWithType: SignedXml.XmlDecryptionTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDecryptionTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigBase64TransformUrl
  nameWithType: SignedXml.XmlDsigBase64TransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigBase64TransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigC14NTransformUrl
  nameWithType: SignedXml.XmlDsigC14NTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigC14NWithCommentsTransformUrl
  nameWithType: SignedXml.XmlDsigC14NWithCommentsTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NWithCommentsTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigCanonicalizationUrl
  nameWithType: SignedXml.XmlDsigCanonicalizationUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigCanonicalizationWithCommentsUrl
  nameWithType: SignedXml.XmlDsigCanonicalizationWithCommentsUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationWithCommentsUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigDSAUrl
  nameWithType: SignedXml.XmlDsigDSAUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigDSAUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigEnvelopedSignatureTransformUrl
  nameWithType: SignedXml.XmlDsigEnvelopedSignatureTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigEnvelopedSignatureTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigExcC14NTransformUrl
  nameWithType: SignedXml.XmlDsigExcC14NTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigExcC14NWithCommentsTransformUrl
  nameWithType: SignedXml.XmlDsigExcC14NWithCommentsTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigExcC14NWithCommentsTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigHMACSHA1Url
  nameWithType: SignedXml.XmlDsigHMACSHA1Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigHMACSHA1Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigMinimalCanonicalizationUrl
  nameWithType: SignedXml.XmlDsigMinimalCanonicalizationUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigMinimalCanonicalizationUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigNamespaceUrl
  nameWithType: SignedXml.XmlDsigNamespaceUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigNamespaceUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigRSASHA1Url
  nameWithType: SignedXml.XmlDsigRSASHA1Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA1Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigRSASHA256Url
  nameWithType: SignedXml.XmlDsigRSASHA256Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA256Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigRSASHA384Url
  nameWithType: SignedXml.XmlDsigRSASHA384Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA384Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigRSASHA512Url
  nameWithType: SignedXml.XmlDsigRSASHA512Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigRSASHA512Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigSHA1Url
  nameWithType: SignedXml.XmlDsigSHA1Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA1Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigSHA256Url
  nameWithType: SignedXml.XmlDsigSHA256Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA256Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigSHA384Url
  nameWithType: SignedXml.XmlDsigSHA384Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA384Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigSHA512Url
  nameWithType: SignedXml.XmlDsigSHA512Url
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigSHA512Url
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigXPathTransformUrl
  nameWithType: SignedXml.XmlDsigXPathTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigXPathTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlDsigXsltTransformUrl
  nameWithType: SignedXml.XmlDsigXsltTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: XmlLicenseTransformUrl
  nameWithType: SignedXml.XmlLicenseTransformUrl
  fullName: System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl
- uid: System.Security.Cryptography.Xml.SignedXml.#ctor*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignedXml
  nameWithType: SignedXml.SignedXml
- uid: System.Security.Cryptography.Xml.SignedXml.AddObject*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: AddObject
  nameWithType: SignedXml.AddObject
- uid: System.Security.Cryptography.Xml.SignedXml.AddReference*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: AddReference
  nameWithType: SignedXml.AddReference
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignature*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: CheckSignature
  nameWithType: SignedXml.CheckSignature
- uid: System.Security.Cryptography.Xml.SignedXml.CheckSignatureReturningKey*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: CheckSignatureReturningKey
  nameWithType: SignedXml.CheckSignatureReturningKey
- uid: System.Security.Cryptography.Xml.SignedXml.ComputeSignature*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: ComputeSignature
  nameWithType: SignedXml.ComputeSignature
- uid: System.Security.Cryptography.Xml.SignedXml.EncryptedXml*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: EncryptedXml
  nameWithType: SignedXml.EncryptedXml
- uid: System.Security.Cryptography.Xml.SignedXml.GetIdElement*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: GetIdElement
  nameWithType: SignedXml.GetIdElement
- uid: System.Security.Cryptography.Xml.SignedXml.GetPublicKey*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: GetPublicKey
  nameWithType: SignedXml.GetPublicKey
- uid: System.Security.Cryptography.Xml.SignedXml.GetXml*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: GetXml
  nameWithType: SignedXml.GetXml
- uid: System.Security.Cryptography.Xml.SignedXml.KeyInfo*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: KeyInfo
  nameWithType: SignedXml.KeyInfo
- uid: System.Security.Cryptography.Xml.SignedXml.LoadXml*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: LoadXml
  nameWithType: SignedXml.LoadXml
- uid: System.Security.Cryptography.Xml.SignedXml.Resolver*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: Resolver
  nameWithType: SignedXml.Resolver
- uid: System.Security.Cryptography.Xml.SignedXml.SafeCanonicalizationMethods*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SafeCanonicalizationMethods
  nameWithType: SignedXml.SafeCanonicalizationMethods
- uid: System.Security.Cryptography.Xml.SignedXml.Signature*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: Signature
  nameWithType: SignedXml.Signature
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureFormatValidator*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureFormatValidator
  nameWithType: SignedXml.SignatureFormatValidator
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureLength*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureLength
  nameWithType: SignedXml.SignatureLength
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureMethod*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureMethod
  nameWithType: SignedXml.SignatureMethod
- uid: System.Security.Cryptography.Xml.SignedXml.SignatureValue*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignatureValue
  nameWithType: SignedXml.SignatureValue
- uid: System.Security.Cryptography.Xml.SignedXml.SignedInfo*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SignedInfo
  nameWithType: SignedXml.SignedInfo
- uid: System.Security.Cryptography.Xml.SignedXml.SigningKey*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SigningKey
  nameWithType: SignedXml.SigningKey
- uid: System.Security.Cryptography.Xml.SignedXml.SigningKeyName*
  parent: System.Security.Cryptography.Xml.SignedXml
  isExternal: false
  name: SigningKeyName
  nameWithType: SignedXml.SigningKeyName
