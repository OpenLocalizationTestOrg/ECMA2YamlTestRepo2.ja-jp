### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Interaction
  id: Interaction
  children:
  - Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  - Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  - Microsoft.VisualBasic.Interaction.Beep
  - Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  - Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  - Microsoft.VisualBasic.Interaction.Command
  - Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  - Microsoft.VisualBasic.Interaction.Environ(System.String)
  - Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  - Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  - Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  - Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  - Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  langs:
  - csharp
  name: Interaction
  nameWithType: Interaction
  fullName: Microsoft.VisualBasic.Interaction
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Interaction&quot; name=&quot;Interaction&quot; href=&quot;&quot;> </xref>モジュールには、オブジェクト、アプリケーション、およびシステムと対話するための手順が含まれています。"
  remarks: "このモジュールは、Visual Basic 言語キーワードおよびその他のプログラムを実行、メソッドまたはプロパティの呼び出し、コンピューターのビープ音、コマンドライン文字列の入力、COM オブジェクトを操作およびダイアログ ボックスの制御、ランタイム ライブラリ メンバーをサポートします。"
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n```  \nDim procID As Integer  \n' Run calculator.  \nprocID = Shell(\"C:\\Windows\\system32\\calc.exe\", AppWinStyle.NormalFocus)  \n' The preceding path is for Windows XP.  \n' The Windows 2000 path is C:\\WINNT\\system32\\calc.exe.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Interaction
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  id: AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "既に実行されているアプリケーションをアクティブにします。"
  remarks: "使用する`AppActivate`にアプリケーションのアクティブ ウィンドウにフォーカスを取り込みます。 ハンドルまたはアクティブなウィンドウへの参照がありませんか特定の時点で、どのウィンドウがアクティブに気付いて可能性があります。 このような場合は、使用することはできません、<xref:System.Windows.Forms.Control.Focus%2A>メソッド</xref:System.Windows.Forms.Control.Focus%2A>。       `AppActivate`関数は、名前付きアプリケーションまたはウィンドウにフォーカスしますが、最大化または最小化するかどうかは影響しません。 ユーザーがいくつかの操作にフォーカスを変更したり、ウィンドウを閉じるときに、フォーカスはアクティブ化されたアプリケーション ウィンドウから移動します。 使用することができます、`Shell`アプリケーションを起動し、ウィンドウのスタイルを設定する関数。       使用する場合、`Title`パラメーター、`AppActivate`大文字と小文字を使用しますが、それ以外の場合、タイトル バーの内容と正確に一致が必要です。 また、最上位レベルの windows を使用し、子ウィンドウをまず検索します。 一致が見つからない場合<xref:System.ArgumentException>。</xref:System.ArgumentException>がスローされます。       使用することができます`AppActivate`のみの windows を所有するプロセスです。 ほとんどのコンソール アプリケーションでは、プロセスの一覧に表示されませんが、windows を所有していない`AppActivate`ものを検索します。 コンソール アプリケーションから実行すると、システムは、アプリケーションを実行する別のプロセスを作成し、コンソール プロセスに出力を返します。 その結果、現在のプロセス ID を要求するときに取得するコンソール アプリケーションのプロセス ID ではなく、この個別のプロセスのプロセス ID       実行時に、`AppActivate`関数と一致するタイトル付きの実行中のアプリケーションをアクティブに`Title`または一致するプロセス ID を持つ`ProcessId`します。 完全一致がない場合のタイトル文字列で終わるすべてのアプリケーションがアクティブ化`Title`です。 という名前の複数のアプリケーションがあるかどうかは`Title`、`AppActivate`関数が任意にアクティブ化する&1; つを選択します。      > [!NOTE] >、`AppActivate`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow>レベルで、部分的に信頼された状況での実行に影響を与える可能性があります</xref:System.Security.Permissions.UIPermissionWindow>。 詳細については、 <xref:System.Security.Permissions.UIPermission>。</xref:System.Security.Permissions.UIPermission>を参照してください。"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._135_1.vb)]"
  syntax:
    content: public static void AppActivate (int ProcessId);
    parameters:
    - id: ProcessId
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>このプロセスに割り当てられている Win32 プロセス ID 番号を指定します。 によって返される ID を使用することができます、 <xref:Microsoft.VisualBasic.Interaction.Shell*>、提供された&0; ではありません</xref:Microsoft.VisualBasic.Interaction.Shell*>。"
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  id: AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "既に実行されているアプリケーションをアクティブにします。"
  remarks: "使用する`AppActivate`にアプリケーションのアクティブ ウィンドウにフォーカスを取り込みます。 ハンドルまたはアクティブなウィンドウへの参照がありませんか特定の時点で、どのウィンドウがアクティブに気付いて可能性があります。 このような場合は、使用することはできません、<xref:System.Windows.Forms.Control.Focus%2A>メソッド</xref:System.Windows.Forms.Control.Focus%2A>。       `AppActivate`関数は、名前付きアプリケーションまたはウィンドウにフォーカスしますが、最大化または最小化するかどうかは影響しません。 ユーザーがいくつかの操作にフォーカスを変更したり、ウィンドウを閉じるときに、フォーカスはアクティブ化されたアプリケーション ウィンドウから移動します。 使用することができます、`Shell`アプリケーションを起動し、ウィンドウのスタイルを設定する関数。       使用する場合、`Title`パラメーター、`AppActivate`大文字と小文字を使用しますが、それ以外の場合、タイトル バーの内容と正確に一致が必要です。 また、最上位レベルの windows を使用し、子ウィンドウをまず検索します。 一致が見つからない場合<xref:System.ArgumentException>。</xref:System.ArgumentException>がスローされます。       使用することができます`AppActivate`のみの windows を所有するプロセスです。 ほとんどのコンソール アプリケーションでは、プロセスの一覧に表示されませんが、windows を所有していない`AppActivate`ものを検索します。 コンソール アプリケーションから実行すると、システムは、アプリケーションを実行する別のプロセスを作成し、コンソール プロセスに出力を返します。 その結果、現在のプロセス ID を要求するときに取得するコンソール アプリケーションのプロセス ID ではなく、この個別のプロセスのプロセス ID       実行時に、`AppActivate`関数と一致するタイトル付きの実行中のアプリケーションをアクティブに`Title`または一致するプロセス ID を持つ`ProcessId`します。 完全一致がない場合のタイトル文字列で終わるすべてのアプリケーションがアクティブ化`Title`です。 という名前の複数のアプリケーションがあるかどうかは`Title`、`AppActivate`関数が任意にアクティブ化する&1; つを選択します。      > [!NOTE] >、`AppActivate`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow>レベルで、部分的に信頼された状況での実行に影響を与える可能性があります</xref:System.Security.Permissions.UIPermissionWindow>。 詳細については、 <xref:System.Security.Permissions.UIPermission>。</xref:System.Security.Permissions.UIPermission>を参照してください。"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._229_1.vb)]"
  syntax:
    content: public static void AppActivate (string Title);
    parameters:
    - id: Title
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>アクティブ化するアプリケーションのタイトル バーのタイトルを指定する式。 起動したときに、アプリケーションに割り当てられているタイトルを使用することができます。"
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Beep
  id: Beep
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "コンピューターのスピーカーを鳴らします。"
  remarks: "ビープ音の期間、ピッチ、ハードウェアおよびシステム ソフトウェアに依存し、そのため、コンピューターによって異なります。      > [!NOTE] >、`Beep`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow>レベルで、部分的に信頼された状況での実行に影響を与える可能性があります</xref:System.Security.Permissions.UIPermissionWindow>。 詳細については、 <xref:System.Security.Permissions.UIPermission>。</xref:System.Security.Permissions.UIPermission>を参照してください。"
  example:
  - "This example uses the `Beep` function to sound a tone through the computer's speaker.  \n  \n [!code-vb[VbVbalrCatRef#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._129_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: Microsoft.VisualBasic.Interaction.Beep*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  id: CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "オブジェクトに対してメソッドを実行またはまたは設定オブジェクトのプロパティを返します。"
  remarks: "`CallByName`プロパティを取得する、プロパティを設定またはメソッドの呼び出しを実行時に関数が使用されます。"
  example:
  - "In the following example, the first line uses `CallByName` to set the `Text` property of a text box, the second line retrieves the value of the `Text` property, and the third line invokes the `Move` method to move the text box.  \n  \n [!code-vb[VbVbalrFunctions#99](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_1.vb)]  \n  \n [!code-vb[VbVbalrFunctions#20](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_2.vb)]  \n  \n The next example uses the `CallByName` function to invoke the `Add` and `Item` methods of a collection object.  \n  \n [!code-vb[VbVbalrFunctions#21](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_3.vb)]"
  syntax:
    content: public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, object[] Args);
    parameters:
    - id: ObjectRef
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. プロパティまたはメソッドを公開しているオブジェクトへのポインター。"
    - id: ProcName
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. プロパティまたはオブジェクトのメソッドの名前を含む文字列式です。"
    - id: UseCallType
      type: Microsoft.VisualBasic.CallType
      description: "必須。 型の列挙体のメンバー <xref href=&quot;Microsoft.VisualBasic.CallType&quot;> </xref>呼び出されるプロシージャの種類を表すです。 The value of <xref uid=&quot;langword_csharp_CallType&quot; name=&quot;CallType&quot; href=&quot;&quot;></xref> can be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
    - id: Args
      type: System.Object[]
      description: "任意。 <xref uid=&quot;langword_csharp_ParamArray&quot; name=&quot;ParamArray&quot; href=&quot;&quot;></xref>. プロパティまたは呼び出されるメソッドに渡される引数を含むパラメーター配列を返します。"
    return:
      type: System.Object
      description: "オブジェクトに対してメソッドを実行またはまたは設定オブジェクトのプロパティを返します。"
  overload: Microsoft.VisualBasic.Interaction.CallByName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Invalid <code>UseCallType</code> value; must be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  id: Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "選択して、引数の一覧から値を返します。"
  remarks: "`Choose`関数に渡される一覧のメンバーを返します`Choice()`の値に基づいて、`Index`です。 一覧の最初のメンバーが選択されているときに`Index`は 1 です。 一覧の最後のメンバーが選択されているときに`Index`は`UBound`(`Choice()`)。 場合`Index`がこれらの制限の範囲外`Choose`返します`Nothing`です。       場合`Index`が整数では、評価される前に、最も近い整数に丸められます。       使用することができます`Choose`候補のリスト内の値を検索します。      > [!NOTE] > 引数リスト内の式は関数呼び出しを含めることができます。 呼び出しの引数リストの準備の一環として`Choose`、Visual Basic コンパイラは、すべての式ですべての関数を呼び出します。 つまり別の式が選択されている場合は、呼び出されていない特定の関数には使用できません`Index`です。"
  example:
  - "This example uses the `Choose` function to display a name in response to an index passed into the procedure in the `Ind` parameter.  \n  \n [!code-vb[VbVbalrFunctions#22](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._248_1.vb)]"
  syntax:
    content: public static object Choose (double Index, object[] Choice);
    parameters:
    - id: Index
      type: System.Double
      description: "必須。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. 1 ~ 要素の数の値に評価される数値式が渡された、`Choice`引数。"
    - id: Choice
      type: System.Object[]
      description: "必須。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>パラメーターの配列。 1 つの変数またはに評価される式のいずれかを指定することができます、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>リストへのデータ型、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>コンマ、またはの&1; 次元配列を変数または式で区切られた<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>要素。"
    return:
      type: System.Object
      description: "選択して、引数の一覧から値を返します。"
  overload: Microsoft.VisualBasic.Interaction.Choose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Command
  id: Command
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Visual Basic で開発された Visual Basic または実行可能プログラムを開始するためのコマンドラインの引数の部分を返します。 <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>生産性とよりもパフォーマンスが向上を提供する機能、 <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;></xref>関数。 詳細については、 <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>。</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>を参照してください。"
  remarks: "引数が返された後は、空白文字、スラッシュ、ハイフン、または引用符、分割または個別のパラメーターの文字列を検索するなど、一般的な区切り記号を検索できます。       Visual Basic を使用して開発および .exe ファイルにコンパイルされたアプリケーションに対して、`Command`関数は、このフォームでのコマンド ラインで、アプリケーションの名前の後に指定した任意の引数を返します:`MyApp(cmdlineargs)`です。"
  example:
  - "This example uses the `Command` function to return the command-line arguments in an object that contains an array.  \n  \n [!code-vb[VbVbalrCatRef#58](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._185_1.vb)]"
  syntax:
    content: public static string Command ();
    parameters: []
    return:
      type: System.String
      description: "Visual Basic で開発された Visual Basic または実行可能プログラムを開始するためのコマンドラインの引数の部分を返します。       <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>生産性とよりもパフォーマンスが向上を提供する機能、 <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;></xref>関数。 詳細については、 <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>。</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>を参照してください。"
  overload: Microsoft.VisualBasic.Interaction.Command*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  id: CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "作成し、COM オブジェクトへの参照を返します。 <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>Visual Basic でこれらのクラスが COM コンポーネントとして明示的に公開されている場合を除き、クラスのインスタンスを作成するのには使用できません。"
  remarks: "To create an instance of a COM component, assign the object returned by `CreateObject` to an object variable:  \n  \n```vb#  \nSub CreateADODB()  \n   Dim adoApp As Object  \n   adoApp = CreateObject(\"ADODB.Connection\")  \nEnd Sub  \n```  \n  \n The type of object variable you use to store the returned object can affect your application's performance. Declaring an object variable with the `As Object` clause creates a variable that can contain a reference to any type of object. However, access to the object through that variable is *late-bound*, that is, the binding occurs when your program runs. There are many reasons you should avoid late binding, including slower application performance.  \n  \n You can create an object variable that results in early binding—that is, binding when the program is compiled. To do so, add a reference to the type library for your object from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. Then declare the object variable of the specific type of your object. In most cases, it is more efficient to use the `Dim` statement and a primary interop assembly to create objects than it is to use the `CreateObject` function.  \n  \n## Interacting with Unmanaged Code  \n Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime. There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM. When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it. If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library. For more information, see [COM Interoperability in .NET Framework Applications](~/add/includes/ajax-current-ext-md.md).  \n  \n You should generally use strongly bound objects and primary interop assemblies whenever possible. The examples below use the `CreateObject` function with Microsoft Office objects for demonstration purposes only. However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.  \n  \n## Creating an Object on a Remote Computer  \n You can create an object on a remote networked computer by passing the name of the computer to the `ServerName` argument of the `CreateObject` function. That name is the same as the Machine Name portion of a share name: for a share named \"\\\\\\MyServer\\Public,\" `ServerName` is \"MyServer.\"  \n  \n> [!NOTE]\n>  Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer. You may need to add a registry key for your application.  \n  \n The following code returns the version number of an instance of Excel running on a remote computer named `MyServer`:  \n  \n```vb#  \nSub CreateRemoteExcelObj()  \n    Dim xlApp As Object  \n    ' Replace string \"\\\\MyServer\" with name of the remote computer.  \n    xlApp = CreateObject(\"Excel.Application\", \"\\\\MyServer\")  \n    MsgBox(xlApp.Version)  \nEnd Sub  \n```  \n  \n If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.  \n  \n> [!NOTE]\n>  Use `CreateObject` when there is no current instance of the object. If an instance of the object is already running, a new instance is started, and an object of the specified type is created. To use the current instance, or to start the application and have it load a file, use the `GetObject` function. If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is executed.  \n  \n## Creating Framework Objects  \n You can use the `CreateObject` function only to create a COM object. While there is no exact equivalent mechanism for creating a .NET Framework object, the <xref:System.Activator> in the <xref:System> namespace contains methods to create local or remote objects. In particular, the <xref:System.Activator.CreateInstance%2A> method or the <xref:System.Activator.CreateInstanceFrom%2A> method might be useful.  \n  \n> [!IMPORTANT]\n>  The `CreateObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `CreateObject` function to create a Microsoft Excel worksheet and saves the worksheet to a file. To use this example, Excel must be installed on the computer where this program runs. Also, you must add a reference to the type library from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. The name of the type library varies depending on the version of Excel installed on your computer. For example, the type library for Microsoft Excel 2002 is named **Microsoft Excel 10.0 Object Library**.  \n  \n [!code-vb[VbVbalrExcelObject#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._59_1.vb)]"
  syntax:
    content: public static object CreateObject (string ProgId, string ServerName = "");
    parameters:
    - id: ProgId
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 作成するオブジェクトのプログラム ID。"
    - id: ServerName
      type: System.String
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. オブジェクトを作成するネットワーク サーバーの名前。 場合`ServerName`空の文字列 (&quot;&quot;)、ローカル コンピューターが使用されます。"
    return:
      type: System.Object
      description: "作成し、COM オブジェクトへの参照を返します。 <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>Visual Basic でこれらのクラスが COM コンポーネントとして明示的に公開されている場合を除き、クラスのインスタンスを作成するのには使用できません。"
  overload: Microsoft.VisualBasic.Interaction.CreateObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "サーバーは使用できません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定した型のオブジェクトは存在しません"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  id: DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Windows レジストリ内のアプリケーションのエントリからセクションまたはキーの設定を削除します。 <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>機能により、生産性とパフォーマンスの向上よりもレジストリ操作で、 <xref uid=&quot;langword_csharp_DeleteSetting &quot; name=&quot;DeleteSetting &quot; href=&quot;&quot;></xref>関数。 詳細については、 <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>。</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>を参照してください。"
  remarks: "If all arguments are provided, the specified setting is deleted. A run-time error occurs if you attempt to use `DeleteSetting` on a nonexistent section or key setting.  \n  \n `DeleteSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "The following example first uses the `SaveSetting` procedure to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them. Because no `Key` argument is specified, the whole `Startup` section is deleted, including the section name and all of its keys.  \n  \n [!code-vb[VbVbalrCatRef#45](~/add/codesnippet/visualbasic/e195f0a5-815a-4af5-b672-_1.vb)]"
  syntax:
    content: public static void DeleteSetting (string AppName, string Section = null, string Key = null);
    parameters:
    - id: AppName
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>アプリケーションまたはセクションまたはキーの設定を適用するプロジェクトの名前を含む式です。"
    - id: Section
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>キーの設定の削除されたセクションの名前を含む式です。 だけの場合`AppName`と`Section`が提供された、関連するすべてのキー設定と共に、指定したセクションを削除します。"
    - id: Key
      type: System.String
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>削除するキーの設定の名前を含む式です。"
  overload: Microsoft.VisualBasic.Interaction.DeleteSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ユーザーがログインしていません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  id: Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "オペレーティング システムの環境変数に関連付けられている文字列を返します。"
  remarks: "場合`Expression`、文字列を含む、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数、指定された環境文字列に割り当てられているテキストを返します: 環境変数の環境文字列テーブルに等号 (=) に続くテキストは、.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> 場合内の文字列`Expression`表内の環境文字列、長さ&0; の文字列が見つかりません (&quot;&quot;) が返されます。       場合`Expression`環境文字列テーブル内の数値の位置が返される文字列、整数が含まれています。 この場合、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>のすべての環境変数の名前を含む、テキストを返します</xref:Microsoft.VisualBasic.Interaction.Environ%2A>。 指定された位置に環境文字列がない場合<xref:Microsoft.VisualBasic.Interaction.Environ%2A>長さ&0; の文字列を返します</xref:Microsoft.VisualBasic.Interaction.Environ%2A>。      > [!IMPORTANT] >、<xref:Microsoft.VisualBasic.Interaction.Environ%2A>関数には、環境アクセス許可が必要です</xref:Microsoft.VisualBasic.Interaction.Environ%2A>。 詳細については、次を参照してください<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission> 。"
  example:
  - "This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._74_1.vb)]"
  syntax:
    content: public static string Environ (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "必須。 環境変数、または環境文字列テーブル内の環境文字列の数値順序に対応する整数の名前を含む文字列を評価する式。"
    return:
      type: System.String
      description: "オペレーティング システムの環境変数に関連付けられている文字列を返します。"
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>見つかりません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  id: Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "オペレーティング システムの環境変数に関連付けられている文字列を返します。"
  remarks: "場合`Expression`文字列、関数、指定された環境文字列に割り当てられているテキストを返します environ 関数が含まれています: 環境変数の環境文字列テーブルに等号 (=) に続くテキストは、します。 場合内の文字列`Expression`表内の環境文字列、長さ&0; の文字列が見つかりません (&quot;&quot;) が返されます。       場合`Expression`環境文字列テーブル内の数値の位置が返される文字列、整数が含まれています。 この場合、environ 関数では、すべての環境変数の名前を含む、テキストを返します。 指定された位置に環境文字列がない、environ 関数は長さ&0; の文字列を返します。      > [!IMPORTANT] >、Environ 関数には、環境アクセス許可が必要です。 詳細については、次を参照してください<xref:System.Security.Permissions.SecurityPermission>と[コード アクセス許可](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission> 。"
  example:
  - "This example uses the Environ function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._35_1.vb)]"
  syntax:
    content: public static string Environ (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "必須。 環境変数、または環境文字列テーブル内の環境文字列の数値順序に対応する整数の名前を含む文字列を評価する式。"
    return:
      type: System.String
      description: "オペレーティング システムの環境変数に関連付けられている文字列を返します。"
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>見つかりません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  id: GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "キーの設定とそれぞれの値の一覧を返します (使用して作成した<xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>)、Windows レジストリ内のアプリケーションのエントリからです。 使用して、 <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>機能により、生産性とパフォーマンスの向上よりもレジストリ操作で<xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>です。 詳細については、 <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>。</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>を参照してください。"
  remarks: "`GetAllSettings` returns an uninitialized `Object` if either `AppName` or `Section` does not exist.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetAllSettings` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, then uses the `GetAllSettings` function to display the settings. Note that application names and `Section` names cannot be retrieved with `GetAllSettings`. Finally, the `DeleteSetting` function removes the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#68](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._40_1.vb)]"
  syntax:
    content: public static string[,] GetAllSettings (string AppName, string Section);
    parameters:
    - id: AppName
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>アプリケーションまたはキー設定が必要となるプロジェクトの名前を含む式です。"
    - id: Section
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>キーの設定を持つが要求されたセクションの名前を含む式です。 <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>文字列の&2; 次元配列を含むオブジェクトを返します。 文字列には、すべてのキー設定では、指定したセクションと、対応する値が含まれます。"
    return:
      type: System.String[,]
      description: "キーの設定とそれぞれの値の一覧を返します (使用して作成した<xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>)、Windows レジストリ内のアプリケーションのエントリからです。       使用して、 <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>機能により、生産性とパフォーマンスの向上よりもレジストリ操作で<xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>です。 詳細については、 <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>。</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>を参照してください。"
  overload: Microsoft.VisualBasic.Interaction.GetAllSettings*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ユーザーがログインしていません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  id: GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "COM コンポーネントによって提供されるオブジェクトへの参照を返します。"
  remarks: "Use the `GetObject` function to load an instance of a COM component from a file. The following example illustrates this.  \n  \n```vb#  \nDim CADObject As Object  \nCADObject = GetObject(\"C:\\CAD\\schema.cad\")  \n```  \n  \n When this code runs, the application associated with the specified `PathName` is started and the object in the specified file is activated.  \n  \n## Default Cases  \n If `PathName` is a zero-length string (`\"\"`), `GetObject` returns a new object instance of the specified class type. If the `PathName` argument is omitted, `GetObject` returns a currently active object of the class type specified in `Class`. If no object of the specified type exists, an error occurs.  \n  \n## Accessing a Subobject  \n Some applications allow you to activate a subobject associated with a file. To do this, add an exclamation point (`!`) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.  \n  \n For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called `schema.cad`.  \n  \n```vb#  \nlayerObject = GetObject(\"C:\\CAD\\schema.cad!Layer3\")  \n```  \n  \n## Specifying a Class  \n If you do not specify the object's `Class`, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, can support more than one class of object. For example, a drawing might support three different types of objects: an `Application` object, a `Drawing` object, and a `Toolbar` object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional `Class` argument. The following example illustrates this.  \n  \n```vb#  \nDim drawObj As Object  \ndrawObj = GetObject(\"C:\\Drawings\\sample.drw\", \"Figment.Drawing\")  \n```  \n  \n In the preceding example, `Figment` is the name of a drawing application and `Drawing` is one of the object types it supports.  \n  \n## Using the Object  \n Once an object is activated, you refer to it in code using the object variable you declared. In the preceding example, you access properties and methods of the new object using the object variable `drawObj`. The following example illustrates this.  \n  \n```vb#  \ndrawObj.Line(9, 90)  \ndrawObj.InsertText(9, 100, \"Hello, world.\")  \ndrawObj.SaveAs(\"C:\\Drawings\\sample.drw\")  \n```  \n  \n> [!NOTE]\n>  Use the `GetObject` function when there is a current instance of the object or if you want to create the object with a file loaded. If there is no current instance, and you do not want the object started with a file loaded, use the <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> function.  \n>   \n>  If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is called. With a single-instance object, `GetObject` always returns the same instance when called with the zero-length string (`\"\"`) syntax, and it causes an error if the `PathName` argument is omitted. You cannot use `GetObject` to obtain a reference to a class created with Visual Basic.  \n  \n> [!IMPORTANT]\n>  The `GetObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `GetObject` function to obtain a reference to a specific Microsoft Excel worksheet (`excelObj`). It uses the worksheet's `Application` property to make Excel visible, to close it, and to perform other actions. Using two API calls, the `detectExcel` procedure looks for Excel, and if it is running, enters it in the Running Object table. The first call to `GetObject` causes an error if Excel is not already running, which in this example causes the `excelWasNotRunning` flag to be set to `True`. The second call to `GetObject` specifies a file to open. If Excel is not already running, the second call starts it and returns a reference to the worksheet represented by the specified file, `test.xls`. The file must exist in the specified location; otherwise, Visual Basic throws a <xref:System.IO.FileNotFoundException>. Next, the example code makes both Excel and the window containing the specified worksheet visible.  \n  \n This example requires `Option Strict Off` because it uses late binding, where objects are assigned to variables of type `Object`. You can specify `Option Strict On` and declare objects of specific object types if you add a reference to the Excel type library from the **COM** tab of the **Add Reference** dialog box of the **Project** menu in Visual Studio.  \n  \n [!code-vb[VbVbalrExcelObject#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_1.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_2.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_3.vb)]  \n  \n When you call the `getExcel` function, a check is made to see if Excel is already running. If it is not, then an instance is created.  \n  \n> [!IMPORTANT]\n>  For simplicity, the preceding example assumes that any window called `XLMAIN` belongs to an instance of Microsoft Excel. If another object, possibly launched by illicit tampering, created a window with that name, it would receive all the messages you intended for Excel. In an application to be used for production, you should include some more rigorous testing to verify that `XLMAIN` really belongs to Excel."
  syntax:
    content: public static object GetObject (string PathName = null, string Class = null);
    parameters:
    - id: PathName
      type: System.String
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 完全なパスと取得するオブジェクトを含むファイルの名前。 場合`PathName`を省略すると、`Class`が必要です。"
    - id: Class
      type: System.String
      description: "場合は必須`PathName`が指定されていません。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. オブジェクトのクラスを表す文字列。 `Class`引数は、次の構文と部分: `appname` `.` `objecttype` [1 |&1;] パラメーター [1 |&2;] の説明 [2 |&1;] `appname` [2 |&2;] が必要です。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. オブジェクトを提供するアプリケーションの名前。       [3 |&1;]`objecttype` [3 |&2;] が必要です。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 型またはオブジェクトのクラスを作成します。"
    return:
      type: System.Object
      description: "COM コンポーネントによって提供されるオブジェクトへの参照を返します。"
  overload: Microsoft.VisualBasic.Interaction.GetObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "指定されたクラス型のオブジェクトが存在しません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定したパスとファイル名を持つオブジェクトが存在しません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  id: GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Windows レジストリ内のアプリケーションのエントリからキーの設定値を返します。 <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>機能により、生産性とパフォーマンスの向上よりもレジストリ操作で<xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>です。 詳細については、 <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>。</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>を参照してください。"
  remarks: "If any of the items named in the `GetSetting` arguments do not exist, `GetSetting` returns a value of `Default`.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetSetting` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `GetSetting` requires `Read`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, and then uses the `GetSetting` function to display one of the settings. Because the `Default` argument is specified, some value is guaranteed to be returned. Notice that `Section` names cannot be retrieved with `GetSetting`. Finally, the `DeleteSetting` function removes all the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#61](~/add/codesnippet/visualbasic/1601a1b5-4317-44fc-9f01-_1.vb)]"
  syntax:
    content: public static string GetSetting (string AppName, string Section, string Key, string Default = "");
    parameters:
    - id: AppName
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>アプリケーションまたはキー設定が必要となるプロジェクトの名前を含む式です。"
    - id: Section
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>キーの設定が存在するセクションの名前を含む式です。"
    - id: Key
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>返されるキーの設定の名前を含む式です。"
    - id: Default
      type: System.String
      description: "任意。 値が設定されていないかどうかに返される値を含む式、`Key`設定します。 省略した場合、`Default`長さ&0; の文字列であると見なされます (&quot;&quot;) です。"
    return:
      type: System.String
      description: "Windows レジストリ内のアプリケーションのエントリからキーの設定値を返します。       <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>機能により、生産性とパフォーマンスの向上よりもレジストリ操作で<xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Interaction.GetSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "1 つまたは複数の引数は<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式、またはユーザーがログインしていません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  id: IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "式の評価によって、2 つのオブジェクトのいずれかを返します。"
  remarks: '`IIf`関数は、相当するもの、三項[条件演算子:?:](~/add/includes/ajax-current-ext-md.md) Visual C でします。'
  example:
  - "This example uses the `IIf` function to evaluate the `testMe` parameter of the `checkIt` procedure and returns the word \"Large\" if the amount is greater than 1000; otherwise, it returns the word \"Small\".  \n  \n [!code-vb[VbVbalrFunctions#33](~/add/codesnippet/visualbasic/296aac5d-5997-4225-8ac0-_1.vb)]  \n  \n Note that if `Option Strict` is `On`, you must use the `CStr` keyword to explicitly convert the return from `Object` to `String`."
  syntax:
    content: public static object IIf (bool Expression, object TruePart, object FalsePart);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "必須。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 評価する式です。"
    - id: TruePart
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. 場合に返される`Expression`に評価される<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
    - id: FalsePart
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. 場合に返される`Expression`に評価される<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Object
      description: "式の評価によって、2 つのオブジェクトのいずれかを返します。"
  overload: Microsoft.VisualBasic.Interaction.IIf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  id: InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "ダイアログ ボックスで、プロンプトが表示されます、テキストを入力するか、ボタンをクリックするユーザーを待機してから、テキスト ボックスの内容を含む文字列を返します。"
  remarks: "ユーザーがクリックした場合**キャンセル**長さ&0; の文字列が返されます。       複数の最初の引数を指定するに使用する必要があります、`InputBox`関数の式。 位置指定引数を省略する場合は、対応するコンマ区切り記号を保持する必要があります。      > [!NOTE] >、`InputBox`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow>レベルで、部分的に信頼された状況での実行に影響を与える可能性があります</xref:System.Security.Permissions.UIPermissionWindow>。 詳細については、「」および<xref:System.Security.Permissions.UIPermission>。</xref:System.Security.Permissions.UIPermission>の"
  example:
  - "This example shows various ways to use the `InputBox` function to prompt the user to enter a value. If the x and y positions are omitted, the dialog box is automatically centered for the respective axes. The variable `MyValue` contains the value entered by the user if the user clicks OK or presses the ENTER key.  \n  \n [!code-vb[VbVbalrCatRef#67](~/add/codesnippet/visualbasic/e8c4ff4e-3901-4354-99c7-_1.vb)]"
  syntax:
    content: public static string InputBox (string Prompt, string Title = "", string DefaultResponse = "", int XPos = -1, int YPos = -1);
    parameters:
    - id: Prompt
      type: System.String
      description: "必要な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式 ダイアログ ボックスでメッセージとして表示されます。 最大長`Prompt`約 1024 文字、によって使用される文字の幅。 場合`Prompt`で構成されます&2; つ以上の行のキャリッジ リターン文字を使用して行を区切ることができます (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>)、改行文字 (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>)、キャリッジ リターン/ライン フィードの組み合わせ、または (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) 各行の間です。"
    - id: Title
      type: System.String
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式のダイアログ ボックスのタイトル バーに表示されます。 省略した場合`Title`アプリケーション名は、タイトル バーに配置されます。"
    - id: DefaultResponse
      type: System.String
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>入力しない場合、既定の応答として、テキスト ボックスに表示されますが式を指定します。 省略した場合`DefaultResponse`、表示されるテキスト ボックスが空です。"
    - id: XPos
      type: System.Int32
      description: "任意。 Twips、画面の左エッジからダイアログ ボックスの左エッジからの距離で指定する数値式です。 省略した場合`XPos`、ダイアログ ボックスは水平方向に中央揃えされます。"
    - id: YPos
      type: System.Int32
      description: "任意。 長さ、画面の上部からダイアログ ボックスの上端までの距離を指定する数値式です。 省略した場合`YPos`、ダイアログ ボックスには、画面の&3; 分の&1; つ垂直方向に約が配置されています。"
    return:
      type: System.String
      description: "ダイアログ ボックスで、プロンプトが表示されます、テキストを入力するか、ボタンをクリックするユーザーを待機してから、テキスト ボックスの内容を含む文字列を返します。"
  overload: Microsoft.VisualBasic.Interaction.InputBox*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  id: MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "ダイアログ ボックスで、メッセージが表示されます、 をクリックしてから、ユーザーを待機してから、ユーザーがクリックしたボタンを示す整数を返します。"
  remarks: "位置指定引数を省略する場合は、対応するコンマ区切り記号を保持する必要があります。       ダイアログ ボックスが表示される場合、**キャンセル**ESC キーを押すボタンがクリックした場合と同じ効果**キャンセル** ダイアログ ボックスが含まれている場合、**ヘルプ**ボタン、状況依存のヘルプを使用 ダイアログ ボックス。 ただし、他のボタンのいずれかを選択するまでの値は返されません。 Windows フォーム アプリケーションで、選択、**ヘルプ**ボタン実行、<xref:System.Windows.Forms.Control.HelpRequested>フォームのイベント</xref:System.Windows.Forms.Control.HelpRequested>。      > [!NOTE] >、`MsgBox`関数に必要な`UIPermission`で、<xref:System.Security.Permissions.UIPermissionWindow>レベルで、部分的に信頼された状況での実行に影響を与える可能性があります</xref:System.Security.Permissions.UIPermissionWindow>。 詳細については、 <xref:System.Security.Permissions.UIPermission>。</xref:System.Security.Permissions.UIPermission>を参照してください。       `MsgBoxStyle`列挙値は、次の表に一覧表示されます。      ||||  |-|-|-|  |メンバー |値 |説明 |  |`OKOnly`|0|Ok を表示 ボタンだけです |。  |`OKCancel`|1|Ok を表示し、キャンセル ボタン |。  |`AbortRetryIgnore`|2|中止、再試行、および Ignore ボタンが表示されます |。  |`YesNoCancel`|3|はい が表示されます、No、およびキャンセル ボタンです |。  |`YesNo`|4|はい と いいえ ボタンが表示されます |。  |`RetryCancel`|5|再試行 および キャンセル ボタンが表示されます |。  |`Critical`|16|メッセージの重要なアイコンを表示します |。  |`Question`|32|警告クエリ アイコンを表示します |。  |`Exclamation`|48|警告メッセージのアイコンを表示します |。  |`Information`|64|情報メッセージ アイコンを表示します |。  |`DefaultButton1`|0|最初のボタンは既定値です |。  |`DefaultButton2`|256|2 番目のボタンは既定値です |。  |`DefaultButton3`|512|3 番目のボタンは既定値です |。  |`ApplicationModal`|0|アプリケーションがモーダルでします。 ユーザーは、現在のアプリケーションで作業を続行する前に、メッセージ ボックスに応答する必要があります |。  |`SystemModal`|4096|システムがモーダルでします。 すべてのアプリケーションがメッセージ ボックスに、ユーザーが応答するまで中断されます |。  |`MsgBoxSetForeground`|&65536; |前面のウィンドウとして、メッセージ ボックス ウィンドウを指定します |。  |`MsgBoxRight`|&52428;8 |テキストが右揃え |。  |`MsgBoxRtlReading`|&10485;76 |テキストが右から左のヘブライ語やアラビア語のシステムでの読み取りを表示する必要がありますを指定します |。      値 (0 ~&5;) の最初のグループには、ダイアログ ボックスに表示されるボタンの種類と数がについて説明します。 2 番目のグループ (16、32、48、64) には、アイコンのスタイルがについて説明します。 3 番目のグループ (0, 256, 512) は、どのボタンは、既定値を決定します。 4 番目のグループ (0, 4096) がメッセージ ボックスのモーダルかどうかを決定し、5 番目のグループは、メッセージ ボックス ウィンドウが前面のウィンドウ、および配置とテキストの方向がかどうかを指定します。 最終的な値を作成する番号を追加するときに、`Buttons`引数、各グループから&1; つだけの値を使用します。"
  example:
  - "This example uses the `MsgBox` function to display a critical-error message in a dialog box with Yes and No buttons. The No button is specified as the default response. This is done by combining the `MsgBox` constant values into one numeric expression. In this case, adding 4 (the Yes/No button combination) and 16 (the **Critical Message** window) and 256 (the second button as default button) gives a total of 276. The value returned by the `MsgBox` function depends on the button chosen by the user: Yes returns a value of 6; No returns a value of 7.  \n  \n [!code-vb[VbVbalrCatRef#20](~/add/codesnippet/visualbasic/b9e37542-f81a-4692-86e1-_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);
    parameters:
    - id: Prompt
      type: System.Object
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式は、ダイアログ ボックスにメッセージとして表示されます。 最大長`Prompt`約 1024 文字、によって使用される文字の幅。 場合`Prompt`で構成されています、1 つ以上の行のキャリッジ リターン文字を使用して行を区切ることができます (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>)、改行文字 (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>)、またはキャリッジ リターン/ライン フィード文字の組み合わせ (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) 各行の間です。"
    - id: Buttons
      type: Microsoft.VisualBasic.MsgBoxStyle
      description: "任意。 数値式を使用するには既定のボタンの id とメッセージ ボックスのモダリティ アイコンのスタイルを表示するには、数とボタンの種類を指定する値の合計です。 省略した場合`Buttons`既定値は&0; です。"
    - id: Title
      type: System.Object
      description: "任意。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式のダイアログ ボックスのタイトル バーに表示されます。 省略した場合`Title`アプリケーション名は、タイトル バーに配置されます。"
    return:
      type: Microsoft.VisualBasic.MsgBoxResult
      description: "<table><tbody><tr><td> 定数       </td><td> 値       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_OK&quot; name=&quot;OK&quot; href=&quot;&quot;></xref>         </td><td> 1       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Cancel&quot; name=&quot;Cancel&quot; href=&quot;&quot;></xref>         </td><td> 2       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Abort&quot; name=&quot;Abort&quot; href=&quot;&quot;></xref>         </td><td> 3       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Retry&quot; name=&quot;Retry&quot; href=&quot;&quot;></xref>         </td><td> 4       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Ignore&quot; name=&quot;Ignore&quot; href=&quot;&quot;></xref>         </td><td> 5       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Yes&quot; name=&quot;Yes&quot; href=&quot;&quot;></xref>         </td><td> 6       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_No&quot; name=&quot;No&quot; href=&quot;&quot;></xref>         </td><td> 7       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Interaction.MsgBox*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Prompt</code><xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>式、または<code>Title</code>が無効です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "プロセスがユーザー対話モードで実行されていません。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "1 つまたは複数のパラメーターのメンバーではないの<xref uid=&quot;langword_csharp_MsgBoxResult&quot; name=&quot;MsgBoxResult&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_MsgBoxStyle&quot; name=&quot;MsgBoxStyle&quot; href=&quot;&quot;></xref>列挙します。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "数値を含んだ計算の範囲を表す文字列を返します。"
  remarks: "`Partition`関数は、計算一連の数値の範囲で指定された値の数を含む各`Interval`です。 最初の範囲から始まります`Start`、最後の範囲の終点と`Stop`です。 `Partition`関数がどの範囲が含まれるを識別し、`Number`し、その範囲を説明する文字列を返します。 として文字列で表される範囲&quot;*最大*:*最小*&quot;ここで、範囲の下限 (*最大*) は、ハイ エンドから分離 (*最小*)、コロン (:) でします。       必要に応じて、`Partition`関数は、前に先頭のスペースを挿入*最大*と*最小*両方を持つようにする、値の文字列形式と同じ文字数 (`Stop` + 1)。 によりの出力を使用する場合、`Partition`のいくつかの値を持つ関数`Number`、以後の並べ替え操作中に、生成されるテキストを正しく処理されます。       次の表は、の&3; つのセットを使用して計算の範囲は、いくつかの文字列の例を示しています。 `Start`、 `Stop`、および`Interval`です。 「最初の範囲」と「最後の範囲」の列範囲を表して、最低と最高の値を指定された`Start`と`Stop`です。 列の値に対して返される文字列の表示&quot;最初の範囲&quot;の前後に&quot;最後の範囲&quot;`Number`より小さい`Start`とよりも大きい`Stop`、それぞれします。      ||||||||  |-|-|-|-|-|-|-|  |`Start`|`Stop`|`Interval`|最初の範囲の前に |最初の範囲 |最後の範囲 |最後の範囲の後に |  | 0 | 99 | 5 |&quot;:-1&quot;|&quot; 0: 4&quot;|&quot;95: 99&quot;|&quot;100:&quot;|  | 20 | 199 | 10 |&quot;: 19&quot;|&quot;20時 29分&quot;|&quot;190:199&quot;|&quot;200:&quot;|  | 100 | 1010 | 20 |&quot;: 99&quot;|&quot;100: 119&quot;|&quot;1000:1010&quot;|&quot;1011:&quot;|      前の表では、3 番目の行が結果を示しています。 ときに`Start`と`Stop`で均等に分割できない数値のセットを定義する`Interval`です。 最後の範囲の終点`Stop`、なりますは 11 文字の場合でも`Interval`は 20 です。       場合`Interval`1 に設定されて範囲は&quot;`Number`:`Number`&quot;に関係なく、`Start`と`Stop`引数。 たとえば場合、 `Number` 267 は、 `Stop` 1000 と`Interval`1 に設定されて`Partition`「267: 267」を返します。       `Partition`データベースにクエリを構築するときに役に立ちます。 1001 ~ 2000 の請求書の値を 1 から 1000 を持つなど、さまざまな値の範囲内で発生する注文の数を示す SELECT クエリを作成することができます。"
  example:
  - "The following example sets up a series of ranges for decades from 1950 through 2049. It locates the value of `year` within the appropriate range and returns a `String` value showing the range. If `year` has a value of 1984, for example, `Partition` returns \"1980:1989\".  \n  \n [!code-vb[VbVbalrFunctions#45](~/add/codesnippet/visualbasic/2056d306-036e-4f9b-954c-_1.vb)]"
  syntax:
    content: public static string Partition (long Number, long Start, long Stop, long Interval);
    parameters:
    - id: Number
      type: System.Int64
      description: "必須。 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. 計算済みの範囲内の場所を確認する整数です。"
    - id: Start
      type: System.Int64
      description: "必須。 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. 一連の計算の範囲の開始を示す整数です。 `Start`0 より小さくすることはできません。"
    - id: Stop
      type: System.Int64
      description: "必須。 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. 一連の計算の範囲の終了を示す整数です。 `Stop`以下にすることはできません`Start`です。"
    - id: Interval
      type: System.Int64
      description: "必須。 <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. 各範囲のサイズを示す整数値の計算間`Start`と`Stop`です。 `Interval`1 未満にすることはできません。"
    return:
      type: System.String
      description: "数値を含んだ計算の範囲を表す文字列を返します。"
  overload: Microsoft.VisualBasic.Interaction.Partition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt; 0, <code>Stop</code> &lt;= <code>Start</code>, or <code>Interval</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  id: SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "保存または Windows レジストリ内のアプリケーション エントリを作成します。 <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref>機能により、生産性とパフォーマンスの向上よりもレジストリ操作で<xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;></xref>です。 詳細については、 <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>。</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>を参照してください。"
  remarks: "The `SaveSetting` function adds the key to `HKEY_CURRENT_USER\\Software\\VB and VBA Program Settings`.  \n  \n If the key setting cannot be saved for any reason, an error occurs.  \n  \n `SaveSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `SaveSetting` requires `Write` and `Create`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "The following example first uses the `SaveSetting` function to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.  \n  \n [!code-vb[VbVbalrCatRef#56](~/add/codesnippet/visualbasic/771356b4-108a-4f31-9d7a-_1.vb)]"
  syntax:
    content: public static void SaveSetting (string AppName, string Section, string Key, string Setting);
    parameters:
    - id: AppName
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>アプリケーションまたは、設定を適用するプロジェクトの名前を含む式です。"
    - id: Section
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>キーの設定を保存するセクションの名前を含む式です。"
    - id: Key
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>保存されているキーの設定の名前を含む式です。"
    - id: Setting
      type: System.String
      description: "必須。 これに値を含む式`Key`が設定されています。"
  overload: Microsoft.VisualBasic.Interaction.SaveSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "レジストリ キーを作成できませんでした、またはユーザーがログインしていません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  id: Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "実行可能プログラムを実行し、まだ実行されている場合は、プログラムのプロセス ID を表す整数を返します。"
  remarks: "The return value of the `Shell` function depends on whether the program named in `PathName` is still executing when `Shell` returns. If you set `Wait` to `True` and the program finishes before the timeout expires, `Shell` returns zero. If the timeout expires, or if you omit `Wait` or set it to `False`, `Shell` returns the process ID of the program. The process ID is a unique number that identifies the running program.  \n  \n## Failure to Start  \n If the `Shell` function cannot start the named program, a <xref:System.IO.FileNotFoundException> error occurs. This can happen, for example, when you attempt to run a 16-bit program, such as `command.com`, from an application using <xref:System.Windows.Forms?displayProperty=fullName>. For a workaround, you can run a 32-bit program that calls the desired 16-bit program. In the case of `command.com`, you can run `cmd.exe` as an alternative.  \n  \n## Waiting for Completion  \n By default, the `Shell` function runs the program asynchronously. This means that a program started with the `Shell` function might not finish executing before the statements following the `Shell` function are executed. If you want to wait for the program to finish before you continue, set `Wait` to `True`.  \n  \n## Determining the Exit Code  \n A process can return an *exit code* when it terminates. However, you cannot use `Shell` to retrieve this exit code, because `Shell` returns zero if it waits for termination, and also because the process runs in a different object from `Shell`.  \n  \n To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination. The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.  \n  \n```vb#  \nDim procID As Integer  \nDim newProc As Diagnostics.Process  \nnewProc = Diagnostics.Process.Start(\"C:\\WINDOWS\\NOTEPAD.EXE\")  \nprocID = newProc.Id  \nnewProc.WaitForExit()  \nDim procEC As Integer = -1  \nIf newProc.HasExited Then  \n    procEC = newProc.ExitCode  \nEnd If  \nMsgBox(\"Process with ID \" & CStr(ProcID) & _  \n    \" terminated with exit code \" & CStr(procEC))  \n```  \n  \n## Protecting the File Specification  \n You should always enclose the entire path and file specification in quotation marks, as the following example shows.  \n  \n```vb#  \nID = Shell(\"\"\"C:\\Program Files\\display.exe\"\" -a -q\", , True, 100000)  \n```  \n  \n Each pair of adjacent double quotation marks (`\" \"`) within the string literal is interpreted as one double quotation character in the string. Therefore, the preceding example presents the following string to the `Shell` function:  \n  \n```  \n\"C:\\Program Files\\display.exe\" -a -q  \n```  \n  \n If you did not have the path enclosed in quotation marks, Windows would look for a file called `Program.exe` in the C:\\ directory, instead of `display.exe` in the C:\\Program Files directory.  \n  \n> [!IMPORTANT]\n>  If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces. In the preceding example, the path node `\\Program Files` includes a space. If the specification were not inside quotation marks and a program named `Program.exe` had been installed in C:\\\\, for example by illicit tampering, Windows would execute it instead of `display.exe`.  \n  \n> [!IMPORTANT]\n>  The `Shell` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n [!code-vb[VbVbalrFunctions#47](~/add/codesnippet/visualbasic/a0f7fa2d-96c5-4a1d-b721-_1.vb)]"
  syntax:
    content: public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);
    parameters:
    - id: PathName
      type: System.String
      description: "Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. Name of the program to execute, together with any required arguments and command-line switches. `PathName` can also include the drive and the directory path or folder.  \n  \n If you do not know the path to the program, you can use the <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*> to locate it. For example, you can call `My.Computer.FileSystem.GetFiles(\"C:\\\", True, \"testFile.txt\")`, which returns the full path of every file named `testFile.txt` anywhere on drive C:\\\\."
    - id: Style
      type: Microsoft.VisualBasic.AppWinStyle
      description: "任意。 <xref uid=&quot;langword_csharp_AppWinStyle&quot; name=&quot;AppWinStyle&quot; href=&quot;&quot;></xref>. 選択した値、 <xref href=&quot;Microsoft.VisualBasic.AppWinStyle&quot;> </xref>プログラムは実行するウィンドウのスタイルを指定します。 場合`Style`を省略すると、 <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref>使用<xref uid=&quot;langword_csharp_AppWinStyle.MinimizedFocus&quot; name=&quot;AppWinStyle.MinimizedFocus&quot; href=&quot;&quot;> </xref>、最小化し、フォーカスのあるプログラムを開始します。"
    - id: Wait
      type: System.Boolean
      description: "任意。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 値を示すかどうか、 <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref>関数は、プログラムの完了を待つ必要があります。 If `Wait` is omitted, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref> uses <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    - id: Timeout
      type: System.Int32
      description: "任意。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 場合の完了を待機するミリ秒数`Wait`は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。 場合`Timeout`を省略すると、 <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> -1 で、タイムアウトが存在しないことを意味を使用し、 <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref>プログラムが終了するまでは返しません。 そのため、省略した場合`Timeout`または-1 で、it を可能であればセットを<xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref>をプログラム制御を返さない可能性があります。"
    return:
      type: System.Int32
      description: "実行可能プログラムを実行し、まだ実行されている場合は、プログラムのプロセス ID を表す整数を返します。"
  overload: Microsoft.VisualBasic.Interaction.Shell*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Style</code>範囲 0 ~ 9、包括的内はありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref>見つからない、 <code> PathName </code>ファイル。"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>PathName</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  id: Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "式を返しますの一覧を評価、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>あるリストで最初の式に対応する値<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
  remarks: "引数が指定される`VarExpr`ペア式および値で構成されます。 `Switch`関数式を評価、奇数から最も低いインデックスの最高`VarExpr`、し、最初に評価された式に関連付けられている偶数の値を返します`True`です。 たとえば場合、`VarExpr(0)`は`True`、`Switch`を返します`VarExpr(1)`、場合`VarExpr(0)`は`False`が`VarExpr(2)`は`True`、`Switch`を返します`VarExpr(3)`などです。       指定しない場合、`VarExpr`引数、`Switch`返します`Nothing`です。      > [!NOTE] > 引数リスト内の式は関数呼び出しを含めることができます。 呼び出しの引数リストの準備の一環として`Switch`、Visual Basic コンパイラは、すべての式ですべての関数を呼び出します。 つまり、引数リストの前の式がある場合は、呼び出されていない特定の関数には使用できません`True`です。"
  example:
  - "The following example uses the `Switch` function to return the name of a language that matches the name of a city. It requires that `Option Strict` be `Off`.  \n  \n [!code-vb[VbVbalrFunctions#48](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._108_1.vb)]  \n  \n Because the <xref:System.Diagnostics> namespace also contains a class called <xref:System.Diagnostics.Switch>, a call to the `Switch` function must be qualified with the <xref:Microsoft.VisualBasic> namespace."
  syntax:
    content: public static object Switch (object[] VarExpr);
    parameters:
    - id: VarExpr
      type: System.Object[]
      description: "必須。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>パラメーターの配列。 偶数個の要素が必要です。 一覧を指定する<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>変数または式は、コンマ、またはの&1; 次元配列で区切られた<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>要素。"
    return:
      type: System.Object
      description: "式を返しますの一覧を評価、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>あるリストで最初の式に対応する値<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Interaction.Switch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "引数の数が奇数です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Interaction.Beep
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
- uid: Microsoft.VisualBasic.CallType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CallType
  nameWithType: CallType
  fullName: Microsoft.VisualBasic.CallType
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Interaction.Command
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[,]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[,]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
- uid: Microsoft.VisualBasic.MsgBoxResult
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxResult
  nameWithType: MsgBoxResult
  fullName: Microsoft.VisualBasic.MsgBoxResult
- uid: Microsoft.VisualBasic.MsgBoxStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxStyle
  nameWithType: MsgBoxStyle
  fullName: Microsoft.VisualBasic.MsgBoxStyle
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
- uid: Microsoft.VisualBasic.AppWinStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: AppWinStyle
  nameWithType: AppWinStyle
  fullName: Microsoft.VisualBasic.AppWinStyle
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
- uid: Microsoft.VisualBasic.Interaction.AppActivate*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate
  nameWithType: Interaction.AppActivate
- uid: Microsoft.VisualBasic.Interaction.Beep*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep
  nameWithType: Interaction.Beep
- uid: Microsoft.VisualBasic.Interaction.CallByName*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName
  nameWithType: Interaction.CallByName
- uid: Microsoft.VisualBasic.Interaction.Choose*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose
  nameWithType: Interaction.Choose
- uid: Microsoft.VisualBasic.Interaction.Command*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command
  nameWithType: Interaction.Command
- uid: Microsoft.VisualBasic.Interaction.CreateObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject
  nameWithType: Interaction.CreateObject
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting
  nameWithType: Interaction.DeleteSetting
- uid: Microsoft.VisualBasic.Interaction.Environ*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ
  nameWithType: Interaction.Environ
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings
  nameWithType: Interaction.GetAllSettings
- uid: Microsoft.VisualBasic.Interaction.GetObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject
  nameWithType: Interaction.GetObject
- uid: Microsoft.VisualBasic.Interaction.GetSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting
  nameWithType: Interaction.GetSetting
- uid: Microsoft.VisualBasic.Interaction.IIf*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf
  nameWithType: Interaction.IIf
- uid: Microsoft.VisualBasic.Interaction.InputBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox
  nameWithType: Interaction.InputBox
- uid: Microsoft.VisualBasic.Interaction.MsgBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox
  nameWithType: Interaction.MsgBox
- uid: Microsoft.VisualBasic.Interaction.Partition*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition
  nameWithType: Interaction.Partition
- uid: Microsoft.VisualBasic.Interaction.SaveSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting
  nameWithType: Interaction.SaveSetting
- uid: Microsoft.VisualBasic.Interaction.Shell*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell
  nameWithType: Interaction.Shell
- uid: Microsoft.VisualBasic.Interaction.Switch*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch
  nameWithType: Interaction.Switch
