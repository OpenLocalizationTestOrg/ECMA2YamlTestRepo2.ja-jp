### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlAttribute
  id: XmlAttribute
  children:
  - System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  - System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlAttribute.BaseURI
  - System.Xml.XmlAttribute.CloneNode(System.Boolean)
  - System.Xml.XmlAttribute.InnerText
  - System.Xml.XmlAttribute.InnerXml
  - System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlAttribute.LocalName
  - System.Xml.XmlAttribute.Name
  - System.Xml.XmlAttribute.NamespaceURI
  - System.Xml.XmlAttribute.NodeType
  - System.Xml.XmlAttribute.OwnerDocument
  - System.Xml.XmlAttribute.OwnerElement
  - System.Xml.XmlAttribute.ParentNode
  - System.Xml.XmlAttribute.Prefix
  - System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlAttribute.SchemaInfo
  - System.Xml.XmlAttribute.Specified
  - System.Xml.XmlAttribute.Value
  - System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
  type: Class
  summary: "属性を表します。 属性の有効期間と既定の値は、ドキュメント型定義 (DTD) またはスキーマで定義されます。"
  remarks: "属性は、要素を使用して関連付けることができます。 使用して、<xref:System.Xml.XmlAttribute.OwnerElement%2A>を取得するプロパティ、<xref:System.Xml.XmlElement>属性が属している</xref:System.Xml.XmlElement></xref:System.Xml.XmlAttribute.OwnerElement%2A>。       `XmlElement`クラス属性のノードにアクセスすることがいくつかのメソッドがあります (<xref:System.Xml.XmlElement.GetAttribute%2A?displayProperty=fullName>、 <xref:System.Xml.XmlElement.SetAttribute%2A?displayProperty=fullName>、<xref:System.Xml.XmlElement.RemoveAttribute%2A?displayProperty=fullName>など).</xref:System.Xml.XmlElement.RemoveAttribute%2A?displayProperty=fullName> </xref:System.Xml.XmlElement.SetAttribute%2A?displayProperty=fullName> </xref:System.Xml.XmlElement.GetAttribute%2A?displayProperty=fullName> さらに、呼び出すことができます、<xref:System.Xml.XmlElement.Attributes%2A?displayProperty=fullName>プロパティが返されます、<xref:System.Xml.XmlAttributeCollection>コレクションから名前またはインデックスによって属性にアクセスできるようにします</xref:System.Xml.XmlAttributeCollection></xref:System.Xml.XmlElement.Attributes%2A?displayProperty=fullName>。"
  syntax:
    content: 'public class XmlAttribute : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.CreateNavigator
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.IsReadOnly
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  platform:
  - net462
- uid: System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  id: '#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)'
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: XmlAttribute(String,String,String,XmlDocument)
  nameWithType: XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
  fullName: System.Xml.XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref>クラスです。"
  remarks: "の<xref:System.Xml.XmlAttribute>直接。 代わりに、 <xref:System.Xml.XmlDocument.CreateAttribute%2A>。</xref:System.Xml.XmlDocument.CreateAttribute%2A>などのメソッドを使用して</xref:System.Xml.XmlAttribute>インスタンス化できません。"
  syntax:
    content: protected XmlAttribute (string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc);
    parameters:
    - id: prefix
      type: System.String
      description: "名前空間プレフィックス。"
    - id: localName
      type: System.String
      description: "属性のローカル名。"
    - id: namespaceURI
      type: System.String
      description: "名前空間の uniform resource identifier (URI)。"
    - id: doc
      type: System.Xml.XmlDocument
      description: "親の XML ドキュメントです。"
  overload: System.Xml.XmlAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)
  id: AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: AppendChild(XmlNode)
  nameWithType: XmlAttribute.AppendChild(XmlNode)
  fullName: System.Xml.XmlAttribute.AppendChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "このノードの子ノードのリストの末尾に指定されたノードを追加します。"
  remarks: "場合、`newChild`は、既にツリーで、最初に削除されます。       挿入されるノードは、別のドキュメントから作成された場合、は、使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>現在のドキュメントにノードをインポートする</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>。 インポートされたノードは、現在のドキュメントに挿入できます。"
  example:
  - For an example of the AppendChild method, see the <xref:System.Xml.XmlNode.AppendChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode AppendChild (System.Xml.XmlNode newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The <xref href=&quot;System.Xml.XmlNode&quot;></xref> to add."
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>を追加します。"
  overload: System.Xml.XmlAttribute.AppendChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このノードの子の型のノードを許可しない型が、 <code> newChild </code>ノード。       <code> newChild </code>は、このノードの先祖であります。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>このノードを作成したドキュメントとは異なるドキュメントから作成されました。       このノードは、読み取り専用です。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.BaseURI
  id: BaseURI
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlAttribute.BaseURI
  fullName: System.Xml.XmlAttribute.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "基本 Uniform Resource Identifier () のノードを取得します。"
  remarks: "ネットワークに接続された XML ドキュメントでは、さまざまな World Wide Web Consortium (W3C) 標準包含メカニズムを使用して集計データのチャンクで構成され、したがって各所に由来するノードが含まれます。 `BaseURI`でこれらのノードの出所がわかります。       詳細については`BaseURI`し、他のノード型で動作する方法は<xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.</xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>を参照してください。       このプロパティは、ドキュメント オブジェクト モデル (DOM) に Microsoft 拡張機能です。"
  example:
  - "The following example displays information on the attribute node, including its base URI.  \n  \n [!code-cpp[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_7_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_7_1.vb)]\n [!code-cs[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_7_1.cs)]  \n  \n The sample uses the file, `baseuri.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlAttribute.BaseURI Example#2](~/add/codesnippet/xml/p-system.xml.xmlattribut_7_2.xml)]"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "元の場所、ノードの読み込み元または String.Empty の場合は、ノードにベース URI はありません。 属性ノードは、その所有者要素と同じベース URI があります。 属性ノードが、所有者要素を持たない場合<xref uid=&quot;langword_csharp_BaseURI&quot; name=&quot;BaseURI&quot; href=&quot;&quot;></xref>は String.Empty を返します。"
  overload: System.Xml.XmlAttribute.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlAttribute.CloneNode(Boolean)
  fullName: System.Xml.XmlAttribute.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "このノードの複製を作成します。"
  remarks: "このメソッドは、ノードのコピー コンス トラクターとして機能します。 複製されたノードに親がありません (<xref:System.Xml.XmlAttribute.ParentNode%2A>返します`null`).</xref:System.Xml.XmlAttribute.ParentNode%2A>       指定した属性指定されていない属性の複製を返します (<xref:System.Xml.XmlAttribute.Specified%2A>返します`true`).</xref:System.Xml.XmlAttribute.Specified%2A>"
  example:
  - "The following example uses `CloneNode` to add an attribute to two different element nodes.  \n  \n [!code-cpp[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmlattribut_1_1.cpp)]\n [!code-cs[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmlattribut_1_1.cs)]\n [!code-vb[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlattribut_1_1.vb)]  \n  \n The example uses the file, `2elems.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlAttribute.CloneNode Example#2](~/add/codesnippet/xml/m-system.xml.xmlattribut_1_2.xml)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>再帰的に指定されたノードの下のサブツリーのクローンを作成します。<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>したノードだけのクローンを作成するには"
    return:
      type: System.Xml.XmlNode
      description: "複製されたノード。"
  overload: System.Xml.XmlAttribute.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InnerText
  id: InnerText
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlAttribute.InnerText
  fullName: System.Xml.XmlAttribute.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "ノードとそのすべての子の連結された値を設定します。"
  remarks: "このプロパティを設定すると、指定された文字列の解析済みの内容とすべての子が置き換えられます。       このプロパティは、ドキュメント オブジェクト モデル (DOM) に Microsoft 拡張機能です。"
  syntax:
    content: public override string InnerText { set; }
    return:
      type: System.String
      description: "ノードとそのすべての子の連結された値。 このプロパティは属性ノードの場合と同じ機能を、<xref:System.Xml.XmlAttribute.Value*>プロパティ</xref:System.Xml.XmlAttribute.Value*>。"
  overload: System.Xml.XmlAttribute.InnerText*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InnerXml
  id: InnerXml
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlAttribute.InnerXml
  fullName: System.Xml.XmlAttribute.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "属性の値を設定します。"
  remarks: "このプロパティは、ドキュメント オブジェクト モデル (DOM) に Microsoft 拡張機能です。"
  syntax:
    content: public override string InnerXml { set; }
    return:
      type: System.String
      description: "属性の値。"
  overload: System.Xml.XmlAttribute.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 指定されたときにこのプロパティの設定は整形式です。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  id: InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InsertAfter(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertAfter(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertAfter(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "指定した参照ノードの直後に指定したノードを挿入します。"
  remarks: "場合`refChild`は`null`、挿入`newChild`子ノードのリストの先頭にします。 場合`newChild`は、<xref:System.Xml.XmlDocumentFragment>オブジェクト、その子ノードは、同じ順序で後に挿入`refChild`</xref:System.Xml.XmlDocumentFragment>。 場合、`newChild`は、既にツリーで、最初に削除されます。       挿入されるノードは、別のドキュメントから作成された場合、は、使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>現在のドキュメントにノードをインポートする</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>。 インポートされたノードは、現在のドキュメントに挿入できます。       このメソッドは、ドキュメント オブジェクト モデル (DOM) に Microsoft 拡張機能です。"
  example:
  - For an example of the InsertAfter method see the <xref:System.Xml.XmlNode.InsertAfter%2A> method.
  syntax:
    content: public override System.Xml.XmlNode InsertAfter (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>を挿入します。"
    - id: refChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>参照ノードはします。 `newChild`後に置かれます、`refChild`です。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>挿入します。"
  overload: System.Xml.XmlAttribute.InsertAfter*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このノードの子の型のノードを許可しない型が、 <code> newChild </code>ノード。       <code> newChild </code>は、このノードの先祖であります。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>このノードを作成したドキュメントとは異なるドキュメントから作成されました。       <code> refChild </code>このノードの子ではありません。       このノードは、読み取り専用です。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  id: InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InsertBefore(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertBefore(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertBefore(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "指定した参照ノードの直前に指定したノードを挿入します。"
  remarks: "場合`refChild`は`null`、挿入`newChild`子ノードのリストの最後にします。 場合`newChild`は、<xref:System.Xml.XmlDocumentFragment>オブジェクト、その子ノードは挿入された、同じ順序で前に`refChild`</xref:System.Xml.XmlDocumentFragment>。 場合、`newChild`は、既にツリーで、最初に削除されます。       挿入されるノードは、別のドキュメントから作成された場合、は、使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>現在のドキュメントにノードをインポートする</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>。 インポートされたノードは、現在のドキュメントに挿入できます。"
  example:
  - For an example of the InsertBefore method, see the <xref:System.Xml.XmlNode.InsertBefore%2A> method.
  syntax:
    content: public override System.Xml.XmlNode InsertBefore (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>を挿入します。"
    - id: refChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>参照ノードはします。 `newChild`はこのノードの前に配置されます。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>挿入します。"
  overload: System.Xml.XmlAttribute.InsertBefore*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在のノードが許可されていない子ノードの型の型、 <code> newChild </code>ノード。       <code> newChild </code>は、このノードの先祖であります。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>このノードを作成したドキュメントとは異なるドキュメントから作成されました。       <code> refChild </code>このノードの子ではありません。       このノードは、読み取り専用です。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.LocalName
  id: LocalName
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlAttribute.LocalName
  fullName: System.Xml.XmlAttribute.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "ノードのローカル名を取得します。"
  remarks: "ノードには、プレフィックスがない場合`LocalName` <xref:System.Xml.XmlAttribute.Name%2A>.</xref:System.Xml.XmlAttribute.Name%2A>と同じです"
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_3_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_3_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_3_1.vb)]"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: "プリフィックスを削除した属性ノードの名前。 次の例で&lt;たとえば = &quot;novel&quot;&gt;、 <xref uid=&quot;langword_csharp_LocalName&quot; name=&quot;LocalName&quot; href=&quot;&quot;> </xref>属性が<xref uid=&quot;langword_csharp_genre&quot; name=&quot;genre&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xml.XmlAttribute.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Name
  id: Name
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Name
  nameWithType: XmlAttribute.Name
  fullName: System.Xml.XmlAttribute.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "ノードの修飾名を取得します。"
  remarks: ''
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_8_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_8_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_8_1.vb)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "属性ノードの限定名。"
  overload: System.Xml.XmlAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: NamespaceURI
  nameWithType: XmlAttribute.NamespaceURI
  fullName: System.Xml.XmlAttribute.NamespaceURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "名前空間のこのノードの URI を取得します。"
  remarks: "属性は、要素にアタッチされてから、名前空間を継承しません。 属性が明示的に指定されていない場合、名前空間、名前空間 URI は String.Empty と見なされます。"
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_1_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_1_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_1_1.vb)]"
  syntax:
    content: public override string NamespaceURI { get; }
    return:
      type: System.String
      description: "名前空間のこのノードの URI。 属性が明示的に指定されていない場合、名前空間、このプロパティは String.Empty を返します。"
  overload: System.Xml.XmlAttribute.NamespaceURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.NodeType
  id: NodeType
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlAttribute.NodeType
  fullName: System.Xml.XmlAttribute.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "現在のノードの種類を取得します。"
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "ノード型<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>ノードは XmlNodeType.Attribute します。"
  overload: System.Xml.XmlAttribute.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlAttribute.OwnerDocument
  fullName: System.Xml.XmlAttribute.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得、 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>このノードが属しています。"
  remarks: ''
  example:
  - "The following example creates an attribute and displays its `OwnerDocument`.  \n  \n [!code-cs[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_2_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_2_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_2_1.vb)]"
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "このノードが属している XML ドキュメントです。"
  overload: System.Xml.XmlAttribute.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.OwnerElement
  id: OwnerElement
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: OwnerElement
  nameWithType: XmlAttribute.OwnerElement
  fullName: System.Xml.XmlAttribute.OwnerElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得、 <xref href=&quot;System.Xml.XmlElement&quot;> </xref>属性が属しています。"
  remarks: ''
  example:
  - "The following example creates an attribute and displays the `OwnerElement` of the attribute.  \n  \n [!code-cs[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_4_1.cs)]\n [!code-vb[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_4_1.vb)]\n [!code-cpp[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_4_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement OwnerElement { get; }
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>属性が属するまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>この属性がない場合の一部、 <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xml.XmlAttribute.OwnerElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.ParentNode
  id: ParentNode
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlAttribute.ParentNode
  fullName: System.Xml.XmlAttribute.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "このノードの親を取得します。 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref>ノードでは、このプロパティは常に返します<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  remarks: "使用して、<xref:System.Xml.XmlAttribute.OwnerElement%2A>を取得するプロパティ、<xref:System.Xml.XmlElement>属性が属している</xref:System.Xml.XmlElement></xref:System.Xml.XmlAttribute.OwnerElement%2A>。"
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref>ノードでは、このプロパティは常に返します<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xml.XmlAttribute.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Prefix
  id: Prefix
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Prefix
  nameWithType: XmlAttribute.Prefix
  fullName: System.Xml.XmlAttribute.Prefix
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得またはこのノードの名前空間プレフィックスを設定します。"
  remarks: "属性のプレフィックスを変更しても、その名前空間 URI は変更されない、ため既定値があることがわかっている属性のプレフィックスを変更するは作成されません新しい属性を既定値と元のプレフィックス。"
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_9_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_9_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_9_1.vb)]"
  syntax:
    content: public override string Prefix { get; set; }
    return:
      type: System.String
      description: "このノードの名前空間プレフィックス。 プレフィックスがない場合、このプロパティは String.Empty を返します。"
  overload: System.Xml.XmlAttribute.Prefix*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "このノードは、読み取り専用です。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "指定したプレフィックスには、無効な文字が含まれています。       指定したプレフィックスが正しくありません。       このノードの namespaceURI が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。       指定したプレフィックスは&quot;xml&quot;と、このノードの名前空間 Uri とは異なる&quot;http://www.w3.org/XML/1998/namespace&quot;です。       このノードが属性で、指定したプレフィックスは&quot;xmlns&quot;、およびこのノードの名前空間 Uri とは異なる&quot;http://www.w3.org/2000/xmlns/&quot;です。       このノードは、属性、このノードの qualifiedName&quot;xmlns&quot;[名前空間]。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)
  id: PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: PrependChild(XmlNode)
  nameWithType: XmlAttribute.PrependChild(XmlNode)
  fullName: System.Xml.XmlAttribute.PrependChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "このノードの子ノードのリストの先頭に指定されたノードを追加します。"
  remarks: "場合、`newChild`は、既にツリーで、最初に削除されます。       挿入されるノードは、別のドキュメントから作成された場合、は、使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>現在のドキュメントにノードをインポートする</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>。 インポートされたノードは、現在のドキュメントに挿入できます。       このメソッドは、ドキュメント オブジェクト モデル (DOM) に Microsoft 拡張機能です。"
  example:
  - For an example of the PrependChild method, see the <xref:System.Xml.XmlNode.PrependChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode PrependChild (System.Xml.XmlNode newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The <xref href=&quot;System.Xml.XmlNode&quot;></xref> to add. ある場合、 <xref href=&quot;System.Xml.XmlDocumentFragment&quot;> </xref>、ドキュメント フラグメントの内容全体がこのノードの子リストに移動されます。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>を追加します。"
  overload: System.Xml.XmlAttribute.PrependChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このノードの子の型のノードを許可しない型が、 <code> newChild </code>ノード。       <code> newChild </code>は、このノードの先祖であります。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>このノードを作成したドキュメントとは異なるドキュメントから作成されました。       このノードは、読み取り専用です。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)
  id: RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: RemoveChild(XmlNode)
  nameWithType: XmlAttribute.RemoveChild(XmlNode)
  fullName: System.Xml.XmlAttribute.RemoveChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "指定した子ノードを削除します。"
  remarks: ''
  example:
  - For an example of the RemoveChild method, see the <xref:System.Xml.XmlNode.RemoveChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode RemoveChild (System.Xml.XmlNode oldChild);
    parameters:
    - id: oldChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>を削除します。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>削除します。"
  overload: System.Xml.XmlAttribute.RemoveChild*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> oldChild </code>このノードの子ではありません。 または、このノードは読み取り専用です。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  id: ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: ReplaceChild(XmlNode,XmlNode)
  nameWithType: XmlAttribute.ReplaceChild(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.ReplaceChild(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "指定された新しい子ノードで指定された子ノードを置き換えます。"
  remarks: "場合、`newChild`は、既にツリーで、最初に削除されます。       場合、`newChild`が作成された別のドキュメントから行うこともできます<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>を現在のドキュメントにノードをインポートします</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>。"
  example:
  - For an example of the ReplaceChild method, see the <xref:System.Xml.XmlNode.ReplaceChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode ReplaceChild (System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "新しい子<xref href=&quot;System.Xml.XmlNode&quot;></xref>です。"
    - id: oldChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>を置き換えます。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>を交換してください。"
  overload: System.Xml.XmlAttribute.ReplaceChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "このノードの子の型のノードを許可しない型が、 <code> newChild </code>ノード。       <code> newChild </code>は、このノードの先祖であります。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>このノードを作成したドキュメントとは異なるドキュメントから作成されました。       このノードは、読み取り専用です。       <code> oldChild </code>このノードの子ではありません。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlAttribute.SchemaInfo
  fullName: System.Xml.XmlAttribute.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "ポスト-スキーマの検証の情報セットをスキーマ検証の結果には、このノードに割り当てられているを取得します。"
  remarks: "SchemaInfo プロパティは、このノードが検証されるときに設定されます。"
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> Infoset を含む、ポスト-スキーマの検証 - このノードのです。"
  overload: System.Xml.XmlAttribute.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Specified
  id: Specified
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Specified
  nameWithType: XmlAttribute.Specified
  fullName: System.Xml.XmlAttribute.Specified
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "属性の値が明示的に設定されたかどうかを示す値を取得します。"
  remarks: "実装では、ユーザーではなく、このプロパティを担当します。 ユーザーは、(既定値または固定値と同じ値になった場合でも) の属性の値を変更する場合、指定したフラグ自動的に反転して、`true`です。 再指定する属性を DTD の既定値または固定値として、ユーザーは、属性を削除する必要があります。 実装し、使用可能、新しい属性に設定された指定した`false`既定/固定値の&1; つ存在する場合) とします。       概要: 1。  属性に割り当てられた値がある場合は、ドキュメントで`Specified`は`true`値は、割り当てられた値。      2.  属性は、ドキュメントに割り当てられた値が存在しないと、DTD では、既定値または固定値を持つ場合`Specified`は`false`値は、DTD で既定値または固定値とします。      3.  それ以外の場合、属性は、ドキュメントの構造体のモデルでは表示されません。"
  syntax:
    content: public virtual bool Specified { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>この属性が、元のインスタンス ドキュメントで値を明示的に指定された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 値<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> DTD から属性の値が取得されたことを示します。"
  overload: System.Xml.XmlAttribute.Specified*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Value
  id: Value
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Value
  nameWithType: XmlAttribute.Value
  fullName: System.Xml.XmlAttribute.Value
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得またはノードの値を設定します。"
  remarks: ''
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_6_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_6_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_6_1.vb)]"
  syntax:
    content: public override string Value { get; set; }
    return:
      type: System.String
      description: "返される値は、<xref:System.Xml.XmlNode.NodeType*>ノードの</xref:System.Xml.XmlNode.NodeType*>。 <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;> </xref>ノード、このプロパティは、属性の値。"
  overload: System.Xml.XmlAttribute.Value*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ノードは読み取り専用と、設定操作が呼び出されます。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlAttribute.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "指定した<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>ノードのすべての子を保存します。"
  remarks: "このメソッドは、ドキュメント オブジェクト モデル (DOM) に Microsoft 拡張機能です。 これは機能的に等価、<xref:System.Xml.XmlAttribute.InnerXml%2A>プロパティ</xref:System.Xml.XmlAttribute.InnerXml%2A>。"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref>を保存します。"
  overload: System.Xml.XmlAttribute.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlAttribute.WriteTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "指定した<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>にノードを保存します。"
  remarks: "このメソッドは、ドキュメント オブジェクト モデル (DOM) に Microsoft 拡張機能です。 これは機能的に等価、<xref:System.Xml.XmlNode.OuterXml%2A?displayProperty=fullName>プロパティ</xref:System.Xml.XmlNode.OuterXml%2A?displayProperty=fullName>。"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref>を保存します。"
  overload: System.Xml.XmlAttribute.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: XmlAttribute(String,String,String,XmlDocument)
  nameWithType: XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
  fullName: System.Xml.XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: AppendChild(XmlNode)
  nameWithType: XmlAttribute.AppendChild(XmlNode)
  fullName: System.Xml.XmlAttribute.AppendChild(XmlNode)
- uid: System.Xml.XmlAttribute.BaseURI
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: BaseURI
  nameWithType: XmlAttribute.BaseURI
  fullName: System.Xml.XmlAttribute.BaseURI
- uid: System.Xml.XmlAttribute.CloneNode(System.Boolean)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlAttribute.CloneNode(Boolean)
  fullName: System.Xml.XmlAttribute.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlAttribute.InnerText
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerText
  nameWithType: XmlAttribute.InnerText
  fullName: System.Xml.XmlAttribute.InnerText
- uid: System.Xml.XmlAttribute.InnerXml
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerXml
  nameWithType: XmlAttribute.InnerXml
  fullName: System.Xml.XmlAttribute.InnerXml
- uid: System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertAfter(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertAfter(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertAfter(XmlNode,XmlNode)
- uid: System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertBefore(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertBefore(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertBefore(XmlNode,XmlNode)
- uid: System.Xml.XmlAttribute.LocalName
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: LocalName
  nameWithType: XmlAttribute.LocalName
  fullName: System.Xml.XmlAttribute.LocalName
- uid: System.Xml.XmlAttribute.Name
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Name
  nameWithType: XmlAttribute.Name
  fullName: System.Xml.XmlAttribute.Name
- uid: System.Xml.XmlAttribute.NamespaceURI
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlAttribute.NamespaceURI
  fullName: System.Xml.XmlAttribute.NamespaceURI
- uid: System.Xml.XmlAttribute.NodeType
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NodeType
  nameWithType: XmlAttribute.NodeType
  fullName: System.Xml.XmlAttribute.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlAttribute.OwnerDocument
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlAttribute.OwnerDocument
  fullName: System.Xml.XmlAttribute.OwnerDocument
- uid: System.Xml.XmlAttribute.OwnerElement
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerElement
  nameWithType: XmlAttribute.OwnerElement
  fullName: System.Xml.XmlAttribute.OwnerElement
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlAttribute.ParentNode
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ParentNode
  nameWithType: XmlAttribute.ParentNode
  fullName: System.Xml.XmlAttribute.ParentNode
- uid: System.Xml.XmlAttribute.Prefix
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Prefix
  nameWithType: XmlAttribute.Prefix
  fullName: System.Xml.XmlAttribute.Prefix
- uid: System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: PrependChild(XmlNode)
  nameWithType: XmlAttribute.PrependChild(XmlNode)
  fullName: System.Xml.XmlAttribute.PrependChild(XmlNode)
- uid: System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: RemoveChild(XmlNode)
  nameWithType: XmlAttribute.RemoveChild(XmlNode)
  fullName: System.Xml.XmlAttribute.RemoveChild(XmlNode)
- uid: System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ReplaceChild(XmlNode,XmlNode)
  nameWithType: XmlAttribute.ReplaceChild(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.ReplaceChild(XmlNode,XmlNode)
- uid: System.Xml.XmlAttribute.SchemaInfo
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlAttribute.SchemaInfo
  fullName: System.Xml.XmlAttribute.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlAttribute.Specified
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Specified
  nameWithType: XmlAttribute.Specified
  fullName: System.Xml.XmlAttribute.Specified
- uid: System.Xml.XmlAttribute.Value
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Value
  nameWithType: XmlAttribute.Value
  fullName: System.Xml.XmlAttribute.Value
- uid: System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlAttribute.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlAttribute.WriteTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteTo(XmlWriter)
- uid: System.Xml.XmlAttribute.#ctor*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute.XmlAttribute
- uid: System.Xml.XmlAttribute.AppendChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: AppendChild
  nameWithType: XmlAttribute.AppendChild
- uid: System.Xml.XmlAttribute.BaseURI*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: BaseURI
  nameWithType: XmlAttribute.BaseURI
- uid: System.Xml.XmlAttribute.CloneNode*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: CloneNode
  nameWithType: XmlAttribute.CloneNode
- uid: System.Xml.XmlAttribute.InnerText*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerText
  nameWithType: XmlAttribute.InnerText
- uid: System.Xml.XmlAttribute.InnerXml*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerXml
  nameWithType: XmlAttribute.InnerXml
- uid: System.Xml.XmlAttribute.InsertAfter*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertAfter
  nameWithType: XmlAttribute.InsertAfter
- uid: System.Xml.XmlAttribute.InsertBefore*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertBefore
  nameWithType: XmlAttribute.InsertBefore
- uid: System.Xml.XmlAttribute.LocalName*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: LocalName
  nameWithType: XmlAttribute.LocalName
- uid: System.Xml.XmlAttribute.Name*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Name
  nameWithType: XmlAttribute.Name
- uid: System.Xml.XmlAttribute.NamespaceURI*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlAttribute.NamespaceURI
- uid: System.Xml.XmlAttribute.NodeType*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NodeType
  nameWithType: XmlAttribute.NodeType
- uid: System.Xml.XmlAttribute.OwnerDocument*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlAttribute.OwnerDocument
- uid: System.Xml.XmlAttribute.OwnerElement*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerElement
  nameWithType: XmlAttribute.OwnerElement
- uid: System.Xml.XmlAttribute.ParentNode*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ParentNode
  nameWithType: XmlAttribute.ParentNode
- uid: System.Xml.XmlAttribute.Prefix*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Prefix
  nameWithType: XmlAttribute.Prefix
- uid: System.Xml.XmlAttribute.PrependChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: PrependChild
  nameWithType: XmlAttribute.PrependChild
- uid: System.Xml.XmlAttribute.RemoveChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: RemoveChild
  nameWithType: XmlAttribute.RemoveChild
- uid: System.Xml.XmlAttribute.ReplaceChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ReplaceChild
  nameWithType: XmlAttribute.ReplaceChild
- uid: System.Xml.XmlAttribute.SchemaInfo*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlAttribute.SchemaInfo
- uid: System.Xml.XmlAttribute.Specified*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Specified
  nameWithType: XmlAttribute.Specified
- uid: System.Xml.XmlAttribute.Value*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Value
  nameWithType: XmlAttribute.Value
- uid: System.Xml.XmlAttribute.WriteContentTo*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlAttribute.WriteContentTo
- uid: System.Xml.XmlAttribute.WriteTo*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteTo
  nameWithType: XmlAttribute.WriteTo
