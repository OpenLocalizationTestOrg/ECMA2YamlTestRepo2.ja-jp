### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.DirectoryEntry
  id: DirectoryEntry
  children:
  - System.DirectoryServices.DirectoryEntry.#ctor
  - System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  - System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  - System.DirectoryServices.DirectoryEntry.AuthenticationType
  - System.DirectoryServices.DirectoryEntry.Children
  - System.DirectoryServices.DirectoryEntry.Close
  - System.DirectoryServices.DirectoryEntry.CommitChanges
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.DeleteTree
  - System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  - System.DirectoryServices.DirectoryEntry.Exists(System.String)
  - System.DirectoryServices.DirectoryEntry.Guid
  - System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  - System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  - System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  - System.DirectoryServices.DirectoryEntry.Name
  - System.DirectoryServices.DirectoryEntry.NativeGuid
  - System.DirectoryServices.DirectoryEntry.NativeObject
  - System.DirectoryServices.DirectoryEntry.ObjectSecurity
  - System.DirectoryServices.DirectoryEntry.Options
  - System.DirectoryServices.DirectoryEntry.Parent
  - System.DirectoryServices.DirectoryEntry.Password
  - System.DirectoryServices.DirectoryEntry.Path
  - System.DirectoryServices.DirectoryEntry.Properties
  - System.DirectoryServices.DirectoryEntry.RefreshCache
  - System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  - System.DirectoryServices.DirectoryEntry.Rename(System.String)
  - System.DirectoryServices.DirectoryEntry.SchemaClassName
  - System.DirectoryServices.DirectoryEntry.SchemaEntry
  - System.DirectoryServices.DirectoryEntry.UsePropertyCache
  - System.DirectoryServices.DirectoryEntry.Username
  langs:
  - csharp
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
  type: Class
  summary: "DirectoryEntry クラスには、ノードまたは Active Directory ドメイン サービス階層内のオブジェクトがカプセル化します。"
  remarks: "このクラスを使用して、オブジェクトへのバインドまたは読み取りや属性を更新します。 DirectoryEntry、ヘルパー クラスと共にサポート ライフ サイクルの管理とナビゲーション メソッドを提供します。 作成、削除、名前変更、子ノードの移動と子の列挙が含まれます。 ノードを変更した後に、ツリーに保存するには変更をコミットする必要があります。 詳細については、次を参照してください、<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>プロパティ。</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> 。       スキーマのエントリから正規エントリとすべてではなく、一部の情報にアクセスする DirectoryEntry を使用できます。       Active Directory ドメイン サービス階層には、最大で&1000; 単位の複数のノードが含まれています。 各ノードは、ネットワーク プリンターまたはドメイン内のユーザーなどのオブジェクトを表します。 企業ネットワークでは、新しい従業員が採用され、ネットワーク プリンターとコンピューターなどのオブジェクトが追加されますよう継続的に変更します。 Active Directory サービス インターフェイス (ADSI) テクノロジは、ディレクトリ ツリーをこれらのオブジェクトをプログラミングで追加する方法を提供します。       階層内のディレクトリ エントリを作成するには、使用、<xref:System.DirectoryServices.DirectoryEntry.Children%2A>プロパティ</xref:System.DirectoryServices.DirectoryEntry.Children%2A>。 <xref:System.DirectoryServices.DirectoryEntry.Children%2A>プロパティが提供するコレクション、<xref:System.DirectoryServices.DirectoryEntries.Add%2A>メソッドを使用する、コレクションにバインドされている親ノードのすぐ下にノードを追加する</xref:System.DirectoryServices.DirectoryEntries.Add%2A></xref:System.DirectoryServices.DirectoryEntry.Children%2A>。 をコレクションにノードを追加する場合は、新しいノードの名前と、ノードと関連付けるスキーマ テンプレートの名前を指定する必要があります。 たとえば、&quot;Computer&quot;という名前のスキーマを使用して、階層に新しいコンピューターを追加します。       このクラスも含まれます属性は、次のキャッシュ、ネットワーク トラフィックを最適化することができます。 属性のキャッシュを使用するのを参照してください、<xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>プロパティ。</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> 。       DirectoryEntry コンポーネントに関連付けられているクラスは、任意の Active Directory ドメイン サービスのサービス プロバイダーで使用できます。 現在のプロバイダーには、インターネット インフォメーション サービス (IIS)、ライトウェイト ディレクトリ アクセス プロトコル (LDAP)、Novell NetWare ディレクトリ サービス (NDS)、および WinNT などがあります。      > [!NOTE] > このクラスを使用する前に Active Directory ドメイン サービスの基本的な知識があると見なされます。 詳細については、次を参照してください、<xref:System.DirectoryServices?displayProperty=fullName>名前空間の概要。</xref:System.DirectoryServices?displayProperty=fullName> 。"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.DirectoryServices.Design.DirectoryEntryConverter))]

      [System.DirectoryServices.DSDescription("DirectoryEntryDesc")]

      public class DirectoryEntry : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  id: '#ctor'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>クラスです。"
  syntax:
    content: public DirectoryEntry ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>指定したネイティブ Active Directory ドメイン サービス オブジェクトにバインドされるクラスです。"
  remarks: "このコンス トラクターを使用するとのメソッドとプロパティを使用するプログラム、<xref:System.DirectoryServices.DirectoryEntry>ネイティブ Active Directory ドメイン サービス オブジェクトに対して、ネイティブの API を介して Iad インターフェイスを実装するクラス</xref:System.DirectoryServices.DirectoryEntry>。 Iad インターフェイスの詳細については、トピックを参照してください。 [Iad](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) MSDN ライブラリで[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)です。"
  syntax:
    content: public DirectoryEntry (object adsObject);
    parameters:
    - id: adsObject
      type: System.Object
      description: "バインドするネイティブ Active Directory ドメイン サービス オブジェクトの名前。"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref> Active Directory ドメイン サービス内のノードにこのインスタンスがバインドされるクラスが、指定したパスにあります。"
  remarks: ''
  example:
  - "The following example binds a <xref:System.DirectoryServices.DirectoryEntry> object to the directory entry at the specified path, and displays the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> property of each child entry that is specified by the node's <xref:System.DirectoryServices.DirectoryEntry.Children%2A> property.  \n  \n```vb  \nPublic Class PrintChildren  \n  \n    'Entry point which delegates to C-style main Private Function.  \n    Public Overloads Shared Sub Main()  \n        Main(System.Environment.GetCommandLineArgs())  \n    End Sub  \n  \n    Overloads Public Shared Sub Main(args() As String)  \n        Dim objDE As DirectoryEntry  \n        Dim strPath As String = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n        If args.Length > 0 Then  \n            strPath = args(1)  \n        End If   \n        ' Create a new DirectoryEntry with the given path.  \n        objDE = New DirectoryEntry(strPath)  \n  \n        Dim objChildDE As DirectoryEntry  \n        For Each objChildDE In  objDE.Children  \n            Console.WriteLine(objChildDE.Path)  \n        Next objChildDE  \n    End Sub 'Main  \nEnd Class 'PrintChildren  \n  \n```  \n  \n```c#  \npublic class PrintChildren{  \n   public static void Main(String[] args)  \n   {  \n      DirectoryEntry objDE;  \n      String strPath=\"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n      if(args.Length>0)strPath=args[1];  \n  \n      // Create a new DirectoryEntry with the given path.  \n      objDE=new DirectoryEntry(strPath);  \n  \n      foreach(DirectoryEntry objChildDE in objDE.Children)  \n        Console.WriteLine(objChildDE.Path);  \n   }  \n }  \n  \n```  \n  \n```cpp#  \nint main()  \n{  \n    String^ args[] = Environment::GetCommandLineArgs();  \n    DirectoryEntry^ objDE;  \n    String^ strPath = \"LDAP://DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n    if(args->Length>1)  \n    {  \n        strPath=args[1];  \n    }  \n  \n    // Create a new DirectoryEntry with the given path.  \n    objDE = gcnew DirectoryEntry(strPath);  \n  \n    System::Collections::IEnumerator^ enum0 = objDE->Children->GetEnumerator();  \n    while (enum0->MoveNext())  \n    {  \n        DirectoryEntry^ objChildDE = safe_cast<DirectoryEntry^>(enum0->Current);  \n        Console::WriteLine(objChildDE->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public DirectoryEntry (string path);
    parameters:
    - id: path
      type: System.String
      description: "DirectoryEntry をディレクトリにバインドする位置を示すパス。 <xref:System.DirectoryServices.DirectoryEntry.Path*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.Path*>。"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>クラスです。"
  syntax:
    content: public DirectoryEntry (string path, string username, string password);
    parameters:
    - id: path
      type: System.String
      description: "このパス<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>です。 <xref:System.DirectoryServices.DirectoryEntry.Path*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.Path*>。"
    - id: username
      type: System.String
      description: "クライアントを認証するときに使用するユーザー名。 <xref:System.DirectoryServices.DirectoryEntry.Username*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.Username*>。"
    - id: password
      type: System.String
      description: "クライアントを認証するときに使用するパスワードです。 <xref:System.DirectoryServices.DirectoryEntry.Password*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.Password*>。"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  id: '#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)'
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  type: Constructor
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>クラスです。"
  syntax:
    content: public DirectoryEntry (string path, string username, string password, System.DirectoryServices.AuthenticationTypes authenticationType);
    parameters:
    - id: path
      type: System.String
      description: "このパス<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>です。 <xref:System.DirectoryServices.DirectoryEntry.Path*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.Path*>。"
    - id: username
      type: System.String
      description: "クライアントを認証するときに使用するユーザー名。 <xref:System.DirectoryServices.DirectoryEntry.Username*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.Username*>。"
    - id: password
      type: System.String
      description: "クライアントを認証するときに使用するパスワードです。 <xref:System.DirectoryServices.DirectoryEntry.Password*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.Password*>。"
    - id: authenticationType
      type: System.DirectoryServices.AuthenticationTypes
      description: "1 つ、 <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref>値。 <xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>プロパティは、この値に初期化します</xref:System.DirectoryServices.DirectoryEntry.AuthenticationType*>。"
  overload: System.DirectoryServices.DirectoryEntry.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  id: AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得または使用する認証の種類を設定します。"
  remarks: "前のバージョン[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]、既定値は<xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes> 以降で[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]、既定値は<xref:System.DirectoryServices.AuthenticationTypes>.</xref:System.DirectoryServices.AuthenticationTypes>"
  syntax:
    content: public System.DirectoryServices.AuthenticationTypes AuthenticationType { get; set; }
    return:
      type: System.DirectoryServices.AuthenticationTypes
      description: "1 つ、 <xref href=&quot;System.DirectoryServices.AuthenticationTypes&quot;> </xref>値。"
  overload: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Children
  id: Children
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Active Directory ドメイン サービス階層の子をこのノードのエントリを取得します。"
  remarks: "子エントリは、このノードの直系の子だけです。       このプロパティを使用して、検索、取得、または、階層内のディレクトリ エントリを作成します。 このプロパティは、通常のイテレーション機能と共に提供するコレクション、<xref:System.DirectoryServices.DirectoryEntries.Add%2A>メソッドを使用する、コレクションにバインドされている親ノードのすぐ下にノードを追加する</xref:System.DirectoryServices.DirectoryEntries.Add%2A>。 をコレクションにノードを追加する場合は、新しいノードの名前と、ノードと関連付けるスキーマ テンプレートの名前を指定する必要があります。 たとえば、&quot;Computer&quot;という名前のスキーマを使用して、階層に新しいコンピューターを追加します。      > [!NOTE] > 既定では、変更されるローカルにキャッシュします。 変更するノードを追加するか、後に呼び出す必要があります、<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>メソッドに、ツリーに保存するには、変更を確定します</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>。 呼び出す場合<xref:System.DirectoryServices.DirectoryEntry.RefreshCache>呼び出す前に<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>をプロパティ キャッシュにコミットされていない変更は失われます</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A></xref:System.DirectoryServices.DirectoryEntry.RefreshCache>。 詳細については、次を参照してください、<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>と<xref:System.DirectoryServices.DirectoryEntry.RefreshCache>メソッド、および<xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>プロパティ。</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A> </xref:System.DirectoryServices.DirectoryEntry.RefreshCache> </xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> 。"
  syntax:
    content: public System.DirectoryServices.DirectoryEntries Children { get; }
    return:
      type: System.DirectoryServices.DirectoryEntries
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntries&quot;> </xref> Active Directory ドメイン サービス階層内のこのノードの子エントリを含むオブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.Children*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Close
  id: Close
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "閉じる、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>オブジェクトをこのコンポーネントに関連付けられているすべてのシステム リソースを解放します。"
  remarks: "ガベージ コレクションを待機することがなく、管理されていないシステム リソースを解放するには、このメソッドを呼び出します。       Close、何らかの操作の呼び出しの後で、<xref:System.DirectoryServices.DirectoryEntry>例外が発生する可能性があります</xref:System.DirectoryServices.DirectoryEntry>。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.Close*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  id: CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "ディレクトリ エントリを基になるディレクトリ ストアに加えられた変更を保存します。"
  remarks: "既定では、ローカル コンピューターに、キャッシュ、プロパティの変更は加えし、プロパティ値を読み取るが最初に読み取られた後にキャッシュされます。 詳細については、 <xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>。</xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>を参照してください。       キャッシュに加えられた変更には、プロパティの変更だけでなくへの呼び出しが含まれます<xref:System.DirectoryServices.DirectoryEntries.Add%2A>(これが新しく作成したエントリの場合)。</xref:System.DirectoryServices.DirectoryEntries.Add%2A> 。      > [!CAUTION] > を呼び出す場合<xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>CommitChanges を呼び出す前にプロパティのキャッシュにコミットされていない変更は失われます</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>。      ## セキュリティ - 使用する、<xref:System.DirectoryServices.DirectoryServicesPermission>読み取り、書き込み、削除、変更すると、および Active Directory ドメイン サービス階層に追加するためのクラス</xref:System.DirectoryServices.DirectoryServicesPermission>。 関連する列挙値: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess>"
  syntax:
    content: public void CommitChanges ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.CommitChanges*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  id: CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "指定した親の子としてこのエントリのコピーを作成します。"
  remarks: "場合<xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>は`true`、呼び出す<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>永続的なコピーを作成する新しいオブジェクトにします</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A></xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>。       ライトウェイト ディレクトリ アクセス プロトコル (LDAP) プロバイダーは、CopyTo メソッドを現在サポートしていません。"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "識別名、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>作成されるコピーの親となるオブジェクト。"
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>を新しい親の子としてこのエントリのコピーを表すオブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>コンテナーではありません。"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "このコピーを作成<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクト、指定した親の子として<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクト、指定した新しい名前。"
  remarks: "現在、ライトウェイト ディレクトリ アクセス プロトコル (LDAP) プロバイダーでは、このメソッドをサポートしていません。       場合<xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>は`true`、呼び出す<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>永続的なコピーを作成する新しいオブジェクトにします</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A></xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>。"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry CopyTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "DN、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>作成されるコピーの親となるオブジェクト。"
    - id: newName
      type: System.String
      description: "このエントリのコピーの名前。"
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "指定した親の子としてこのエントリの名前が変更されたコピーです。"
  overload: System.DirectoryServices.DirectoryEntry.CopyTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクトがコンテナーではありません。"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  id: DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Active Directory ドメイン サービス階層から、このエントリとそのサブツリー全体を削除します。"
  remarks: "Active Directory サービス インターフェイス (ADSI) システムが指定したプロバイダーののみ、ライトウェイト ディレクトリ アクセス プロトコル (LDAP) は現在この操作をサポートします。      > [!CAUTION] > エントリとそのサブツリー全体を Active Directory ドメイン サービス階層から削除されます。      ## セキュリティ - 使用<xref:System.DirectoryServices.DirectoryServicesPermission>Active Directory ドメイン サービス階層からのエントリを削除するためです</xref:System.DirectoryServices.DirectoryServicesPermission>。 関連する列挙値: <xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>.</xref:System.DirectoryServices.DirectoryServicesPermissionAccess?displayProperty=fullName>"
  syntax:
    content: public void DeleteTree ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.DeleteTree*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>コンテナーではありません。"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "によって使用されているリソース (メモリを除く) を破棄、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>です。"
  remarks: "このメソッドは、パブリック<xref:System.ComponentModel.Component.Dispose%2A>メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.ComponentModel.Component.Dispose%2A>。 <xref:System.ComponentModel.Component.Dispose%2A>保護された Dispose メソッドを呼び出し、`disposing`パラメーターに設定`true`です。</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>呼び出す<xref:System.ComponentModel.Component.Dispose%2A>で`disposing`&quot;éý&quot; `false`</xref:System.ComponentModel.Component.Dispose%2A> 。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.DirectoryServices.DirectoryEntry>オブジェクト参照。</xref:System.DirectoryServices.DirectoryEntry> 。 このメソッドを呼び出して、<xref:System.ComponentModel.Component.Dispose%2A>参照される各オブジェクトのメソッド</xref:System.ComponentModel.Component.Dispose%2A>。       詳細については、<xref:System.ComponentModel.Component.Dispose%2A>と<xref:System.Object.Finalize%2A>メソッドを参照してください[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</xref:System.Object.Finalize%2A></xref:System.ComponentModel.Component.Dispose%2A>。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.DirectoryServices.DirectoryEntry.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  id: Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "指定されたパスがディレクトリ サービスの実際のエントリを表すかどうかを判断します。"
  remarks: ''
  example:
  - "The following example takes one argument and determines whether the path corresponds to a valid <xref:System.DirectoryServices.DirectoryEntry>.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n' Determine whether the given path is correct for the DirectoryEntry.  \nIf DirectoryEntry.Exists(myADSPath) Then  \n   Console.WriteLine(\"The path {0} is valid\",myADSPath)  \nElse  \n   Console.WriteLine(\"The path {0} is invalid\",myADSPath)  \nEnd If  \n  \n```  \n  \n```c#  \nstring myADSPath =\"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry.Exists(myADSPath))  \n{  \n    Console.WriteLine(\"The path {0} is valid\",myADSPath);  \n}  \n    else  \n{  \n    Console.WriteLine(\"The path {0} is invalid\",myADSPath);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n// Determine whether the given path is correct for the DirectoryEntry.  \nif (DirectoryEntry::Exists(myADSPath))   \n{  \n    Console::WriteLine(\"The path {0} is valid\", myADSPath);  \n}   \nelse   \n{  \n    Console::WriteLine(\"The path {0} is invalid\", myADSPath);  \n}  \n  \n```"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "確認するエントリのパス。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定されたパスがディレクトリ サービスの有効なエントリを表している場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.DirectoryServices.DirectoryEntry.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Guid
  id: Guid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "GUID を取得、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>です。"
  remarks: "Active Directory ドメイン サービス内のオブジェクトへのバインドを使用して、<xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>プロパティ</xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A>。"
  example:
  - "The following example demonstrates the Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its Guid and <xref:System.DirectoryServices.DirectoryEntry.NativeGuid%2A> properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" + myDirectoryEntry.NativeGuid)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid);  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n  \n```"
  syntax:
    content: public Guid Guid { get; }
    return:
      type: System.Guid
      description: "A<xref:System.Guid>の GUID を表す構造体、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref></xref:System.Guid> 。"
  overload: System.DirectoryServices.DirectoryEntry.Guid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  id: Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "ネイティブ Active Directory ドメイン サービス オブジェクトのメソッドを呼び出します。"
  remarks: "ネイティブ メソッドの戻り値に対応する、Iad インターフェイスが実装されている場合<xref:System.DirectoryServices.DirectoryEntry>が返されます</xref:System.DirectoryServices.DirectoryEntry>。 Iad インターフェイスの詳細については、トピックを参照してください。 [Iad](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) MSDN ライブラリで[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp)です。"
  syntax:
    content: public object Invoke (string methodName, object[] args);
    parameters:
    - id: methodName
      type: System.String
      description: "呼び出すメソッドの名前です。"
    - id: args
      type: System.Object[]
      description: "型の配列<xref:System.Object>に呼び出すメソッドの引数を格納するオブジェクト</xref:System.Object>。"
    return:
      type: System.Object
      description: "呼び出されたメソッドの戻り値。"
  overload: System.DirectoryServices.DirectoryEntry.Invoke*
  exceptions:
  - type: System.DirectoryServices.DirectoryServicesCOMException
    commentId: T:System.DirectoryServices.DirectoryServicesCOMException
    description: "ネイティブ メソッドがスローされました、<xref:System.Runtime.InteropServices.COMException>例外です</xref:System.Runtime.InteropServices.COMException>。"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "ネイティブ メソッドがスローされました、<xref:System.Reflection.TargetInvocationException>例外です</xref:System.Reflection.TargetInvocationException>。 <xref:System.Exception.InnerException*>プロパティが含まれています、<xref:System.Runtime.InteropServices.COMException>例外が発生した実際のエラーに関する情報を格納します</xref:System.Runtime.InteropServices.COMException></xref:System.Exception.InnerException*>。"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  id: InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "ネイティブ Active Directory ドメイン サービス オブジェクトからプロパティを取得します。"
  remarks: "このメソッドは使用できません。 <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>プロパティは、のプロパティにアクセスするために使用する必要があります、<xref:System.DirectoryServices.DirectoryEntry>オブジェクト</xref:System.DirectoryServices.DirectoryEntry></xref:System.DirectoryServices.DirectoryEntry.Properties%2A>。"
  syntax:
    content: public object InvokeGet (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "取得するプロパティの名前。"
    return:
      type: System.Object
      description: "要求されたプロパティを表すオブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.InvokeGet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  id: InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "ネイティブ Active Directory ドメイン サービス オブジェクトのプロパティを設定します。"
  remarks: "このメソッドは使用できません。 <xref:System.DirectoryServices.DirectoryEntry.Properties%2A>プロパティは、のプロパティにアクセスするために使用する必要があります、<xref:System.DirectoryServices.DirectoryEntry>オブジェクト</xref:System.DirectoryServices.DirectoryEntry></xref:System.DirectoryServices.DirectoryEntry.Properties%2A>。"
  syntax:
    content: public void InvokeSet (string propertyName, object[] args);
    parameters:
    - id: propertyName
      type: System.String
      description: "設定するプロパティの名前。"
    - id: args
      type: System.Object[]
      description: "設定する Active Directory ドメイン サービス オブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.InvokeSet*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  id: MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "この移動<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>に指定された親オブジェクトです。"
  remarks: "場合<xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>は`true`、呼び出し、 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>、移動を永続的に行うために新しいオブジェクトのメソッド</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A></xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>。"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "このエントリの移動先の親。"
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>コンテナーではありません。"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  id: MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "この移動<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクトを指定した親と指定された値の名前を変更します。"
  remarks: "場合<xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>は`true`、呼び出す<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>永続的な移行を実現する、新しいオブジェクトにします</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A></xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>。"
  syntax:
    content: public void MoveTo (System.DirectoryServices.DirectoryEntry newParent, string newName);
    parameters:
    - id: newParent
      type: System.DirectoryServices.DirectoryEntry
      description: "このエントリの移動先の親。"
    - id: newName
      type: System.String
      description: "このエントリの新しい名前。"
  overload: System.DirectoryServices.DirectoryEntry.MoveTo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>コンテナーではありません。"
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Name
  id: Name
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "基になるディレクトリ サービスで命名されているオブジェクトの名前を取得します。"
  remarks: "これは、名前をと共にと<xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>その兄弟からこのエントリを区別、および各コンテナーに兄弟間で一意でなければなりません</xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A>。"
  example:
  - "The following example creates a <xref:System.DirectoryServices.DirectoryEntry> for the node in the Active Directory Domain Services. It then displays the Name and <xref:System.DirectoryServices.DirectoryEntry.Path%2A> properties of its child nodes.  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,  \n           _DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\" + myDirectoryEntry.Name)  \nConsole.WriteLine(ControlChars.NewLine _  \n        + \"The child entries for this node in the Active Directory Domain Services hierarchy\")  \n  \nDim myDirectoryEntryChild As DirectoryEntry  \nFor Each myDirectoryEntryChild In  myDirectoryEntry.Children  \n   Console.WriteLine(myDirectoryEntryChild.Path)  \nNext myDirectoryEntryChild  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \nConsole.WriteLine(\"DirectoryEntry Name :\"+ myDirectoryEntry.Name);  \nConsole.WriteLine(\"\\nThe child entries for this node \"+  \n   \"in the Active Directory Domain Services hierarchy\");  \n  \nforeach(DirectoryEntry myDirectoryEntryChild in  \n   myDirectoryEntry.Children)  \n{  \n   Console.WriteLine(myDirectoryEntryChild.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \nConsole::WriteLine(\"DirectoryEntry Name : {0}\", myDirectoryEntry->Name);  \nConsole::WriteLine(\"\\nThe child entries for this node in the Active Directory Domain Services hierarchy\");  \n  \nCollections::IEnumerator^ myEnumerator = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnumerator->MoveNext())   \n{  \n    DirectoryEntry^ myDirectoryEntryChild = safe_cast<DirectoryEntry^>(myEnumerator->Current);  \n    Console::WriteLine(myDirectoryEntryChild->Path);  \n}  \n```"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "基になるディレクトリ サービスで命名されているオブジェクトの名前。"
  overload: System.DirectoryServices.DirectoryEntry.Name*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  id: NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "GUID を取得、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>プロバイダーから返されるようにします。"
  remarks: "オブジェクトを Active Directory ドメイン サービスにバインドするときは、NativeGuid プロパティを使用します。      > [!NOTE] > ライトウェイト ディレクトリ アクセス プロトコル (LDAP) プロバイダーのグローバル一意識別子を返します、<xref:System.DirectoryServices.DirectoryEntry>インターネット インフォメーション サービス (IIS)、Novell NetWare ディレクトリ サーバー (NDS)、および WinNT プロバイダーとは異なる形式にします</xref:System.DirectoryServices.DirectoryEntry>。"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and displays its <xref:System.DirectoryServices.DirectoryEntry.Guid%2A> and NativeGuid properties.  \n  \n```vb  \nDim myADSPath As [String] = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \n  \n' Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\" + myDirectoryEntry.Guid.ToString)  \nConsole.WriteLine(\"The Native GUID of the ADS\" + \"object:\" +   \n             myDirectoryEntry.NativeGuid)  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n             DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole.WriteLine(\"The GUID of the ADS object:\"+  \n                  myDirectoryEntry.Guid);  \nConsole.WriteLine(\"The Native GUID of the ADS\"+  \n                  \"object:\"+myDirectoryEntry.NativeGuid);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \n  \n// Display the Guid and NativeGuid.  \nConsole::WriteLine(\"The GUID of the ADS object: {0}\", myDirectoryEntry->Guid));  \nConsole::WriteLine(\"The Native GUID of the ADS object: {0}\",  \n                   myDirectoryEntry->NativeGuid);  \n```"
  syntax:
    content: public string NativeGuid { get; }
    return:
      type: System.String
      description: "A<xref:System.Guid>の GUID を表す構造体、 <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>プロバイダーから返されるように、</xref:System.Guid> 。"
  overload: System.DirectoryServices.DirectoryEntry.NativeGuid*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  id: NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "ネイティブ Active Directory サービス インターフェイス (ADSI) オブジェクトを取得します。"
  remarks: "このプロパティを使用して、COM インターフェイスを使用する場合は、Iad インターフェイスを実装しているネイティブの Active Directory ドメイン サービス オブジェクトをキャストします。 Iad インターフェイスの詳細については、トピックを参照してください。 [Iad](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp) MSDN ライブラリで[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/iads.asp)です。       このオブジェクトは、高度なシナリオでは実行できないこと、<xref:System.DirectoryServices?displayProperty=fullName>クラスだけです</xref:System.DirectoryServices?displayProperty=fullName>。 これを使用するには、Iad ファミリから COM インターフェイスの&1; つをインポートし、このプロパティは、そのインターフェイスをキャストする必要があります。"
  syntax:
    content: public object NativeObject { get; }
    return:
      type: System.Object
      description: "ネイティブ ADSI オブジェクトです。"
  overload: System.DirectoryServices.DirectoryEntry.NativeObject*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  id: ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得または、このエントリのセキュリティ記述子を設定します。"
  syntax:
    content: public System.DirectoryServices.ActiveDirectorySecurity ObjectSecurity { get; set; }
    return:
      type: System.DirectoryServices.ActiveDirectorySecurity
      description: "<xref href=&quot;System.DirectoryServices.ActiveDirectorySecurity&quot;> </xref>をこのディレクトリ エントリのセキュリティ記述子を表すオブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Options
  id: Options
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "このエントリのプロバイダー固有のオプションを取得します。"
  syntax:
    content: public System.DirectoryServices.DirectoryEntryConfiguration Options { get; }
    return:
      type: System.DirectoryServices.DirectoryEntryConfiguration
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntryConfiguration&quot;> </xref>このエントリのプロバイダー固有のオプションを含むオブジェクトです。"
  overload: System.DirectoryServices.DirectoryEntry.Options*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Parent
  id: Parent
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Active Directory ドメイン サービス階層では、このエントリの親を取得します。"
  remarks: ''
  example:
  - "The following example searches a given <xref:System.DirectoryServices.DirectoryEntry> and displays the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> and Parent of the result.  \n  \n```vb  \nDim myADSPath As String = _   \n          \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \nConsole.WriteLine(\"Parent is :\" + myDirectoryEntry.Parent.Path)  \n  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole.WriteLine(\"Parent is :\"+myDirectoryEntry.Parent.Path);  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=user,CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \nConsole::WriteLine(\"Parent is :{0}\", myDirectoryEntry->Parent->Path);  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry Parent { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>このエントリの親を表すオブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Password
  id: Password
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "クライアントの認証に使用するパスワードを設定します。"
  remarks: "設定することができます、<xref:System.DirectoryServices.DirectoryEntry.Username%2A>とパスワードのプロパティを Active Directory ドメイン サービスの情報にアクセスに使用する代替の資格情報を指定します</xref:System.DirectoryServices.DirectoryEntry.Username%2A>。 その他の<xref:System.DirectoryServices.DirectoryEntry>オブジェクトがこのインスタンスから取得した (を使用して<xref:System.DirectoryServices.DirectoryEntry.Children%2A>) が同じ代替資格情報で自動的に作成します</xref:System.DirectoryServices.DirectoryEntry.Children%2A></xref:System.DirectoryServices.DirectoryEntry>。"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.Username%2A> and Password properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry   \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,  \n         DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>  \n             (myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Password { set; }
    return:
      type: System.String
      description: "クライアントを認証するときに使用するパスワードです。"
  overload: System.DirectoryServices.DirectoryEntry.Password*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Path
  id: Path
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "このパスが設定を取得または<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>です。"
  remarks: "The Path property uniquely identifies this entry in a networked environment. This entry can always be retrieved using this Path.  \n  \n Setting the Path retrieves a new entry from the directory store; it does not change the path of the currently bound entry.  \n  \n The classes associated with the <xref:System.DirectoryServices.DirectoryEntry> component can be used with any of the Active Directory Domain Services service providers. Some of the current providers are Internet Information Services (IIS), Lightweight Directory Access Protocol (LDAP), Novell NetWare Directory Service (NDS), and WinNT.  \n  \n> [!NOTE]\n>  The section of the Path that identifies the provider (precedes \"://\") is case-sensitive. For example, \"LDAP://\" or \"WinNT://\".  \n  \n The syntax for the Path property varies according to the provider. Some common scenarios are:  \n  \n WinNT  \n  \n-   Connect to a group on a computer. For example, \"WinNT**://\\<domain name>/\\<computer name>/\\<group name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<group name>**\".  \n  \n-   Connect to a user on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<user name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<user name>**\".  \n  \n-   Connect to services on a computer. For example, \"WinNT://**\\<domain name>/\\<computer name>/\\<service name>**\". If you are connecting to a local computer, \"WinNT://**\\<computer name>/\\<service name>**\".  \n  \n-   Discover all domains on the network. For example, \"WinNT:\" The domains can be found by enumerating the children of this entry.  \n  \n LDAP  \n  \n-   Connect to a group in a domain. For example, \"LDAP://CN=\\<group name>, CN =\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to a user in a domain. For example, \"LDAP://CN=\\<full user name>, CN=\\<Users>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n-   Connect to computers in a domain. For example, \"LDAP://CN=\\<computer name>, CN=\\<Computers>, DC=\\<domain component>, DC=\\<domain component>,...\".  \n  \n IIS  \n  \n-   Connect to a Web directory. For example, \"IIS://LocalHost/W3SVC/1/ROOT/\\<Web directory name>\".  \n  \n To bind to the current domain using LDAP, use the path \"LDAP://RootDSE\", then get the default naming context and rebind the entry. For example:  \n  \n```c#  \nString str = ent.Properties[\"defaultNamingContext\"][0];  \nDirectoryEntry domain = new DirectoryEntry(\"LDAP://\" + str);  \n```  \n  \n For more information, see the documentation for your provider and the topic [Using Active Directory Service Interfaces](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/using_adsi.asp) in the MSDN Library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "このパス<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクト。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.DirectoryServices.DirectoryEntry.Path*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Properties
  id: Properties
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "この Active Directory ドメイン サービスのプロパティを取得<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクト。"
  remarks: "プロパティが ADSI インターフェイスを呼び出し、プロパティが初期化されていない場合[IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx)キャッシュから値を取得します。 基のキャッシュが読み込まれていない場合[IADs::Get](http://msdn2.microsoft.com/library/aa746347.aspx)暗黙的に呼び出す[IADs::GetInfo](http://msdn2.microsoft.com/library/aa746349.aspx)です。 このメソッドは、基になるディレクトリ ストアからキャッシュに設定されていない、サポートされているプロパティの値を読み込みます。 プロパティへの後続の呼び出しでは、キャッシュのみでプロパティ値を取得します。 プロパティのキャッシュの読み込みを制御するには、呼び出す<xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>。</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>       **注**プロパティ プロパティはサポートされていません、Active Directory クライアント拡張機能 (ディレクトリ) で使用するため[!INCLUDE[WinNt4Family](~/add/includes/ajax-current-ext-md.md)]です。"
  syntax:
    content: public System.DirectoryServices.PropertyCollection Properties { get; }
    return:
      type: System.DirectoryServices.PropertyCollection
      description: "A <xref href=&quot;System.DirectoryServices.PropertyCollection&quot;> </xref>このエントリに設定されているプロパティを含むオブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  id: RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "このプロパティの値を読み込みます<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>プロパティ キャッシュにオブジェクト。"
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use the <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> method to persist changes to the directory store.
  syntax:
    content: public void RefreshCache ();
    parameters: []
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  id: RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "指定したプロパティの値をプロパティ キャッシュに読み込みます。"
  remarks: >-
    > [!CAUTION]

    >  Any uncommitted changes to the property cache will be lost. Use <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A> to persist changes to the directory store.
  syntax:
    content: public void RefreshCache (string[] propertyNames);
    parameters:
    - id: propertyNames
      type: System.String[]
      description: "指定したプロパティの配列。"
  overload: System.DirectoryServices.DirectoryEntry.RefreshCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  id: Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "これの名前を変更<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクト。"
  remarks: "> [!NOTE]> この記事を参照に使用されるパスこれも影響を与えます。       場合<xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>は`true`、必ず、 <xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>、移動を永続的に行うために新しいオブジェクトのメソッド</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A></xref:System.DirectoryServices.DirectoryEntry.UsePropertyCache%2A>。"
  syntax:
    content: public void Rename (string newName);
    parameters:
    - id: newName
      type: System.String
      description: "エントリの新しい名前。"
  overload: System.DirectoryServices.DirectoryEntry.Rename*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  id: SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "このスキーマ クラスの名前を取得<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクト。"
  remarks: "これと同じ、<xref:System.DirectoryServices.DirectoryEntry.Name%2A>のプロパティ、<xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A>プロパティ</xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A></xref:System.DirectoryServices.DirectoryEntry.Name%2A>。       A<xref:System.DirectoryServices.DirectoryEntry>オブジェクトのスキーマは、そのプロパティとメソッドを定義します</xref:System.DirectoryServices.DirectoryEntry>。"
  example:
  - "The following example demonstrates the SchemaClassName and <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and gets all of its children if the <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object.  The <xref:System.DirectoryServices.DirectoryEntry.SchemaEntry%2A> is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name, \"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, \"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public string SchemaClassName { get; }
    return:
      type: System.String
      description: "このスキーマ クラスの名前<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;></xref>オブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  id: SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "このエントリのスキーマ オブジェクトを取得します。"
  remarks: "エントリのスキーマでは、その必須および省略可能なプロパティ名の一覧を決定します。       関連付けられたオブジェクトで使用可能なプロパティとメソッドを調べるには、このプロパティを使用することができます。"
  example:
  - "The following example demonstrates the <xref:System.DirectoryServices.DirectoryEntry.SchemaClassName%2A> and SchemaEntry properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> object and gets all of its children if the SchemaEntry object is a container object.  The SchemaEntry is a container object if the <xref:System.DirectoryServices.DirectoryEntry.Name%2A> of that object is \"container\".  \n  \n```vb  \nDim myADSPath As String = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Creates an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword)  \n  \n' Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\" + myDirectoryEntry.SchemaClassName)  \n  \n' Gets the SchemaEntry of the ADS object.  \nDim mySchemaEntry As DirectoryEntry = myDirectoryEntry.SchemaEntry  \n  \nIf String.Compare(mySchemaEntry.Name, \"container\") = 0 Then  \n   Dim myChildDirectoryEntry As DirectoryEntry  \n   For Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n      Console.WriteLine(myChildDirectoryEntry.Path)  \n   Next  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry  myDirectoryEntry=new DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole.WriteLine(\"Schema class name:\"+myDirectoryEntry.SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS object.  \nDirectoryEntry mySchemaEntry = myDirectoryEntry.SchemaEntry;  \n  \nif (string.Compare(mySchemaEntry.Name,\"container\") == 0)  \n{  \n   foreach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n      Console.WriteLine(myChildDirectoryEntry.Path);  \n}  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Creates an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = gcnew DirectoryEntry(myADSPath, UserName, SecurelyStoredPassword);  \n  \n// Display the 'SchemaClassName'.  \nConsole::WriteLine(\"Schema class name:{0}\", myDirectoryEntry->SchemaClassName);  \n  \n// Gets the SchemaEntry of the ADS Object*.  \nDirectoryEntry^ mySchemaEntry = myDirectoryEntry->SchemaEntry;  \n  \nif (!String::Compare(mySchemaEntry->Name, S\"container\"))   \n{  \n    Collections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \n    while (myEnum->MoveNext())   \n    {  \n        DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n        Console::WriteLine(myChildDirectoryEntry->Path);  \n    }  \n}  \n  \n```"
  syntax:
    content: public System.DirectoryServices.DirectoryEntry SchemaEntry { get; }
    return:
      type: System.DirectoryServices.DirectoryEntry
      description: "A <xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>このエントリのスキーマ クラスを表すオブジェクト。"
  overload: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  id: UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得または各操作後にキャッシュをコミットするかどうかを示す値を設定します。"
  remarks: "既定では、ローカル コンピューターに、キャッシュ、プロパティの変更は加えし、プロパティ値を読み取るが最初に読み取られた後にキャッシュされます。 UsePropertyCache プロパティが`true`へのアクセス、<xref:System.DirectoryServices.DirectoryEntry>オブジェクトのプロパティが高速です</xref:System.DirectoryServices.DirectoryEntry>。 これを設定する`false`キャッシュが各操作後にコミットが発生します。       UsePropertyCache プロパティが場合`true`呼び出すキャッシュ コミット変更して、<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>メソッド</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>。 ディレクトリに変更を行った後は、キャッシュ内の値を更新するには、呼び出し、<xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>メソッド</xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>。      > [!CAUTION] > を呼び出す場合<xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>呼び出す前に<xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A>をプロパティ キャッシュにコミットされていない変更は失われます</xref:System.DirectoryServices.DirectoryEntry.CommitChanges%2A></xref:System.DirectoryServices.DirectoryEntry.RefreshCache%2A>。      > [!NOTE] >、インターネット インフォメーション サービス (IIS) プロバイダーが各操作後にキャッシュをコミットをサポートしていません。"
  syntax:
    content: public bool UsePropertyCache { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、キャッシュする必要があります。 各操作後にコミットできません。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.DirectoryEntry.Username
  id: Username
  parent: System.DirectoryServices.DirectoryEntry
  langs:
  - csharp
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "取得またはクライアントの認証に使用するユーザー名を設定します。"
  remarks: "ユーザー名を設定して<xref:System.DirectoryServices.DirectoryEntry.Password%2A>Active Directory ドメイン サービスの情報にアクセスに使用する代替の資格情報を指定するためにします</xref:System.DirectoryServices.DirectoryEntry.Password%2A>。 その他の<xref:System.DirectoryServices.DirectoryEntry>オブジェクトがこのインスタンスから取得した (を使用して<xref:System.DirectoryServices.DirectoryEntry.Children%2A>) が同じ代替資格情報で自動的に作成します</xref:System.DirectoryServices.DirectoryEntry.Children%2A></xref:System.DirectoryServices.DirectoryEntry>。"
  example:
  - "The following example demonstrates the Username and <xref:System.DirectoryServices.DirectoryEntry.Password%2A> properties of the <xref:System.DirectoryServices.DirectoryEntry> class. This example gets the user-specified <xref:System.DirectoryServices.DirectoryEntry> and the <xref:System.DirectoryServices.DirectoryEntry.Path%2A> of all its <xref:System.DirectoryServices.DirectoryEntry.Children%2A>.  \n  \n```vb  \nDim myADSPath As String = _  \n      \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\"  \n  \n' Create an Instance of DirectoryEntry.  \nDim myDirectoryEntry As New DirectoryEntry(myADSPath)  \nmyDirectoryEntry.Username = UserName  \nmyDirectoryEntry.Password = SecurelyStoredPassword  \n  \n' Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\")  \nDim myChildDirectoryEntry As DirectoryEntry  \nFor Each myChildDirectoryEntry In  myDirectoryEntry.Children  \n   Console.WriteLine(myChildDirectoryEntry.Path)  \nNext myChildDirectoryEntry  \n```  \n  \n```c#  \nString myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry.Username = UserName;  \nmyDirectoryEntry.Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole.WriteLine(\"The Child ADS objects are:\");  \nforeach(DirectoryEntry myChildDirectoryEntry in myDirectoryEntry.Children)  \n   Console.WriteLine(myChildDirectoryEntry.Path);  \n  \n```  \n  \n```cpp#  \nString^ myADSPath = \"LDAP://onecity/CN=Users,DC=onecity,DC=corp,DC=fabrikam,DC=com\";  \n  \n// Create an Instance of DirectoryEntry.  \nDirectoryEntry^ myDirectoryEntry = new DirectoryEntry(myADSPath);  \nmyDirectoryEntry->Username = UserName;  \nmyDirectoryEntry->Password = SecurelyStoredPassword;  \n  \n// Get the Child ADS objects.  \nConsole::WriteLine(\"The Child ADS objects are:\");  \nCollections::IEnumerator^ myEnum = myDirectoryEntry->Children->GetEnumerator();  \nwhile (myEnum->MoveNext())   \n{  \n    DirectoryEntry^ myChildDirectoryEntry = safe_cast<DirectoryEntry^>(myEnum->Current);  \n    Console::WriteLine(myChildDirectoryEntry->Path);  \n}  \n  \n```"
  syntax:
    content: public string Username { get; set; }
    return:
      type: System.String
      description: "クライアントを認証するときに使用するユーザー名。"
  overload: System.DirectoryServices.DirectoryEntry.Username*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.DirectoryServices.DirectoryServicesCOMException
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryServicesCOMException
  nameWithType: DirectoryServicesCOMException
  fullName: System.DirectoryServices.DirectoryServicesCOMException
- uid: System.Reflection.TargetInvocationException
  isExternal: true
  name: System.Reflection.TargetInvocationException
- uid: System.DirectoryServices.DirectoryEntry.#ctor
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry()
  nameWithType: DirectoryEntry.DirectoryEntry()
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry()
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.Object)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(Object)
  nameWithType: DirectoryEntry.DirectoryEntry(Object)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String)
  nameWithType: DirectoryEntry.DirectoryEntry(String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String)
- uid: System.DirectoryServices.DirectoryEntry.#ctor(System.String,System.String,System.String,System.DirectoryServices.AuthenticationTypes)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry(String,String,String,AuthenticationTypes)
  nameWithType: DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
  fullName: System.DirectoryServices.DirectoryEntry.DirectoryEntry(String,String,String,AuthenticationTypes)
- uid: System.DirectoryServices.AuthenticationTypes
  parent: System.DirectoryServices
  isExternal: false
  name: AuthenticationTypes
  nameWithType: AuthenticationTypes
  fullName: System.DirectoryServices.AuthenticationTypes
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
  fullName: System.DirectoryServices.DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
  fullName: System.DirectoryServices.DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntries
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntries
  nameWithType: DirectoryEntries
  fullName: System.DirectoryServices.DirectoryEntries
- uid: System.DirectoryServices.DirectoryEntry.Close
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close()
  nameWithType: DirectoryEntry.Close()
  fullName: System.DirectoryServices.DirectoryEntry.Close()
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges()
  nameWithType: DirectoryEntry.CommitChanges()
  fullName: System.DirectoryServices.DirectoryEntry.CommitChanges()
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry
  fullName: System.DirectoryServices.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.CopyTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.CopyTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.CopyTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree()
  nameWithType: DirectoryEntry.DeleteTree()
  fullName: System.DirectoryServices.DirectoryEntry.DeleteTree()
- uid: System.DirectoryServices.DirectoryEntry.Dispose(System.Boolean)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DirectoryEntry.Dispose(Boolean)
  fullName: System.DirectoryServices.DirectoryEntry.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.DirectoryEntry.Exists(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists(String)
  nameWithType: DirectoryEntry.Exists(String)
  fullName: System.DirectoryServices.DirectoryEntry.Exists(String)
- uid: System.DirectoryServices.DirectoryEntry.Guid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
  fullName: System.DirectoryServices.DirectoryEntry.Guid
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke(String,Object[])
  nameWithType: DirectoryEntry.Invoke(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.Invoke(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet(String)
  nameWithType: DirectoryEntry.InvokeGet(String)
  fullName: System.DirectoryServices.DirectoryEntry.InvokeGet(String)
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet(System.String,System.Object[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet(String,Object[])
  nameWithType: DirectoryEntry.InvokeSet(String,Object[])
  fullName: System.DirectoryServices.DirectoryEntry.InvokeSet(String,Object[])
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry)
- uid: System.DirectoryServices.DirectoryEntry.MoveTo(System.DirectoryServices.DirectoryEntry,System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo(DirectoryEntry,String)
  nameWithType: DirectoryEntry.MoveTo(DirectoryEntry,String)
  fullName: System.DirectoryServices.DirectoryEntry.MoveTo(DirectoryEntry,String)
- uid: System.DirectoryServices.DirectoryEntry.Name
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
  fullName: System.DirectoryServices.DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
  fullName: System.DirectoryServices.DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
  fullName: System.DirectoryServices.DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
  fullName: System.DirectoryServices.DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.ActiveDirectorySecurity
  parent: System.DirectoryServices
  isExternal: false
  name: ActiveDirectorySecurity
  nameWithType: ActiveDirectorySecurity
  fullName: System.DirectoryServices.ActiveDirectorySecurity
- uid: System.DirectoryServices.DirectoryEntry.Options
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
  fullName: System.DirectoryServices.DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntryConfiguration
  parent: System.DirectoryServices
  isExternal: false
  name: DirectoryEntryConfiguration
  nameWithType: DirectoryEntryConfiguration
  fullName: System.DirectoryServices.DirectoryEntryConfiguration
- uid: System.DirectoryServices.DirectoryEntry.Parent
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
  fullName: System.DirectoryServices.DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
  fullName: System.DirectoryServices.DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
  fullName: System.DirectoryServices.DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
  fullName: System.DirectoryServices.DirectoryEntry.Properties
- uid: System.DirectoryServices.PropertyCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache()
  nameWithType: DirectoryEntry.RefreshCache()
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache()
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache(System.String[])
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache(String[])
  nameWithType: DirectoryEntry.RefreshCache(String[])
  fullName: System.DirectoryServices.DirectoryEntry.RefreshCache(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.DirectoryEntry.Rename(System.String)
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename(String)
  nameWithType: DirectoryEntry.Rename(String)
  fullName: System.DirectoryServices.DirectoryEntry.Rename(String)
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
  fullName: System.DirectoryServices.DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
  fullName: System.DirectoryServices.DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
  fullName: System.DirectoryServices.DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
  fullName: System.DirectoryServices.DirectoryEntry.Username
- uid: System.DirectoryServices.DirectoryEntry.#ctor*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DirectoryEntry
  nameWithType: DirectoryEntry.DirectoryEntry
- uid: System.DirectoryServices.DirectoryEntry.AuthenticationType*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: AuthenticationType
  nameWithType: DirectoryEntry.AuthenticationType
- uid: System.DirectoryServices.DirectoryEntry.Children*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Children
  nameWithType: DirectoryEntry.Children
- uid: System.DirectoryServices.DirectoryEntry.Close*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Close
  nameWithType: DirectoryEntry.Close
- uid: System.DirectoryServices.DirectoryEntry.CommitChanges*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CommitChanges
  nameWithType: DirectoryEntry.CommitChanges
- uid: System.DirectoryServices.DirectoryEntry.CopyTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: CopyTo
  nameWithType: DirectoryEntry.CopyTo
- uid: System.DirectoryServices.DirectoryEntry.DeleteTree*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: DeleteTree
  nameWithType: DirectoryEntry.DeleteTree
- uid: System.DirectoryServices.DirectoryEntry.Dispose*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Dispose
  nameWithType: DirectoryEntry.Dispose
- uid: System.DirectoryServices.DirectoryEntry.Exists*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Exists
  nameWithType: DirectoryEntry.Exists
- uid: System.DirectoryServices.DirectoryEntry.Guid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Guid
  nameWithType: DirectoryEntry.Guid
- uid: System.DirectoryServices.DirectoryEntry.Invoke*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Invoke
  nameWithType: DirectoryEntry.Invoke
- uid: System.DirectoryServices.DirectoryEntry.InvokeGet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeGet
  nameWithType: DirectoryEntry.InvokeGet
- uid: System.DirectoryServices.DirectoryEntry.InvokeSet*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: InvokeSet
  nameWithType: DirectoryEntry.InvokeSet
- uid: System.DirectoryServices.DirectoryEntry.MoveTo*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: MoveTo
  nameWithType: DirectoryEntry.MoveTo
- uid: System.DirectoryServices.DirectoryEntry.Name*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Name
  nameWithType: DirectoryEntry.Name
- uid: System.DirectoryServices.DirectoryEntry.NativeGuid*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeGuid
  nameWithType: DirectoryEntry.NativeGuid
- uid: System.DirectoryServices.DirectoryEntry.NativeObject*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: NativeObject
  nameWithType: DirectoryEntry.NativeObject
- uid: System.DirectoryServices.DirectoryEntry.ObjectSecurity*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: ObjectSecurity
  nameWithType: DirectoryEntry.ObjectSecurity
- uid: System.DirectoryServices.DirectoryEntry.Options*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Options
  nameWithType: DirectoryEntry.Options
- uid: System.DirectoryServices.DirectoryEntry.Parent*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Parent
  nameWithType: DirectoryEntry.Parent
- uid: System.DirectoryServices.DirectoryEntry.Password*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Password
  nameWithType: DirectoryEntry.Password
- uid: System.DirectoryServices.DirectoryEntry.Path*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Path
  nameWithType: DirectoryEntry.Path
- uid: System.DirectoryServices.DirectoryEntry.Properties*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Properties
  nameWithType: DirectoryEntry.Properties
- uid: System.DirectoryServices.DirectoryEntry.RefreshCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: RefreshCache
  nameWithType: DirectoryEntry.RefreshCache
- uid: System.DirectoryServices.DirectoryEntry.Rename*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Rename
  nameWithType: DirectoryEntry.Rename
- uid: System.DirectoryServices.DirectoryEntry.SchemaClassName*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaClassName
  nameWithType: DirectoryEntry.SchemaClassName
- uid: System.DirectoryServices.DirectoryEntry.SchemaEntry*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: SchemaEntry
  nameWithType: DirectoryEntry.SchemaEntry
- uid: System.DirectoryServices.DirectoryEntry.UsePropertyCache*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: UsePropertyCache
  nameWithType: DirectoryEntry.UsePropertyCache
- uid: System.DirectoryServices.DirectoryEntry.Username*
  parent: System.DirectoryServices.DirectoryEntry
  isExternal: false
  name: Username
  nameWithType: DirectoryEntry.Username
