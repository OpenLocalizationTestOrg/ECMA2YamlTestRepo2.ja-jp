### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Text.TextPatternRange
  id: TextPatternRange
  children:
  - System.Windows.Automation.Text.TextPatternRange.AddToSelection
  - System.Windows.Automation.Text.TextPatternRange.Clone
  - System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)
  - System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  - System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)
  - System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)
  - System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)
  - System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles
  - System.Windows.Automation.Text.TextPatternRange.GetChildren
  - System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement
  - System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)
  - System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection
  - System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)
  - System.Windows.Automation.Text.TextPatternRange.Select
  - System.Windows.Automation.Text.TextPatternRange.TextPattern
  langs:
  - csharp
  name: TextPatternRange
  nameWithType: TextPatternRange
  fullName: System.Windows.Automation.Text.TextPatternRange
  type: Class
  summary: "連続したテキストの範囲を表します、 <xref href=&quot;System.Windows.Automation.TextPattern&quot;> </xref>コンテナーです。"
  remarks: "挿入ポイント、サブセット、またはすべてのテキストの TextPatternRange を表すことができます、<xref:System.Windows.Automation.TextPattern>コンテナー</xref:System.Windows.Automation.TextPattern> 。       TextPatternRange は、次のいずれかが発生した場合は無効になります: 内のテキスト、<xref:System.Windows.Automation.TextPattern>いくつかのユーザー アクティビティがあるため、コンテナーの変更、または<xref:System.Windows.Automation.ValuePattern.SetValue%2A>メソッドの<xref:System.Windows.Automation.ValuePattern>をプログラムでのテキストの値を変更するために使用、<xref:System.Windows.Automation.TextPattern>コンテナー</xref:System.Windows.Automation.TextPattern> </xref:System.Windows.Automation.ValuePattern> </xref:System.Windows.Automation.ValuePattern.SetValue%2A> </xref:System.Windows.Automation.TextPattern> 。"
  syntax:
    content: public class TextPatternRange
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.AddToSelection
  id: AddToSelection
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: AddToSelection()
  nameWithType: TextPatternRange.AddToSelection()
  fullName: System.Windows.Automation.Text.TextPatternRange.AddToSelection()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "追加倍数をサポートするテキスト コンテナー内の強調表示されたテキストのコレクションへの非結合選択します。"
  remarks: "新しい選択の領域に、テキスト挿入ポイントに移動します。       低次元テキスト範囲を提供すると、カーソルが移動します。"
  syntax:
    content: public void AddToSelection ();
    parameters: []
  overload: System.Windows.Automation.Text.TextPatternRange.AddToSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "テキスト プロバイダーは、複数をサポートしていない場合の非結合選択 (たとえば、<xref:System.Windows.Automation.TextPattern.SupportedTextSelection*>の値が必要<xref uid=&quot;langword_csharp_Multiple&quot; name=&quot;Multiple&quot; href=&quot;&quot;> </xref>).</xref:System.Windows.Automation.TextPattern.SupportedTextSelection*>"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.Clone
  id: Clone
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: Clone()
  nameWithType: TextPatternRange.Clone()
  fullName: System.Windows.Automation.Text.TextPatternRange.Clone()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "新しいを取得<xref href=&quot;System.Windows.Automation.Text.TextPatternRange&quot;></xref>元と同じ<xref href=&quot;System.Windows.Automation.Text.TextPatternRange&quot;></xref>および元のすべてのプロパティを継承します。"
  remarks: "また、作成、新しい<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>から、<xref:System.Windows.Automation.TextPattern>し、元のテキスト範囲のエンドポイントに対応する&2; つのエンドポイントを移動します</xref:System.Windows.Automation.TextPattern></xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。       新しい範囲は、元の個別に操作できます。"
  example:
  - "[!code-cs[UIATextPattern_snip#1060](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1060)]  \n  \n [!code-vb[UIATextPattern_snip#2060](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2060)]"
  syntax:
    content: public System.Windows.Automation.Text.TextPatternRange Clone ();
    parameters: []
    return:
      type: System.Windows.Automation.Text.TextPatternRange
      description: "新しいテキスト範囲。 Null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>で[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) は返されません。"
  overload: System.Windows.Automation.Text.TextPatternRange.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)
  id: Compare(System.Windows.Automation.Text.TextPatternRange)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: Compare(TextPatternRange)
  nameWithType: TextPatternRange.Compare(TextPatternRange)
  fullName: System.Windows.Automation.Text.TextPatternRange.Compare(TextPatternRange)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "返します、<xref:System.Boolean>を示す値かどうか、範囲 (、 <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;> </xref>エンドポイントを<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>エンドポイント) テキストの範囲は、別のテキスト範囲と同じです</xref:System.Boolean>。"
  remarks: ''
  example:
  - "[!code-cs[UIATextPattern_snip#1061](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1061)]  \n  \n [!code-vb[UIATextPattern_snip#2061](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2061)]"
  syntax:
    content: public bool Compare (System.Windows.Automation.Text.TextPatternRange range);
    parameters:
    - id: range
      type: System.Windows.Automation.Text.TextPatternRange
      description: "比較するテキスト範囲。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、両方のテキスト範囲が同じであります。それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Automation.Text.TextPatternRange.Compare*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "範囲の比較対象となる場合は、同じテキスト プロバイダーから発生しません。"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  nameWithType: TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "返します、 <xref:System.Int32>2 つのテキスト範囲が同一のエンドポイントを持つかどうかを示すします</xref:System.Int32>。"
  remarks: "同じテキスト範囲の開始と終了のエンドポイントを比較することによって、テキスト範囲が逆の場合、または論理テキスト フローの順序で、エンドポイントを識別できます。"
  example:
  - "[!code-cs[UIATextPattern_snip#1062](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1062)]  \n  \n [!code-vb[UIATextPattern_snip#2062](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2062)]"
  syntax:
    content: public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;> </xref>または<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>呼び出し元のエンドポイント。"
    - id: targetRange
      type: System.Windows.Automation.Text.TextPatternRange
      description: "比較対象の範囲です。"
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;> </xref>または<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>ターゲットのエンドポイント。"
    return:
      type: System.Int32
      description: "ターゲット エンドポイントとテキストの前に、呼び出し元のエンドポイントが発生した場合は、負の値を返します。       呼び出し元のエンドポイントが、対象のエンドポイントと同じ場所にある場合は、0 を返します。       呼び出し元のエンドポイントが、対象のエンドポイントとテキストの後で発生した場合は、正の値を返します。"
  overload: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "範囲がある場合は null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>で[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "範囲は別のコンテナーです。 場合、"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  id: ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: ExpandToEnclosingUnit(TextUnit)
  nameWithType: TextPatternRange.ExpandToEnclosingUnit(TextUnit)
  fullName: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(TextUnit)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "指定したテキスト範囲を拡大<xref href=&quot;System.Windows.Automation.Text.TextUnit&quot;></xref>です。"
  remarks: "範囲が既に指定された単位数が正確である場合は、変更されません。       ExpandToEnclosingUnit メソッドを正常に実行するためには、一連のアクションはバック グラウンドで実行されます。      1.  テキスト範囲は正規化されます。低次元テキスト範囲にテキスト範囲を縮小するは、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>エンドポイントを作成、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>エンドポイントは不要です</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint></xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>。 この手順は、テキスト範囲にまたがる状況であいまいさをなくすために必要`unit`境界。 たとえば、&quot;{U} RL [http://www.microsoft.com](http://www.microsoft.com)テキストに埋め込まれた&quot;、&quot;{&quot;と&quot;}&quot;がテキスト範囲エンドポイント。      2.  結果として得られる範囲は逆方向、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A>、要求されたの先頭に`unit`境界</xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。      3.  範囲を前方または後方に移動、<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>によって要求された数の`unit`境界</xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。      4.  範囲が移動することによって、低次元テキスト範囲の状態から拡張し、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>要求された&1; つのエンドポイント`unit`境界</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>。       ![移動 >/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;移動 >/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整&quot;)テキスト範囲を Move() と ExpandToEnclosingUnit() に対して調整する方法の例 > [!NOTE] > を完全な単語、文、または挿入ポイントでも仮想カーソル位置で段落全体を読み取る、スクリーン リーダーの一般的なであるために、これらの手順が必要です。       ExpandToEnclosingUnit は非表示と表示の両方のテキストを尊重いたします。 UI オートメーション クライアントがチェックできる、<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>テキスト表示可能範囲</xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>。       ExpandToEnclosingUnit は、次に、ゆだねます最大<xref:System.Windows.Automation.Text.TextUnit>サポートされている場合、指定された<xref:System.Windows.Automation.Text.TextUnit>コントロールでサポートされていません</xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>。       最大値、最小単位からの注文は、以下に記載されています。      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>"
  example:
  - "[!code-cs[UIATextPattern_snip#1063](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1063)]  \n  \n [!code-vb[UIATextPattern_snip#2063](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2063)]"
  syntax:
    content: public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "テキスト単位。"
  overload: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)
  id: FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: FindAttribute(AutomationTextAttribute,Object,Boolean)
  nameWithType: TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)
  fullName: System.Windows.Automation.Text.TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "指定した属性の値を持つテキスト範囲のサブセットを返します。"
  remarks: "表示と非表示のテキストの区別はありません。 UI オートメーション クライアントが使用できる<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>text の可視性を確認する</xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>。      > [!NOTE] > 使用<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>ドキュメント全体を検索する</xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。"
  example:
  - "[!code-cs[UIATextPattern_snip#1064](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1064)]  \n  \n [!code-vb[UIATextPattern_snip#2064](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2064)]"
  syntax:
    content: public System.Windows.Automation.Text.TextPatternRange FindAttribute (System.Windows.Automation.AutomationTextAttribute attribute, object value, bool backward);
    parameters:
    - id: attribute
      type: System.Windows.Automation.AutomationTextAttribute
      description: "検索対象の属性です。"
    - id: value
      type: System.Object
      description: "検索する属性値。 この値は、属性に指定された型と一致する必要があります。"
    - id: backward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>最初ではなく、最後に発生したテキスト範囲を返す場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Windows.Automation.Text.TextPatternRange
      description: "一致する属性と属性値を持つテキスト範囲それ以外の場合は null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>で[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])。"
  overload: System.Windows.Automation.Text.TextPatternRange.FindAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)
  id: FindText(System.String,System.Boolean,System.Boolean)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: FindText(String,Boolean,Boolean)
  nameWithType: TextPatternRange.FindText(String,Boolean,Boolean)
  fullName: System.Windows.Automation.Text.TextPatternRange.FindText(String,Boolean,Boolean)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "指定したテキストを含むテキスト範囲のサブセットを返します。"
  remarks: "表示と非表示のテキストの区別はありません。 UI オートメーション クライアントが使用できる<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>text の可視性を確認する</xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>。      > [!NOTE] > 使用<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>ドキュメント全体を検索する</xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。"
  example:
  - "[!code-cs[UIATextPattern_snip#1065](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1065)]  \n  \n [!code-vb[UIATextPattern_snip#2065](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2065)]"
  syntax:
    content: public System.Windows.Automation.Text.TextPatternRange FindText (string text, bool backward, bool ignoreCase);
    parameters:
    - id: text
      type: System.String
      description: "検索するテキスト文字列。"
    - id: backward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>最初ではなく、最後に発生したテキスト範囲を返す場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、ケースを無視する必要があります。それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Windows.Automation.Text.TextPatternRange
      description: "指定したテキストに一致するテキスト範囲それ以外の場合は null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>で[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])。"
  overload: System.Windows.Automation.Text.TextPatternRange.FindText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)
  id: GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: GetAttributeValue(AutomationTextAttribute)
  nameWithType: TextPatternRange.GetAttributeValue(AutomationTextAttribute)
  fullName: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(AutomationTextAttribute)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキスト範囲全体の間で指定した属性の値を返します。"
  remarks: "表示と非表示のテキストの区別はありません。 UI オートメーション クライアントが使用できる<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>text の可視性を確認する</xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>。"
  example:
  - "[!code-cs[UIATextPattern_snip#1066](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1066)]  \n  \n [!code-vb[UIATextPattern_snip#2066](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2066)]"
  syntax:
    content: public object GetAttributeValue (System.Windows.Automation.AutomationTextAttribute attribute);
    parameters:
    - id: attribute
      type: System.Windows.Automation.AutomationTextAttribute
      description: "テキスト属性。"
    return:
      type: System.Object
      description: "指定した属性の値を返します。 たとえば、GetAttributeValue(TextPattern.FontNameAttribute) 場合は返しますフォント名を表す文字列、そのテキスト範囲の一意なはブール値を返します。       返します<xref href=&quot;System.Windows.Automation.TextPattern.MixedAttributeValue&quot;></xref>がテキスト範囲で指定した属性の値が異なる場合。       返します<xref href=&quot;System.Windows.Automation.AutomationElement.NotSupported&quot;></xref>指定した属性がプロバイダーまたはコントロールによってサポートされていない場合。"
  overload: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定した属性が無効な場合は。"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles
  id: GetBoundingRectangles
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: GetBoundingRectangles()
  nameWithType: TextPatternRange.GetBoundingRectangles()
  fullName: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "外接する四角形、テキスト範囲内のテキストの各完全または部分的に表示されている行のコレクションを取得します。"
  remarks: ''
  example:
  - "[!code-cs[UIATextPattern_snip#1067](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1067)]  \n  \n [!code-vb[UIATextPattern_snip#2067](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2067)]"
  syntax:
    content: public System.Windows.Rect[] GetBoundingRectangles ();
    parameters: []
    return:
      type: System.Windows.Rect[]
      description: "外接する四角形の各完全または部分的なテキスト行のテキスト範囲内の配列。       低次元テキスト範囲の空の配列。       完全に画面外となる、画面座標を持つテキスト範囲の空の配列は、スクロール見えない、または重なったウィンドウによって隠されます。"
  overload: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.GetChildren
  id: GetChildren
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: GetChildren()
  nameWithType: TextPatternRange.GetChildren()
  fullName: System.Windows.Automation.Text.TextPatternRange.GetChildren()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキスト範囲内にあるすべての埋め込みオブジェクトのコレクションを取得します。"
  remarks: ''
  example:
  - "[!code-vb[UIATextPattern_snip#StartTarget](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#starttarget)]\n [!code-cs[UIATextPattern_snip#StartTarget](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#starttarget)]  \n[!code-vb[UIATextPattern_snip#GetTextElement](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#gettextelement)]\n[!code-cs[UIATextPattern_snip#GetTextElement](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#gettextelement)]  \n[!code-vb[UIATextPattern_snip#GetEmbeddedObjects](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#getembeddedobjects)]\n[!code-cs[UIATextPattern_snip#GetEmbeddedObjects](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#getembeddedobjects)]"
  syntax:
    content: public System.Windows.Automation.AutomationElement[] GetChildren ();
    parameters: []
    return:
      type: System.Windows.Automation.AutomationElement[]
      description: "範囲内にあるすべての子オブジェクトのコレクション。 重なっている範囲とが完全で囲まれていない子はコレクションにも含まれます。       子オブジェクトが存在しない場合は、空のコレクションを返します。"
  overload: System.Windows.Automation.Text.TextPatternRange.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement
  id: GetEnclosingElement
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: GetEnclosingElement()
  nameWithType: TextPatternRange.GetEnclosingElement()
  fullName: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "最も内側の返します<xref href=&quot;System.Windows.Automation.AutomationElement&quot;></xref>を囲むテキスト範囲。"
  remarks: "囲んでいる<xref:System.Windows.Automation.AutomationElement>、通常、テキスト範囲を提供するテキスト プロバイダー</xref:System.Windows.Automation.AutomationElement> 。 ただし、テキスト プロバイダーは、テーブル、ハイパーリンクなどの子要素をサポートする場合、外側の要素、テキスト プロバイダーの子孫可能性があります。"
  example:
  - "[!code-cs[UIATextPattern_snip#1069](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1069)]  \n  \n [!code-vb[UIATextPattern_snip#2069](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2069)]"
  syntax:
    content: public System.Windows.Automation.AutomationElement GetEnclosingElement ();
    parameters: []
    return:
      type: System.Windows.Automation.AutomationElement
      description: "呼び出し元を囲む最も内側の要素。"
  overload: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)
  id: GetText(System.Int32)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: GetText(Int32)
  nameWithType: TextPatternRange.GetText(Int32)
  fullName: System.Windows.Automation.Text.TextPatternRange.GetText(Int32)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキスト範囲のプレーン テキストを返します。"
  remarks: "GetText は非表示と表示の両方のテキストを尊重いたします。 UI オートメーション クライアントがチェックできる、<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>テキスト表示可能範囲</xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>。       場合`maxLength`長さを超える値は、呼び出し元のテキスト範囲の返される文字列はテキスト範囲のプレーン テキストになります。       テキスト フロー; 内のエンドポイントの順序によって GetText に影響はありません。常に論理テキスト フローの順序で、テキスト範囲の開始と終了のエンドポイント間でテキストが返されます。"
  example:
  - "[!code-cs[UIATextPattern_snip#1070](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1070)]  \n  \n [!code-vb[UIATextPattern_snip#2070](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2070)]"
  syntax:
    content: public string GetText (int maxLength);
    parameters:
    - id: maxLength
      type: System.Int32
      description: "返される文字列の最大長。 使用して`-1`制限が必要ない場合。"
    return:
      type: System.String
      description: "指定したで切り捨てられる可能性があります、テキスト範囲のプレーン テキスト<code> maxLength</code>です。"
  overload: System.Windows.Automation.Text.TextPatternRange.GetText*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "場合<code> maxLength </code> -1 未満です。"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  id: Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: Move(TextUnit,Int32)
  nameWithType: TextPatternRange.Move(TextUnit,Int32)
  fullName: System.Windows.Automation.Text.TextPatternRange.Move(TextUnit,Int32)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキスト範囲指定されたテキスト単位数を移動します。"
  remarks: "テキスト範囲の内容を走査する必要があるときに、一連の手順がその背後移動メソッドが正常に実行する順序で関連します。      1.  テキスト範囲は正規化されます。低次元テキスト範囲にテキスト範囲が折りたたまれているは、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>これにより、エンドポイント、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>エンドポイントは不要です</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint></xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>。 この手順は、テキスト範囲にまたがる状況であいまいさをなくすために必要`unit`境界。 たとえば、&quot;{U} RL [http://www.microsoft.com](http://www.microsoft.com)テキストに埋め込まれた&quot;、&quot;{&quot;と&quot;}&quot;がテキスト範囲エンドポイント。      2.  結果として得られる範囲は逆方向、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A>、要求されたの先頭に`unit`境界</xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。      3.  範囲を前方または後方に移動、<xref:System.Windows.Automation.TextPattern.DocumentRange%2A>によって要求された数の`unit`境界</xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。      4.  範囲が移動することによって、低次元テキスト範囲の状態から拡張し、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>要求された&1; つのエンドポイント`unit`境界</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>。       ![移動 >/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;移動 >/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整&quot;)を Move() と ExpandToEnclosingUnit() テキスト コンテンツ (内部テキ スト) コンテナーのテキストとハイパーリンクやテーブルのセルなど、埋め込みオブジェクトのテキスト範囲を調整する方法の例は、コントロール ビューとのコンテンツ ビューの両方で&1; つは、継続的なテキスト ストリームとして公開される、[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]ツリー、オブジェクトの境界は無視されます。 UI オートメーション クライアントは、列挙、解釈、または何らかの方法で分析することを目的としてテキストを取得するが、テキスト範囲がテキストのコンテンツやその他の埋め込みオブジェクトを含むテーブルなどの特殊なケースについて確認する必要があります。 これには、呼び出すことによって<xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A>を取得する、<xref:System.Windows.Automation.AutomationElement>オブジェクトと呼び出すことで、各埋め込みの<xref:System.Windows.Automation.TextPattern.RangeFromChild%2A>; の各要素のテキスト範囲を取得するすべてのテキスト コンテンツが取得されるまで再帰的にはこれは、</xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> </xref:System.Windows.Automation.AutomationElement> </xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> 。       ![埋め込みオブジェクトにまたがるテキスト範囲。](~/add/media/uia-textpattern-embeddedobjecttextranges.png &quot;埋め込みオブジェクトにまたがるテキスト範囲。&quot;)   埋め込みオブジェクトとその範囲を含むテキスト ストリームの例は、移動点両方非表示にし、表示されるテキストを範囲します。 UI オートメーション クライアントがチェックできる、<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>テキスト表示可能範囲</xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>。       移動は、次に、ゆだねます最大<xref:System.Windows.Automation.Text.TextUnit>サポートされている場合、指定された<xref:System.Windows.Automation.Text.TextUnit>コントロールでサポートされていません</xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>。       最大値、最小単位からの注文は、以下に記載されています。      - <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>> [!NOTE] > だけにまたがるテキストの別の部分をテキスト範囲と任意の方法で、テキストは変更されません</xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>。"
  example:
  - "[!code-vb[UIATextPattern_snip#StartTarget](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#starttarget)]\n [!code-cs[UIATextPattern_snip#StartTarget](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#starttarget)]  \n[!code-vb[UIATextPattern_snip#GetTextElement](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#gettextelement)]\n[!code-cs[UIATextPattern_snip#GetTextElement](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#gettextelement)]  \n[!code-vb[UIATextPattern_snip#MoveSelection](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#moveselection)]\n[!code-cs[UIATextPattern_snip#MoveSelection](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#moveselection)]"
  syntax:
    content: public int Move (System.Windows.Automation.Text.TextUnit unit, int count);
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "テキスト単位の境界。"
    - id: count
      type: System.Int32
      description: "移動するテキスト単位の数。 正の値、テキスト範囲を前方に移動する、負の値はテキスト範囲を後方に移動および 0 は影響を与えません。"
    return:
      type: System.Int32
      description: "実際に移動した単位の数。 新しいテキスト範囲のエンドポイントのいずれかがより大きいまたは小さいかどうかに要求した数よりも小さくなることより、<xref:System.Windows.Automation.TextPattern.DocumentRange*>エンドポイント</xref:System.Windows.Automation.TextPattern.DocumentRange*>。"
  overload: System.Windows.Automation.Text.TextPatternRange.Move*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  nameWithType: TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキスト範囲の&1; つのエンドポイントを&2; つ目のテキスト範囲の指定されたエンドポイントに移動します。"
  remarks: "移動中のエンドポイントが同じテキスト範囲の他のエンドポイントを越えるかどうかは、その他のエンドポイントはまた、低次元テキスト範囲し、正しい順序に基づいて、エンドポイントの移動 (つまり、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>は常に以下に<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>).</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> </xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>"
  example:
  - "[!code-cs[UIATextPattern_snip#1072](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1072)]  \n  \n [!code-vb[UIATextPattern_snip#2072](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2072)]"
  syntax:
    content: public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextPatternRange targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "移動するエンドポイント。"
    - id: targetRange
      type: System.Windows.Automation.Text.TextPatternRange
      description: "同じテキスト プロバイダーから別の範囲です。"
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "他の範囲にあるエンドポイント。"
  overload: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  id: MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  nameWithType: TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキストの&1; つのエンドポイントの範囲は指定された数の移動<xref href=&quot;System.Windows.Automation.Text.TextUnit&quot;></xref>分、ドキュメントの範囲内で。"
  remarks: "その背後の順序で、一連の手順が関係するテキスト範囲の内容を走査する必要があるときに、<xref:System.Windows.Automation.Text.TextPatternRange.Move%2A>メソッドを正常に実行する</xref:System.Windows.Automation.Text.TextPatternRange.Move%2A>。      1.  テキスト範囲は正規化されます。低次元テキスト範囲にテキスト範囲が折りたたまれているは、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>これにより、エンドポイント、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>エンドポイントは不要です</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint></xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>。 この手順は、テキスト範囲にまたがる状況であいまいさをなくすために必要`unit`境界。 たとえば、&quot;{U} RL [http://www.microsoft.com](http://www.microsoft.com)テキストに埋め込まれた&quot;、&quot;{&quot;と&quot;}&quot;がテキスト範囲エンドポイント。      2.  結果として得られる範囲は逆方向、 <xref:System.Windows.Automation.TextPattern.DocumentRange%2A>、要求されたの先頭に`unit`境界</xref:System.Windows.Automation.TextPattern.DocumentRange%2A>。      3.  範囲が移動することによって、低次元テキスト範囲の状態から拡張し、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>要求された&1; つのエンドポイント`unit`境界</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>。       ![移動 >/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;移動 >/documents/report1.rdl」の ExpandToEnclosingUnit による範囲調整&quot;)を Move() と ExpandToEnclosingUnit() テキスト コンテンツ (内部テキ スト) コンテナーのテキストとハイパーリンクやテーブルのセルなど、埋め込みオブジェクトのテキスト範囲を調整する方法の例は、コントロール ビューとのコンテンツ ビューの両方で&1; つは、継続的なテキスト ストリームとして公開される、[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]ツリー、オブジェクトの境界は無視されます。 UI オートメーション クライアントは、列挙、解釈、または何らかの方法で分析することを目的としてテキストを取得するが、テキスト範囲がテキストのコンテンツやその他の埋め込みオブジェクトを含むテーブルなどの特殊なケースについて確認する必要があります。 これには、呼び出すことによって<xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A>を取得する、<xref:System.Windows.Automation.AutomationElement>オブジェクトと呼び出すことで、各埋め込みの<xref:System.Windows.Automation.TextPattern.RangeFromChild%2A>; の各要素のテキスト範囲を取得するすべてのテキスト コンテンツが取得されるまで再帰的にはこれは、</xref:System.Windows.Automation.TextPattern.RangeFromChild%2A> </xref:System.Windows.Automation.AutomationElement> </xref:System.Windows.Automation.Text.TextPatternRange.GetChildren%2A> 。       ![埋め込みオブジェクトにまたがるテキスト範囲。](~/add/media/uia-textpattern-embeddedobjecttextranges.png &quot;埋め込みオブジェクトにまたがるテキスト範囲。&quot;)   埋め込みオブジェクトと MoveEndpointByUnit は次の範囲を含むテキスト ストリームの例を最大<xref:System.Windows.Automation.Text.TextUnit>サポートされている場合、指定された<xref:System.Windows.Automation.Text.TextUnit>コントロールでサポートされていません</xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>。       最大値、最小単位からの注文は、以下に記載されています。      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>"
  example:
  - "[!code-cs[UIATextPattern_snip#1073](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1073)]  \n  \n [!code-vb[UIATextPattern_snip#2073](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2073)]"
  syntax:
    content: public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "移動するエンドポイント。"
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "移動するためのテキスト単位。"
    - id: count
      type: System.Int32
      description: "移動する単位の数。 正の数は、エンドポイントを前方移動します。 負の数は後方に移動します。 0 のカウントは、影響を与えません。"
    return:
      type: System.Int32
      description: "ユニットの数が実際に移動することができます要求された場合の値より小さい移動するエンドポイントが先頭またはドキュメントの末尾に達した。"
  overload: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection
  id: RemoveFromSelection
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: RemoveFromSelection()
  nameWithType: TextPatternRange.RemoveFromSelection()
  fullName: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "呼び出し元のテキスト範囲に対応するテキストの強調表示されたセクションを削除<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>と<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>複数をサポートするテキスト コンテナー内の強調表示されたテキストの既存のコレクションから、エンドポイントの非結合選択します。"
  remarks: "テキスト挿入ポイントが削除された強調表示の領域に移動します。       低次元テキスト範囲を提供すると、カーソルが移動します。"
  syntax:
    content: public void RemoveFromSelection ();
    parameters: []
  overload: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "テキスト プロバイダーは、複数をサポートしていない場合の非結合選択 (たとえば、<xref:System.Windows.Automation.TextPattern.SupportedTextSelection*>の値が必要<xref uid=&quot;langword_csharp_Multiple&quot; name=&quot;Multiple&quot; href=&quot;&quot;> </xref>).</xref:System.Windows.Automation.TextPattern.SupportedTextSelection*>"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: TextPatternRange.ScrollIntoView(Boolean)
  fullName: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキスト コントロールにテキスト範囲がビューポート内に表示されるまで垂直方向にスクロールさせます。"
  remarks: "ScrollIntoView は非表示と表示の両方のテキストを尊重いたします。 UI オートメーション クライアントがチェックできる、<xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>テキスト表示可能範囲</xref:System.Windows.Automation.TextPattern.IsHiddenAttribute>。 テキスト範囲が表示されていない場合、テキスト コントロールは非表示のテキストは、ビューポートのアンカーを持つ場合だけスクロールします。"
  example:
  - "[!code-cs[UIATextPattern_snip#1074](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1074)]  \n  \n [!code-vb[UIATextPattern_snip#2074](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2074)]"
  syntax:
    content: public void ScrollIntoView (bool alignToTop);
    parameters:
    - id: alignToTop
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>テキスト コントロールをスクロール、テキスト範囲は、ビューポートの上辺と揃える場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>場合は、ビューポートの底辺と揃える場合があります。"
  overload: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "場合は、コントロールでは、スクロールすることはできません。"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.Select
  id: Select
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: Select()
  nameWithType: TextPatternRange.Select()
  fullName: System.Windows.Automation.Text.TextPatternRange.Select()
  type: Method
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "テキスト範囲に対応するテキスト コントロール内のテキストを強調表示<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>と<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>エンドポイント。"
  remarks: "低次元テキスト範囲を指定する場合、テキスト挿入ポイントに移動、<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>テキスト範囲のエンドポイント</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>。"
  example:
  - "[!code-cs[UIATextPattern_snip#1075](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1075)]  \n  \n [!code-vb[UIATextPattern_snip#2075](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2075)]"
  syntax:
    content: public void Select ();
    parameters: []
  overload: System.Windows.Automation.Text.TextPatternRange.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "テキスト選択範囲が、テキスト コントロールでサポートされていないときに発生します。"
  platform:
  - net462
- uid: System.Windows.Automation.Text.TextPatternRange.TextPattern
  id: TextPattern
  parent: System.Windows.Automation.Text.TextPatternRange
  langs:
  - csharp
  name: TextPattern
  nameWithType: TextPatternRange.TextPattern
  fullName: System.Windows.Automation.Text.TextPatternRange.TextPattern
  type: Property
  assemblies:
  - UIAutomationClient
  namespace: System.Windows.Automation.Text
  summary: "取得、 <xref href=&quot;System.Windows.Automation.TextPattern&quot;> </xref>テキスト範囲に関連付けられています。"
  remarks: ''
  example:
  - "[!code-cs[UIATextPattern_snip#1076](~/add/codesnippet/csharp/UIATextPattern_snip/SearchWindow.cs#1076)]  \n  \n [!code-vb[UIATextPattern_snip#2076](~/add/codesnippet/visualbasic/UIATextPattern_snip/SearchWindow.vb#2076)]"
  syntax:
    content: public System.Windows.Automation.TextPattern TextPattern { get; }
    return:
      type: System.Windows.Automation.TextPattern
      description: "テキスト プロバイダー。"
  overload: System.Windows.Automation.Text.TextPatternRange.TextPattern*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Automation.Text.TextPatternRange.AddToSelection
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: AddToSelection()
  nameWithType: TextPatternRange.AddToSelection()
  fullName: System.Windows.Automation.Text.TextPatternRange.AddToSelection()
- uid: System.Windows.Automation.Text.TextPatternRange.Clone
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Clone()
  nameWithType: TextPatternRange.Clone()
  fullName: System.Windows.Automation.Text.TextPatternRange.Clone()
- uid: System.Windows.Automation.Text.TextPatternRange
  parent: System.Windows.Automation.Text
  isExternal: false
  name: TextPatternRange
  nameWithType: TextPatternRange
  fullName: System.Windows.Automation.Text.TextPatternRange
- uid: System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Compare(TextPatternRange)
  nameWithType: TextPatternRange.Compare(TextPatternRange)
  fullName: System.Windows.Automation.Text.TextPatternRange.Compare(TextPatternRange)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  nameWithType: TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint
  parent: System.Windows.Automation.Text
  isExternal: false
  name: TextPatternRangeEndpoint
  nameWithType: TextPatternRangeEndpoint
  fullName: System.Windows.Automation.Text.TextPatternRangeEndpoint
- uid: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: ExpandToEnclosingUnit(TextUnit)
  nameWithType: TextPatternRange.ExpandToEnclosingUnit(TextUnit)
  fullName: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(TextUnit)
- uid: System.Windows.Automation.Text.TextUnit
  parent: System.Windows.Automation.Text
  isExternal: false
  name: TextUnit
  nameWithType: TextUnit
  fullName: System.Windows.Automation.Text.TextUnit
- uid: System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: FindAttribute(AutomationTextAttribute,Object,Boolean)
  nameWithType: TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)
  fullName: System.Windows.Automation.Text.TextPatternRange.FindAttribute(AutomationTextAttribute,Object,Boolean)
- uid: System.Windows.Automation.AutomationTextAttribute
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationTextAttribute
  nameWithType: AutomationTextAttribute
  fullName: System.Windows.Automation.AutomationTextAttribute
- uid: System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: FindText(String,Boolean,Boolean)
  nameWithType: TextPatternRange.FindText(String,Boolean,Boolean)
  fullName: System.Windows.Automation.Text.TextPatternRange.FindText(String,Boolean,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetAttributeValue(AutomationTextAttribute)
  nameWithType: TextPatternRange.GetAttributeValue(AutomationTextAttribute)
  fullName: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(AutomationTextAttribute)
- uid: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetBoundingRectangles()
  nameWithType: TextPatternRange.GetBoundingRectangles()
  fullName: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles()
- uid: System.Windows.Rect[]
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect[]
  spec.csharp:
  - uid: System.Windows.Rect
    name: Rect
    nameWithType: Rect
    fullName: Rect[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Automation.Text.TextPatternRange.GetChildren
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetChildren()
  nameWithType: TextPatternRange.GetChildren()
  fullName: System.Windows.Automation.Text.TextPatternRange.GetChildren()
- uid: System.Windows.Automation.AutomationElement[]
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationElement
  nameWithType: AutomationElement
  fullName: System.Windows.Automation.AutomationElement[]
  spec.csharp:
  - uid: System.Windows.Automation.AutomationElement
    name: AutomationElement
    nameWithType: AutomationElement
    fullName: AutomationElement[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetEnclosingElement()
  nameWithType: TextPatternRange.GetEnclosingElement()
  fullName: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement()
- uid: System.Windows.Automation.AutomationElement
  parent: System.Windows.Automation
  isExternal: false
  name: AutomationElement
  nameWithType: AutomationElement
  fullName: System.Windows.Automation.AutomationElement
- uid: System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetText(Int32)
  nameWithType: TextPatternRange.GetText(Int32)
  fullName: System.Windows.Automation.Text.TextPatternRange.GetText(Int32)
- uid: System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Move(TextUnit,Int32)
  nameWithType: TextPatternRange.Move(TextUnit,Int32)
  fullName: System.Windows.Automation.Text.TextPatternRange.Move(TextUnit,Int32)
- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  nameWithType: TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(TextPatternRangeEndpoint,TextPatternRange,TextPatternRangeEndpoint)
- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  nameWithType: TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  fullName: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
- uid: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: RemoveFromSelection()
  nameWithType: TextPatternRange.RemoveFromSelection()
  fullName: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection()
- uid: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: TextPatternRange.ScrollIntoView(Boolean)
  fullName: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(Boolean)
- uid: System.Windows.Automation.Text.TextPatternRange.Select
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Select()
  nameWithType: TextPatternRange.Select()
  fullName: System.Windows.Automation.Text.TextPatternRange.Select()
- uid: System.Windows.Automation.Text.TextPatternRange.TextPattern
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: TextPattern
  nameWithType: TextPatternRange.TextPattern
  fullName: System.Windows.Automation.Text.TextPatternRange.TextPattern
- uid: System.Windows.Automation.TextPattern
  parent: System.Windows.Automation
  isExternal: false
  name: TextPattern
  nameWithType: TextPattern
  fullName: System.Windows.Automation.TextPattern
- uid: System.Windows.Automation.Text.TextPatternRange.AddToSelection*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: AddToSelection
  nameWithType: TextPatternRange.AddToSelection
- uid: System.Windows.Automation.Text.TextPatternRange.Clone*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Clone
  nameWithType: TextPatternRange.Clone
- uid: System.Windows.Automation.Text.TextPatternRange.Compare*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Compare
  nameWithType: TextPatternRange.Compare
- uid: System.Windows.Automation.Text.TextPatternRange.CompareEndpoints*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: CompareEndpoints
  nameWithType: TextPatternRange.CompareEndpoints
- uid: System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: ExpandToEnclosingUnit
  nameWithType: TextPatternRange.ExpandToEnclosingUnit
- uid: System.Windows.Automation.Text.TextPatternRange.FindAttribute*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: FindAttribute
  nameWithType: TextPatternRange.FindAttribute
- uid: System.Windows.Automation.Text.TextPatternRange.FindText*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: FindText
  nameWithType: TextPatternRange.FindText
- uid: System.Windows.Automation.Text.TextPatternRange.GetAttributeValue*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetAttributeValue
  nameWithType: TextPatternRange.GetAttributeValue
- uid: System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetBoundingRectangles
  nameWithType: TextPatternRange.GetBoundingRectangles
- uid: System.Windows.Automation.Text.TextPatternRange.GetChildren*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetChildren
  nameWithType: TextPatternRange.GetChildren
- uid: System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetEnclosingElement
  nameWithType: TextPatternRange.GetEnclosingElement
- uid: System.Windows.Automation.Text.TextPatternRange.GetText*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: GetText
  nameWithType: TextPatternRange.GetText
- uid: System.Windows.Automation.Text.TextPatternRange.Move*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Move
  nameWithType: TextPatternRange.Move
- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: MoveEndpointByRange
  nameWithType: TextPatternRange.MoveEndpointByRange
- uid: System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: MoveEndpointByUnit
  nameWithType: TextPatternRange.MoveEndpointByUnit
- uid: System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: RemoveFromSelection
  nameWithType: TextPatternRange.RemoveFromSelection
- uid: System.Windows.Automation.Text.TextPatternRange.ScrollIntoView*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: ScrollIntoView
  nameWithType: TextPatternRange.ScrollIntoView
- uid: System.Windows.Automation.Text.TextPatternRange.Select*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: Select
  nameWithType: TextPatternRange.Select
- uid: System.Windows.Automation.Text.TextPatternRange.TextPattern*
  parent: System.Windows.Automation.Text.TextPatternRange
  isExternal: false
  name: TextPattern
  nameWithType: TextPatternRange.TextPattern
