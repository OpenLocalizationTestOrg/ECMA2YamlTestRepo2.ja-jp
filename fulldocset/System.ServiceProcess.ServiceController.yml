### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceController
  id: ServiceController
  children:
  - System.ServiceProcess.ServiceController.#ctor
  - System.ServiceProcess.ServiceController.#ctor(System.String)
  - System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  - System.ServiceProcess.ServiceController.CanPauseAndContinue
  - System.ServiceProcess.ServiceController.CanShutdown
  - System.ServiceProcess.ServiceController.CanStop
  - System.ServiceProcess.ServiceController.Close
  - System.ServiceProcess.ServiceController.Continue
  - System.ServiceProcess.ServiceController.DependentServices
  - System.ServiceProcess.ServiceController.DisplayName
  - System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  - System.ServiceProcess.ServiceController.GetDevices
  - System.ServiceProcess.ServiceController.GetDevices(System.String)
  - System.ServiceProcess.ServiceController.GetServices
  - System.ServiceProcess.ServiceController.GetServices(System.String)
  - System.ServiceProcess.ServiceController.MachineName
  - System.ServiceProcess.ServiceController.Pause
  - System.ServiceProcess.ServiceController.Refresh
  - System.ServiceProcess.ServiceController.ServiceHandle
  - System.ServiceProcess.ServiceController.ServiceName
  - System.ServiceProcess.ServiceController.ServicesDependedOn
  - System.ServiceProcess.ServiceController.ServiceType
  - System.ServiceProcess.ServiceController.Start
  - System.ServiceProcess.ServiceController.Start(System.String[])
  - System.ServiceProcess.ServiceController.StartType
  - System.ServiceProcess.ServiceController.Status
  - System.ServiceProcess.ServiceController.Stop
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  langs:
  - csharp
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController
  type: Class
  summary: "Windows サービスを表し、実行中または停止したサービスへの接続、操作、またはそれに関する情報を取得することができます。"
  remarks: "接続し、既存のサービスの動作を制御するには、ServiceController クラスを使用します。 ServiceController クラスのインスタンスを作成するときに、特定の Windows サービスとやり取りするためのプロパティを設定します。 クラスを使用して、開始、停止、およびそれ以外の場合、サービスを操作することができますし、します。       ServiceController コンポーネントを使用して、管理機能ではほとんどの場合。 たとえば、ServiceController インスタンスを通じてサービスにカスタム コマンドを送信する Windows または Web アプリケーションを作成できます。 サービス コントロール マネージャー (SCM) Microsoft 管理コンソール スナップインではサポートされていませんカスタムのコマンドは、便利になります。       ServiceController のインスタンスを作成した後で連携するサービスを識別するために&2; つのプロパティを設定する必要があります。 コンピューター名とを制御するサービスの名前。      > [!NOTE] > 既定では、<xref:System.ServiceProcess.ServiceController.MachineName%2A>ので、別のコンピューター をポイントするインスタンスを設定する場合を除き、これを変更する必要はありませんが、ローカル コンピューターに設定します</xref:System.ServiceProcess.ServiceController.MachineName%2A>。       一般に、サービスの作成者は、特定のコマンドに関連付けられているアクションをカスタマイズするコードを記述します。 たとえば、サービスに応答するコードを含めることができます、<xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName>コマンド</xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName>。 その場合、カスタム処理を<xref:System.ServiceProcess.ServiceController.Pause%2A>システム サービスを一時停止する前に、タスクが実行されます</xref:System.ServiceProcess.ServiceController.Pause%2A>。       サービスが処理できるコマンドのセットは、プロパティによって異なります。たとえば、設定、<xref:System.ServiceProcess.ServiceController.CanStop%2A>にサービスのプロパティ`false`</xref:System.ServiceProcess.ServiceController.CanStop%2A>。 この設定により、`Stop`コマンドの特定のサービスで使用できなくなった; できなくために必要なボタンを無効にして、SCM でサービスを停止します。 コードからサービスを停止しようとする場合、システムはエラーが発生し、エラー メッセージが表示されます&quot;を停止できませんでした`servicename`&quot;。"
  example:
  - "The following example demonstrates the use of the ServiceController class to control the `SimpleService` service example.  \n  \n [!code-cs[ServiceControllerClass#1](~/add/codesnippet/csharp/t-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._6_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")]

      public class ServiceController : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref>特定のサービスに関連付けられていないクラス。"
  syntax:
    content: public ServiceController ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref>ローカル コンピューター上の既存のサービスに関連付けられているクラスです。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the ServiceController constructor to create a <xref:System.ServiceProcess.ServiceController> object that is used to control a sample service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/m-system.serviceprocess._0_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public ServiceController (string name);
    parameters:
    - id: name
      type: System.String
      description: "システムにサービスを識別する名前です。 これには、サービスの表示名、ことができます。"
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>正しくありません。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref>指定したコンピューター上の既存のサービスに関連付けられているクラスです。"
  remarks: "`machineName`使用するパラメーター、&quot;です。&quot;ローカル コンピューターを表すです。"
  syntax:
    content: public ServiceController (string name, string machineName);
    parameters:
    - id: name
      type: System.String
      description: "システムにサービスを識別する名前です。 これには、サービスの表示名、ことができます。"
    - id: machineName
      type: System.String
      description: "サービスが存在するコンピューター。"
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>正しくありません。       - または -<code>machineName</code>が無効です。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービスの一時停止および再開するかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanPauseAndContinue property to determine whether a service can pause and continue. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._8_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public bool CanPauseAndContinue { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、サービスを一時停止できます。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "システムのシャット ダウン時にサービスに通知するかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanShutdown property to determine whether a service provides a handler for a shutdown event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public bool CanShutdown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、システムのシャット ダウン時にサービスに通知する必要があります。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.ServiceProcess.ServiceController.CanShutdown*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "開始した後、サービスを停止できるかどうかを示す値を取得します。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanStop property to determine whether a service provides a handler for a stop event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._1_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public bool CanStop { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>サービスを停止する場合、<xref:System.ServiceProcess.ServiceBase.OnStop*>メソッドが呼び出されますそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceProcess.ServiceBase.OnStop*> 。"
  overload: System.ServiceProcess.ServiceController.CanStop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Close
  id: Close
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "この接続が切断<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>サービスからインスタンス化し、インスタンスが割り当てられているすべてのリソースを解放します。"
  remarks: "関連付けられているすべてのハンドルを解放する閉じる、<xref:System.ServiceProcess.ServiceController>インスタンス</xref:System.ServiceProcess.ServiceController>。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Close*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Continue
  id: Continue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "一時停止後は、サービスを続行します。"
  remarks: "サービスの継続を呼び出すと、その状態は最初に変更`ContinuePending`し、その後、続行メソッドが戻るときに変更されます`Running`です。       サービス コント ローラーの状態になるまで、サービスの継続を呼び出すことはできません`Paused`です。"
  example:
  - "The following example demonstrates the use of the Continue method to continue a paused service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#5](~/add/codesnippet/csharp/m-system.serviceprocess._2_1.cs)]\n [!code-vb[ServiceControllerClass#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public void Continue ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Continue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DependentServices
  id: DependentServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "これに関連付けられているサービスに依存するサービスのセットを取得<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>インスタンス。"
  remarks: "DependentServices 配列は、アプリケーションが呼び出す場合、システムが停止したサービスを表す<xref:System.ServiceProcess.ServiceController.Stop%2A>このサービスを使用します</xref:System.ServiceProcess.ServiceController.Stop%2A>。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._4_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._4_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] DependentServices { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "配列<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>インスタンス、それぞれがこのサービスに依存するサービスに関連付けられています。"
  overload: System.ServiceProcess.ServiceController.DependentServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはサービスのフレンドリ名を設定します。"
  remarks: "DisplayName を空の文字列に設定することができます (&quot;&quot;)、プロパティを設定が、`null`例外をスローします。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._3_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._3_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "サービスを識別するために使用すると、サービスのフレンドリ名。"
  overload: System.ServiceProcess.ServiceController.DisplayName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "DisplayName が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.ServiceProcess.ServiceController>参照。</xref:System.ServiceProcess.ServiceController> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.ServiceProcess.ServiceController.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  id: ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービスにカスタム コマンドを実行します。"
  remarks: "ExecuteCommand を呼び出すときに、サービスの状態は変わりません。 サービスが開始された場合、状態のまま`Running`です。 サービスが停止された場合、状態のまま`Stopped`のようにします。 カスタム コマンドを処理するサービスをオーバーライドする必要があります、<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>メソッドによって識別されるコマンドのハンドラーを用意し、`command`パラメーター</xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A> 。"
  example:
  - "The following code example shows the use of the ExecuteCommand method to execute custom commands in the `SimpleService` service example.  \n  \n [!code-cs[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/csharp/m-system.serviceprocess._5_1.cs)]\n [!code-vb[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._5_1.vb)]"
  syntax:
    content: public void ExecuteCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "実行するカスタム コマンドを示すアプリケーション定義のコマンド フラグ。 値は、128 ~ 256 の間にする必要があります。"
  overload: System.ServiceProcess.ServiceController.ExecuteCommand*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices
  id: GetDevices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "ローカル コンピューター上のデバイス ドライバー サービスを取得します。"
  remarks: "GetDevices では、ローカル コンピューターからのみ、デバイス ドライバー サービスを返します。 デバイス ドライバー以外のサービスまたはドライバーではないサービスを取得する、<xref:System.ServiceProcess.ServiceController.GetServices%2A>メソッド</xref:System.ServiceProcess.ServiceController.GetServices%2A>。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/m-system.serviceprocess._6_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/m-system.serviceprocess._6_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "型の配列<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>で各要素に、ローカル コンピューター上のデバイス ドライバー サービスに関連付けられています。"
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  id: GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "指定したコンピューター上のデバイス ドライバー サービスを取得します。"
  remarks: "<xref:System.ServiceProcess.ServiceController.GetDevices%2A>指定したコンピューターからのみ、デバイス ドライバー サービスを返します。</xref:System.ServiceProcess.ServiceController.GetDevices%2A> デバイス ドライバー以外のサービスまたはドライバーではないサービスを取得する、<xref:System.ServiceProcess.ServiceController.GetServices%2A>メソッド</xref:System.ServiceProcess.ServiceController.GetServices%2A>。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "デバイス ドライバー サービスを取得する対象のコンピューター。"
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "型の配列<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>で各要素に指定したコンピューター上のデバイス ドライバー サービスに関連付けられています。"
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code>パラメーターが無効な構文を持ちます。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices
  id: GetServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "デバイス ドライバー サービス以外のローカル コンピューター上のすべてのサービスを取得します。"
  remarks: "デバイス ドライバー以外のサービスだけと、ローカル コンピューターからドライバーではないサービス GetServices を返します。 デバイス ドライバー サービスを取得する、<xref:System.ServiceProcess.ServiceController.GetDevices%2A>メソッド</xref:System.ServiceProcess.ServiceController.GetDevices%2A>。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the services that are running on the local computer.  \n  \n [!code-cs[ServiceController#6](~/add/codesnippet/csharp/m-system.serviceprocess._7_1.cs)]\n [!code-cpp[ServiceController#6](~/add/codesnippet/cpp/m-system.serviceprocess._7_1.cpp)]\n [!code-vb[ServiceController#6](~/add/codesnippet/visualbasic/m-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "型の配列<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>で各要素に関連付けられているローカル コンピューター上のサービスです。"
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  id: GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "デバイス ドライバー サービス以外の指定したコンピューター上のすべてのサービスを取得します。"
  remarks: "<xref:System.ServiceProcess.ServiceController.GetServices%2A>デバイス ドライバー以外のサービスだけと、指定されたコンピューターからドライバーではないサービスを返します。</xref:System.ServiceProcess.ServiceController.GetServices%2A> デバイス ドライバー サービスを取得する、<xref:System.ServiceProcess.ServiceController.GetDevices%2A>メソッド</xref:System.ServiceProcess.ServiceController.GetDevices%2A>。 同時に、2 つのメソッドは、コンピューター上のすべてのサービスへのアクセスを提供します。"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "サービスを取得する対象のコンピューター。"
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "型の配列<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>で各要素に指定したコンピューター上のサービスに関連付けられています。"
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code>パラメーターが無効な構文を持ちます。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.MachineName
  id: MachineName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはこのサービスが存在するコンピューターの名前を設定します。"
  remarks: "コンピューター名が前にバック スラッシュ文字が、このサービスを実行しているサーバーの名前 (\\\\\\\\)。"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "これに関連付けられているサービスを実行しているコンピューターの名前<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>インスタンス。 既定値は、ローカル コンピューター (&quot;です。&quot;) です。"
  overload: System.ServiceProcess.ServiceController.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "MachineName 構文が正しくありません。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Pause
  id: Pause
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービスの操作を中断します。"
  remarks: "呼び出すことはできません<xref:System.ServiceProcess.ServiceController.Continue%2A>サービス コント ローラーの状態になるまで、サービスの`Paused`</xref:System.ServiceProcess.ServiceController.Continue%2A>。"
  example:
  - "The following example demonstrates the use of the Pause method to pause a service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._4_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Pause*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Refresh
  id: Refresh
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "プロパティをその現在の値にリセットすることにより、プロパティの値を更新します。"
  remarks: "更新メソッドにより、 <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>、 <xref:System.ServiceProcess.ServiceController.DependentServices%2A>、および<xref:System.ServiceProcess.ServiceController.Status%2A>プロパティを次に参照されている場合、その現在の値にリセットされます</xref:System.ServiceProcess.ServiceController.Status%2A></xref:System.ServiceProcess.ServiceController.DependentServices%2A></xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>。"
  example:
  - "The following example demonstrates the use of the Refresh method to obtain the status of a service. The code instructs a service to pause, and then waits for the status to reflect the change. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._3_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "サービスのハンドルを取得します。"
  syntax:
    content: public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }
    return:
      type: System.Runtime.InteropServices.SafeHandle
      description: "A<xref:System.Runtime.InteropServices.SafeHandle>サービスのハンドルを格納している</xref:System.Runtime.InteropServices.SafeHandle>。"
  overload: System.ServiceProcess.ServiceController.ServiceHandle*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "取得またはこのインスタンスが参照するサービスを識別する名前を設定します。"
  remarks: "ServiceName は、サービス コントロール マネージャーに、サービスを識別します。 このプロパティを変更すると、<xref:System.ServiceProcess.ServiceController>インスタンスの別のサービスにバインドするには変更されませんどのようなサービス コントロール マネージャーの Microsoft 管理コンソール スナップインが表示されます。</xref:System.ServiceProcess.ServiceController> 。       カスタム サービスを実装しているときにこのプロパティの値が<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>、対応する<xref:System.ServiceProcess.ServiceInstaller>クラス</xref:System.ServiceProcess.ServiceInstaller>のプロパティ</xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>そのサービスに対して記録された名前と同じにする必要があります。 コードでは、ServiceName は通常設定、`main()`実行可能ファイルの関数。       プロパティを設定するメソッドはこのインスタンスの設定 ServiceName プロパティをリセットすると、<xref:System.ServiceProcess.ServiceController.DisplayName%2A>に空の文字列 (&quot;&quot;).</xref:System.ServiceProcess.ServiceController.DisplayName%2A>"
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "サービスを識別する名前をこの<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>インスタンスの参照。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.ServiceProcess.ServiceController.ServiceName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "ServiceName は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ServiceName プロパティの構文が正しくありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "このサービスが依存するサービスのセット。"
  remarks: "ServicesDependedOn 配列内のサービスが実行されていない場合は、このサービスを開始することができなきます。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that the Messenger service is dependent on.  \n  \n [!code-cs[ServiceController#4](~/add/codesnippet/csharp/p-system.serviceprocess._2_1.cs)]\n [!code-cpp[ServiceController#4](~/add/codesnippet/cpp/p-system.serviceprocess._2_1.cpp)]\n [!code-vb[ServiceController#4](~/add/codesnippet/visualbasic/p-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "配列<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>インスタンス、それぞれを実行するには、このサービスが実行されている必要があります、サービスに関連付けられています。"
  overload: System.ServiceProcess.ServiceController.ServicesDependedOn*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceType
  id: ServiceType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "このオブジェクトを参照するサービスの種類を取得します。"
  remarks: "サービスの種類は、システムによって、サービスを使用する方法を示します。 ServiceType プロパティの値では、ビットごとの OR 演算子を使用して結合フラグのセットを表します。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/p-system.serviceprocess._9_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/p-system.serviceprocess._9_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/p-system.serviceprocess._9_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceType ServiceType { get; }
    return:
      type: System.ServiceProcess.ServiceType
      description: "1 つ、 <xref href=&quot;System.ServiceProcess.ServiceType&quot;> </xref>ネットワーク サービスの種類を示すために使用される値。"
  overload: System.ServiceProcess.ServiceController.ServiceType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start
  id: Start
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "引数を渡さず、サービスを開始します。"
  remarks: "呼び出すことはできません<xref:System.ServiceProcess.ServiceController.Stop%2A>サービス コント ローラーの状態になるまで、サービスの`Running`</xref:System.ServiceProcess.ServiceController.Stop%2A>。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/m-system.serviceprocess._8_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/m-system.serviceprocess._8_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  id: Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "指定した引数を渡して、サービスを開始します。"
  remarks: "呼び出すことはできません<xref:System.ServiceProcess.ServiceController.Stop%2A>サービス コント ローラーの状態になるまで、サービスの`Running`</xref:System.ServiceProcess.ServiceController.Stop%2A>。"
  syntax:
    content: public void Start (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "開始時に、サービスに渡す引数の配列。"
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスを開始することはできません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>args</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または - 配列のメンバーが<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "によって表されるサービスを示す値を取得、 <xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref>オブジェクトを開始します。"
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "サービスの開始を示す値。"
  overload: System.ServiceProcess.ServiceController.StartType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Status
  id: Status
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "このインスタンスによって参照されているサービスの状態を取得します。"
  remarks: "状態では、サービスの現在の状態を示します。 使用可能な値のセットには、いくつかの状態を変更するコマンドの保留中かどうかを示すことが含まれます。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/p-system.serviceprocess._0_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/p-system.serviceprocess._0_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceControllerStatus Status { get; }
    return:
      type: System.ServiceProcess.ServiceControllerStatus
      description: "1 つ、 <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref>サービスが実行されている、停止、または一時停止しているか、かどうか、開始、停止、停止、またはコマンドを続行が保留されているかどうかを示す値。"
  overload: System.ServiceProcess.ServiceController.Status*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "このサービスであり、このサービスに依存するサービスを停止します。"
  remarks: "すべてのサービスは、その操作には、このサービスに依存している、このサービスを停止するには、停止します。 <xref:System.ServiceProcess.ServiceController.DependentServices%2A>プロパティには、このいずれかに依存するサービスのセットが含まれています</xref:System.ServiceProcess.ServiceController.DependentServices%2A>。       このサービスが依存するサービスを停止する場合は、親サービスの停止メソッド内でこのサービスに停止メソッドを呼び出します。 <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>プロパティには、このサービスが依存するサービスが含まれています</xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/m-system.serviceprocess._1_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/m-system.serviceprocess._1_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Stop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "システム API にアクセスするときにエラーが発生しました。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "サービスは見つかりませんでした。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "指定したステータスになるまでに、サービス、無期限に待機します。"
  remarks: "WaitForStatus を使用して、アプリケーションのサービスが必要な状態に到達するまでの処理を中断します。      > [!NOTE] >、<xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>メソッドは、約 250 ミリ秒間での各状態の確認を待機します</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>。  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>変更する、検出されたサービスの大文字と小文字を検出することはできません、`desiredStatus`し、別の状態をすぐにその間隔でします。</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/82fc1460-0a6f-432e-81a5-_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/82fc1460-0a6f-432e-81a5-_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/82fc1460-0a6f-432e-81a5-_1.vb)]"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "待機に対するステータス。"
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> desiredStatus </code>パラメーターで定義されている値のいずれかではありません、 <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref>列挙します。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "指定された状態に到達するサービスまたは指定したタイムアウトの期限が切れるまで待機します。"
  remarks: "使用して<xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>アプリケーションを中断するのには、サービスが必要な状態に到達するまでの処理します</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>。      > [!NOTE] >、<xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>メソッドは、約 250 ミリ秒間での各状態の確認を待機します</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>。  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>変更する、検出されたサービスの大文字と小文字を検出することはできません、`desiredStatus`し、別の状態をすぐにその間隔でします。</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "待機に対するステータス。"
    - id: timeout
      type: System.TimeSpan
      description: "A<xref:System.TimeSpan>サービスが指定された状態に到達するまで待機する時間数を指定するオブジェクト</xref:System.TimeSpan>。"
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> desiredStatus </code>パラメーターで定義されている値のいずれかではありません、 <xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;> </xref>列挙します。"
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "指定された値、 <code> timeout </code>パラメーターの有効期限が切れた。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.ServiceProcess.ServiceController.#ctor
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceController.CanShutdown
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
- uid: System.ServiceProcess.ServiceController.Continue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
- uid: System.ServiceProcess.ServiceController.DependentServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceController
    name: ServiceController
    nameWithType: ServiceController
    fullName: ServiceController[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.DisplayName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceController.GetDevices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
- uid: System.ServiceProcess.ServiceController.GetServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
- uid: System.ServiceProcess.ServiceController.MachineName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
- uid: System.ServiceProcess.ServiceController.Refresh
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.ServiceProcess.ServiceController.ServiceName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceType
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceType
  nameWithType: ServiceType
  fullName: System.ServiceProcess.ServiceType
- uid: System.ServiceProcess.ServiceController.Start
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.StartType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceController.Status
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
- uid: System.ServiceProcess.ServiceControllerStatus
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceControllerStatus
  nameWithType: ServiceControllerStatus
  fullName: System.ServiceProcess.ServiceControllerStatus
- uid: System.ServiceProcess.ServiceController.Stop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceProcess.ServiceController.#ctor*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController.ServiceController
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceController.CanShutdown*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close
  nameWithType: ServiceController.Close
- uid: System.ServiceProcess.ServiceController.Continue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue
  nameWithType: ServiceController.Continue
- uid: System.ServiceProcess.ServiceController.DependentServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController.DisplayName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose
  nameWithType: ServiceController.Dispose
- uid: System.ServiceProcess.ServiceController.ExecuteCommand*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand
  nameWithType: ServiceController.ExecuteCommand
- uid: System.ServiceProcess.ServiceController.GetDevices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices
  nameWithType: ServiceController.GetDevices
- uid: System.ServiceProcess.ServiceController.GetServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices
  nameWithType: ServiceController.GetServices
- uid: System.ServiceProcess.ServiceController.MachineName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause
  nameWithType: ServiceController.Pause
- uid: System.ServiceProcess.ServiceController.Refresh*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh
  nameWithType: ServiceController.Refresh
- uid: System.ServiceProcess.ServiceController.ServiceHandle*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
- uid: System.ServiceProcess.ServiceController.ServiceName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceController.Start*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start
  nameWithType: ServiceController.Start
- uid: System.ServiceProcess.ServiceController.StartType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
- uid: System.ServiceProcess.ServiceController.Status*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
- uid: System.ServiceProcess.ServiceController.Stop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop
  nameWithType: ServiceController.Stop
- uid: System.ServiceProcess.ServiceController.WaitForStatus*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus
  nameWithType: ServiceController.WaitForStatus
