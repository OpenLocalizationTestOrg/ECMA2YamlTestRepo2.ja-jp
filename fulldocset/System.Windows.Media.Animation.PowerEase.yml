### YamlMime:ManagedReference
items:
- uid: System.Windows.Media.Animation.PowerEase
  id: PowerEase
  children:
  - System.Windows.Media.Animation.PowerEase.#ctor
  - System.Windows.Media.Animation.PowerEase.CreateInstanceCore
  - System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)
  - System.Windows.Media.Animation.PowerEase.Power
  - System.Windows.Media.Animation.PowerEase.PowerProperty
  langs:
  - csharp
  name: PowerEase
  nameWithType: PowerEase
  fullName: System.Windows.Media.Animation.PowerEase
  type: Class
  summary: "アニメーションを作成するイージング関数の加速または減速式を使用してを表します*f*(*t*) = *t*<sup>p</sup> p と等しい、<xref:System.Windows.Media.Animation.PowerEase.Power*>プロパティ</xref:System.Windows.Media.Animation.PowerEase.Power*>。"
  remarks: "制御することができます、アニメーションが迅速化するかどうかが減速、またはその両方<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.</xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>を指定することで 次のグラフのさまざまな値を示します<xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>ここで、 *f*(*t*)、アニメーションの進行状況を表すと*t*時間を表します</xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。       ![CubicEase EasingMode のグラフ] (~/add/media/cubicease-graph.png &quot;CubicEase EasingMode のグラフ。&quot;)       PowerEase 関数を使用すると、どの程度の速度の加速または減速によって実行を指定することを指定できます、<xref:System.Windows.Media.Animation.PowerEase.Power%2A>プロパティ: *f*(*t*) = *t*<sup>p</sup>場所`p`と等しい、<xref:System.Windows.Media.Animation.PowerEase.Power%2A>プロパティ</xref:System.Windows.Media.Animation.PowerEase.Power%2A></xref:System.Windows.Media.Animation.PowerEase.Power%2A>。       Because of this, the PowerEase function can be substituted for <xref:System.Windows.Media.Animation.QuadraticEase> (*f*(*t*) = *t*<sup>2</sup>), <xref:System.Windows.Media.Animation.CubicEase> (*f*(*t*) = *t*<sup>3</sup>), <xref:System.Windows.Media.Animation.QuarticEase> (*f*(*t*) = *t*<sup>4</sup>), and <xref:System.Windows.Media.Animation.QuinticEase> (*f*(*t*) = *t*<sup>5</sup>).</xref:System.Windows.Media.Animation.QuinticEase></xref:System.Windows.Media.Animation.QuarticEase></xref:System.Windows.Media.Animation.CubicEase></xref:System.Windows.Media.Animation.QuadraticEase> たとえば、PowerEase 関数を使用すると同様の動作を作成する必要がある場合、<xref:System.Windows.Media.Animation.QuadraticEase>関数 (*f*(*t*) = *t*<sup>2</sup>) を指定する場合、 <xref:System.Windows.Media.Animation.PowerEase.Power%2A>2 のプロパティの値</xref:System.Windows.Media.Animation.PowerEase.Power%2A></xref:System.Windows.Media.Animation.QuadraticEase>。       次の Silverlight サンプルを使用して調査できる PowerEase だけでなく他のいくつかのイージング関数があります。       [このサンプルを実行](http://go.microsoft.com/fwlink/?LinkId=139798&sref=easing_functions_gallery) <xref:System.Windows.Media.Animation.EasingFunctionBase>.</xref:System.Windows.Media.Animation.EasingFunctionBase>から継承することで、独自のカスタム イージング関数を作成するだけでなく、実行時に含まれるイージング関数を使用して、      <a name=&quot;xamlObjectElementUsage_PowerEase&quot;></a>## XAML オブジェクト要素の使用```   <PowerEase .../>   ```"
  example:
  - "The following example applies a PowerEase easing function with a <xref:System.Windows.Media.Animation.PowerEase.Power%2A> property value of `20` to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create a decelerating animation. Because the <xref:System.Windows.Media.Animation.PowerEase.Power%2A> value is so high, the deceleration is sudden compared to if you used a lower value.  \n  \n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/t-system.windows.media.a_27_1.xaml)]\n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/powerease/window1.xaml#powerease)]"
  syntax:
    content: 'public class PowerEase : System.Windows.Media.Animation.EasingFunctionBase'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Freezable
  - System.Windows.Media.Animation.EasingFunctionBase
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Freezable.CanFreeze
  - System.Windows.Freezable.Changed
  - System.Windows.Freezable.Clone
  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)
  - System.Windows.Freezable.CloneCurrentValue
  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)
  - System.Windows.Freezable.CreateInstance
  - System.Windows.Freezable.Freeze
  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)
  - System.Windows.Freezable.FreezeCore(System.Boolean)
  - System.Windows.Freezable.GetAsFrozen
  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.GetCurrentValueAsFrozen
  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)
  - System.Windows.Freezable.IsFrozen
  - System.Windows.Freezable.OnChanged
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)
  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.Freezable.ReadPreamble
  - System.Windows.Freezable.WritePostscript
  - System.Windows.Freezable.WritePreamble
  - System.Windows.Media.Animation.EasingFunctionBase.Ease(System.Double)
  - System.Windows.Media.Animation.EasingFunctionBase.EasingMode
  - System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.Media.Animation.PowerEase.#ctor
  id: '#ctor'
  parent: System.Windows.Media.Animation.PowerEase
  langs:
  - csharp
  name: PowerEase()
  nameWithType: PowerEase.PowerEase()
  fullName: System.Windows.Media.Animation.PowerEase.PowerEase()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Media.Animation.PowerEase&quot;> </xref>クラスです。"
  syntax:
    content: public PowerEase ();
    parameters: []
  overload: System.Windows.Media.Animation.PowerEase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.PowerEase.CreateInstanceCore
  id: CreateInstanceCore
  parent: System.Windows.Media.Animation.PowerEase
  langs:
  - csharp
  name: CreateInstanceCore()
  nameWithType: PowerEase.CreateInstanceCore()
  fullName: System.Windows.Media.Animation.PowerEase.CreateInstanceCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "新しいインスタンスを作成、 <xref href=&quot;System.Windows.Freezable&quot;> </xref>クラスを派生します。 派生クラスを作成する場合は、このメソッドをオーバーライドする必要があります。"
  remarks: "アニメーション クラス<xref:System.Windows.Freezable>。</xref:System.Windows.Freezable>から間接的に継承します。 このため、オーバーライドする必要があります、<xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>アニメーション オブジェクトを構築するメソッド</xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A>。"
  example:
  - "The following example shows a typical implementation of <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  \n  \n [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/visualbasic/freezablesample_visualbasic/freezablesample.vb#createinstancecoreexample)]\n [!code-cs[freezablesample_procedural#CreateInstanceCoreExample](~/add/codesnippet/csharp/freezablesample_csharp/freezablesample.cs#createinstancecoreexample)]"
  syntax:
    content: protected override System.Windows.Freezable CreateInstanceCore ();
    parameters: []
    return:
      type: System.Windows.Freezable
      description: "新しいインスタンス。"
  overload: System.Windows.Media.Animation.PowerEase.CreateInstanceCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)
  id: EaseInCore(System.Double)
  parent: System.Windows.Media.Animation.PowerEase
  langs:
  - csharp
  name: EaseInCore(Double)
  nameWithType: PowerEase.EaseInCore(Double)
  fullName: System.Windows.Media.Animation.PowerEase.EaseInCore(Double)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "生成するためにオーバーライドできるイージング関数のロジック部分を提供、 <xref href=&quot;System.Windows.Media.Animation.EasingMode&quot;> </xref>カスタム イージング関数のモード。"
  remarks: "このメソッドは変換<xref:System.Windows.Media.Animation.EasingMode><xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>。</xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>の大文字と小文字</xref:System.Windows.Media.Animation.EasingMode>のアニメーションの速度を制御する正規化された時間       のみのイージング関数を指定する必要が、<xref:System.Windows.Media.Animation.EasingMode>ためにのケースの実装、<xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A>メソッド変換`normalizedTime`の<xref:System.Windows.Media.Animation.EasingMode>と<xref:System.Windows.Media.Animation.EasingMode>ケース</xref:System.Windows.Media.Animation.EasingMode></xref:System.Windows.Media.Animation.EasingMode></xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A></xref:System.Windows.Media.Animation.EasingMode>。"
  syntax:
    content: protected override double EaseInCore (double normalizedTime);
    parameters:
    - id: normalizedTime
      type: System.Double
      description: "アニメーションの正規化された時間 (実行中)。"
    return:
      type: System.Double
      description: "変換された進行状況を表す double 値。"
  overload: System.Windows.Media.Animation.PowerEase.EaseInCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.PowerEase.Power
  id: Power
  parent: System.Windows.Media.Animation.PowerEase
  langs:
  - csharp
  name: Power
  nameWithType: PowerEase.Power
  fullName: System.Windows.Media.Animation.PowerEase.Power
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "取得またはアニメーションの補間の指数を設定します。 7 の値が式に続くアニメーション補間曲線を作成するなど、 *f*(*t*) = *t*<sup>7</sup>です。"
  remarks: "[!INCLUDE[DP_ID_field_label](~/add/includes/dp-id-field-label-md.md)]<xref:System.Windows.Media.Animation.PowerEase.PowerProperty> <a name=&quot;xamlAttributeUsage_Power&quot;> </a> ## XAML 属性の使用方法      ```   <object Power=&quot;double&quot; .../>   ```</xref:System.Windows.Media.Animation.PowerEase.PowerProperty>"
  example:
  - "The following example applies a <xref:System.Windows.Media.Animation.PowerEase> easing function with a Power property value of `20` to a <xref:System.Windows.Media.Animation.DoubleAnimation> to create a decelerating animation. Because the Power value is so high, the deceleration is sudden compared to if you used a lower value.  \n  \n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/p-system.windows.media.a_3_1.xaml)]\n [!code-xml[PowerEase#PowerEase](~/add/codesnippet/xaml/powerease/window1.xaml#powerease)]"
  syntax:
    content: public double Power { get; set; }
    return:
      type: System.Double
      description: "アニメーションの補間の指数。 この値は、0 以上にする必要があります。 既定値は 2 です。"
  overload: System.Windows.Media.Animation.PowerEase.Power*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Media.Animation.PowerEase.PowerProperty
  id: PowerProperty
  parent: System.Windows.Media.Animation.PowerEase
  langs:
  - csharp
  name: PowerProperty
  nameWithType: PowerEase.PowerProperty
  fullName: System.Windows.Media.Animation.PowerEase.PowerProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Media.Animation
  summary: "識別、<xref:System.Windows.Media.Animation.PowerEase.Power*>依存関係プロパティ</xref:System.Windows.Media.Animation.PowerEase.Power*>。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty PowerProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Media.Animation.EasingFunctionBase
  isExternal: false
  name: System.Windows.Media.Animation.EasingFunctionBase
- uid: System.Windows.Media.Animation.PowerEase.#ctor
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: PowerEase()
  nameWithType: PowerEase.PowerEase()
  fullName: System.Windows.Media.Animation.PowerEase.PowerEase()
- uid: System.Windows.Media.Animation.PowerEase.CreateInstanceCore
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: CreateInstanceCore()
  nameWithType: PowerEase.CreateInstanceCore()
  fullName: System.Windows.Media.Animation.PowerEase.CreateInstanceCore()
- uid: System.Windows.Freezable
  parent: System.Windows
  isExternal: false
  name: Freezable
  nameWithType: Freezable
  fullName: System.Windows.Freezable
- uid: System.Windows.Media.Animation.PowerEase.EaseInCore(System.Double)
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: EaseInCore(Double)
  nameWithType: PowerEase.EaseInCore(Double)
  fullName: System.Windows.Media.Animation.PowerEase.EaseInCore(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Media.Animation.PowerEase.Power
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: Power
  nameWithType: PowerEase.Power
  fullName: System.Windows.Media.Animation.PowerEase.Power
- uid: System.Windows.Media.Animation.PowerEase.PowerProperty
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: PowerProperty
  nameWithType: PowerEase.PowerProperty
  fullName: System.Windows.Media.Animation.PowerEase.PowerProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Media.Animation.PowerEase.#ctor*
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: PowerEase
  nameWithType: PowerEase.PowerEase
- uid: System.Windows.Media.Animation.PowerEase.CreateInstanceCore*
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: CreateInstanceCore
  nameWithType: PowerEase.CreateInstanceCore
- uid: System.Windows.Media.Animation.PowerEase.EaseInCore*
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: EaseInCore
  nameWithType: PowerEase.EaseInCore
- uid: System.Windows.Media.Animation.PowerEase.Power*
  parent: System.Windows.Media.Animation.PowerEase
  isExternal: false
  name: Power
  nameWithType: PowerEase.Power
