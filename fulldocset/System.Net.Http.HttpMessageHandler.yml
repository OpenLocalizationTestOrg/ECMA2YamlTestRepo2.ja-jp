### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpMessageHandler
  id: HttpMessageHandler
  children:
  - System.Net.Http.HttpMessageHandler.#ctor
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
  type: Class
  summary: "HTTP メッセージ ハンドラーの基本データ型。"
  remarks: "使用できるさまざまな HTTP メッセージ ハンドルがあります。 次が含まれます。      1.  <xref:System.Net.Http.DelegatingHandler>-、クラス ハンドラー チェーンにハンドラーを接続するために使用します。</xref:System.Net.Http.DelegatingHandler>      2.  HttpMessageHandler - をから派生するクラスに、単純なは、ほとんどのアプリケーションの最も一般的な要件をサポートします。      3.  <xref:System.Net.Http.HttpClientHandler>に実際に操作を処理する、HTTP トランスポート ハンドラー チェーンの下部にある動作は、クラスです。</xref:System.Net.Http.HttpClientHandler>      4.  <xref:System.Net.Http.WebRequestHandler>に固有のオプションで HTTP トランスポートの操作を処理するハンドラー チェーン クラスの下部に動作するは、専門分野クラス、<xref:System.Net.HttpWebRequest?displayProperty=fullName>オブジェクト</xref:System.Net.HttpWebRequest?displayProperty=fullName>。</xref:System.Net.Http.WebRequestHandler>       開発者は、HttpMessageHandler とオーバーライドからクラスを派生させる場合、<xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>メソッド、する必要があることを確認<xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>別のスレッドで同時に呼び出すことができますを取得します</xref:System.Net.Http.HttpMessageHandler.SendAsync%2A></xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>。       これは、必要なメソッドを以降<xref:System.Net.Http.HttpClient>同時に呼び出すことができる、スレッド セーフの保証を必要とします</xref:System.Net.Http.HttpClient>。 ハンドラーに割り当てられている場合は、 <xref:System.Net.Http.HttpClient>、インスタンス、<xref:System.Net.Http.HttpMessageHandler.SendAsync%2A>ハンドラーのメソッドが同時に、呼び出される、<xref:System.Net.Http.HttpClient>インスタンスとするスレッド セーフである必要があります</xref:System.Net.Http.HttpClient></xref:System.Net.Http.HttpMessageHandler.SendAsync%2A></xref:System.Net.Http.HttpClient>。"
  syntax:
    content: 'public abstract class HttpMessageHandler : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>クラスです。"
  syntax:
    content: protected HttpMessageHandler ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose
  id: Dispose
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "リリースで使用されるアンマネージ リソースおよびマネージ リソースを破棄、 <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;></xref>です。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>オプションでマネージ リソースを破棄します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Net.Http.HttpMessageHandler>参照。</xref:System.Net.Http.HttpMessageHandler> 。</xref:System.Object.Finalize%2A> このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Net.Http.HttpMessageHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "非同期操作として HTTP 要求を送信します。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、コンテンツを含む応答全体が読み取られた後に完了します</xref:System.Threading.Tasks.Task%601>。       SendAsync メソッドは、主に、システムによって使用されます。 このメソッドは、1 つのシステム、<xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName>メソッドが呼び出されます</xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName>。 ほとんどのアプリでは、このメソッドは呼び出さないでください。"
  syntax:
    content: protected abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "送信する HTTP 要求メッセージ。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "操作を取り消すキャンセル トークン。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "非同期操作を表すタスク オブジェクト。"
  overload: System.Net.Http.HttpMessageHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.HttpMessageHandler.#ctor
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler()
  nameWithType: HttpMessageHandler.HttpMessageHandler()
  fullName: System.Net.Http.HttpMessageHandler.HttpMessageHandler()
- uid: System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpMessageHandler.#ctor*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler.HttpMessageHandler
- uid: System.Net.Http.HttpMessageHandler.Dispose*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose
  nameWithType: HttpMessageHandler.Dispose
- uid: System.Net.Http.HttpMessageHandler.SendAsync*
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: SendAsync
  nameWithType: HttpMessageHandler.SendAsync
