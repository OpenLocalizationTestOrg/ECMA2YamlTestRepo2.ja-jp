### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionManager
  id: TransactionManager
  children:
  - System.Transactions.TransactionManager.DefaultTimeout
  - System.Transactions.TransactionManager.DistributedTransactionStarted
  - System.Transactions.TransactionManager.HostCurrentCallback
  - System.Transactions.TransactionManager.MaximumTimeout
  - System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  - System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  langs:
  - csharp
  name: TransactionManager
  nameWithType: TransactionManager
  fullName: System.Transactions.TransactionManager
  type: Class
  summary: "トランザクションの管理に使用するメソッドが含まれています。 このクラスは継承できません。"
  remarks: "このクラスには、静的プロパティおよびメソッドのトランザクション オプションの既定値に関する情報を取得するために使用が含まれています。 永続的なリソースが失敗したときに、持続性のあるリソースの復旧に使用する複数の静的メソッドも含まれています。 特別な操作は必要ありません、持続性のあるリソースの Microsoft 分散トランザクション コーディネーター (MSDTC) が失敗した場合です。"
  syntax:
    content: public static class TransactionManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DefaultTimeout
  id: DefaultTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいトランザクションの既定のタイムアウト間隔を取得します。"
  remarks: "トランザクションのタイムアウト間隔は、トランザクションが完了する必要がある時間です。 場合は、トランザクション マネージャーは、タイムアウト間隔に含まれるすべてのトランザクションの参加者から聞こえないが、トランザクションを中止します。       この値を設定することができます、`DefaultSettingsSection`構成ファイルのです。"
  syntax:
    content: public static TimeSpan DefaultTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A<xref:System.TimeSpan>新しいトランザクションのタイムアウト間隔を指定する値</xref:System.TimeSpan>。"
  overload: System.Transactions.TransactionManager.DefaultTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  id: DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "分散トランザクションが開始されたことを示します。"
  remarks: "**注意**サインアップするこのイベントがすべての分散トランザクションのパフォーマンスが低下します。 ローカル トランザクションは、パフォーマンスがさらに影響を受けるようには監視されません。       **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction>されないようにするで、信頼されていないコードから呼び出されますただし、直前の呼び出し元だけが所有する必要が、`FullTrust`アクセス許可セット。</xref:System.Security.Permissions.SecurityAction> 。"
  syntax:
    content: public static event System.Transactions.TransactionStartedEventHandler DistributedTransactionStarted;
    return:
      type: System.Transactions.TransactionStartedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  id: HostCurrentCallback
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "取得またはカスタム トランザクションのファクトリを設定します。"
  remarks: '**注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction>されないようにするで、信頼されていないコードから呼び出されますただし、直前の呼び出し元だけが所有する必要が、`FullTrust`アクセス許可セット。</xref:System.Security.Permissions.SecurityAction> 。'
  syntax:
    content: public static System.Transactions.HostCurrentTransactionCallback HostCurrentCallback { get; set; }
    return:
      type: System.Transactions.HostCurrentTransactionCallback
      description: "A <xref href=&quot;System.Transactions.HostCurrentTransactionCallback&quot;> </xref>カスタム トランザクションのファクトリを格納します。"
  overload: System.Transactions.TransactionManager.HostCurrentCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.MaximumTimeout
  id: MaximumTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいトランザクションの既定の最大タイムアウト間隔を取得します。"
  remarks: "タイムアウト間隔の詳細については、ドキュメントを参照して、<xref:System.Transactions.TransactionManager.DefaultTimeout%2A>プロパティ</xref:System.Transactions.TransactionManager.DefaultTimeout%2A>。       この値を設定することができます、`MachineSettingsSection`構成ファイルのです。"
  syntax:
    content: public static TimeSpan MaximumTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A<xref:System.TimeSpan>新しいトランザクションを作成する場合に許可される最大タイムアウト間隔を指定する値</xref:System.TimeSpan>。"
  overload: System.Transactions.TransactionManager.MaximumTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  id: RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "障害から復旧するリソース マネージャーのすべての未解決のトランザクションの参加が完了したことをトランザクション マネージャーに通知します。"
  remarks: "すべての永続的なリソース マネージャーが起動したとき最初に呼び出すことによって回復を行う必要があります、<xref:System.Transactions.TransactionManager.Reenlist%2A>未解決トランザクションごとにメソッド</xref:System.Transactions.TransactionManager.Reenlist%2A>。  完了したら、reenlistments のすべての場合にのみ、リソース マネージャーは RecoveryComplete を呼び出す必要があります。       回復の詳細については、次を参照してください。[を実行する回復](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)です。       **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction>されないようにするで、信頼されていないコードから呼び出されますただし、直前の呼び出し元だけが所有する必要が、`FullTrust`アクセス許可セット。</xref:System.Security.Permissions.SecurityAction> 。"
  syntax:
    content: public static void RecoveryComplete (Guid resourceManagerIdentifier);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A<xref:System.Guid>から回復するリソースを一意に識別する</xref:System.Guid>。"
  overload: System.Transactions.TransactionManager.RecoveryComplete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>resourceManagerIdentifier</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  id: Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションで永続参加要素を reenlists です。"
  remarks: "リソース マネージャーには、リソース障害の後にトランザクション参加要素を再参加させることによって、トランザクションの永続参加リストの解決が容易になります。       `resourceManagerIdentifier`パラメーターは、リソースの障害が発生した場合、トランザクションの参加要素を一貫してラベル付けに使用します。  リソース マネージャーが同じを提供する必要があります Reenlist メソッドを呼び出すときに`resourceManagerIdentifier`最初と呼ばれるときに使用される、<xref:System.Transactions.Transaction.EnlistDurable%2A>参加中に、メソッド、または<xref:System.Transactions.TransactionException>がスローされます</xref:System.Transactions.TransactionException></xref:System.Transactions.Transaction.EnlistDurable%2A>。       フェーズ 2 のメソッドは、このメソッドを使用して、参加要素が再参加<xref:System.Transactions.IEnlistmentNotification>、トランザクションの結果に対応する (つまり、 <xref:System.Transactions.IEnlistmentNotification.Commit%2A>、<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>または<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>) は、必要に応じて呼び出されます</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A></xref:System.Transactions.IEnlistmentNotification.Rollback%2A></xref:System.Transactions.IEnlistmentNotification.Commit%2A></xref:System.Transactions.IEnlistmentNotification>。       参加者は正常に再参加、後に呼び出す必要はし、<xref:System.Transactions.TransactionManager.RecoveryComplete%2A>回復が完了する</xref:System.Transactions.TransactionManager.RecoveryComplete%2A>。       障害からリソース マネージャーの再起動時にのみ、このメソッドを呼び出す必要があります。 さらに、2 フェーズ コミットの最初の準備フェーズ中に、リソース マネージャーによって記録された未解決トランザクションのみを登録する必要があります。 無効な時間にこのメソッドを呼び出すしようとするとは、間違った結果を生成できます。       トランザクション マネージャーが失敗すると、リソース マネージャーが実行して場合回復短時間のみを呼び出した後に、<xref:System.Transactions.PreparingEnlistment.Prepared%2A>フェーズ 1 では、2 フェーズ コミット プロトコルの参加リストのメソッドは、リソース マネージャーは受信可能性がありますか、<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>または<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>コールバック</xref:System.Transactions.IEnlistmentNotification.Rollback%2A></xref:System.Transactions.IEnlistmentNotification.InDoubt%2A></xref:System.Transactions.PreparingEnlistment.Prepared%2A>。       回復の詳細については、次を参照してください。[を実行する回復](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)です。       **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction>されないようにするで、信頼されていないコードから呼び出されますただし、直前の呼び出し元だけが所有する必要が、`FullTrust`アクセス許可セット。</xref:System.Security.Permissions.SecurityAction> 。"
  syntax:
    content: public static System.Transactions.Enlistment Reenlist (Guid resourceManagerIdentifier, byte[] recoveryInformation, System.Transactions.IEnlistmentNotification enlistmentNotification);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A<xref:System.Guid>リソース マネージャーを一意に識別する</xref:System.Guid>。"
    - id: recoveryInformation
      type: System.Byte[]
      description: "回復情報の追加情報が含まれています。"
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "実装するリソース オブジェクト<xref href=&quot;System.Transactions.IEnlistmentNotification&quot;></xref>通知を受信します。"
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>参加リストを記述します。"
  overload: System.Transactions.TransactionManager.Reenlist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>recoveryInformation</code>正しくありません。       - または - でトランザクション マネージャー情報<code>recoveryInformation</code>構成済みのトランザクション マネージャーと一致しません。       - または -<code>RecoveryInformation</code>で認識されない<xref href=&quot;System.Transactions&quot;></xref>です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Transactions.TransactionManager.RecoveryComplete*>既に呼び出されて、指定された<code> resourceManagerIdentifier</code>です。</xref:System.Transactions.TransactionManager.RecoveryComplete*> 再参加を拒否します。"
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "<code> resourceManagerIdentifier </code>で指定された回復情報の内容と一致しません<code> recoveryInformation</code>です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.TransactionManager.DefaultTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
- uid: System.Transactions.TransactionStartedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionStartedEventHandler
  nameWithType: TransactionStartedEventHandler
  fullName: System.Transactions.TransactionStartedEventHandler
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
- uid: System.Transactions.HostCurrentTransactionCallback
  parent: System.Transactions
  isExternal: false
  name: HostCurrentTransactionCallback
  nameWithType: HostCurrentTransactionCallback
  fullName: System.Transactions.HostCurrentTransactionCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.TransactionManager.DefaultTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
- uid: System.Transactions.TransactionManager.HostCurrentCallback*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete
  nameWithType: TransactionManager.RecoveryComplete
- uid: System.Transactions.TransactionManager.Reenlist*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist
  nameWithType: TransactionManager.Reenlist
