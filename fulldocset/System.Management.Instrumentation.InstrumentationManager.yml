### YamlMime:ManagedReference
items:
- uid: System.Management.Instrumentation.InstrumentationManager
  id: InstrumentationManager
  children:
  - System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  - System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  - System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  langs:
  - csharp
  name: InstrumentationManager
  nameWithType: InstrumentationManager
  fullName: System.Management.Instrumentation.InstrumentationManager
  type: Class
  summary: "有効期間は、分離プロバイダーに使用するモデルを管理するメソッドを提供します。       注: WMI .NET ライブラリと見なされます最終的な状態は、およびなし開発ではさらに、拡張機能、または更新プログラムは、これらのライブラリに影響を与えるセキュリティ以外の関連する問題できるようになります。 [MI Api](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx)すべての新しい開発で使用する必要があります。"
  remarks: "分離プロバイダーは、アプリケーションによってホストされます。 2 つのメソッドは、WMI クラスのインスタンスを使用できるようにするアプリケーションで使用できます。 発行または取り消すか、コールバック メソッド。 コールバック メソッドを使用して、<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>と<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>メソッド</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A></xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>。       発行または取り消すモデルでは、WMI インフラストラクチャは、多くのコールバック メソッドで自分で作成する必要があるメソッドの既定の動作を提供します。 これらは、列挙体を含めるし、メソッドをバインドします。 このモデルでは、アプリケーションは、インスタンスを作成しに公開します。 このアプリケーションは、クラスのキー プロパティが守られていることを保証します。 アプリケーションは、インスタンスを削除する役割もできます。       コールバック モデルでは、WMI インフラストラクチャには、列挙型、バインディング、およびプロバイダーの機能を実装するために必要なその他のメソッドを処理するメソッドをアプリケーションが期待しています。 この機能のため、アプリケーションを呼び出すし、それが存在しないか、正しく実装されていない場合は失敗します。 アプリケーションは、インフラストラクチャ<xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>を示し不要になった必要である<xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>。</xref:System.Management.Instrumentation.InstrumentationManager.UnregisterType%2A>を呼び出すことによって公開される WMI クラス</xref:System.Management.Instrumentation.InstrumentationManager.RegisterType%2A>を呼び出すことによってその WMI クラスの種類を登録します。"
  example:
  - "The following example demonstrates how to use the publish/revoke model. Two instances of the router class are created and published. They are later revoked.  \n  \n```  \npublic class Sample_InstanceProvider  \n{  \npublic int Main (string[] args)   \n{  \nRouter r_one = new Router ();  \nr_one.Name = \"one\";  \nInstrumentationManager.Publish(r_one);  \nRouter r_two = new Router ();  \nr_two.Name = \"two\";  \nInstrumentationManager.Publish(r_two);  \n// ....  \nInstrumentationManager.Revoke(r_one);  \nInstrumentationManager.Revoke(r_two);  \nreturn 0;  \n}  \n}  \n```  \n  \n In the next example, the callback method of registration is used to expose the RouterNew class.  \n  \n```  \npublic int MainNew(string[] args)   \n{  \n    InstrumentationManager.RegisterType(typeof(RouterNew));  \n    // ....  \n    InstrumentationManager.UnRegisterType(typeof(RouterNew));  \n    return 0;  \n}  \n```"
  syntax:
    content: public static class InstrumentationManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  id: Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "により、プロバイダーのインスタンスは、WMI インフラストラクチャ内で使用できます。"
  syntax:
    content: public static void Publish (object value);
    parameters:
    - id: value
      type: System.Object
      description: "公開するプロバイダーを実装するクラスのインスタンス。"
  overload: System.Management.Instrumentation.InstrumentationManager.Publish*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  id: RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "WMI インフラストラクチャにアセンブリを登録します。"
  syntax:
    content: public static void RegisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "登録するアセンブリ。"
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  id: RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "クラス、WMI インフラストラクチャに登録します。"
  remarks: ''
  example:
  - "```  \nstatic int Main(string[] args)  \n{  \n   InstrumentationManager.RegisterType(typeof(MySampleProvider));  \n   return 0;  \n}  \n```"
  syntax:
    content: public static void RegisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "クラスの型。"
  overload: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  id: Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "現在使用可能なプロバイダーのインスタンスは、WMI インフラストラクチャ内で使用できなくなります。"
  syntax:
    content: public static void Revoke (object value);
    parameters:
    - id: value
      type: System.Object
      description: "破棄するプロバイダーを実装するクラスのインスタンス。"
  overload: System.Management.Instrumentation.InstrumentationManager.Revoke*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  id: UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "現在、WMI インフラストラクチャに登録されているアセンブリを登録解除します。"
  syntax:
    content: public static void UnregisterAssembly (System.Reflection.Assembly managementAssembly);
    parameters:
    - id: managementAssembly
      type: System.Reflection.Assembly
      description: "登録したアセンブリの登録を解除します。"
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  id: UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  langs:
  - csharp
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
  type: Method
  assemblies:
  - System.Management.Instrumentation
  namespace: System.Management.Instrumentation
  summary: "WMI インフラストラクチャに登録されたクラスの登録を解除します。"
  syntax:
    content: public static void UnregisterType (Type managementType);
    parameters:
    - id: managementType
      type: System.Type
      description: "登録を解除する登録済みの型。"
  overload: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Management.Instrumentation.InstrumentationManager.Publish(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish(Object)
  nameWithType: InstrumentationManager.Publish(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Publish(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly(Assembly)
  nameWithType: InstrumentationManager.RegisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType(Type)
  nameWithType: InstrumentationManager.RegisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.RegisterType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke(System.Object)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke(Object)
  nameWithType: InstrumentationManager.Revoke(Object)
  fullName: System.Management.Instrumentation.InstrumentationManager.Revoke(Object)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(System.Reflection.Assembly)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly(Assembly)
  nameWithType: InstrumentationManager.UnregisterAssembly(Assembly)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly(Assembly)
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType(System.Type)
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType(Type)
  nameWithType: InstrumentationManager.UnregisterType(Type)
  fullName: System.Management.Instrumentation.InstrumentationManager.UnregisterType(Type)
- uid: System.Management.Instrumentation.InstrumentationManager.Publish*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Publish
  nameWithType: InstrumentationManager.Publish
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterAssembly
  nameWithType: InstrumentationManager.RegisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.RegisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: RegisterType
  nameWithType: InstrumentationManager.RegisterType
- uid: System.Management.Instrumentation.InstrumentationManager.Revoke*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: Revoke
  nameWithType: InstrumentationManager.Revoke
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterAssembly*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterAssembly
  nameWithType: InstrumentationManager.UnregisterAssembly
- uid: System.Management.Instrumentation.InstrumentationManager.UnregisterType*
  parent: System.Management.Instrumentation.InstrumentationManager
  isExternal: false
  name: UnregisterType
  nameWithType: InstrumentationManager.UnregisterType
