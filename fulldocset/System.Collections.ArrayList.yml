### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "実装して、<xref:System.Collections.IList>インターフェイスのサイズが動的に拡大される配列を使用して必要に応じて</xref:System.Collections.IList>。       この型の .NET Framework ソース コードを参照するを参照してください。、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)です。"
  remarks: "> [!NOTE]> この型の .NET Framework ソース コードを表示するにはを参照してください、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)です。 ソース コードをオンラインで参照、オフラインで表示、リファレンスをダウンロードおよび; デバッグ中にソース (パッチや更新を含む) をステップ参照してください[指示](http://referencesource.microsoft.com/)です。       ArrayList クラスは、異種オブジェクトのコレクションを保持するために設計されています。 ただし、常に提供しません、最適なパフォーマンスです。 代わりに、次の推奨:: を使用して、オブジェクトの異種コレクションの`List<Object>`(C# の場合) または`List(Of Object)`(Visual Basic で) を入力します。      -オブジェクトの同種のコレクションを使用して、<xref:System.Collections.Generic.List%601>クラス</xref:System.Collections.Generic.List%601>       「パフォーマンスに関する考慮事項」セクションを参照して、<xref:System.Collections.Generic.List%601>これらクラスの相対的なパフォーマンス ディスカッションのリファレンス トピック。</xref:System.Collections.Generic.List%601>       ArrayList は、並べ替えは保証されません。  ArrayList を呼び出すことによって並べ替える必要があります、<xref:System.Collections.ArrayList.Sort%2A>操作を実行する前にメソッド (など<xref:System.Collections.ArrayList.BinarySearch%2A>) に並べ替えられる ArrayList を必要とします</xref:System.Collections.ArrayList.BinarySearch%2A></xref:System.Collections.ArrayList.Sort%2A>。 新しい要素が追加されると自動的に並べ替えられるコレクションを維持するために、<xref:System.Collections.Generic.SortedSet%601>クラス</xref:System.Collections.Generic.SortedSet%601>を使用することができます。       ArrayList の容量とは、ArrayList を格納できる要素の数です。 ArrayList に要素を追加すると、容量を増やすは自動的に再割り当て、必要に応じて。 呼び出すことによって、容量を削減できる<xref:System.Collections.ArrayList.TrimToSize%2A>かを設定して、<xref:System.Collections.ArrayList.Capacity%2A>プロパティに明示的にします</xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList.TrimToSize%2A>。       ArrayList オブジェクトの非常に大きい場合は、設定して、64 ビット システム上の 20億要素に最大の容量を増やすことができます、`enabled`する構成要素の属性`true`実行時環境でします。       このコレクション内の要素は、整数インデックスを使用してアクセスできます。  このコレクションのインデックスは&0; から始まります。       ArrayList コレクション受け入れる`null`として有効な値です。 重複する要素こともできます。       ArrayList コレクション内の要素として多次元配列の使用はサポートされていません。"
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>が空で、既定の初期量を備えたクラスです。"
  remarks: "容量、<xref:System.Collections.ArrayList>は要素の数を<xref:System.Collections.ArrayList>を保持できます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList>。 要素が追加されるにつれて、 <xref:System.Collections.ArrayList>、容量を増やすは自動的に内部の配列を再割り当てによる要求どおり</xref:System.Collections.ArrayList>。       コレクションのサイズを推定できる場合の<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。       このコンス トラクターは、o (1) 操作です。"
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>指定されたコレクションからコピーした要素を格納していると、コピーされた要素の数と同じ初期量を持つクラス。"
  remarks: "容量、<xref:System.Collections.ArrayList>は要素の数を<xref:System.Collections.ArrayList>を保持できます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList>。 要素が追加されるにつれて、 <xref:System.Collections.ArrayList>、容量を増やすは自動的に内部の配列を再割り当てによる要求どおり</xref:System.Collections.ArrayList>。       コレクションのサイズを推定できる場合の<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。       、<xref:System.Collections.ArrayList>同じ順序<xref:System.Collections.IEnumerator><xref:System.Collections.ICollection>。</xref:System.Collections.ICollection></xref:System.Collections.IEnumerator>によって読み取られる順序で</xref:System.Collections.ArrayList>要素のコピーします。       このコンス トラクターは、O (`n`) 操作では、ここで`n`内の要素の数は、`c`です。"
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>新しいリストに要素がコピーされます</xref:System.Collections.ICollection>。"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>空を指定した初期容量を持つクラス。"
  remarks: "容量、<xref:System.Collections.ArrayList>は要素の数を<xref:System.Collections.ArrayList>を保持できます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList>。 要素が追加されるにつれて、 <xref:System.Collections.ArrayList>、容量を増やすは自動的に内部の配列を再割り当てによる要求どおり</xref:System.Collections.ArrayList>。       コレクションのサイズを推定できる場合の<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>へ要素を追加中にサイズ変更操作を実行する必要があるの初期量を指定します。       このコンス トラクターは、O (`n`) 操作では、ここで`n`は`capacity`します。"
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "新しいリストに格納できる要素の数。"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>0 未満です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "作成、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>特定<xref:System.Collections.IList>.</xref:System.Collections.IList>のラッパー"
  remarks: "アダプターが<xref:System.Collections.IList>。</xref:System.Collections.IList>の内容をコピーできません。 代わりに、それを作成するだけに<xref:System.Collections.ArrayList><xref:System.Collections.IList>; <xref:System.Collections.IList> <xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>にも影響</xref:System.Collections.IList>する変更ではそのため、</xref:System.Collections.IList>ラッパー</xref:System.Collections.ArrayList>       <xref:System.Collections.ArrayList>クラスはジェネリック<xref:System.Collections.ArrayList.Reverse%2A>、<xref:System.Collections.ArrayList.BinarySearch%2A>と<xref:System.Collections.ArrayList.Sort%2A>メソッド</xref:System.Collections.ArrayList.Sort%2A></xref:System.Collections.ArrayList.BinarySearch%2A></xref:System.Collections.ArrayList.Reverse%2A></xref:System.Collections.ArrayList>。 このラッパーは、これらのメソッドを使用する。<xref:System.Collections.IList>ただし、ラッパーを介してこれらの汎用的な操作を実行する場合があります<xref:System.Collections.IList>。</xref:System.Collections.IList>に直接適用される演算よりも効率が低下</xref:System.Collections.IList>するための手段を指定できます。       このメソッドは、o (1) 操作です。      ## バージョンの互換性で .NET Framework バージョン 1.0 および 1.1 では、呼び出し、<xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>メソッド オーバー ロード、<xref:System.Collections.ArrayList>ラッパーにカウントとしてではなく、上限として、2 番目の引数を処理する列挙子が返されます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>。 [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]&2; 番目の引数は正しくカウントとして扱われます。 します。"
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>をラップします</xref:System.Collections.IList>。"
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> <xref:System.Collections.IList>.</xref:System.Collections.IList>ラッパー"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "末尾にオブジェクトを追加、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "<xref:System.Collections.ArrayList>受け付ける`null`有効な値としてでき、重複する要素。</xref:System.Collections.ArrayList>       場合<xref:System.Collections.ArrayList.Count%2A>既に等しい<xref:System.Collections.ArrayList.Capacity%2A>の容量、<xref:System.Collections.ArrayList>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList.Count%2A>。       場合<xref:System.Collections.ArrayList.Count%2A>はより小さい<xref:System.Collections.ArrayList.Capacity%2A>、このメソッドは、o (1) 操作になります</xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList.Count%2A>。 容量は、新しい要素を格納するためにする必要があります、このメソッドが O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>の末尾に追加する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Int32
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>位置のインデックス、 <code> value </code>が追加されました。"
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素を追加、<xref:System.Collections.ICollection>の末尾に、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Collections.ICollection> 。"
  remarks: "<xref:System.Collections.ArrayList>受け付ける`null`有効な値としてでき、重複する要素。</xref:System.Collections.ArrayList>       <xref:System.Collections.ICollection> <xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>内でも維持される</xref:System.Collections.ICollection>内の要素の順序       場合、新しい<xref:System.Collections.ArrayList.Count%2A>(現在<xref:System.Collections.ArrayList.Count%2A>さらに、コレクションのサイズ) はより大きくなる<xref:System.Collections.ArrayList.Capacity%2A>の容量、<xref:System.Collections.ArrayList>新しい要素では、それに合わせて内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList.Count%2A></xref:System.Collections.ArrayList.Count%2A>。       場合、<xref:System.Collections.ArrayList>を増やすことがなく、新しい要素に対応できる、 <xref:System.Collections.ArrayList.Capacity%2A>、このメソッドは、O (`n`) 操作、場所`n`を追加する要素の数です</xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList>。 容量は、新しい要素を格納するためにする必要があります、このメソッドが O (`n` + `m`) 操作、場所`n`を追加する要素の数と`m` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>には"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>の末尾に要素を追加する必要があります、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Collections.ICollection> 。 コレクション自体をすることはできません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、ある要素を含めることができますが、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "並べ替えられた全体を検索<xref href=&quot;System.Collections.ArrayList&quot;></xref>要素の既定の比較子を使用して、要素の&0; から始まるインデックスを返します。"
  remarks: "`value`パラメーターとの各要素、<xref:System.Collections.ArrayList>実装する必要があります、<xref:System.IComparable>比較に使用されるインターフェイス</xref:System.IComparable></xref:System.Collections.ArrayList>。 要素、<xref:System.Collections.ArrayList>既にによって定義されている並べ替え順序に従って値を昇順に並べ替える必要があります、<xref:System.IComparable>実装ですそれ以外の場合、結果できない可能性があります正しい。</xref:System.IComparable> </xref:System.Collections.ArrayList> 。       比較する`null`任意の型が有効にすることし、 <xref:System.IComparable>.</xref:System.IComparable>を使用する場合は、例外を生成しません ソート時`null`未満であるその他のオブジェクトと見なされます。       場合、<xref:System.Collections.ArrayList>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも&1; つ目のいずれかを返す、出現してのいずれかの可能性があります</xref:System.Collections.ArrayList>。       場合、 <xref:System.Collections.ArrayList>、指定した値を含まない、メソッドは、負の整数を返します</xref:System.Collections.ArrayList>。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。 値を挿入するときに、 <xref:System.Collections.ArrayList>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります</xref:System.Collections.ArrayList>。       このメソッドは、O (ログ`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>を検索します</xref:System.Object>。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Int32
      description: "0 から始まるインデックス<code> value </code> 、並べ替えられた<xref href=&quot;System.Collections.ArrayList&quot;></xref>場合は、 <code> value </code>以外、それ以外の場合は、負の値数、これは、次の要素よりも大きなインデックスのビットごとの補数<code> value </code> <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>のビットごとの補数、大きい要素がない場合や、"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "どちらも<code> value </code>の要素も<xref href=&quot;System.Collections.ArrayList&quot;></xref>実装、<xref:System.IComparable>インターフェイス</xref:System.IComparable>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>要素と同じ型ではありません、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "並べ替えられた全体を検索<xref href=&quot;System.Collections.ArrayList&quot;></xref>要素には、指定した比較子を使用して、要素の&0; から始まるインデックスを返します。"
  remarks: "比較演算子は、要素を比較する方法をカスタマイズします。 たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer>大文字と小文字の文字列の検索を実行する比較演算子とインスタンス</xref:System.Collections.CaseInsensitiveComparer>。       場合`comparer`が提供されるの要素、<xref:System.Collections.ArrayList>指定して、指定した値と比較<xref:System.Collections.IComparer>実装</xref:System.Collections.IComparer></xref:System.Collections.ArrayList>。 要素、<xref:System.Collections.ArrayList>既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります`comparer`以外の場合、結果が正しくない可能性があります</xref:System.Collections.ArrayList>。       場合`comparer`は`null`、比較が行われますを使用して、<xref:System.IComparable>または指定した値によって、要素自体によって提供される実装</xref:System.IComparable>。 要素、<xref:System.Collections.ArrayList>既にによって定義されている並べ替え順序に従って値を昇順に並べ替える必要があります、<xref:System.IComparable>実装ですそれ以外の場合、結果できない可能性があります正しい。</xref:System.IComparable> </xref:System.Collections.ArrayList> 。       比較する`null`任意の型が有効にすることし、 <xref:System.IComparable>.</xref:System.IComparable>を使用する場合は、例外を生成しません ソート時`null`未満であるその他のオブジェクトと見なされます。       場合、<xref:System.Collections.ArrayList>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも&1; つ目のいずれかを返す、出現してのいずれかの可能性があります</xref:System.Collections.ArrayList>。       場合、 <xref:System.Collections.ArrayList>、指定した値を含まない、メソッドは、負の整数を返します</xref:System.Collections.ArrayList>。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。 値を挿入するときに、 <xref:System.Collections.ArrayList>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります</xref:System.Collections.ArrayList>。       このメソッドは、O (ログ`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>を検索します</xref:System.Object>。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>要素を比較するときに使用する実装</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>は既定の比較子を使用する、<xref:System.IComparable>の各要素の実装</xref:System.IComparable>。"
    return:
      type: System.Int32
      description: "0 から始まるインデックス<code> value </code> 、並べ替えられた<xref href=&quot;System.Collections.ArrayList&quot;></xref>場合は、 <code> value </code>以外、それ以外の場合は、負の値数、これは、次の要素よりも大きなインデックスのビットごとの補数<code> value </code> <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>のビットごとの補数、大きい要素がない場合や、"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>どちらと<code>value</code>の要素も<xref href=&quot;System.Collections.ArrayList&quot;></xref>実装、<xref:System.IComparable>インターフェイスです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>と<code>value</code>の要素と同じ型ではありません、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素の範囲を検索、並べ替えられた<xref href=&quot;System.Collections.ArrayList&quot;></xref>要素には、指定した比較子を使用して、要素の&0; から始まるインデックスを返します。"
  remarks: "比較演算子は、要素を比較する方法をカスタマイズします。 たとえば、使用することができます、<xref:System.Collections.CaseInsensitiveComparer>大文字と小文字の文字列の検索を実行する比較演算子とインスタンス</xref:System.Collections.CaseInsensitiveComparer>。       場合`comparer`が提供されるの要素、<xref:System.Collections.ArrayList>指定して、指定した値と比較<xref:System.Collections.IComparer>実装</xref:System.Collections.IComparer></xref:System.Collections.ArrayList>。 要素、<xref:System.Collections.ArrayList>既にによって定義されている並べ替え順序に従って値を増やすことで並べ替える必要があります`comparer`以外の場合、結果が正しくない可能性があります</xref:System.Collections.ArrayList>。       場合`comparer`は`null`、比較が行われますを使用して、<xref:System.IComparable>または指定した値によって、要素自体によって提供される実装</xref:System.IComparable>。 要素、<xref:System.Collections.ArrayList>既にによって定義されている並べ替え順序に従って値を昇順に並べ替える必要があります、<xref:System.IComparable>実装ですそれ以外の場合、結果できない可能性があります正しい。</xref:System.IComparable> </xref:System.Collections.ArrayList> 。       比較する`null`任意の型が有効にすることし、 <xref:System.IComparable>.</xref:System.IComparable>を使用する場合は、例外を生成しません ソート時`null`未満であるその他のオブジェクトと見なされます。       場合、<xref:System.Collections.ArrayList>だけが含まれて、同じ値を持つ複数の要素には返します、出現回数、必ずしも&1; つ目のいずれかを返す、出現してのいずれかの可能性があります</xref:System.Collections.ArrayList>。       場合、 <xref:System.Collections.ArrayList>、指定した値を含まない、メソッドは、負の整数を返します</xref:System.Collections.ArrayList>。 この負の整数値を検索する値を超える最初の要素のインデックスを取得するには、ビットごとの補数演算 (~) を適用できます。 値を挿入するときに、 <xref:System.Collections.ArrayList>、このインデックスは、並べ替え順序を維持するために、挿入ポイントとして使用する必要があります</xref:System.Collections.ArrayList>。       このメソッドは、O (ログ`n`) 操作では、ここで`n`は`count`します。"
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "検索する範囲の&0; から始まる開始インデックス。"
    - id: count
      type: System.Int32
      description: "検索する範囲の長さ。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>を検索します</xref:System.Object>。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>要素を比較するときに使用する実装</xref:System.Collections.IComparer>。       - または - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>は既定の比較子を使用する、<xref:System.IComparable>の各要素の実装</xref:System.IComparable>。"
    return:
      type: System.Int32
      description: "0 から始まるインデックス<code> value </code> 、並べ替えられた<xref href=&quot;System.Collections.ArrayList&quot;></xref>場合は、 <code> value </code>以外、それ以外の場合は、負の値数、これは、次の要素よりも大きなインデックスのビットごとの補数<code> value </code> <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>のビットごとの補数、大きい要素がない場合や、"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>および<code>count</code>において有効な範囲を表していません、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。       - または -<code>comparer</code>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>どちらと<code>value</code>の要素も<xref href=&quot;System.Collections.ArrayList&quot;></xref>実装、<xref:System.IComparable>インターフェイスです。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>と<code>value</code>の要素と同じ型ではありません、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>count</code>が&0; 未満です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得または設定要素の数、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>含めることができます。"
  remarks: "容量は、要素の数を<xref:System.Collections.ArrayList>格納できます</xref:System.Collections.ArrayList>。 <xref:System.Collections.ArrayList.Count%2A>実際に<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>内にある要素の数です。</xref:System.Collections.ArrayList.Count%2A>       容量は、常に<xref:System.Collections.ArrayList.Count%2A>。</xref:System.Collections.ArrayList.Count%2A>以上 場合<xref:System.Collections.ArrayList.Count%2A>要素を追加中に容量を超える場合、容量は前の要素をコピーし、新しい要素を追加する前に、内部配列の再割り当てによって自動的に増加します</xref:System.Collections.ArrayList.Count%2A>。       呼び出すことによって、容量を削減できる<xref:System.Collections.ArrayList.TrimToSize%2A>または容量プロパティを明示的に設定します</xref:System.Collections.ArrayList.TrimToSize%2A>。 容量の値が明示的に設定されている場合、内部配列が指定した容量に合わせても再割り当てされます。       このプロパティの値を取得する場合は、o (1) 操作です。O は、プロパティの設定 (`n`) 操作、場所`n`新しい容量します。"
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "要素の数を<xref href=&quot;System.Collections.ArrayList&quot;></xref>含めることができます。"
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "容量が<xref:System.Collections.ArrayList.Count*>。</xref:System.Collections.ArrayList.Count*>よりも小さい値に設定されています。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "システムでメモリ不足がありません。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "すべての要素を削除、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "<xref:System.Collections.ArrayList.Count%2A>0 に設定し、コレクションの要素から他のオブジェクトへの参照も解放します。</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>変更されません。</xref:System.Collections.ArrayList.Capacity%2A>  容量をリセットする、 <xref:System.Collections.ArrayList>、呼び出す<xref:System.Collections.ArrayList.TrimToSize%2A>設定や、<xref:System.Collections.ArrayList.Capacity%2A>プロパティを直接</xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList.TrimToSize%2A></xref:System.Collections.ArrayList>。 空のトリミング<xref:System.Collections.ArrayList>のキャパシティを設定、<xref:System.Collections.ArrayList>を既定の容量</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList>。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "簡易コピーを作成、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "コレクションの簡易コピーは、参照型または値の型が参照先のオブジェクトはコピーしないかどうか、コレクションの要素のみをコピーします。 新しいコレクション内の参照は、元のコレクション内の参照をポイントする同じオブジェクトをポイントします。       これに対し、コレクションのディープ コピーされた要素をコピーして、要素が直接または間接的に参照するすべてです。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "簡易コピー、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素がであるかどうかを判断、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、       このメソッドは、 <xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>を呼び出すことで等しいかどうかを決定します。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "<xref:System.Object>内で検索する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "全体をコピー <xref href=&quot;System.Collections.ArrayList&quot;> </xref>を互換性のある&1; 次元<xref:System.Array>、対象となる配列の先頭から始まります</xref:System.Array>。"
  remarks: "指定された配列は、互換性のある型でなければなりません。       このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=fullName>要素のコピー</xref:System.Array.Copy%2A?displayProperty=fullName> 。       <xref:System.Array>列挙<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>同じ順序で</xref:System.Array>要素のコピーします。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "1 次元<xref:System.Array>からコピーした要素のコピー先は<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Array> 。 <xref:System.Array>0 から始まるインデックス番号が必要です</xref:System.Array>。"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>多次元です。       - または - ソース内の要素の数<xref href=&quot;System.Collections.ArrayList&quot;></xref>要素の数よりも大きいを宛先<code>array</code>含めることができます。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "ソースの種類<xref href=&quot;System.Collections.ArrayList&quot;></xref>変換先の型に自動的にキャストすることはできません<code> array</code>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "全体をコピー <xref href=&quot;System.Collections.ArrayList&quot;> </xref>を互換性のある&1; 次元<xref:System.Array>、対象となる配列の指定したインデックスから始まります</xref:System.Array>。"
  remarks: "指定された配列は、互換性のある型でなければなりません。       このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=fullName>要素のコピー</xref:System.Array.Copy%2A?displayProperty=fullName> 。       <xref:System.Array>列挙<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>同じ順序で</xref:System.Array>要素のコピーします。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "1 次元<xref:System.Array>からコピーした要素のコピー先は<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Array> 。 <xref:System.Array>0 から始まるインデックス番号が必要です</xref:System.Array>。"
    - id: arrayIndex
      type: System.Int32
      description: "内の&0; から始まるインデックス`array`コピーの開始位置。"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>0 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>多次元です。       - または - ソース内の要素の数<xref href=&quot;System.Collections.ArrayList&quot;></xref>から使用可能な領域より大きくなって<code>arrayIndex</code>変換先の末尾に<code>array</code>です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "ソースの種類<xref href=&quot;System.Collections.ArrayList&quot;></xref>変換先の型に自動的にキャストすることはできません<code> array</code>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素の範囲をコピー、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>を互換性のある&1; 次元<xref:System.Array>、対象となる配列の指定したインデックスから始まります</xref:System.Array>。"
  remarks: "指定された配列は、互換性のある型でなければなりません。       このメソッドを使用して<xref:System.Array.Copy%2A?displayProperty=fullName>要素のコピー</xref:System.Array.Copy%2A?displayProperty=fullName> 。       <xref:System.Array>列挙<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>同じ順序で</xref:System.Array>要素のコピーします。       このメソッドは、O (`n`) 操作では、ここで`n`は`count`します。"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "ソース内の&0; から始まるインデックス<xref href=&quot;System.Collections.ArrayList&quot;></xref>コピーの開始位置。"
    - id: array
      type: System.Array
      description: "1 次元<xref:System.Array>からコピーした要素のコピー先は<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Array> 。 <xref:System.Array>0 から始まるインデックス番号が必要です</xref:System.Array>。"
    - id: arrayIndex
      type: System.Int32
      description: "内の&0; から始まるインデックス`array`コピーの開始位置。"
    - id: count
      type: System.Int32
      description: "コピーする要素の数。"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>arrayIndex</code>が&0; 未満です。       - または -<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>多次元です。       - または -<code>index</code>と等しいかより大きい、 <xref:System.Collections.ArrayList.Count*> 、ソースの<xref href=&quot;System.Collections.ArrayList&quot;></xref>です。       - または - から要素の数<code>index</code>ソースの終わりに<xref href=&quot;System.Collections.ArrayList&quot;></xref>から使用可能な領域より大きくなって<code>arrayIndex</code>変換先の末尾に<code>array</code>です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "ソースの種類<xref href=&quot;System.Collections.ArrayList&quot;></xref>変換先の型に自動的にキャストすることはできません<code> array</code>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "実際に含まれる要素の数を取得、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>要素の数を<xref:System.Collections.ArrayList>格納できます</xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList.Capacity%2A> 数は実際に<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>内にある要素の数       <xref:System.Collections.ArrayList.Capacity%2A>大きいか等しい数には常にします。</xref:System.Collections.ArrayList.Capacity%2A> 数を超える場合<xref:System.Collections.ArrayList.Capacity%2A>要素を追加するには、中に容量が前の要素をコピーし、新しい要素を追加する前に、内部配列の再割り当てによって自動的に増加します</xref:System.Collections.ArrayList.Capacity%2A>。       このプロパティの値を取得するは、o (1) 操作です。"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "実際に含まれる要素の数、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>固定サイズのラッパー。"
  remarks: "このラッパーへの追加と<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>元からの削除を防止するために使用できます。 要素の変更または置き換えができます。       固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>をラップします。"
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>固定サイズのラッパー。"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、<xref:System.Collections.IList>固定サイズのラッパー</xref:System.Collections.IList> 。"
  remarks: "このラッパーへの追加と<xref:System.Collections.IList>。</xref:System.Collections.IList>元からの削除を防止するために使用できます。 要素の変更または置き換えができます。       固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。       このメソッドは、o (1) 操作です。"
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>をラップします</xref:System.Collections.IList>。"
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>固定サイズのラッパー</xref:System.Collections.IList> 。"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "全体の列挙子を返します<xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "`foreach` C# 言語のステートメント (`for each` Visual Basic で)、列挙子の複雑さが隠されています。  したがってを使用して`foreach`列挙子を直接操作せずにお勧めします。       列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A>列挙子をこの位置に戻さ点もあります。</xref:System.Collections.IEnumerator.Reset%2A>  この位置にある<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A>。 したがって、 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.Current%2A>の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに</xref:System.Collections.IEnumerator.MoveNext%2A>呼び出す必要があります。       <xref:System.Collections.IEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします</xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>       場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`</xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`</xref:System.Collections.IEnumerator.MoveNext%2A>。 最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.Current%2A>再度、コレクションの最初の要素に<xref:System.Collections.IEnumerator.Reset%2A><xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>続けて</xref:System.Collections.IEnumerator.Reset%2A>を呼び出すことができます</xref:System.Collections.IEnumerator.Current%2A>を設定するには       コレクションが変更されない限り、列挙子は有効です。 コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能とその動作は未定義です。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。  列挙中にスレッドの安全性を保証するためには、列挙中にコレクションをロックできます。  読み取りと書き込みの複数のスレッドがアクセスするコレクションを許可するのには、独自に同期を実装する必要があります。       このメソッドは、o (1) 操作です。"
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>全体の<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Collections.IEnumerator> 。"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "内の要素の範囲の列挙子を返します、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "`foreach` C# 言語のステートメント (`for each` Visual c で`For Each`Visual Basic) 列挙子の複雑さが隠されています。  したがってを使用して`foreach`列挙子を直接操作せずにお勧めします。       列挙子を使用して、コレクション内のデータを読み取ることができますが、基になるコレクションを変更するのには使用できません。       最初に、列挙子はコレクション内の最初の要素の前に位置付けられます。 <xref:System.Collections.IEnumerator.Reset%2A>列挙子をこの位置に戻さ点もあります。</xref:System.Collections.IEnumerator.Reset%2A>  この位置にある<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A>。 したがって、 <xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.Current%2A>の値を読み取る前に、コレクションの最初の要素に列挙子を進めるに</xref:System.Collections.IEnumerator.MoveNext%2A>呼び出す必要があります。       <xref:System.Collections.IEnumerator.Current%2A>いずれかのまで同じオブジェクトを返します<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>と呼びます</xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>設定<xref:System.Collections.IEnumerator.Current%2A>次の要素にします</xref:System.Collections.IEnumerator.Current%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>       場合<xref:System.Collections.IEnumerator.MoveNext%2A>列挙子をコレクションの末尾が、コレクション内の最後の要素の後に配置されているパスと<xref:System.Collections.IEnumerator.MoveNext%2A>返します`false`</xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 列挙子がこの位置では、後続の呼び出しの場合<xref:System.Collections.IEnumerator.MoveNext%2A>を返すことも`false`</xref:System.Collections.IEnumerator.MoveNext%2A>。 最後の呼び出し場合<xref:System.Collections.IEnumerator.MoveNext%2A>返される`false`、<xref:System.Collections.IEnumerator.Current%2A>が定義されていません</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>。 <xref:System.Collections.IEnumerator.Current%2A>再度、コレクションの最初の要素に<xref:System.Collections.IEnumerator.Reset%2A><xref:System.Collections.IEnumerator.MoveNext%2A>。</xref:System.Collections.IEnumerator.MoveNext%2A>続けて</xref:System.Collections.IEnumerator.Reset%2A>を呼び出すことができます</xref:System.Collections.IEnumerator.Current%2A>を設定するには       コレクションが変更されない限り、列挙子は有効です。 コレクションの変更が加えられた場合など、追加、変更、または要素を削除すると、列挙子は回復不可能とその動作は未定義です。       列挙子はコレクションへの排他アクセスがありません。そのため、コレクションの列挙は、本質的には、スレッド セーフなプロシージャではします。  列挙中にスレッドの安全性を保証するためには、列挙中にコレクションをロックできます。  読み取りと書き込みの複数のスレッドがアクセスするコレクションを許可するのには、独自に同期を実装する必要があります。       このメソッドは、o (1) 操作です。      ## バージョンの互換性に、.NET Framework のバージョン 1.0 および 1.1 では、列挙子の<xref:System.Collections.ArrayList>ラッパーによって返される、<xref:System.Collections.ArrayList.Adapter%2A>カウントではなく、上限として、メソッドが 2 番目の引数を処理します</xref:System.Collections.ArrayList.Adapter%2A></xref:System.Collections.ArrayList>。 [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]&2; 番目の引数は正しくカウントとして扱われます。 します。"
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "0 から始まる開始インデックス、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>列挙子が参照する必要があります。"
    - id: count
      type: System.Int32
      description: "内の要素の数、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>列挙子が参照する必要があります。"
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>内の要素の指定した範囲の<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Collections.IEnumerator> 。"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>および<code>count</code>において有効な範囲を指定しない、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 、ソース内の要素のサブセットを表す<xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "このメソッドは、要素のコピーを作成できません。 新しい<xref:System.Collections.ArrayList>ソース<xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>にビュー ウィンドウのみ</xref:System.Collections.ArrayList> ただし、<xref:System.Collections.ArrayList>このビュー ウィンドウ<xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>を介して行う必要があります</xref:System.Collections.ArrayList>ソースすべて後の変更 変更がソースに直接行われた場合<xref:System.Collections.ArrayList>、表示ウィンドウ<xref:System.Collections.ArrayList>が無効になったに対する操作は<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>を返します</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList>       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "0 から始まる<xref href=&quot;System.Collections.ArrayList&quot;></xref>範囲が開始する位置のインデックスします。"
    - id: count
      type: System.Int32
      description: "範囲内の要素の数。"
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> 、ソース内の要素のサブセットを表す<xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>および<code>count</code>内の要素の有効な範囲を表していません、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定された検索<xref:System.Object>全体内で最初に見つかった位置の&0; から始まるインデックスを返しますと<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。"
  remarks: "<xref:System.Collections.ArrayList>はフォワード最初の要素を起点と最後の要素で終わる検索します</xref:System.Collections.ArrayList>。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、       このメソッドは、 <xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>を呼び出すことで等しいかどうかを決定します。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>内で検索する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Int32
      description: "最初に見つかった位置の&0; から始まるインデックス<code> value </code>全体で<xref href=&quot;System.Collections.ArrayList&quot;> </xref>、それ以外の場合は、-1。"
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定された検索<xref:System.Object>内の要素の範囲内で最初に見つかった位置の&0; から始まるインデックスを返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>を指定したインデックスから最後の要素までです</xref:System.Object>。"
  remarks: "<xref:System.Collections.ArrayList>転送を開始位置として検索`startIndex`と最後の要素で終了します</xref:System.Collections.ArrayList>。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n`から要素の数は、 `startIndex` <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>の末尾に       このメソッドは、 <xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>を呼び出すことで等しいかどうかを決定します。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>内で検索する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: startIndex
      type: System.Int32
      description: "検索の&0; から始まる開始インデックス。 0 (ゼロ) は、空のリストで有効です。"
    return:
      type: System.Int32
      description: "最初に見つかった位置の&0; から始まるインデックス<code> value </code>内の要素の範囲内で、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>から自身を拡張する<code> startIndex </code>最後の要素が見つかった場合は、-1。"
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定された検索<xref:System.Object>内の要素の範囲内で最初に見つかった位置の&0; から始まるインデックスを返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>を指定したインデックスから始まり、指定した要素数が含まれています</xref:System.Object>。"
  remarks: "<xref:System.Collections.ArrayList>転送を開始位置として検索が`startIndex`で終わる`startIndex`plus`count`から 1 を引いた場合`count`が 0 より大きい</xref:System.Collections.ArrayList>。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n`は`count`します。       このメソッドは、 <xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>を呼び出すことで等しいかどうかを決定します。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>内で検索する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: startIndex
      type: System.Int32
      description: "検索の&0; から始まる開始インデックス。 0 (ゼロ) は、空のリストで有効です。"
    - id: count
      type: System.Int32
      description: "検索するセクション内の要素の数。"
    return:
      type: System.Int32
      description: "最初に見つかった位置の&0; から始まるインデックス<code> value </code>内の要素の範囲内で、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>位置<code> startIndex </code>が含まれています<code> count </code>個の要素、見つかった場合は、-1。"
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。       - または -<code>count</code>が&0; 未満です。       - または -<code>startIndex</code>と<code>count</code>内の正しいセクションを指定しない、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素を挿入、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>指定したインデックス位置。"
  remarks: "<xref:System.Collections.ArrayList>受け付ける`null`有効な値としてでき、重複する要素。</xref:System.Collections.ArrayList>       場合<xref:System.Collections.ArrayList.Count%2A>既に等しい<xref:System.Collections.ArrayList.Capacity%2A>の容量、<xref:System.Collections.ArrayList>内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList.Count%2A>。       場合`index`と等しい<xref:System.Collections.ArrayList.Count%2A>、 `value` <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>の末尾に追加された</xref:System.Collections.ArrayList.Count%2A>       連続する要素のコレクションでリストなど、カーソル位置の後にある要素を新しい要素に対応します。 場合は、コレクションのインデックスが、移動した要素のインデックスも更新します。 この動作は、ここで要素がハッシュ テーブルなどのバケットにグループ化概念的にはコレクションには適用されません。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "位置の&0; から始まるインデックス`value`挿入する必要があります。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>を挿入します</xref:System.Object>。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>index</code>がより大きい<xref:System.Collections.ArrayList.Count*>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "コレクションの要素を挿入、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>指定したインデックス位置。"
  remarks: "<xref:System.Collections.ArrayList>受け付ける`null`有効な値としてでき、重複する要素。</xref:System.Collections.ArrayList>       場合、新しい<xref:System.Collections.ArrayList.Count%2A>(現在<xref:System.Collections.ArrayList.Count%2A>さらに、コレクションのサイズ) はより大きくなる<xref:System.Collections.ArrayList.Capacity%2A>の容量、<xref:System.Collections.ArrayList>新しい要素では、それに合わせて内部の配列を自動的に再割り当てが増加し、新しい要素が追加される前に、既存の要素が新しい配列にコピーされます</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A></xref:System.Collections.ArrayList.Count%2A></xref:System.Collections.ArrayList.Count%2A>。       場合`index`と等しい<xref:System.Collections.ArrayList.Count%2A>、 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>の末尾に要素が追加</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ICollection> <xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>内でも維持される</xref:System.Collections.ICollection>内の要素の順序       連続する要素のコレクションでリストなど、カーソル位置の後にある要素を新しい要素に対応します。 場合は、コレクションのインデックスが、移動した要素のインデックスも更新します。 この動作は、ここで要素がハッシュ テーブルなどのバケットにグループ化概念的にはコレクションには適用されません。       このメソッドは、O (`n` + `m`) 操作では、ここで`n`を追加する要素の数と`m` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "新しい要素を挿入する位置の&0; から始まるインデックス。"
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>要素を挿入する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Collections.ICollection> 。 コレクション自体をすることはできません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、ある要素を含めることができますが、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>index</code>がより大きい<xref:System.Collections.ArrayList.Count*>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  remarks: "固定サイズ コレクションできない追加または削除の要素のコレクションが作成された後で既存の要素は変更できます。       固定サイズ コレクションが追加および削除する要素を防止するラッパーで単純なコレクションそのための追加または削除、要素を含む、基になるコレクションが変更された場合、固定サイズ コレクションにはそれらの変更が反映されます。       このプロパティの値を取得するは、o (1) 操作です。"
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>が固定サイズです。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。"
  remarks: "読み取り専用であるコレクション追加、削除、または要素の変更後にできません、コレクションを作成します。       読み取り専用であるコレクションは、コレクションのコレクションの変更を防止するラッパーです。そのため、基になるコレクションの変更が加えられた、読み取り専用コレクションはこの変更を反映します。       このプロパティの値を取得するは、o (1) 操作です。"
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "アクセスをするかどうかを示す値を取得、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>が同期されている (スレッド セーフである)。"
  remarks: "スレッド セーフを確保する、 <xref:System.Collections.ArrayList>、によって返されるラッパーを介してすべての操作を行う必要があります、<xref:System.Collections.ArrayList.Synchronized%2A>メソッド</xref:System.Collections.ArrayList.Synchronized%2A></xref:System.Collections.ArrayList>。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合へのアクセス、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>が同期 (スレッド セーフな) です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "取得または指定したインデックス位置に要素を設定します。"
  remarks: "項目を返します、<xref:System.Object>それを操作するのには、元の型に返される値をキャストする必要がありますので、</xref:System.Object> 重要な点は<xref:System.Collections.ArrayList>厳密に型指定されたコレクションではありません</xref:System.Collections.ArrayList>。 厳密に型指定された代替手段は<xref:System.Collections.Generic.List%601>。</xref:System.Collections.Generic.List%601>を参照してください。       <xref:System.Collections.ArrayList>受け付ける`null`有効な値としてでき、重複する要素。</xref:System.Collections.ArrayList>       このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。`myCollection[index]`です。       C# 言語では、キーワードを使用して、項目のプロパティを実装する代わりにインデクサーを定義します。 Visual Basic では、同様のインデックス機能を提供する既定のプロパティとして項目を実装します。       O (1) 操作は、このプロパティの値を取得します。プロパティの設定は、o (1) 操作ではもです。"
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "取得または設定する要素の&0; から始まるインデックス。"
    return:
      type: System.Object
      description: "指定したインデックスにある要素。"
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>index</code>と等しいかより大きい<xref:System.Collections.ArrayList.Count*>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定された検索<xref:System.Object>全体の中で最後に見つかった位置の&0; から始まるインデックスを返しますと<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。"
  remarks: "<xref:System.Collections.ArrayList>後方の最後の要素の最初と最後の最初の要素を検索します</xref:System.Collections.ArrayList>。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>内で検索する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Int32
      description: "最後に見つかった位置の&0; から始まるインデックス<code> value </code>全体の中で、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>、それ以外の場合は、-1。"
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定された検索<xref:System.Object>内の要素の範囲内で最後に見つかった位置の&0; から始まるインデックスを返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>自身を拡張する最初の要素から指定したインデックス</xref:System.Object>。"
  remarks: "<xref:System.Collections.ArrayList>検索旧バージョンとを開始位置として、`startIndex`と最初の要素で終了します</xref:System.Collections.ArrayList>。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作、場所`n`の先頭から要素の数が、<xref:System.Collections.ArrayList>に`startIndex`</xref:System.Collections.ArrayList>。       このメソッドは、 <xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>を呼び出すことで等しいかどうかを決定します。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>内で検索する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: startIndex
      type: System.Int32
      description: "後方検索の&0; から始まる開始インデックス。"
    return:
      type: System.Int32
      description: "最後に見つかった位置の&0; から始まるインデックス<code> value </code>内の要素の範囲内で、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref> 、最初の要素から自身を拡張する<code> startIndex </code>、それ以外の場合は、-1。"
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定された検索<xref:System.Object>内の要素の範囲内で最後に見つかった位置の&0; から始まるインデックスを返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>要素および指定したインデックスで終わり、指定した数を格納している</xref:System.Object>。"
  remarks: "<xref:System.Collections.ArrayList>検索旧バージョンとを開始位置として、`startIndex`で終わる`startIndex`マイナス`count`1、さらに場合`count`が 0 より大きい</xref:System.Collections.ArrayList>。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n`は`count`します。       このメソッドは、 <xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>を呼び出すことで等しいかどうかを決定します。       以降、.NET Framework 2.0 では、このメソッドを使用して、コレクションのオブジェクトの<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>メソッド`item`項目が存在するかどうかを確認します</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。 .NET Framework の以前のバージョンでは、この決定を使用して行われた、<xref:System.Object.Equals%2A>と<xref:System.IComparable.CompareTo%2A>のメソッド、`item`コレクション内のオブジェクトのパラメーターです</xref:System.IComparable.CompareTo%2A></xref:System.Object.Equals%2A>。"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>内で検索する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: startIndex
      type: System.Int32
      description: "後方検索の&0; から始まる開始インデックス。"
    - id: count
      type: System.Int32
      description: "検索するセクション内の要素の数。"
    return:
      type: System.Int32
      description: "最後に見つかった位置の&0; から始まるインデックス<code> value </code>内の要素の範囲内で、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>格納している<code> count </code>要素数で終わり、 <code> startIndex </code>、それ以外の場合は、-1。"
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>有効なインデックスの範囲外である、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。       - または -<code>count</code>が&0; 未満です。       - または -<code>startIndex</code>と<code>count</code>内の正しいセクションを指定しない、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "読み取り専用に返します<xref href=&quot;System.Collections.ArrayList&quot;></xref>ラッパーです。"
  remarks: "変更を加えるように`list`、公開`list`このラッパーを使用します。       読み取り専用であるコレクションは、単純なコレクションの変更を防止するラッパー コレクションです。 基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。       このメソッドは、o (1) 操作です。"
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>をラップします。"
    return:
      type: System.Collections.ArrayList
      description: "読み取り専用<xref href=&quot;System.Collections.ArrayList&quot;></xref>ラッパー <code> list</code>です。"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "読み取り専用に返します<xref:System.Collections.IList>ラッパー</xref:System.Collections.IList> 。"
  remarks: "変更を加えるように`list`、公開`list`このラッパーを使用します。       読み取り専用であるコレクションは、単純なコレクションの変更を防止するラッパー コレクションです。 基になるコレクションの変更が加えられた、読み取り専用コレクションはそれらの変更を反映します。       このメソッドは、o (1) 操作です。"
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>をラップします</xref:System.Collections.IList>。"
    return:
      type: System.Collections.IList
      description: "読み取り専用<xref:System.Collections.IList>ラッパー <code> list </code></xref:System.Collections.IList> 。"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "最初に見つかった特定のオブジェクトから削除、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "場合、<xref:System.Collections.ArrayList>に指定したオブジェクトが含まれていない、<xref:System.Collections.ArrayList>は変更されません</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList>。 例外はスローされません。       このメソッドは、一方向の検索を実行します。そのため、このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、       このメソッドは、 <xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName>を呼び出すことで等しいかどうかを決定します。       リストなどの連続する要素のコレクションで、削除された要素に続く要素上へ移動繰りにします。 場合は、コレクションのインデックスが、移動した要素のインデックスも更新します。 この動作は、ここで要素がハッシュ テーブルなどのバケットにグループ化概念的にはコレクションには適用されません。"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>から削除する、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定したインデックス位置にある要素を削除、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "コレクションのサイズが調整されます要素を削除すると後の値、<xref:System.Collections.ArrayList.Count%2A>プロパティが&1; つ減らさ</xref:System.Collections.ArrayList.Count%2A>。       リストなどの連続する要素のコレクションで、削除された要素に続く要素上へ移動繰りにします。 場合は、コレクションのインデックスが、移動した要素のインデックスも更新します。 この動作は、ここで要素がハッシュ テーブルなどのバケットにグループ化概念的にはコレクションには適用されません。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "削除する要素の&0; から始まるインデックス。"
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>index</code>と等しいかより大きい<xref:System.Collections.ArrayList.Count*>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素の範囲を削除、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "リストなどの連続する要素のコレクションで、削除された要素に続く要素上へ移動繰りにします。 場合は、コレクションのインデックスが、移動した要素のインデックスも更新します。 この動作は、ここで要素がハッシュ テーブルなどのバケットにグループ化概念的にはコレクションには適用されません。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "削除する要素の範囲の&0; から始まる開始インデックス。"
    - id: count
      type: System.Int32
      description: "削除する要素の数。"
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>および<code>count</code>内の要素の有効な範囲を表していません、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>要素を持つ指定した値のコピーであります。"
  remarks: "<xref:System.Collections.ArrayList>受け付ける`null`有効な値としてでき、重複する要素。</xref:System.Collections.ArrayList>       このメソッドは、O (`n`) 操作では、ここで`n`は`count`します。"
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "<xref:System.Object>で複数回、新しいコピーに<xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。 値を指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
    - id: count
      type: System.Int32
      description: "回数を超える`value`コピーする必要があります。"
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>で<code> count </code>のコピーをすべての要素数<code> value</code>です。"
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>0 未満です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "全体の要素の順序を反転<xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "このメソッドを使用して<xref:System.Array.Reverse%2A?displayProperty=fullName>、要素の順序を逆になるようにある要素<xref:System.Collections.ArrayList>[i]、i は、範囲内の任意のインデックスに移動<xref:System.Collections.ArrayList>[j] j と等しい`index`  +  `index`  +  `count` -i - 1</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName> 。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "指定した範囲内の要素の順序を反転させます。"
  remarks: "このメソッドを使用して<xref:System.Array.Reverse%2A?displayProperty=fullName>、要素の順序を逆になるようにある要素<xref:System.Collections.ArrayList>[i]、i は、範囲内の任意のインデックスに移動<xref:System.Collections.ArrayList>[j] j と等しい`index`  +  `index`  +  `count` -i - 1</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName> 。       このメソッドは、O (`n`) 操作では、ここで`n`は`count`します。"
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "反転させる範囲の&0; から始まる開始インデックス。"
    - id: count
      type: System.Int32
      description: "反転させる範囲内の要素の数。"
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>および<code>count</code>内の要素の有効な範囲を表していません、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "内の要素の範囲に、コレクションの要素をコピー、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "<xref:System.Collections.ArrayList>受け付ける`null`有効な値としてでき、重複する要素。</xref:System.Collections.ArrayList>       <xref:System.Collections.ICollection> <xref:System.Collections.ArrayList>。</xref:System.Collections.ArrayList>内でも維持される</xref:System.Collections.ICollection>内の要素の順序       このメソッドは、O (`n` + 1) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "0 から始まる<xref href=&quot;System.Collections.ArrayList&quot;></xref>要素のコピーを開始する位置のインデックス`c`です。"
    - id: c
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>にコピーする要素を持つ、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Collections.ICollection> 。 コレクション自体をすることはできません<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、ある要素を含めることができますが、 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>index</code>内の要素の数と<code>c</code>がより大きい<xref:System.Collections.ArrayList.Count*>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "全体の要素を並べ替えます<xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "このメソッドを使用して<xref:System.Array.Sort%2A?displayProperty=fullName>、クイック ソート アルゴリズムを使用します</xref:System.Array.Sort%2A?displayProperty=fullName>。 クイック ソート アルゴリズムは、比較 (不安定な並べ替えとも呼ばれます)、「未満またはと等しい」ことを意味する並べ替え比較操作では、最終的な並べ替えられたリストの最初に現れる必要がありますが&2; つの要素のうちを判断します。 ただし、2 つの要素が等しい場合は、元の順序は保持されません可能性があります。 これに対し、安定した並べ替えには、同じである要素の順序が保持されます。 安定した並べ替えを実行するのには、カスタムを実装する必要があります<xref:System.Collections.IComparer>でこのメソッドの他のオーバー ロードを使用するインターフェイス</xref:System.Collections.IComparer>。       平均すると、このメソッドは、O (`n`ログ`n`) 操作、場所`n`は<xref:System.Collections.ArrayList.Count%2A>最悪の場合ですこれは、O (`n`^&2;) 操作。</xref:System.Collections.ArrayList.Count%2A> 。"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "全体の要素を並べ替えます<xref href=&quot;System.Collections.ArrayList&quot;></xref>指定した比較子を使用します。"
  remarks: "実装するカスタムの比較演算子でオブジェクトの一覧を並べ替える並べ替えメソッドを使用して、<xref:System.Collections.IComparer>インターフェイス</xref:System.Collections.IComparer>。 渡す場合`null`の`comparer`、このメソッドを使用して、<xref:System.IComparable>の各要素の実装</xref:System.IComparable>。 この場合、する必要があります、リストに含まれるオブジェクトを実装することを確認して、<xref:System.Collections.IComparer>インターフェイスまたは例外が発生します</xref:System.Collections.IComparer>。       さらを使用して、<xref:System.IComparable>実装では、リスト (不安定な並べ替えとも呼ばれます) の比較による並べ替えを実行することを意味ですつまり、2 つの要素が等しい場合、その順序可能性がありますが維持されない。</xref:System.IComparable> 。 これに対し、安定した並べ替えには、同じである要素の順序が保持されます。 安定した並べ替えを実行するのには、カスタムを実装する必要があります<xref:System.Collections.IComparer>インターフェイス</xref:System.Collections.IComparer>。       平均すると、このメソッドは、O (`n`ログ`n`) 操作、場所`n`は<xref:System.Collections.ArrayList.Count%2A>最悪の場合ですこれは、O (`n`^&2;) 操作。</xref:System.Collections.ArrayList.Count%2A> 。"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>要素を比較するときに使用する実装</xref:System.Collections.IComparer>。       または、null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で) を使用する、<xref:System.IComparable>の各要素の実装</xref:System.IComparable>。"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "2 つの要素の比較中にエラーが発生しました。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>渡される<code> comparer </code>、リスト内の要素に<xref:System.IComparable>.</xref:System.IComparable>が実装していません"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "内の要素の範囲の要素を並べ替えます<xref href=&quot;System.Collections.ArrayList&quot;></xref>指定した比較子を使用します。"
  remarks: "場合`comparer`に設定されている`null`、このメソッドは、(不安定な並べ替えとも呼ばれます) の比較による並べ替えを実行します。 つまり、2 つの要素が等しい場合、その順序可能性がありますが維持されません。 これに対し、安定した並べ替えには、同じである要素の順序が保持されます。 安定した並べ替えを実行するのには、カスタムを実装する必要があります<xref:System.Collections.IComparer>インターフェイス</xref:System.Collections.IComparer>。       平均すると、このメソッドは、O (`n`ログ`n`) 操作、場所`n`は`count`; 最悪のケースで O(n^2) 操作であります。"
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "並べ替える範囲の&0; から始まる開始インデックス。"
    - id: count
      type: System.Int32
      description: "並べ替える範囲の長さ。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>要素を比較するときに使用する実装</xref:System.Collections.IComparer>。       または、null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で) を使用する、<xref:System.IComparable>の各要素の実装</xref:System.IComparable>。"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>0 未満です。       - または -<code>count</code>が&0; 未満です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>および<code>count</code>において有効な範囲を指定しない、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "2 つの要素の比較中にエラーが発生しました。"
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>同期されている (スレッド セーフである)。"
  remarks: "スレッド セーフを確保する、 <xref:System.Collections.ArrayList>、このラッパーを通じて、すべての操作を行う必要があります</xref:System.Collections.ArrayList>。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>同期するためにします。"
    return:
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>同期されている (スレッド セーフである)。"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返します、<xref:System.Collections.IList>同期されている (スレッド セーフである).</xref:System.Collections.IList>"
  remarks: "スレッド セーフを確保する、 <xref:System.Collections.ArrayList>、このラッパーを通じて、すべての操作を行う必要があります</xref:System.Collections.ArrayList>。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>同期するためにします</xref:System.Collections.IList>。"
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>同期されている (スレッド セーフである).</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "アクセスを同期するために使用できるオブジェクトを取得、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "同期されたバージョンを作成する、<xref:System.Collections.ArrayList>を使用して、<xref:System.Collections.ArrayList.Synchronized%2A>メソッド</xref:System.Collections.ArrayList.Synchronized%2A></xref:System.Collections.ArrayList>。 ただし、派生クラスは、独自の同期されたバージョンを指定、 <xref:System.Collections.ArrayList>SyncRoot プロパティを使用します</xref:System.Collections.ArrayList>。 同期されたコードでの操作を実行する必要があります、 <xref:System.Collections.ArrayList>、 <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>で直接</xref:System.Collections.ArrayList> これにより、他のオブジェクトから派生したコレクションを適切に操作します。 具体的には、同時に変更する可能性がある別スレッドとの適切な同期を維持、<xref:System.Collections.ArrayList>オブジェクト</xref:System.Collections.ArrayList>。       コレクションの列挙は本質的にスレッド セーフなプロシージャ コレクションが同期されている場合でも、他のスレッドがコレクションを変更、これにより、列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更に起因する例外をキャッチします。"
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "アクセスを同期するために使用できるオブジェクト、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素をコピー、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>を新しい<xref:System.Object>配列</xref:System.Object>。"
  remarks: "要素のコピーを使用して<xref:System.Array.Copy%2A?displayProperty=fullName>、これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "<xref:System.Object>配列の要素のコピーを格納、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref></xref:System.Object> 。"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "要素をコピー、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>指定した要素の型の新しい配列にします。"
  remarks: "すべてのオブジェクトの<xref:System.Collections.ArrayList>オブジェクトにキャストされます、<xref:System.Type>で指定されている、`type`パラメーター</xref:System.Type> </xref:System.Collections.ArrayList> 。       要素のコピーを使用して<xref:System.Array.Copy%2A?displayProperty=fullName>、これは、O (`n`) 操作、場所`n`は<xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要素<xref:System.Type>のコピー先の配列要素のコピーを作成します</xref:System.Type>。"
    return:
      type: System.Array
      description: "要素のコピーを含む指定した要素型の配列、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "ソースの種類<xref href=&quot;System.Collections.ArrayList&quot;></xref>指定された型に自動的にキャストすることはできません。"
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "実際の要素数を容量を設定、 <xref href=&quot;System.Collections.ArrayList&quot;></xref>です。"
  remarks: "このメソッドは、コレクションのメモリ オーバーヘッドを最小要素がコレクションに追加されない場合に使用できます。       リセットする、<xref:System.Collections.ArrayList>を初期状態を呼び出して、 <xref:System.Collections.ArrayList.Clear%2A>TrimToSize を呼び出す前にメソッド</xref:System.Collections.ArrayList.Clear%2A></xref:System.Collections.ArrayList>。 空のトリミング<xref:System.Collections.ArrayList>のキャパシティを設定、<xref:System.Collections.ArrayList>を既定の容量</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList>。       このメソッドは、O (`n`) 操作では、ここで`n` <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>は、"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>は読み取り専用です。       - または -、 <xref href=&quot;System.Collections.ArrayList&quot;> </xref>のサイズが固定されています。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
