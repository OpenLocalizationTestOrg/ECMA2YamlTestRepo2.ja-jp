### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.RegistryAccessRule
  id: RegistryAccessRule
  children:
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.RegistryRights
  langs:
  - csharp
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
  type: Class
  summary: "ユーザーまたはグループに対して許可または拒否の権限のセットを表します。 このクラスは継承できません。"
  remarks: "RegistryAccessRule クラスは、一連のレジストリ キーの Windows アクセス制御セキュリティを管理するために、.NET Framework が提供するクラスです。 これらのクラスと、基になる Windows アクセス制御構造との関係の概要については、 <xref:System.Security.AccessControl.RegistrySecurity>。</xref:System.Security.AccessControl.RegistrySecurity>を参照してください。      > [!NOTE] > Windows アクセス制御セキュリティは、レジストリ キーにのみ適用できます。 キーに格納されている個別のキー/値ペアを適用することはできません。       レジストリ キーに現在適用されている規則の一覧を取得する、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>取得するメソッド、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトを使用して、その<xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>RegistryAccessRule オブジェクトのコレクションを取得します</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A></xref:System.Security.AccessControl.RegistrySecurity></xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>。       RegistryAccessRule オブジェクトは基になるコントロールの随意アクセス リスト (DACL) にアクセス制御エントリを一対一でマップしません。 レジストリ キーのすべてのアクセス規則のセットを取得するときに、セットには、すべてのアクセス制御エントリを表すために必要な現在のルールの最小数が含まれています。      > [!NOTE] > 基になるアクセス制御エントリの変更を適用して規則を削除するとします。 規則の情報は、アクセス制御エントリの最小数を維持するために可能な場合は、結合されます。 したがって、現在のルールの一覧を読み取るときに、追加したすべてのルールの一覧とまったく同じ体裁に可能性がありますとは限りません。       RegistryAccessRule オブジェクトを使用すると、ユーザーまたはグループを許可または拒否するのにアクセス権を指定します。 常にオブジェクトを表します RegistryAccessRule か、アクセス許可するかしない両方のアクセスを拒否します。       レジストリ キーにルールを適用するには、使用、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>取得するメソッド、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト</xref:System.Security.AccessControl.RegistrySecurity></xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>。 変更、 <xref:System.Security.AccessControl.RegistrySecurity>、ルールを追加し、使用してそのメソッドを使用して、オブジェクト、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>セキュリティ オブジェクトを再アタッチするメソッド</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName></xref:System.Security.AccessControl.RegistrySecurity>。      > [!IMPORTANT] > に対して行った変更は<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトには影響しません、レジストリ キーのアクセス レベルが呼び出されるまで、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>レジストリ キーには、変更されたセキュリティ オブジェクトを割り当てる方法</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName></xref:System.Security.AccessControl.RegistrySecurity>。       RegistryAccessRule オブジェクトは変更できません。 メソッドを使用してレジストリ キーのセキュリティが変更された、<xref:System.Security.AccessControl.RegistrySecurity>ルールを追加または削除するクラスですこれを行うと、基になるアクセス制御エントリが変更されます。</xref:System.Security.AccessControl.RegistrySecurity> 。"
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/t-system.security.access_11_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/t-system.security.access_11_1.cs)]"
  syntax:
    content: 'public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref>指定して、ユーザーまたはグループのアクセス権を規則を適用し、指定したアクセス権を許可または拒否するかどうか。"
  remarks: "このコンス トラクターは、既定の反映され、継承を指定します。 <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName></xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> 、つまり、。"
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "ユーザーまたはグループのルールを適用します。 型でなければなりません<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>またはなど型<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref>権限を示す値を許可または拒否します。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>権限を許可または拒否するかどうかを示す値。"
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>無効な値を指定します。       - または -<code>type</code>に無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>eventRights</code>ゼロです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>型のどちらも<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>もなどの型の<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref>クラス、ユーザーまたはアクセス権を規則が適用されるグループの名前を指定し、指定したアクセス権を許可または拒否するかどうか。"
  remarks: "このコンス トラクターは、既定の反映され、継承を指定します。 <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName></xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> 、つまり、。       このコンス トラクターを作成するのには、<xref:System.Security.Principal.NTAccount>を渡すことによって、オブジェクト`identity`を<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>コンス トラクター、および新しく作成された渡す<xref:System.Security.Principal.NTAccount>オブジェクトを<xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29>コンス トラクター</xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount> 。"
  example:
  - "The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \n  \n [!code-cs[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/csharp/cf7d2ba9-37b1-4239-a52a-_1.cs)]\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/cf7d2ba9-37b1-4239-a52a-_1.vb)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "ユーザーまたはグループの名前に、ルールが適用されます。"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref>権限を示す値を許可または拒否します。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>権限を許可または拒否するかどうかを示す値。"
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>無効な値を指定します。       - または -<code>type</code>に無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>registryRights</code>0 です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>identity</code>は長さ&0; の文字列。       - または -<code>identity</code>が 512 文字を超えています。"
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref>クラス、伝達フラグのユーザーまたはグループのルールを適用、アクセス権、継承フラグを指定すること、および指定したアクセス権を許可または拒否するかどうか。"
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules."
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "ユーザーまたはグループのルールを適用します。 型でなければなりません<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>またはなど型<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref>権限を指定する値を許可または拒否します。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;></xref>アクセス権を他のオブジェクトから継承する方法を指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;></xref>他のオブジェクトへのアクセス権を反映する方法を指定するフラグ。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>権限を許可または拒否するかどうかを指定する値。"
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>無効な値を指定します。       - または -<code>type</code>に無効な値を指定します。       - または -<code>inheritanceFlags</code>に無効な値を指定します。       - または -<code>propagationFlags</code>に無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>registryRights</code>ゼロです。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>型のどちらも<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>、やなどの型の<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>型に変換できる<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref>クラス、伝達フラグを設定、ユーザーまたはアクセス権限を継承フラグにルールが適用されるグループの名前を指定する、および指定したアクセス権を許可または拒否するかどうか。"
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor."
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/43217ff3-f8bd-4a0e-bd95-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/43217ff3-f8bd-4a0e-bd95-_1.cs)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "ユーザーまたはグループの名前に、ルールが適用されます。"
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref>権限を示す値を許可または拒否します。"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;></xref>アクセス権を他のオブジェクトから継承する方法を指定するフラグ。"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;></xref>他のオブジェクトへのアクセス権を反映する方法を指定するフラグ。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>権限を許可または拒否するかどうかを指定する値。"
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>無効な値を指定します。       - または -<code>type</code>に無効な値を指定します。       - または -<code>inheritanceFlags</code>に無効な値を指定します。       - または -<code>propagationFlags</code>に無効な値を指定します。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>0 です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または -<code>identity</code>は長さ&0; の文字列。       - または -<code>identity</code>が 512 文字を超えています。"
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  id: RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "アクセス規則によって許可または拒否の権限を取得します。"
  remarks: "<xref:System.Security.AccessControl.RegistryAccessRule>オブジェクトは変更できません。</xref:System.Security.AccessControl.RegistryAccessRule> 別のユーザー、異なる権限、または異なるを表す新しいアクセス ルールを作成する<xref:System.Security.AccessControl.AccessControlType>が、既存のアクセス ルールを変更することはできません</xref:System.Security.AccessControl.AccessControlType>。"
  syntax:
    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }
    return:
      type: System.Security.AccessControl.RegistryRights
      description: "ビットごとの組み合わせ<xref href=&quot;System.Security.AccessControl.RegistryRights&quot;></xref>権限を示す値を許可またはアクセス ルールによって拒否されます。"
  overload: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule.RegistryAccessRule
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
