### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow
  id: IWebPartRow
  children:
  - System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  - System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  langs:
  - csharp
  name: IWebPartRow
  nameWithType: IWebPartRow
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow
  type: Interface
  summary: "単一のデータ フィールドを使用して&2; つのサーバー コントロールを接続するためのプロバイダー インターフェイスを定義します。"
  remarks: "このインターフェイスは、Web パーツの接続で使用するよう設計されています。 内に存在する&2; つのサーバー コントロール、Web パーツ接続において、<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンは、コンシューマーとして機能する&1; つの制御と、その他のプロバイダーとして機能するコントロール接続と共有のデータを確立します</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>。 Web パーツ接続でデータを共有するためのメカニズムは、コールバック メソッドを使用して、プロバイダーがコンシューマーに機能する、インターフェイス インスタンスです。 接続を確立するためにコンシューマーおよびプロバイダー必要があります両方動作と同じインターフェイスの種類データを共有します。 トランスフォーマーを使用して、コントロールを接続することも可能では、コンシューマーが、プロバイダーによって送信されたインターフェイスの型を認識しない場合 (、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト)、コンシューマーによって認識される型に、プロバイダーによって送信されたインターフェイスのインスタンスに変換する</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。 接続の詳細については、「<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>と[Web パーツ接続の概要](~/add/includes/ajax-current-ext-md.md)。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>       IWebPartRow インターフェイスは、Web パーツ コントロールのデータ行に基づく接続を作成するための標準インターフェイスとしてセットに含まれているプロバイダー インターフェイスです。 Web パーツの接続で使用するカスタムのインターフェイスを作成することもできますが、多くのデータ ドリブンの Web アプリケーション、共通のフィールドに基づく接続を作成すると便利です (詳細については、次を参照してください、<xref:System.Web.UI.WebControls.WebParts.IWebPartField>インターフェイス)、テーブル (詳細については、次を参照してください。、<xref:System.Web.UI.WebControls.WebParts.IWebPartTable>インターフェイス)、またはデータ ソースからの行。</xref:System.Web.UI.WebControls.WebParts.IWebPartTable> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> 。 一般的な接続で、<xref:System.Web.UI.WebControls.WebParts.WebPart>プロバイダーと IWebPartRow インターフェイスを実装し、特別なコールバック メソッドのコンシューマーにインターフェイスのインスタンスを提供するように機能を制御します</xref:System.Web.UI.WebControls.WebParts.WebPart>。 たとえば、プロバイダーは、ユーザー情報テーブル内のユーザーに対応する行の IWebPartRow インターフェイスを実装する場合があります。 別<xref:System.Web.UI.WebControls.WebParts.WebPart>コンシューマー インターフェイス インスタンスが表示されると、ユーザー データを抽出、そのユーザーのアカウントの追加情報の検索に使用し、 ページでそのユーザーに関連するすべての情報を表示する特別なメソッドを定義するように動作するを制御します</xref:System.Web.UI.WebControls.WebParts.WebPart>。       IWebPartRow インターフェイスには、次の&2; つの公開されているメンバーがあります。 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.Schema%2A>にカプセル化されたデータ行に関するスキーマ情報を返します、<xref:System.ComponentModel.PropertyDescriptorCollection>オブジェクト</xref:System.ComponentModel.PropertyDescriptorCollection></xref:System.Web.UI.WebControls.WebParts.IWebPartRow.Schema%2A>。 <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A>メソッド (プロバイダー コントロールなど) を実装者が、コールバック メソッドが呼び出されたときに、インターフェイスのインスタンスの行のデータの取得に使用するメソッドを宣言しています</xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A>。"
  example:
  - "The following code example demonstrates how to create a static connection between two controls using the IWebPartRow interface. The code example has three parts:  \n  \n-   Source code for two custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that can form a connection using the IWebPartRow interface, with one control acting as the provider, and the other acting as the consumer.  \n  \n-   A Web page that hosts the controls and declares the static connection in persistence format.  \n  \n-   A description of what happens when the example code runs.  \n  \n The first part of the code example is the source code for the two custom controls. First is the code for the provider, which implements the IWebPartRow interface. For simplicity in the example, the provider creates a table with some data rather than connecting to a database. The `GetConnectionInterface` method serves as the provider's connection point, the callback method that returns the interface instance to the consumer. As for the consumer, it retrieves the interface instance from the provider in its method named `SetConnectionInterface`, which is marked with a `ConnectionConsumer` attribute. After retrieving the instance of the interface, the consumer, in its `OnPreRender` method, calls the implementation of the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData%2A> method in the provider, to retrieve the actual data and write it to the page.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_327_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_327_1.vb)]  \n  \n The second part of the code example is the Web page that declares the static connection and hosts the controls. Near the top of the page is a `Register` directive that declares the namespace of the source code contained in the App_Code directory. The connection is declared using an `<asp:webpartconnection>` element. The custom consumer and provider controls are declared in a `<zonetemplate>` element within an `<asp:webpartzone>` element, which is required for them to be able to connect (they must reside within a zone that inherits from the <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> class).  \n  \n [!code-vb[WebParts_IWebPartRow_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_327_2.aspx)]\n [!code-cs[WebParts_IWebPartRow_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_327_2.aspx)]  \n  \n Load the page in a browser. The consumer control displays the data provided from the specified row, which the provider makes available through an instance of the IWebPartRow interface."
  syntax:
    content: public interface IWebPartRow
  implements: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  id: GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  langs:
  - csharp
  name: GetRowData(RowCallback)
  nameWithType: IWebPartRow.GetRowData(RowCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(RowCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "インターフェイスによって&2; つの間の接続の基礎として使用されている行のデータを返します<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref>コントロール。"
  remarks: "このメソッドを使用すると、インターフェイスによって渡されるデータ行の値を取得できます。 プロバイダーは、このメソッドを実装およびコンシューマーこれを呼び出して、時点で、コンシューマーが処理またはデータを表示する準備ができたとき。"
  example:
  - "The following code example shows the implementation and use of the GetRowData method. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> interface. The provider control implements the GetRowData method, returning the value of a particular row in the data table. The consumer control calls the GetRowData method in its `OnPreRender` method, so that the value of the data can be written to the page.  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/98668bea-41a0-4fc3-85fe-_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/98668bea-41a0-4fc3-85fe-_1.vb)]"
  syntax:
    content: public void GetRowData (System.Web.UI.WebControls.WebParts.RowCallback callback);
    parameters:
    - id: callback
      type: System.Web.UI.WebControls.WebParts.RowCallback
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.RowCallback&quot;> </xref>データを受け取るメソッドのアドレスが含まれるデリゲート。"
  overload: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  id: Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  langs:
  - csharp
  name: Schema
  nameWithType: IWebPartRow.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "2 つのデータを共有するために使用するデータ行のスキーマ情報を取得<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref>コントロール。"
  remarks: "このプロパティは、データのプロパティ情報を提供します。 使用して、<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>インターフェイス接続では、取得、<xref:System.ComponentModel.PropertyDescriptorCollection>スキーマ プロパティによって参照されているオブジェクト</xref:System.ComponentModel.PropertyDescriptorCollection></xref:System.Web.UI.WebControls.WebParts.IWebPartRow>。 その呼び出し元を指定するコントラクト`Schema[n].GetValue(RowData)`の値を返します、 *n*行の列です。 行の値を取得するスキーマ プロパティを使用する必要があります。"
  example:
  - "The following code example shows the implementation and use of the Schema property. The complete example is shown in the class overview for the <xref:System.Web.UI.WebControls.WebParts.IWebPartRow> interface. The provider control implements the Schema property. Then the consumer control, in its `RenderContents` method, queries the Schema property to retrieve information about the row as it writes the row data to the page.  \n  \n [!code-cs[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_721_1.cs)]\n [!code-vb[WebParts_IWebPartRow_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_721_1.vb)]"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection Schema { get; }
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>データを記述します。"
  overload: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(System.Web.UI.WebControls.WebParts.RowCallback)
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: GetRowData(RowCallback)
  nameWithType: IWebPartRow.GetRowData(RowCallback)
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData(RowCallback)
- uid: System.Web.UI.WebControls.WebParts.RowCallback
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: RowCallback
  nameWithType: RowCallback
  fullName: System.Web.UI.WebControls.WebParts.RowCallback
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: Schema
  nameWithType: IWebPartRow.Schema
  fullName: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.GetRowData*
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: GetRowData
  nameWithType: IWebPartRow.GetRowData
- uid: System.Web.UI.WebControls.WebParts.IWebPartRow.Schema*
  parent: System.Web.UI.WebControls.WebParts.IWebPartRow
  isExternal: false
  name: Schema
  nameWithType: IWebPartRow.Schema
