### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  langs:
  - csharp
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  summary: "ときに呼び出されるメソッドを表します、<xref:System.Threading.WaitHandle>がシグナルを受け取るか、タイムアウトします</xref:System.Threading.WaitHandle>。"
  remarks: "WaitOrTimerCallback では、登録された待機ハンドルがタイムアウトになるか、通知されるときに実行するコールバック メソッドを表します。 WaitOrTimerCallback コンス トラクターにコールバック メソッドを渡すことによって、デリゲートを作成します。 メソッドには、次に示す署名が必要です。       WaitOrTimerCallback デリゲート<xref:System.Threading.WaitHandle><xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>。</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>に</xref:System.Threading.WaitHandle>渡すことで登録された待機ハンドルを作成します。 コールバック メソッドを実行するたびに、<xref:System.Threading.WaitHandle>タイムアウトになるかが通知されます</xref:System.Threading.WaitHandle>。       [Visual Basic] > [!NOTE] > Visual Basic の場合は WaitOrTimerCallback コンス トラクターの省略でき、単に使用、 `AddressOf` <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>をコールバック メソッドを渡すときに、演算子 Visual Basic では、適切なデリゲート コンス トラクターは、自動的に呼び出します。       コールバック メソッドに情報を渡す場合は、必要な情報を格納しているオブジェクトを作成しに渡すこと<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>登録された待機ハンドルを作成する場合</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>。 コールバック メソッドが実行されるたびに、`state`パラメーターには、このオブジェクトが含まれています。       詳細については、スレッド プールのスレッドを同期するためにコールバック メソッドを使用して、次を参照してください。 [、マネージ スレッド プール](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a WaitOrTimerCallback delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the WaitOrTimerCallback delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks. In the case of a timeout, the task continues waiting. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.waito_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.waito_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.waito_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
