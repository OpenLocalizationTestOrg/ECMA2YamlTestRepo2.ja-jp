### YamlMime:ManagedReference
items:
- uid: System.Reflection.ObfuscateAssemblyAttribute
  id: ObfuscateAssemblyAttribute
  children:
  - System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  - System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  - System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute
  fullName: System.Reflection.ObfuscateAssemblyAttribute
  type: Class
  summary: "難読化ツールの適切なアセンブリの型の標準の難読化規則を使用するように指示します。"
  remarks: "<xref:System.Reflection.ObfuscationAttribute>ObfuscateAssemblyAttribute 属性がアセンブリ作成者難読化ツールが処理できるようにして正しく外部の最小構成で、バイナリの注釈を設定するための手段を提供します</xref:System.Reflection.ObfuscationAttribute>。       この属性をアセンブリに適用する、難読化ツールが、アセンブリの型の既定の規則を使用するように指示します。      > [!IMPORTANT] > この属性を適用することはない自動的に難読化アセンブリ。 難読化ツールの構成ファイルを作成する代わりには、属性を適用します。 難読化ツールの指示を提供だけを実行します。 マイクロソフトでは、難読化ツールの販売元がここで説明したセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うことの保証はありません。       適用できる<xref:System.Reflection.ObfuscationAttribute>、アセンブリ内の型およびそれらの型のメンバー</xref:System.Reflection.ObfuscationAttribute> 。 最も内側にある属性コントロール難読化ツールの方法では、特定のコード エンティティを処理します。"
  example:
  - "The following code example shows a private assembly that has been marked with the ObfuscateAssemblyAttribute. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n For a code example that shows the use of ObfuscateAssemblyAttribute with <xref:System.Reflection.ObfuscationAttribute>, see the <xref:System.Reflection.ObfuscationAttribute> class.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/t-system.reflection.obfu_0_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/t-system.reflection.obfu_0_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ObfuscateAssemblyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Reflection.ObfuscateAssemblyAttribute&quot;> </xref>クラス、難読化するアセンブリがパブリックかプライベートかどうかを指定します。"
  remarks: "アセンブリをアプリケーションによってのみ使用ししていない他のソフトウェアで使用するライブラリの場合は、プライベートとしてマークします。 一般に、アセンブリをプライベートとしてマークするプログラムに通知アプリケーションを難読化の一部としてのパブリック メソッドを含むすべてのメソッドの名前を難読化できることです。 アセンブリがパブリックの場合、難読化ツール、パブリック メンバーの名前を難読化いない必要があります。      > [!IMPORTANT] > この属性を適用することはない自動的に難読化アセンブリ。 難読化ツールの構成ファイルを作成する代わりには、属性を適用します。 難読化ツールの指示を提供だけを実行します。 マイクロソフトでは、難読化ツールの販売元がここで説明したセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うことの保証はありません。"
  example:
  - "The following code example shows how the attribute constructor specifies that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/m-system.reflection.obfu_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/m-system.reflection.obfu_1.cs)]"
  syntax:
    content: public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);
    parameters:
    - id: assemblyIsPrivate
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>アセンブリが&1; つのアプリケーションのスコープ内で使用されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  id: AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得、<xref:System.Boolean>アセンブリがプライベート設定されているかどうかを示す値</xref:System.Boolean>。"
  remarks: "プライベート アセンブリは、その他のソフトウェアではなくの一部では、アプリケーションでのみ使用されます。      > [!IMPORTANT] > この属性を適用することはない自動的に難読化アセンブリ。 難読化ツールの構成ファイルを作成する代わりには、属性を適用します。 難読化ツールの指示を提供だけを実行します。 マイクロソフトでは、難読化ツールの販売元がここで説明したセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うことの保証はありません。"
  example:
  - "The following code example shows how the attribute constructor sets the AssemblyIsPrivate property to `true`, to specify that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_2_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_2_1.cs)]"
  syntax:
    content: public bool AssemblyIsPrivate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>アセンブリがプライベートでマークされている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  id: StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "取得または設定、<xref:System.Boolean>難読化ツールが処理した後に属性を削除するかどうかを示す値</xref:System.Boolean>。"
  remarks: "別のアプリケーションの一部として含まれているし、そのアプリケーションの一部として難読化は、ライブラリの場合、属性を削除しないようにする必要があります。       難読化ツールを削除する必要がありますを指定する、<xref:System.Reflection.ObfuscateAssemblyAttribute>のインスタンスには影響しません<xref:System.Reflection.ObfuscationAttribute>型と、アセンブリ内のメンバーに適用される</xref:System.Reflection.ObfuscationAttribute></xref:System.Reflection.ObfuscateAssemblyAttribute>。      > [!IMPORTANT] > この属性を適用することはない自動的に難読化アセンブリ。 難読化ツールの構成ファイルを作成する代わりには、属性を適用します。 難読化ツールの指示を提供だけを実行します。 マイクロソフトでは、難読化ツールの販売元がここで説明したセマンティクスに従うことをお勧めします。 ただし、特定のツールが Microsoft の推奨事項に従うことの保証はありません。"
  example:
  - "The following code example shows the <xref:System.Reflection.ObfuscateAssemblyAttribute> attribute with the StripAfterObfuscation property set to `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_3_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_3_1.cs)]"
  syntax:
    content: public bool StripAfterObfuscation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、難読化ツールは、処理後に属性を削除する必要があります。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 このプロパティの既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
