### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "別のプロパティ、または所有する型の下のパスとして、プロパティを記述するためのデータ構造を実装します。 プロパティ パスは、アニメーション用とストーリー ボードやタイムラインで、オブジェクトへのデータ バインディングに使用されます。"
  remarks: "このクラスには、文字列が含まれています<xref:System.Windows.PropertyPath.Path%2A>、および、 <xref:System.Windows.PropertyPath.PathParameters%2A><xref:System.Windows.PropertyPath.Path%2A>。</xref:System.Windows.PropertyPath.Path%2A>の文字列に</xref:System.Windows.PropertyPath.PathParameters%2A>は、依存関係プロパティのリスト</xref:System.Windows.PropertyPath.Path%2A>。       PropertyPath が&2; つの動作モードをサポートしています:**ソース モード**他の操作のソースとして使用されるプロパティへのパスをについて説明します。 このモードは使用、<xref:System.Windows.Data.Binding>データ バインディングをサポートするクラス</xref:System.Windows.Data.Binding>。       **ターゲット モード**対象のプロパティとして設定されるプロパティへのパスをについて説明します。 このモードは、ストーリー ボードおよびタイムラインの setter をサポートするためのアニメーションで使用されます。       たとえば、 `Background.Opacity`&2; 段階のパスです。 このパスは: 最初に、検索、 `Background` 、オブジェクトのプロパティ オブジェクトを取得する値を`Background`プロパティに設定されているしの値を取得、`Opacity`そのオブジェクトのプロパティです。      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a>## XAML 属性の使用```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> ## XAML 値*propertyPath*単純または複雑なプロパティ パスに評価される文字列。       PropertyPath を設定するための構文[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]汎用性が複雑では、別のトピックに記載されて[PropertyPath 構文は XAML](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.PropertyPath&quot;> </xref>クラスです。"
  remarks: "このコンス トラクターには、バインディング、またはストーリー ボードのターゲットのターゲット モード&1; ステップのプロパティ パスのソース モード プロパティのパスに対して使用されているかどうかに応じて、2 つのまったく異なる用法があります。       これを使用して場合<xref:System.Windows.PropertyPath>バインディング用のソース モードで`parameter`はプロパティ名を表す文字列か、「ステップスルー」へのパス内のプロパティを説明する文字列を指定できます、[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]バインディングのソースとして使用されているオブジェクトのオブジェクト モデル</xref:System.Windows.PropertyPath>。 バインディング プロパティのパス&quot;の&quot;ステップを識別する文字は、ドット (.) です。 インデクサーの参照 (複数のインデクサーと型の区別を含む) はもサポートされます。 この<xref:System.Windows.Data.Binding>オブジェクトを参照してください<xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>。</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName></xref:System.Windows.Data.Binding>できるだけ具体的に使用する文字列の構文の詳細については バインディング ソースとして使用されるプロパティの依存関係プロパティではない必要があります。 双方向のバインドを更新する場合、参照されるプロパティは読み取り/書き込みをする必要があります。 バインディング ターゲットには、依存関係プロパティにも注意してください。 詳細については、「[データ バインディングの概要](~/add/includes/ajax-current-ext-md.md)です。       これを使用して場合<xref:System.Windows.PropertyPath>目的のモードで、ストーリー ボードのターゲットの単一ステップ パスの`parameter` <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty>の種類としては、通常指定</xref:System.Windows.PropertyPath> <xref:System.Windows.DependencyProperty.Name%2A>。</xref:System.Windows.DependencyProperty.Name%2A>を表す文字列を指定することもできます。 これらのいずれかにより、文字列として内部的に保存されているので、結果は同じに評価されます。 <xref:System.Windows.DependencyProperty> <xref:System.Windows.Markup.DependencyPropertyConverter>。</xref:System.Windows.Markup.DependencyPropertyConverter>を文字列に変換</xref:System.Windows.DependencyProperty>の指定 指定できるように、<xref:System.Windows.Markup.DependencyPropertyConverter>が依存関係プロパティの修飾の名前付け形式をサポートする*typeName*.*propertyName*修飾コードで PropertyPath コンス トラクターに依存関係プロパティ名の文字列</xref:System.Windows.Markup.DependencyPropertyConverter>。 依存関係プロパティの識別子を修飾パスは、複雑なパスとは異なる概念です。 複合パス<xref:System.Windows.PropertyPath>で作成する代わりに、<xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>コンス トラクター</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath> 。"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "パスを記述するプロパティのパス、[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]プロパティ、または単一の依存関係プロパティです。"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.PropertyPath&quot;> </xref>クラス、トークン文字列の指定されたパスとパラメーターを使用します。"
  remarks: "この署名は通常、に対してのみ使用ターゲット モード<xref:System.Windows.PropertyPath>複合パスを使用します</xref:System.Windows.PropertyPath>。       このコンス トラクターは`params`の`pathParameters`コンス トラクターの引数。 そのための内容を指定できます`pathParameters`一連のコンマ区切りのコンス トラクター引数を配列の次元し、で設定する必要があるのではなく、配列を設定すると、`pathParameters`項目。 指定する各項目は、次の種類のいずれかを指定する必要があります: <xref:System.Windows.DependencyProperty> <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor></xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> 、</xref:System.Windows.DependencyProperty> 。       パラメーターの要件の詳細については、「 <xref:System.Windows.PropertyPath.Path%2A> <xref:System.Windows.PropertyPath.PathParameters%2A>。</xref:System.Windows.PropertyPath.PathParameters%2A></xref:System.Windows.PropertyPath.Path%2A>の使用」を参照していますください。"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "指定する文字列、 <xref:System.Windows.PropertyPath.Path*>、トークン化された形式</xref:System.Windows.PropertyPath.Path*>。"
    - id: pathParameters
      type: System.Object[]
      description: "<xref:System.Windows.PropertyPath.PathParameters*>。</xref:System.Windows.PropertyPath.PathParameters*>を設定するオブジェクトの配列"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "取得またはパスを表す文字列を設定します。"
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "パスを説明する文字列。"
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "パスは、インデックス付きのパラメーターを参照するときに使用するパラメーターの一覧を取得します。"
  remarks: "プロパティを<xref:System.Windows.PropertyPath>コンス トラクターを使用して確立通常</xref:System.Windows.PropertyPath>。 PathParameters を設定するため、<xref:System.Windows.PropertyPath.%23ctor%2A>コンス トラクターは、特に便利なので、`pathParameters`としてコンス トラクターの引数が指定されている`params`配列を作成するためのディメンションを作成または必要がないことを意味します</xref:System.Windows.PropertyPath.%23ctor%2A>。 追加パラメーターとして、配列の各メンバーを指定するだけです。       最終的なプロパティを対象となっている場合は、<xref:System.Windows.Freezable>型、値を複製することです</xref:System.Windows.Freezable>。 詳細については、「[ストーリー ボードの概要](~/add/includes/ajax-current-ext-md.md)です。       プロパティのチェーンの実際の評価は、ストーリー ボードのアニメーション メカニズムによって実行されます。 <xref:System.Windows.PropertyPath>レベル、検証は行われません、パスの手順がすべての接続を確認する</xref:System.Windows.PropertyPath>。 インスタンスを持つプロパティのパスを構築できます<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>最初の手順として、 <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>2 番目の手順として</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName></xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>。 このようなプロパティのパスはため、失敗、ターゲットとして実際に適用されている場合、ブラシの種類を送り返す<xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>はありません、<xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>プロパティ</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName></xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>。 無効なプロパティ パスは、サイレント モードで失敗します。 詳細については、次を参照してください。[ストーリー ボードの概要](../Topic/Storyboards%20Overview.md)です。       **XAML:**を使用する場合、<xref:System.Windows.PropertyPath>プロパティの参照を記述する[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]属性値を指定する文字列が実行する型コンバーターによって処理される最初、(<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> この型コンバーターは、文字列を処理し、に基づいてその構文は、のいずれかを呼び出しますが、<xref:System.Windows.PropertyPath>コンス トラクター シグネチャ</xref:System.Windows.PropertyPath>。 属性値を処理する型コンバーターをこの間接指定が使用する方法は、通常、<xref:System.Windows.PropertyPath>で[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]、宣言するのではなく、<xref:System.Windows.PropertyPath>オブジェクトの要素などの属性にその特定の値を適用する<xref:System.Windows.PropertyPath.Path%2A>と PathParameters</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> 。 詳細については、次を参照してください。 [PropertyPath 構文は XAML](~/add/includes/ajax-current-ext-md.md)です。      <a name=&quot;xamlTextUsage_PathParameters&quot;></a>## XAML テキスト使用状況のメンバー、<xref:System.Windows.PropertyPath>型が、通常、ダイレクトでは設定されていない[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]構文</xref:System.Windows.PropertyPath>。 「解説」を参照してください。"
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "パラメーターのリスト。"
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
