### YamlMime:ManagedReference
items:
- uid: System.Workflow.Activities.StateActivity
  id: StateActivity
  children:
  - System.Workflow.Activities.StateActivity.#ctor
  - System.Workflow.Activities.StateActivity.#ctor(System.String)
  - System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)
  - System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)
  - System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)
  - System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey
  langs:
  - csharp
  name: StateActivity
  nameWithType: StateActivity
  fullName: System.Workflow.Activities.StateActivity
  type: Class
  summary: "状態を表します、 <xref href=&quot;System.Workflow.Activities.StateMachineWorkflowActivity&quot;></xref>です。"
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]StateActivity が<xref:System.Workflow.Activities.StateMachineWorkflowActivity>。</xref:System.Workflow.Activities.StateMachineWorkflowActivity>の状態を表します State アクティビティは、1 つ以上を含めることが<xref:System.Workflow.Activities.EventDrivenActivity>、または&1; つの<xref:System.Workflow.Activities.StateInitializationActivity>クラス、および&1; つの<xref:System.Workflow.Activities.StateFinalizationActivity>クラス</xref:System.Workflow.Activities.StateFinalizationActivity></xref:System.Workflow.Activities.StateInitializationActivity>、StateActivity クラス</xref:System.Workflow.Activities.EventDrivenActivity>  SetState アクティビティ内で使用される、<xref:System.Workflow.Activities.EventHandlersActivity>と<xref:System.Workflow.Activities.StateInitializationActivity>ワークフローの状態を移行する</xref:System.Workflow.Activities.StateInitializationActivity></xref:System.Workflow.Activities.EventHandlersActivity>。       受信可能なイベントのみが<xref:System.Workflow.Activities.EventDrivenActivity>、StateActivity とも、<xref:System.Workflow.Activities.EventDrivenActivity>それを囲む StateActivity アクティビティとルート<xref:System.Workflow.ComponentModel.Activity>.</xref:System.Workflow.ComponentModel.Activity>にアタッチされているアクティビティ</xref:System.Workflow.Activities.EventDrivenActivity>でアクティビティ</xref:System.Workflow.Activities.EventDrivenActivity>によって処理できるイベントには、StateActivity を実行するときに       ときに、StateActivity が実行されている、StateActivity が確認するかどうか、<xref:System.Workflow.Activities.StateInitializationActivity>アクティビティがあるか存在します</xref:System.Workflow.Activities.StateInitializationActivity>。 0 または&1; 個、StateActivity を持てる<xref:System.Workflow.Activities.StateInitializationActivity>アクティビティです</xref:System.Workflow.Activities.StateInitializationActivity>。 場合、<xref:System.Workflow.Activities.StateInitializationActivity>アクティビティが存在、<xref:System.Workflow.Activities.StateInitializationActivity>実行されます</xref:System.Workflow.Activities.StateInitializationActivity></xref:System.Workflow.Activities.StateInitializationActivity>。 すぐに、<xref:System.Workflow.Activities.StateInitializationActivity>アクティビティが完了すると、StateActivity ブロック イベント、StateActivity はで処理できるイベントだけを受信できるようにその<xref:System.Workflow.Activities.EventDrivenActivity>活動</xref:System.Workflow.Activities.EventDrivenActivity></xref:System.Workflow.Activities.StateInitializationActivity>。       StateActivity は、 <xref:System.Workflow.ComponentModel.CompositeActivity>、つまり StateActivity アクティビティの他のアクティビティを含めることができます</xref:System.Workflow.ComponentModel.CompositeActivity>。"
  example:
  - "The following code example shows how to create a new instance of the StateActivity class and use it implement a simple state machine to transition between 3 states. This code example is part of the SimpleStateMachineWorkflow SDK sample from the StateMachineWorkflow.cs file. For more information, see [Simple State Machine](http://msdn.microsoft.com/en-us/1974edbd-253d-4e01-9095-38ff9c3e749e).  \n  \n [!code-cs[wf_samples#181](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#181)]\n [!code-vb[wf_samples#181](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#181)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer(typeof(System.Workflow.Activities.StateDesigner), typeof(System.ComponentModel.Design.IDesigner))]

      [System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))]

      [System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.StateActivity), "Resources.StateActivity.png")]

      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      [System.Runtime.InteropServices.ComVisible(false)]

      [System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.StateActivityValidator))]

      public class StateActivity : System.Workflow.ComponentModel.CompositeActivity
  inheritance:
  - System.Object
  - System.Workflow.ComponentModel.DependencyObject
  - System.Workflow.ComponentModel.Activity
  - System.Workflow.ComponentModel.CompositeActivity
  implements: []
  inheritedMembers:
  - System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty
  - System.Workflow.ComponentModel.Activity.Canceling
  - System.Workflow.ComponentModel.Activity.CancelingEvent
  - System.Workflow.ComponentModel.Activity.Clone
  - System.Workflow.ComponentModel.Activity.Closed
  - System.Workflow.ComponentModel.Activity.ClosedEvent
  - System.Workflow.ComponentModel.Activity.Compensating
  - System.Workflow.ComponentModel.Activity.CompensatingEvent
  - System.Workflow.ComponentModel.Activity.Description
  - System.Workflow.ComponentModel.Activity.Enabled
  - System.Workflow.ComponentModel.Activity.Executing
  - System.Workflow.ComponentModel.Activity.ExecutingEvent
  - System.Workflow.ComponentModel.Activity.ExecutionResult
  - System.Workflow.ComponentModel.Activity.ExecutionStatus
  - System.Workflow.ComponentModel.Activity.Faulting
  - System.Workflow.ComponentModel.Activity.FaultingEvent
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)
  - System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)
  - System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener`1,``0)
  - System.Workflow.ComponentModel.Activity.IsDynamicActivity
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.Name
  - System.Workflow.ComponentModel.Activity.Parent
  - System.Workflow.ComponentModel.Activity.QualifiedName
  - System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)
  - System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)
  - System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)
  - System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)
  - System.Workflow.ComponentModel.Activity.StatusChanged
  - System.Workflow.ComponentModel.Activity.StatusChangedEvent
  - System.Workflow.ComponentModel.Activity.ToString
  - System.Workflow.ComponentModel.Activity.TrackData(System.Object)
  - System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)
  - System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})
  - System.Workflow.ComponentModel.Activity.WorkflowInstanceId
  - System.Workflow.ComponentModel.CompositeActivity.Activities
  - System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities
  - System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)
  - System.Workflow.ComponentModel.CompositeActivity.EnabledActivities
  - System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)
  - System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)
  - System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)
  - System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.DesignMode
  - System.Workflow.ComponentModel.DependencyObject.Dispose
  - System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)
  - System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.InitializeProperties
  - System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)
  - System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject
  - System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)
  - System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)
  - System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)
  - System.Workflow.ComponentModel.DependencyObject.Site
  - System.Workflow.ComponentModel.DependencyObject.UserData
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.#ctor
  id: '#ctor'
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: StateActivity()
  nameWithType: StateActivity.StateActivity()
  fullName: System.Workflow.Activities.StateActivity.StateActivity()
  type: Constructor
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Workflow.Activities.StateActivity&quot;> </xref>クラスです。"
  remarks: ''
  example:
  - "The following code example shows how to create a new instance of the <xref:System.Workflow.Activities.StateActivity> class.  This code example is part of the SimpleStateMachineWorkflow SDK Sample from the StateMachineWorkflow.cs file. For more information, see [Simple State Machine](http://msdn.microsoft.com/en-us/1974edbd-253d-4e01-9095-38ff9c3e749e).  \n  \n [!code-cs[WF_Samples#188](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#188)]\n [!code-vb[WF_Samples#188](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#188)]"
  syntax:
    content: public StateActivity ();
    parameters: []
  overload: System.Workflow.Activities.StateActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: StateActivity(String)
  nameWithType: StateActivity.StateActivity(String)
  fullName: System.Workflow.Activities.StateActivity.StateActivity(String)
  type: Constructor
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Workflow.Activities.StateActivity&quot;> </xref>クラス、アクティビティの名前を使用します。"
  syntax:
    content: public StateActivity (string name);
    parameters:
    - id: name
      type: System.String
      description: "アクティビティのユーザー定義の名前。"
  overload: System.Workflow.Activities.StateActivity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: Cancel(ActivityExecutionContext)
  nameWithType: StateActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.Activities.StateActivity.Cancel(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "実行をキャンセル、 <xref href=&quot;System.Workflow.Activities.StateActivity&quot;></xref>です。"
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "アクティビティの実行コンテキスト。"
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "現在の状態、 <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>実行中のワークフロー インスタンスにします。"
  overload: System.Workflow.Activities.StateActivity.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  id: Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: Execute(ActivityExecutionContext)
  nameWithType: StateActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.StateActivity.Execute(ActivityExecutionContext)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "実行、 <xref href=&quot;System.Workflow.Activities.StateActivity&quot;></xref>です。"
  syntax:
    content: protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "アクティビティの実行コンテキスト。"
    return:
      type: System.Workflow.ComponentModel.ActivityExecutionStatus
      description: "現在の状態、 <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>実行中のワークフロー インスタンスにします。"
  overload: System.Workflow.Activities.StateActivity.Execute*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)
  id: GetDynamicActivity(System.String)
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: GetDynamicActivity(String)
  nameWithType: StateActivity.GetDynamicActivity(String)
  fullName: System.Workflow.Activities.StateActivity.GetDynamicActivity(String)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "実行中のインスタンスを取得、 <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>指定された子アクティビティ名に対応します。"
  syntax:
    content: public System.Workflow.ComponentModel.Activity GetDynamicActivity (string childActivityName);
    parameters:
    - id: childActivityName
      type: System.String
      description: "子アクティビティ。"
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "動的な子アクティビティ。"
  overload: System.Workflow.Activities.StateActivity.GetDynamicActivity*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "実行可能なアクティビティが含まれていない、 <code> childActivityName</code>です。"
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)
  id: Initialize(System.IServiceProvider)
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: Initialize(IServiceProvider)
  nameWithType: StateActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.Activities.StateActivity.Initialize(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "初期化、 <xref href=&quot;System.Workflow.Activities.StateActivity&quot;> </xref>サービス プロバイダーを使用します。"
  syntax:
    content: protected override void Initialize (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "サービスを取得する対象のサービス プロバイダー。"
  overload: System.Workflow.Activities.StateActivity.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  id: OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)
  nameWithType: StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
  fullName: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "かどうかを追加するアクティビティ、 <xref href=&quot;System.Workflow.Activities.EventDrivenActivity&quot;> </xref>し場合は、新しく追加されたイベント ドリブンをサブスクライブする必要があるかどうかを確認します。"
  remarks: "これは、メソッドの子を追加するたびに呼び出される、<xref:System.Workflow.ComponentModel.CompositeActivity>ワークフローの変更によって</xref:System.Workflow.ComponentModel.CompositeActivity>。 このメソッドが CompositeActivity で定義されているし、どこかをチェックするかどうか追加されているアクティビティ、StateActivity によってオーバーライドされることに注意してください、<xref:System.Workflow.Activities.EventDrivenActivity>し場合は、検証、新しく追加されたイベント ドリブンをサブスクライブする必要があるかどうか</xref:System.Workflow.Activities.EventDrivenActivity>。"
  syntax:
    content: protected override void OnActivityChangeAdd (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, System.Workflow.ComponentModel.Activity addedActivity);
    parameters:
    - id: executionContext
      type: System.Workflow.ComponentModel.ActivityExecutionContext
      description: "アクティビティの実行コンテキスト。"
    - id: addedActivity
      type: System.Workflow.ComponentModel.Activity
      description: "追加されたアクティビティ、 <xref href=&quot;System.Workflow.Activities.StateActivity&quot;></xref>です。"
  overload: System.Workflow.Activities.StateActivity.OnActivityChangeAdd*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)
  id: OnClosed(System.IServiceProvider)
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: OnClosed(IServiceProvider)
  nameWithType: StateActivity.OnClosed(IServiceProvider)
  fullName: System.Workflow.Activities.StateActivity.OnClosed(IServiceProvider)
  type: Method
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "アクティビティの遷移の一部として、ワークフロー ランタイム エンジンによって呼び出されます、 <xref href=&quot;System.Workflow.ComponentModel.ActivityExecutionStatus&quot;> </xref>状態です。"
  syntax:
    content: protected override void OnClosed (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "サービスを取得する対象のサービス プロバイダー。"
  overload: System.Workflow.Activities.StateActivity.OnClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey
  id: StateChangeTrackingDataKey
  parent: System.Workflow.Activities.StateActivity
  langs:
  - csharp
  name: StateChangeTrackingDataKey
  nameWithType: StateActivity.StateChangeTrackingDataKey
  fullName: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey
  type: Field
  assemblies:
  - System.Workflow.Activities
  namespace: System.Workflow.Activities
  summary: "変更の追跡データ キーの文字列値を保持します。&quot;StateActivity.StateChange&quot;です。 このフィールドは、定数です。"
  syntax:
    content: public const string StateChangeTrackingDataKey;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Workflow.ComponentModel.CompositeActivity
  isExternal: false
  name: System.Workflow.ComponentModel.CompositeActivity
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Workflow.Activities.StateActivity.#ctor
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: StateActivity()
  nameWithType: StateActivity.StateActivity()
  fullName: System.Workflow.Activities.StateActivity.StateActivity()
- uid: System.Workflow.Activities.StateActivity.#ctor(System.String)
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: StateActivity(String)
  nameWithType: StateActivity.StateActivity(String)
  fullName: System.Workflow.Activities.StateActivity.StateActivity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Activities.StateActivity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: Cancel(ActivityExecutionContext)
  nameWithType: StateActivity.Cancel(ActivityExecutionContext)
  fullName: System.Workflow.Activities.StateActivity.Cancel(ActivityExecutionContext)
- uid: System.Workflow.ComponentModel.ActivityExecutionStatus
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionStatus
  nameWithType: ActivityExecutionStatus
  fullName: System.Workflow.ComponentModel.ActivityExecutionStatus
- uid: System.Workflow.ComponentModel.ActivityExecutionContext
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: ActivityExecutionContext
  nameWithType: ActivityExecutionContext
  fullName: System.Workflow.ComponentModel.ActivityExecutionContext
- uid: System.Workflow.Activities.StateActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: Execute(ActivityExecutionContext)
  nameWithType: StateActivity.Execute(ActivityExecutionContext)
  fullName: System.Workflow.Activities.StateActivity.Execute(ActivityExecutionContext)
- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity(System.String)
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: GetDynamicActivity(String)
  nameWithType: StateActivity.GetDynamicActivity(String)
  fullName: System.Workflow.Activities.StateActivity.GetDynamicActivity(String)
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Activities.StateActivity.Initialize(System.IServiceProvider)
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: Initialize(IServiceProvider)
  nameWithType: StateActivity.Initialize(IServiceProvider)
  fullName: System.Workflow.Activities.StateActivity.Initialize(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: OnActivityChangeAdd(ActivityExecutionContext,Activity)
  nameWithType: StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
  fullName: System.Workflow.Activities.StateActivity.OnActivityChangeAdd(ActivityExecutionContext,Activity)
- uid: System.Workflow.Activities.StateActivity.OnClosed(System.IServiceProvider)
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: OnClosed(IServiceProvider)
  nameWithType: StateActivity.OnClosed(IServiceProvider)
  fullName: System.Workflow.Activities.StateActivity.OnClosed(IServiceProvider)
- uid: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: StateChangeTrackingDataKey
  nameWithType: StateActivity.StateChangeTrackingDataKey
  fullName: System.Workflow.Activities.StateActivity.StateChangeTrackingDataKey
- uid: System.Workflow.Activities.StateActivity.#ctor*
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: StateActivity
  nameWithType: StateActivity.StateActivity
- uid: System.Workflow.Activities.StateActivity.Cancel*
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: Cancel
  nameWithType: StateActivity.Cancel
- uid: System.Workflow.Activities.StateActivity.Execute*
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: Execute
  nameWithType: StateActivity.Execute
- uid: System.Workflow.Activities.StateActivity.GetDynamicActivity*
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: GetDynamicActivity
  nameWithType: StateActivity.GetDynamicActivity
- uid: System.Workflow.Activities.StateActivity.Initialize*
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: Initialize
  nameWithType: StateActivity.Initialize
- uid: System.Workflow.Activities.StateActivity.OnActivityChangeAdd*
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: OnActivityChangeAdd
  nameWithType: StateActivity.OnActivityChangeAdd
- uid: System.Workflow.Activities.StateActivity.OnClosed*
  parent: System.Workflow.Activities.StateActivity
  isExternal: false
  name: OnClosed
  nameWithType: StateActivity.OnClosed
