### YamlMime:ManagedReference
items:
- uid: System.Data.IDbConnection
  id: IDbConnection
  children:
  - System.Data.IDbConnection.BeginTransaction
  - System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.IDbConnection.ChangeDatabase(System.String)
  - System.Data.IDbConnection.Close
  - System.Data.IDbConnection.ConnectionString
  - System.Data.IDbConnection.ConnectionTimeout
  - System.Data.IDbConnection.CreateCommand
  - System.Data.IDbConnection.Database
  - System.Data.IDbConnection.Open
  - System.Data.IDbConnection.State
  langs:
  - csharp
  name: IDbConnection
  nameWithType: IDbConnection
  fullName: System.Data.IDbConnection
  type: Interface
  summary: "データ ソースへの開いている接続を表し、リレーショナル データベースにアクセスする .NET Framework データ プロバイダーによって実装されます。"
  remarks: "IDbConnection インターフェイスにより、データ ソース (たとえば、サーバーにネットワーク接続) との一意のセッションを表す接続クラス実装を継承するクラスです。 接続クラスの詳細については、次を参照してください。[データ ソースに接続する](~/add/includes/ajax-current-ext-md.md)です。       アプリケーションでは、直接、IDbConnection インターフェイスのインスタンスは作成されませんが、IDbConnection を継承するクラスのインスタンスを作成します。       IDbConnection を継承するクラスは、継承されたすべてのメンバーを実装し、通常プロバイダー固有の機能を追加するその他のメンバーを定義する必要があります。 IDbConnection インターフェイスの定義など、<xref:System.Data.IDbConnection.ConnectionTimeout%2A>プロパティ</xref:System.Data.IDbConnection.ConnectionTimeout%2A>。 さらに、<xref:System.Data.SqlClient.SqlConnection>クラスは、このプロパティを継承しも定義、<xref:System.Data.SqlClient.SqlConnection.PacketSize%2A>プロパティ</xref:System.Data.SqlClient.SqlConnection.PacketSize%2A></xref:System.Data.SqlClient.SqlConnection>。"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlCommand> and <xref:System.Data.SqlClient.SqlConnection>. The <xref:System.Data.SqlClient.SqlConnection> is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>, and closes the connection. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a Transact-SQL INSERT statement.  \n  \n [!code-cs[Classic WebData SqlConnection Example#1](~/add/codesnippet/csharp/t-system.data.idbconnect_1.cs)]\n [!code-vb[Classic WebData SqlConnection Example#1](~/add/codesnippet/visualbasic/t-system.data.idbconnect_1.vb)]"
  syntax:
    content: 'public interface IDbConnection : IDisposable'
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Data.IDbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: IDbConnection.BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "データベース トランザクションを開始します。"
  remarks: "トランザクションが完了する必要があります明示的にコミットまたはロールバック、トランザクションを使用して、<xref:System.Data.IDbTransaction.Commit%2A>または<xref:System.Data.IDbTransaction.Rollback%2A>メソッド</xref:System.Data.IDbTransaction.Rollback%2A></xref:System.Data.IDbTransaction.Commit%2A>。"
  syntax:
    content: public System.Data.IDbTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.IDbTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.IDbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指定したデータベース トランザクションを開始<xref href=&quot;System.Data.IsolationLevel&quot;></xref>値。"
  remarks: "トランザクションが完了する必要があります明示的にコミットまたはロールバックを使用して、トランザクション、<xref:System.Data.IDbTransaction.Commit%2A>または<xref:System.Data.IDbTransaction.Rollback%2A>メソッド</xref:System.Data.IDbTransaction.Rollback%2A></xref:System.Data.IDbTransaction.Commit%2A>。"
  syntax:
    content: public System.Data.IDbTransaction BeginTransaction (System.Data.IsolationLevel il);
    parameters:
    - id: il
      type: System.Data.IsolationLevel
      description: "1 つ、 <xref href=&quot;System.Data.IsolationLevel&quot;> </xref>値。"
    return:
      type: System.Data.IDbTransaction
      description: "新しいトランザクションを表すオブジェクト。"
  overload: System.Data.IDbConnection.BeginTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: IDbConnection.ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "開いているは、現在のデータベース変更<xref uid=&quot;langword_csharp_Connection&quot; name=&quot;Connection&quot; href=&quot;&quot;></xref>オブジェクト。"
  syntax:
    content: public void ChangeDatabase (string databaseName);
    parameters:
    - id: databaseName
      type: System.String
      description: "現在のデータベースの代わりに使用するデータベースの名前。"
  overload: System.Data.IDbConnection.ChangeDatabase*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Close
  id: Close
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Close()
  nameWithType: IDbConnection.Close()
  fullName: System.Data.IDbConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "データベースへの接続を閉じます。"
  remarks: "Close メソッドは、保留中のトランザクションをロールバックします。 接続プールへの接続を解放し、または接続プールが無効になっている場合、接続を閉じます。       アプリケーションが呼び出すことができます`Close`例外を生成せずに複数回です。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.IDbConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "取得またはデータベースを開くために使用する文字列を設定します。"
  remarks: "`ConnectionString`プロパティは、接続が閉じられたときにのみ設定できます。"
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbConnection>, sets its <xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>, and displays its <xref:System.Data.OleDb.OleDbConnection.State%2A>.  \n  \n [!code-cs[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.idbconnect_0_1.cs)]\n [!code-vb[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.idbconnect_0_1.vb)]"
  syntax:
    content: public string ConnectionString { get; set; }
    return:
      type: System.String
      description: "接続の設定を含む文字列。"
  overload: System.Data.IDbConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "試行を終了し、エラーが発生する前に接続を確立しているときに待機する時間を取得します。"
  remarks: "値が 0 のないことを示します、待機時間に制限はなく、待機時間とでは避ける必要があります、<xref:System.Data.IDbConnection.ConnectionString%2A>無制限に待機する接続の試行が生じるためです</xref:System.Data.IDbConnection.ConnectionString%2A>。"
  syntax:
    content: public int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "時間 (秒) に接続を開くを待機します。 既定値は、15 秒です。"
  overload: System.Data.IDbConnection.ConnectionTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: IDbConnection.CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "作成して、接続に関連付けられている Command オブジェクトを返します。"
  syntax:
    content: public System.Data.IDbCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.IDbCommand
      description: "接続に関連付けられている Command オブジェクト。"
  overload: System.Data.IDbConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Database
  id: Database
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Database
  nameWithType: IDbConnection.Database
  fullName: System.Data.IDbConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "現在のデータベースまたは接続が開かれた後に使用するデータベースの名前を取得します。"
  remarks: "`Database`プロパティを使用して動的に更新できる、<xref:System.Data.IDbConnection.ChangeDatabase%2A>メソッド、Execute メソッドのいずれかを使用して SQL ステートメントを渡すことにより</xref:System.Data.IDbConnection.ChangeDatabase%2A>。 (最初に、データベースは、設定、接続文字列を使用して)。SQL ステートメントを使用して、現在のデータベースを変更するかどうか、または`ChangeDatabase`メソッド、情報メッセージが送信され、プロパティを更新し、します。"
  syntax:
    content: public string Database { get; }
    return:
      type: System.String
      description: "現在のデータベースの名前または&1; 回使用するデータベースの名前は、接続が開いています。 既定値は、空の文字列です。"
  overload: System.Data.IDbConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.Open
  id: Open
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: Open()
  nameWithType: IDbConnection.Open()
  fullName: System.Data.IDbConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "によって指定される設定とデータベース接続を開き、 <xref uid=&quot;langword_csharp_ConnectionString&quot; name=&quot;ConnectionString&quot; href=&quot;&quot;> </xref>プロバイダーに固有の接続オブジェクトのプロパティです。"
  syntax:
    content: public void Open ();
    parameters: []
  overload: System.Data.IDbConnection.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDbConnection.State
  id: State
  parent: System.Data.IDbConnection
  langs:
  - csharp
  name: State
  nameWithType: IDbConnection.State
  fullName: System.Data.IDbConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "接続の現在の状態を取得します。"
  remarks: "許可される状態の変更: - から`Closed`に`Open`を使用して、`Open`接続オブジェクトのメソッドです。      -から`Open`に`Closed`、いずれかを使用して、`Close`メソッドまたは`Dispose`接続オブジェクトのメソッドです。"
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OleDb.OleDbConnection>, sets its <xref:System.Data.IDbConnection.ConnectionString%2A>, and displays its State.  \n  \n [!code-cs[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.idbconnect_1_1.cs)]\n [!code-vb[Classic WebData IDbConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.idbconnect_1_1.vb)]"
  syntax:
    content: public System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "1 つ、 <xref href=&quot;System.Data.ConnectionState&quot;> </xref>値。"
  overload: System.Data.IDbConnection.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.IDbConnection.BeginTransaction
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: IDbConnection.BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  nameWithType: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: IDbConnection.ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDbConnection.Close
  parent: System.Data.IDbConnection
  isExternal: false
  name: Close()
  nameWithType: IDbConnection.Close()
  fullName: System.Data.IDbConnection.Close()
- uid: System.Data.IDbConnection.ConnectionString
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
- uid: System.Data.IDbConnection.ConnectionTimeout
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbConnection.CreateCommand
  parent: System.Data.IDbConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: IDbConnection.CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.IDbConnection.Database
  parent: System.Data.IDbConnection
  isExternal: false
  name: Database
  nameWithType: IDbConnection.Database
  fullName: System.Data.IDbConnection.Database
- uid: System.Data.IDbConnection.Open
  parent: System.Data.IDbConnection
  isExternal: false
  name: Open()
  nameWithType: IDbConnection.Open()
  fullName: System.Data.IDbConnection.Open()
- uid: System.Data.IDbConnection.State
  parent: System.Data.IDbConnection
  isExternal: false
  name: State
  nameWithType: IDbConnection.State
  fullName: System.Data.IDbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.IDbConnection.BeginTransaction*
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: IDbConnection.BeginTransaction
- uid: System.Data.IDbConnection.ChangeDatabase*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: IDbConnection.ChangeDatabase
- uid: System.Data.IDbConnection.Close*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Close
  nameWithType: IDbConnection.Close
- uid: System.Data.IDbConnection.ConnectionString*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionString
  nameWithType: IDbConnection.ConnectionString
- uid: System.Data.IDbConnection.ConnectionTimeout*
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
- uid: System.Data.IDbConnection.CreateCommand*
  parent: System.Data.IDbConnection
  isExternal: false
  name: CreateCommand
  nameWithType: IDbConnection.CreateCommand
- uid: System.Data.IDbConnection.Database*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Database
  nameWithType: IDbConnection.Database
- uid: System.Data.IDbConnection.Open*
  parent: System.Data.IDbConnection
  isExternal: false
  name: Open
  nameWithType: IDbConnection.Open
- uid: System.Data.IDbConnection.State*
  parent: System.Data.IDbConnection
  isExternal: false
  name: State
  nameWithType: IDbConnection.State
