### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePoint
  id: ServicePoint
  children:
  - System.Net.ServicePoint.Address
  - System.Net.ServicePoint.BindIPEndPointDelegate
  - System.Net.ServicePoint.Certificate
  - System.Net.ServicePoint.ClientCertificate
  - System.Net.ServicePoint.CloseConnectionGroup(System.String)
  - System.Net.ServicePoint.ConnectionLeaseTimeout
  - System.Net.ServicePoint.ConnectionLimit
  - System.Net.ServicePoint.ConnectionName
  - System.Net.ServicePoint.CurrentConnections
  - System.Net.ServicePoint.Expect100Continue
  - System.Net.ServicePoint.IdleSince
  - System.Net.ServicePoint.MaxIdleTime
  - System.Net.ServicePoint.ProtocolVersion
  - System.Net.ServicePoint.ReceiveBufferSize
  - System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePoint.SupportsPipelining
  - System.Net.ServicePoint.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
  type: Class
  summary: "HTTP 接続の接続の管理を提供します。"
  remarks: "ServicePoint クラスでは、リソースの Uniform Resource Identifier () を渡されたホスト情報に基づいてインターネット リソースへの接続を処理します。 リソースへの初期接続では、そのリソースを後続の要求をすべてによって共有される、ServicePoint オブジェクトを管理している情報を決定します。       ServicePoint オブジェクトで管理されて、<xref:System.Net.ServicePointManager>クラスし、作成されますが、必要に応じて、<xref:System.Net.ServicePointManager.FindServicePoint%2A?displayProperty=fullName>メソッド</xref:System.Net.ServicePointManager.FindServicePoint%2A?displayProperty=fullName></xref:System.Net.ServicePointManager>。 ServicePoint オブジェクトは直接作成されませんが、常に作成および管理は、<xref:System.Net.ServicePointManager>クラス</xref:System.Net.ServicePointManager>によって によって作成できる ServicePoint オブジェクトの最大数を設定、<xref:System.Net.ServicePointManager.MaxServicePoints%2A?displayProperty=fullName>プロパティ</xref:System.Net.ServicePointManager.MaxServicePoints%2A?displayProperty=fullName>。       各 ServicePoint オブジェクトを保持するインターネット リソースへの接続アイドル状態になるまでで指定された時間より長い、<xref:System.Net.ServicePoint.MaxIdleTime%2A>プロパティ</xref:System.Net.ServicePoint.MaxIdleTime%2A>。 超えた場合に、ServicePoint、<xref:System.Net.ServicePoint.MaxIdleTime%2A>値、ことができますの別の接続を再利用します</xref:System.Net.ServicePoint.MaxIdleTime%2A>。 既定値の<xref:System.Net.ServicePoint.MaxIdleTime%2A>設定されている、<xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName>プロパティ</xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName></xref:System.Net.ServicePoint.MaxIdleTime%2A>。       ときに、<xref:System.Net.ServicePoint.ConnectionLeaseTimeout%2A>プロパティが-1 以外の値に設定され、指定した時間が経過すると後、次の要求をサービス後 ServicePoint のアクティブな接続が閉じられます。</xref:System.Net.ServicePoint.ConnectionLeaseTimeout%2A> 。 これは、既定では、無期限に開かれたアクティブな接続を必要としないアプリケーションに役立ちます。      > [!NOTE] > 負荷が高い状態で、一部のアプリケーションがシステム パフォーマンスが低下 (高、変数のトランザクション時間など) する可能性がありますスレッド プール内のフリー スレッド不足実行可能性があります。 参照してください[http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp](http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp)さまざまな構成の変更がこの問題を修正することができます。"
  example:
  - "The following code example creates a ServicePoint object that connects to the URI www.contoso.com.  \n  \n [!code-cpp[System.Net.ServicePoint#1](~/add/codesnippet/cpp/t-system.net.servicepoint_1.cpp)]\n [!code-vb[System.Net.ServicePoint#1](~/add/codesnippet/visualbasic/t-system.net.servicepoint_1.vb)]\n [!code-cs[System.Net.ServicePoint#1](~/add/codesnippet/csharp/t-system.net.servicepoint_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.CompilerServices.FriendAccessAllowed]

      public class ServicePoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Address
  id: Address
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Address
  nameWithType: ServicePoint.Address
  fullName: System.Net.ServicePoint.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "サーバーの統一リソース識別子 (URI) を取得この<xref href=&quot;System.Net.ServicePoint&quot;></xref>に接続するオブジェクト。"
  remarks: ''
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#2](~/add/codesnippet/cpp/p-system.net.servicepoin_3_1.cpp)]\n [!code-vb[System.Net.ServicePoint#2](~/add/codesnippet/visualbasic/p-system.net.servicepoin_3_1.vb)]\n [!code-cs[System.Net.ServicePoint#2](~/add/codesnippet/csharp/p-system.net.servicepoin_3_1.cs)]"
  syntax:
    content: public Uri Address { get; }
    return:
      type: System.Uri
      description: "インスタンス、<xref:System.Uri>インターネット サーバーの URI を格納するクラスをこの<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクトの接続先</xref:System.Uri>。"
  overload: System.Net.ServicePoint.Address*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>ホスト モードにします。"
  platform:
  - net462
- uid: System.Net.ServicePoint.BindIPEndPointDelegate
  id: BindIPEndPointDelegate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
  fullName: System.Net.ServicePoint.BindIPEndPointDelegate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "ローカルの関連付けにデリゲートを指定<xref:System.Net.IPEndPoint>で、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref></xref:System.Net.IPEndPoint> 。"
  remarks: "いくつかの負荷分散技術特定ローカル IP アドレスとポート番号を使用するクライアントが必要なく<xref:System.Net.IPAddress.Any?displayProperty=fullName>(または<xref:System.Net.IPAddress.IPv6Any?displayProperty=fullName>インターネット プロトコル バージョン 6 用) と一時的なポート</xref:System.Net.IPAddress.IPv6Any?displayProperty=fullName></xref:System.Net.IPAddress.Any?displayProperty=fullName> BindIPEndPointDelegate には、この要件を満たすことができます。"
  syntax:
    content: public System.Net.BindIPEndPoint BindIPEndPointDelegate { get; set; }
    return:
      type: System.Net.BindIPEndPoint
      description: "デリゲートを強制する、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>特定ローカル インターネット プロトコル (IP) アドレスとポート番号を使用します。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePoint.BindIPEndPointDelegate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Certificate
  id: Certificate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Certificate
  nameWithType: ServicePoint.Certificate
  fullName: System.Net.ServicePoint.Certificate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "用に受信した証明書を取得<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  remarks: "ただし、<xref:System.Net.ServicePoint>オブジェクトは、インターネット リソースへの複数の接続を行うことができます、唯一の証明書を管理できます</xref:System.Net.ServicePoint>。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_1_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_1_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_1_1.cs)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "インスタンス、 <xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref>用に受信したセキュリティ証明書を含むクラス<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  overload: System.Net.ServicePoint.Certificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ClientCertificate
  id: ClientCertificate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
  fullName: System.Net.ServicePoint.ClientCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "サーバーに送信された最後のクライアント証明書を取得します。"
  remarks: ''
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_19_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_19_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_19_1.cs)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref>最後のクライアント証明書の公開の値を格納しているオブジェクトがサーバーに送信します。"
  overload: System.Net.ServicePoint.ClientCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.CloseConnectionGroup(System.String)
  id: CloseConnectionGroup(System.String)
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: CloseConnectionGroup(String)
  nameWithType: ServicePoint.CloseConnectionGroup(String)
  fullName: System.Net.ServicePoint.CloseConnectionGroup(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "これから指定された接続グループを削除<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  remarks: "接続グループは、特定の接続または接続のセットに要求のセットを関連付けます。 このメソッドは、削除し、指定された接続グループに属しているすべての接続を閉じます。"
  syntax:
    content: public bool CloseConnectionGroup (string connectionGroupName);
    parameters:
    - id: connectionGroupName
      type: System.String
      description: "閉じるし、このサービス ポイントから削除する接続を格納している接続グループの名前。"
    return:
      type: System.Boolean
      description: "A<xref:System.Boolean>接続グループが閉じられたかどうかを示す値</xref:System.Boolean>。"
  overload: System.Net.ServicePoint.CloseConnectionGroup*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout
  id: ConnectionLeaseTimeout
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
  fullName: System.Net.ServicePoint.ConnectionLeaseTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得するまでのミリ秒数を設定またはアクティブな<xref href=&quot;System.Net.ServicePoint&quot;></xref>接続は閉じられます。"
  remarks: "このプロパティを使用していることを確認することができます、<xref:System.Net.ServicePoint>オブジェクトのアクティブな接続したままにしない開く無期限にします</xref:System.Net.ServicePoint>。 このプロパティは、シナリオの接続を削除および負荷分散のシナリオなど、定期的に再確立する必要があります。       既定では、ときに<xref:System.Net.FtpWebRequest.KeepAlive%2A>は`true`を要求、<xref:System.Net.ServicePoint.MaxIdleTime%2A>終わりのタイムアウトを設定するプロパティ<xref:System.Net.ServicePoint>非アクティブな接続</xref:System.Net.ServicePoint></xref:System.Net.ServicePoint.MaxIdleTime%2A></xref:System.Net.FtpWebRequest.KeepAlive%2A>。 場合、<xref:System.Net.ServicePoint>がアクティブな接続は、<xref:System.Net.ServicePoint.MaxIdleTime%2A>影響を与えませんし、接続は無期限に開いたままです</xref:System.Net.ServicePoint.MaxIdleTime%2A></xref:System.Net.ServicePoint>。       ConnectionLeaseTimeout プロパティが-1 と後、指定した時間が経過すると、アクティブな以外の値に設定するときに<xref:System.Net.ServicePoint>を設定して、要求を処理した後の接続が閉じられる<xref:System.Net.FtpWebRequest.KeepAlive%2A>に`false`その要求にします</xref:System.Net.FtpWebRequest.KeepAlive%2A></xref:System.Net.ServicePoint>。       この値を設定して管理されているすべての接続に影響を与える、<xref:System.Net.ServicePoint>オブジェクト</xref:System.Net.ServicePoint>。"
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cs[NCLServicePoint#1](~/add/codesnippet/csharp/p-system.net.servicepoin_15_1.cs)]\n [!code-vb[NCLServicePoint#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_15_1.vb)]\n [!code-cpp[NCLServicePoint#1](~/add/codesnippet/cpp/p-system.net.servicepoin_15_1.cpp)]"
  syntax:
    content: public int ConnectionLeaseTimeout { get; set; }
    return:
      type: System.Int32
      description: "A<xref:System.Int32>ミリ秒数を指定する、アクティブな<xref href=&quot;System.Net.ServicePoint&quot;></xref>接続は開いて</xref:System.Int32>。 既定値は-1 で、アクティブな<xref href=&quot;System.Net.ServicePoint&quot;></xref>ままへの接続を無制限に接続します。 このプロパティを強制的に 0 に設定<xref href=&quot;System.Net.ServicePoint&quot;></xref>要求の処理後に接続します。"
  overload: System.Net.ServicePoint.ConnectionLeaseTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "セット操作に対して指定された値は、-1 未満の負の数です。"
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionLimit
  id: ConnectionLimit
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
  fullName: System.Net.ServicePoint.ConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "これで許可される接続の最大数を取得または<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  remarks: "ConnectionLimit プロパティの設定接続の最大数、<xref:System.Net.ServicePoint>オブジェクトは、インターネット リソースに加えることができます</xref:System.Net.ServicePoint>。 ConnectionLimit プロパティの値がの値に設定、<xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A?displayProperty=fullName>プロパティと、<xref:System.Net.ServicePoint>オブジェクトが作成されますその後に変更<xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A>既存に影響を与えるありません<xref:System.Net.ServicePoint>オブジェクト。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A?displayProperty=fullName> 。"
  example:
  - "The following code example uses the ConnectionLimit property to check the maximum number of connections that the <xref:System.Net.ServicePoint> object can make to the specified Uniform Resource Identifier (URI).  \n  \n [!code-cpp[System.Net.ServicePoint#4](~/add/codesnippet/cpp/p-system.net.servicepoin_6_1.cpp)]\n [!code-vb[System.Net.ServicePoint#4](~/add/codesnippet/visualbasic/p-system.net.servicepoin_6_1.vb)]\n [!code-cs[System.Net.ServicePoint#4](~/add/codesnippet/csharp/p-system.net.servicepoin_6_1.cs)]"
  syntax:
    content: public int ConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "これで許可される接続の最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  overload: System.Net.ServicePoint.ConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "接続の制限は、同じか、または 0 より小さいです。"
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionName
  id: ConnectionName
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
  fullName: System.Net.ServicePoint.ConnectionName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "接続の名前を取得します。"
  remarks: "場合、<xref:System.Net.ServicePoint>オブジェクトが構築した、<xref:System.Uri>オブジェクト (、<xref:System.Net.ServicePointManager.FindServicePoint%2A>または<xref:System.Net.ServicePointManager.FindServicePoint%2A>例については、メソッド)、ConnectionName プロパティを表すし、<xref:System.Uri.Scheme%2A>のプロパティ、<xref:System.Uri>使用されるオブジェクト</xref:System.Uri></xref:System.Uri.Scheme%2A></xref:System.Net.ServicePointManager.FindServicePoint%2A></xref:System.Net.ServicePointManager.FindServicePoint%2A></xref:System.Uri></xref:System.Net.ServicePoint>。       場合、<xref:System.Net.ServicePoint>オブジェクトは、ネットワーク ホストおよびポートから構築された、ConnectionName プロパティには、ホストとネットワークを表す文字列が含まれていますポート</xref:System.Net.ServicePoint>。 ホストおよびポートのみから構築されている場合に、ConnectionName プロパティが設定されている場合<xref:System.Net.WebRequest>が同じオブジェクト<xref:System.Net.WebRequest.ConnectionGroupName%2A>値は、これを使用できます<xref:System.Net.ServicePoint>オブジェクト</xref:System.Net.ServicePoint></xref:System.Net.WebRequest.ConnectionGroupName%2A></xref:System.Net.WebRequest>。"
  example:
  - >-
    [!code-cpp[System.Net.ServicePoint#4](~/add/codesnippet/cpp/p-system.net.servicepoin_0_1.cpp)]
     [!code-vb[System.Net.ServicePoint#4](~/add/codesnippet/visualbasic/p-system.net.servicepoin_0_1.vb)]
     [!code-cs[System.Net.ServicePoint#4](~/add/codesnippet/csharp/p-system.net.servicepoin_0_1.cs)]
  syntax:
    content: public string ConnectionName { get; }
    return:
      type: System.String
      description: "A<xref:System.String>接続名を表す</xref:System.String>。"
  overload: System.Net.ServicePoint.ConnectionName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.CurrentConnections
  id: CurrentConnections
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
  fullName: System.Net.ServicePoint.CurrentConnections
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "これに関連付けられた開いている接続の数を取得<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  remarks: "CurrentConnections プロパティには、これに関連付けられている開いてのインターネット接続の数が含まれています<xref:System.Net.ServicePoint>オブジェクト。</xref:System.Net.ServicePoint> 。 CurrentConnections の値には、 <xref:System.Net.ServicePoint.ConnectionLimit%2A>。</xref:System.Net.ServicePoint.ConnectionLimit%2A>を超えることはできません。"
  example:
  - "The following code example uses the CurrentConnections property to determine the number of open Internet connections associated with this <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#2](~/add/codesnippet/cpp/p-system.net.servicepoin_2_1.cpp)]\n [!code-vb[System.Net.ServicePoint#2](~/add/codesnippet/visualbasic/p-system.net.servicepoin_2_1.vb)]\n [!code-cs[System.Net.ServicePoint#2](~/add/codesnippet/csharp/p-system.net.servicepoin_2_1.cs)]"
  syntax:
    content: public int CurrentConnections { get; }
    return:
      type: System.Int32
      description: "これに関連付けられた開いている接続数<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト。"
  overload: System.Net.ServicePoint.CurrentConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
  fullName: System.Net.ServicePoint.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定、 <xref:System.Boolean>100 かどうかを決定する値の動作の使用を続行します</xref:System.Boolean>。"
  remarks: "このプロパティを設定すると`true`、クライアント要求を使用する、`POST`メソッドは、100 を受信することでクライアントがポストするデータを送信する必要がありますを示すためにサーバーからの応答を続行します。 このメカニズムにより、クライアント要求ヘッダーに基づき、サーバー要求を拒否する場合は、ネットワーク経由で大量のデータを送信する必要があります。       たとえば、Expect100Continue プロパティは`false`します。 要求がサーバーに送信されると、データが含まれています。 場合は、要求ヘッダーを読み取った後、サーバー認証が必要ですは 401 応答を送信、クライアントは適切な認証ヘッダーを使用してデータを再送信する必要があります。       Expect100Continue プロパティが場合`true`、要求ヘッダーがサーバーに送信されます。 サーバーが要求を拒否されない場合は、100、送信-100-continue 応答データを送信することができます。 上記の例のように、サーバー認証が必要な場合は、401 の応答を送信し、クライアントがデータを不必要に転送されません。       このプロパティの値を変更しても、既存の接続には影響しません。 のみ、変更後に作成された新しい接続を受けます。       Expect 100-IETF RFC 2616 10.1.1 で完全に説明している動作を続行します。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#9](~/add/codesnippet/cpp/p-system.net.servicepoin_4_1.cpp)]\n [!code-vb[System.Net.ServicePoint#9](~/add/codesnippet/visualbasic/p-system.net.servicepoin_4_1.vb)]\n [!code-cs[System.Net.ServicePoint#9](~/add/codesnippet/csharp/p-system.net.servicepoin_4_1.cs)]"
  syntax:
    content: public bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>100 を期待するのに対して 100-continue 応答<xref uid=&quot;langword_csharp_POST&quot; name=&quot;POST&quot; href=&quot;&quot;></xref>要求です。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePoint.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.IdleSince
  id: IdleSince
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
  fullName: System.Net.ServicePoint.IdleSince
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "日付と時刻を取得、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトが前回ホストに接続します。"
  remarks: "IdleSince プロパティは、最後の日付と、ホストからサービス ポイントが切断された時刻を記録します。 IdleSince と現在の時刻の差がの値を超えたとき<xref:System.Net.ServicePoint.MaxIdleTime%2A>、<xref:System.Net.ServicePoint>オブジェクトは別の接続を再利用できます</xref:System.Net.ServicePoint></xref:System.Net.ServicePoint.MaxIdleTime%2A>。"
  example:
  - "The following code example uses the IdleSince property to set and retrieve the date and time that the <xref:System.Net.ServicePoint> object was last connected to a host.  \n  \n [!code-cpp[System.Net.ServicePoint#3](~/add/codesnippet/cpp/p-system.net.servicepoin_7_1.cpp)]\n [!code-vb[System.Net.ServicePoint#3](~/add/codesnippet/visualbasic/p-system.net.servicepoin_7_1.vb)]\n [!code-cs[System.Net.ServicePoint#3](~/add/codesnippet/csharp/p-system.net.servicepoin_7_1.cs)]"
  syntax:
    content: public DateTime IdleSince { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>日付と時刻を格納しているオブジェクト、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトが最後に接続されています</xref:System.DateTime>。"
  overload: System.Net.ServicePoint.IdleSince*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.MaxIdleTime
  id: MaxIdleTime
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
  fullName: System.Net.ServicePoint.MaxIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定の接続に関連付けられている時間、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトがアイドル状態の接続を閉じる前にします。"
  remarks: "MaxIdleTime に設定できます<xref:System.Threading.Timeout.Infinite?displayProperty=fullName>に接続が関連付けられていることを示すために、<xref:System.Net.ServicePoint>オブジェクトがタイムアウトしない</xref:System.Net.ServicePoint></xref:System.Threading.Timeout.Infinite?displayProperty=fullName>。       MaxIdleTime プロパティの既定値は、の値、<xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName>プロパティと、<xref:System.Net.ServicePoint>オブジェクトを作成します</xref:System.Net.ServicePoint></xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName>。 以降の変更、<xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A>プロパティが既存の影響を与えるありません<xref:System.Net.ServicePoint>オブジェクト</xref:System.Net.ServicePoint></xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A>。       接続の MaxIdleTime に関連付けられている場合、<xref:System.Net.ServicePoint>を超えると、接続まで開いたまま、接続を使用しようとするアプリケーション</xref:System.Net.ServicePoint>。 その時点では、フレームワークは、接続を閉じ、リモート ホストに新しい接続を作成します。"
  example:
  - "The following code example uses the MaxIdleTime property to set and retrieve the <xref:System.Net.ServicePoint> idle time.  \n  \n [!code-cpp[System.Net.ServicePoint#3](~/add/codesnippet/cpp/p-system.net.servicepoin_11_1.cpp)]\n [!code-vb[System.Net.ServicePoint#3](~/add/codesnippet/visualbasic/p-system.net.servicepoin_11_1.vb)]\n [!code-cs[System.Net.ServicePoint#3](~/add/codesnippet/csharp/p-system.net.servicepoin_11_1.cs)]"
  syntax:
    content: public int MaxIdleTime { get; set; }
    return:
      type: System.Int32
      description: "接続に関連付けられている、ミリ秒単位の時間の長さ、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトがアイドル状態が閉じられてし、別の接続の再利用する前にします。"
  overload: System.Net.ServicePoint.MaxIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定されている MaxIdleTime より小さい&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;より大きいまたは&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;です。"
  platform:
  - net462
- uid: System.Net.ServicePoint.ProtocolVersion
  id: ProtocolVersion
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
  fullName: System.Net.ServicePoint.ProtocolVersion
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "HTTP プロトコルのバージョンを取得、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトが使用されます。"
  remarks: "HTTP プロトコル バージョンとは、http/1.0 および http/1.1 です。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_22_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_22_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_22_1.cs)]"
  syntax:
    content: public virtual Version ProtocolVersion { get; }
    return:
      type: System.Version
      description: "A <xref:System.Version>HTTP プロトコルのバージョンを格納しているオブジェクトを<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクトが使用されます</xref:System.Version>。"
  overload: System.Net.ServicePoint.ProtocolVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
  fullName: System.Net.ServicePoint.ReceiveBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "これが使用するソケットの受信バッファーのサイズ設定を取得または<xref href=&quot;System.Net.ServicePoint&quot;></xref>です。"
  remarks: "詳細については、 <xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>。</xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>を参照してください。"
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cs[NCLServicePoint#1](~/add/codesnippet/csharp/p-system.net.servicepoin_9_1.cs)]\n [!code-vb[NCLServicePoint#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_9_1.vb)]\n [!code-cpp[NCLServicePoint#1](~/add/codesnippet/cpp/p-system.net.servicepoin_9_1.cpp)]"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: "A<xref:System.Int32>受信バッファーのバイト単位のサイズを格納する</xref:System.Int32>。 既定値は 8192 です。"
  overload: System.Net.ServicePoint.ReceiveBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "設定操作に指定された値が<xref:System.Int32>。</xref:System.Int32>より大きい"
  platform:
  - net462
- uid: System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "有効または TCP 接続での keep-alive オプションを無効にします。"
  remarks: "アプリケーションでは、TCP/IP プロバイダーが TCP 接続での keep-alive パケットの使用を有効にすることを要求できます。 既定では TCP 接続での keep-alive パケットの使用が無効になっています。       TCP ソケットときの既定の設定は、2 時間にセットのキープ アライブ タイムアウトとキープ アライブ間隔を 1 秒に初期化されます。 `keepAliveTime`パラメーターが反応のない最初の keep-alive パケットが送信されるまでのミリ秒単位のタイムアウトを指定します。 `keepAliveInterval`パラメーターを指定、間隔 (ミリ秒単位) 間の受信確認を受信しなかった場合、連続する keep-alive パケットが送信されるときにします。 キープ アライブ プローブの数は変更することはできず、10 に設定されています。       キープアの結果として、TCP 接続が削除された場合、<xref:System.Net.Sockets.SocketError>の<xref:System.Net.Sockets.SocketError>、ソケットで進行中のすべての呼び出しに返されるすべての後続の呼び出しは失敗し<xref:System.Net.Sockets.SocketError><xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError></xref:System.Net.Sockets.SocketError>。"
  syntax:
    content: public void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "指定されたを使用して有効になりますし、TCP 接続で TCP keep-alive オプションを true に設定する場合`keepAliveTime`と`keepAliveInterval`値。       場合は false に設定し、TCP の keep-alive オプションが無効になっているし、残りのパラメーターは無視されます。       既定値は false です。"
    - id: keepAliveTime
      type: System.Int32
      description: "反応のない最初の keep-alive パケットが送信されるまでのミリ秒単位のタイムアウト値を指定します。       値は 0 より大きくする必要があります。  0 未満の値が渡されたかどうか、<xref:System.ArgumentOutOfRangeException>がスローされます</xref:System.ArgumentOutOfRangeException>。"
    - id: keepAliveInterval
      type: System.Int32
      description: "受信確認を受信しなかった場合、連続する keep-alive パケットが送信されるときに、間隔をミリ秒単位での間を指定します。       値は 0 より大きくする必要があります。  0 未満の値が渡されたかどうか、<xref:System.ArgumentOutOfRangeException>がスローされます</xref:System.ArgumentOutOfRangeException>。"
  overload: System.Net.ServicePoint.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定された値<code> keepAliveTime </code>または<code> keepAliveInterval </code>パラメーターが 0 未満です。"
  platform:
  - net462
- uid: System.Net.ServicePoint.SupportsPipelining
  id: SupportsPipelining
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
  fullName: System.Net.ServicePoint.SupportsPipelining
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "示すかどうか、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトがパイプライン接続をサポートしています。"
  remarks: "パイプライン化により、各サーバーからの応答を待たずに、永続的な接続経由で複数の要求を送信するクライアント。 サーバーでは、要求が受信したとおりに、同じ順序で、応答を送信します。       パイプライン処理は、IETF RFC 2616 8.1.2.2 セクションで詳しく説明します。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_18_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_18_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_18_1.cs)]"
  syntax:
    content: public bool SupportsPipelining { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Net.ServicePoint&quot;> </xref>オブジェクトがパイプライン接続をサポートしている、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePoint.SupportsPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
  fullName: System.Net.ServicePoint.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "取得または設定、<xref:System.Boolean>が管理する接続で Nagle アルゴリズムを使用するかどうかを決定する値<xref href=&quot;System.Net.ServicePoint&quot;></xref>オブジェクト</xref:System.Boolean>。"
  remarks: "Nagle アルゴリズムは小さなデータ パケット バッファーに格納し、1 つのパケットとして送信するために使用します。 &quot;Nagling、&quot;と呼ばれる、このプロセスは、送信パケットの数が減るために、広く使用されてし、パケットごとのオーバーヘッドを削減します。       このプロパティの値を変更しても、既存の接続には影響しません。 のみ、変更後に作成された新しい接続を受けます。       Nagle アルゴリズムは IETF RFC 896 で詳しく説明します。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#9](~/add/codesnippet/cpp/p-system.net.servicepoin_16_1.cpp)]\n [!code-vb[System.Net.ServicePoint#9](~/add/codesnippet/visualbasic/p-system.net.servicepoin_16_1.vb)]\n [!code-cs[System.Net.ServicePoint#9](~/add/codesnippet/csharp/p-system.net.servicepoin_16_1.cs)]"
  syntax:
    content: public bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Nagle アルゴリズムを使用するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.ServicePoint.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.ServicePoint.Address
  parent: System.Net.ServicePoint
  isExternal: false
  name: Address
  nameWithType: ServicePoint.Address
  fullName: System.Net.ServicePoint.Address
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePoint.BindIPEndPointDelegate
  parent: System.Net.ServicePoint
  isExternal: false
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
  fullName: System.Net.ServicePoint.BindIPEndPointDelegate
- uid: System.Net.BindIPEndPoint
  parent: System.Net
  isExternal: false
  name: BindIPEndPoint
  nameWithType: BindIPEndPoint
  fullName: System.Net.BindIPEndPoint
- uid: System.Net.ServicePoint.Certificate
  parent: System.Net.ServicePoint
  isExternal: false
  name: Certificate
  nameWithType: ServicePoint.Certificate
  fullName: System.Net.ServicePoint.Certificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Net.ServicePoint.ClientCertificate
  parent: System.Net.ServicePoint
  isExternal: false
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
  fullName: System.Net.ServicePoint.ClientCertificate
- uid: System.Net.ServicePoint.CloseConnectionGroup(System.String)
  parent: System.Net.ServicePoint
  isExternal: false
  name: CloseConnectionGroup(String)
  nameWithType: ServicePoint.CloseConnectionGroup(String)
  fullName: System.Net.ServicePoint.CloseConnectionGroup(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
  fullName: System.Net.ServicePoint.ConnectionLeaseTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePoint.ConnectionLimit
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
  fullName: System.Net.ServicePoint.ConnectionLimit
- uid: System.Net.ServicePoint.ConnectionName
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
  fullName: System.Net.ServicePoint.ConnectionName
- uid: System.Net.ServicePoint.CurrentConnections
  parent: System.Net.ServicePoint
  isExternal: false
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
  fullName: System.Net.ServicePoint.CurrentConnections
- uid: System.Net.ServicePoint.Expect100Continue
  parent: System.Net.ServicePoint
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
  fullName: System.Net.ServicePoint.Expect100Continue
- uid: System.Net.ServicePoint.IdleSince
  parent: System.Net.ServicePoint
  isExternal: false
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
  fullName: System.Net.ServicePoint.IdleSince
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Net.ServicePoint.MaxIdleTime
  parent: System.Net.ServicePoint
  isExternal: false
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
  fullName: System.Net.ServicePoint.MaxIdleTime
- uid: System.Net.ServicePoint.ProtocolVersion
  parent: System.Net.ServicePoint
  isExternal: false
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
  fullName: System.Net.ServicePoint.ProtocolVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Net.ServicePoint.ReceiveBufferSize
  parent: System.Net.ServicePoint
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
  fullName: System.Net.ServicePoint.ReceiveBufferSize
- uid: System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePoint
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePoint.SupportsPipelining
  parent: System.Net.ServicePoint
  isExternal: false
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
  fullName: System.Net.ServicePoint.SupportsPipelining
- uid: System.Net.ServicePoint.UseNagleAlgorithm
  parent: System.Net.ServicePoint
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
  fullName: System.Net.ServicePoint.UseNagleAlgorithm
- uid: System.Net.ServicePoint.Address*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Address
  nameWithType: ServicePoint.Address
- uid: System.Net.ServicePoint.BindIPEndPointDelegate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
- uid: System.Net.ServicePoint.Certificate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Certificate
  nameWithType: ServicePoint.Certificate
- uid: System.Net.ServicePoint.ClientCertificate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
- uid: System.Net.ServicePoint.CloseConnectionGroup*
  parent: System.Net.ServicePoint
  isExternal: false
  name: CloseConnectionGroup
  nameWithType: ServicePoint.CloseConnectionGroup
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
- uid: System.Net.ServicePoint.ConnectionLimit*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
- uid: System.Net.ServicePoint.ConnectionName*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
- uid: System.Net.ServicePoint.CurrentConnections*
  parent: System.Net.ServicePoint
  isExternal: false
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
- uid: System.Net.ServicePoint.Expect100Continue*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
- uid: System.Net.ServicePoint.IdleSince*
  parent: System.Net.ServicePoint
  isExternal: false
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
- uid: System.Net.ServicePoint.MaxIdleTime*
  parent: System.Net.ServicePoint
  isExternal: false
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
- uid: System.Net.ServicePoint.ProtocolVersion*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
- uid: System.Net.ServicePoint.ReceiveBufferSize*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
- uid: System.Net.ServicePoint.SetTcpKeepAlive*
  parent: System.Net.ServicePoint
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePoint.SetTcpKeepAlive
- uid: System.Net.ServicePoint.SupportsPipelining*
  parent: System.Net.ServicePoint
  isExternal: false
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
- uid: System.Net.ServicePoint.UseNagleAlgorithm*
  parent: System.Net.ServicePoint
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
