### YamlMime:ManagedReference
items:
- uid: System.Web.WebSockets.AspNetWebSocket
  id: AspNetWebSocket
  children:
  - System.Web.WebSockets.AspNetWebSocket.Abort
  - System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.CloseStatus
  - System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  - System.Web.WebSockets.AspNetWebSocket.Dispose
  - System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.State
  - System.Web.WebSockets.AspNetWebSocket.SubProtocol
  langs:
  - csharp
  name: AspNetWebSocket
  nameWithType: AspNetWebSocket
  fullName: System.Web.WebSockets.AspNetWebSocket
  type: Class
  summary: "Web サーバーと ASP.NET アプリケーション内のクライアントの間でリアルタイムの全二重接続を表します。"
  syntax:
    content: 'public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket'
  inheritance:
  - System.Object
  - System.Net.WebSockets.WebSocket
  implements: []
  inheritedMembers:
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.Abort
  id: Abort
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: AspNetWebSocket.Abort()
  fullName: System.Web.WebSockets.AspNetWebSocket.Abort()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "保留中の I/O 操作のキャンセル、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトし、その他の I/O 操作を開始するために使用できないように、オブジェクトの状態を設定します。"
  remarks: "Abort メソッドが呼び出された後は、プロパティとメソッドの I/O 操作は含まれませんが引き続きアクセスできます。"
  syntax:
    content: public override void Abort ();
    parameters: []
  overload: System.Web.WebSockets.AspNetWebSocket.Abort*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは、以前に廃棄されています。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "クライアント接続を閉じるには、非同期メッセージを送信します。 サーバーは、接続を閉じる要求を開始する場合は、クライアントに返す前に、要求を確認するメソッドが待機します。"
  remarks: "CloseAsync を使用して<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>クライアントによって開始され、サーバーによって開始される両方の要求を閉じるためのメソッド、<xref:System.Web.WebSockets.AspNetWebSocket>接続</xref:System.Web.WebSockets.AspNetWebSocket></xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>。 2 つの方法は、同じ方法でクライアントによって開始される要求を処理します。 クライアントが接続を終了するためにサーバー メッセージを送信し、サーバーがこれらのメソッドの&1; つを呼び出すと、クライアントに受信確認を送信してとメソッドを返します。       サーバーによって開始される要求の&2; つのメソッドに動作が異なります。 CloseAsync メソッドは、接続を閉じるには、クライアントにメッセージが、応答を待つし、しを返しますを送信します。 サーバーは、クライアントによって送信されるその他のデータには待機しません。 これに対し、<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>メソッドは、接続を閉じる、クライアントにメッセージを送信し、応答を待機することがなくを返します</xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>。 このメソッドが戻る呼び出すことができます、<xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>メソッドおよび追加のデータまたはクライアントが送信する受信確認を処理します</xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>。"
  syntax:
    content: public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "クローズ操作のステータス コード。"
    - id: statusDescription
      type: System.String
      description: "クローズ操作のステータス メッセージ。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "保留中の操作をキャンセルするオブジェクト。"
    return:
      type: System.Threading.Tasks.Task
      description: "操作への参照。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが以前に廃棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが中止された状態にします。       または、送信側の操作は利用できません。       - または - 受信操作は利用できません。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "クライアント接続を閉じるには、非同期メッセージを送信します。 サーバーは、接続を閉じる要求を開始する場合は、応答を待機することがなく返します。"
  remarks: "使用することができます、<xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>およびクライアントによって開始され、サーバーによって開始される両方への要求を閉じる CloseOutputAsync メソッド、<xref:System.Web.WebSockets.AspNetWebSocket>接続</xref:System.Web.WebSockets.AspNetWebSocket></xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>。 2 つの方法は、同じ方法でクライアントによって開始される要求を処理します。 クライアントが接続を終了するためにサーバー メッセージを送信し、サーバーがこれらのメソッドの&1; つを呼び出すと、クライアントに受信確認を送信してとメソッドを返します。       サーバーによって開始される要求の&2; つのメソッドに動作が異なります。 <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>メソッド接続を閉じる、クライアントにメッセージを送信、応答を待って、を返します</xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>。 サーバーは、クライアントによって送信されるその他のデータには待機しません。 これに対し、CloseOutputAsync メソッドは、クライアント接続を閉じるにメッセージを送信し、応答を待機することがなくを返します。 このメソッドが戻る呼び出すことができます、<xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>メソッドおよび追加のデータまたはクライアントが送信する受信確認を処理します</xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>。"
  syntax:
    content: public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "クローズ操作のステータス コード。"
    - id: statusDescription
      type: System.String
      description: "クローズ操作のステータス メッセージ。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "保留中の操作をキャンセルするオブジェクト。"
    return:
      type: System.Threading.Tasks.Task
      description: "操作への参照。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは、以前に廃棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが中止された状態にします。       または、送信側の操作は利用できません。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  id: CloseStatus
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "その理由を示すステータス コードを取得、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが閉じられました。"
  syntax:
    content: public override Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "ステータス コード。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseStatus*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは、以前に廃棄されています。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "その理由を説明するステータス メッセージを取得、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが閉じられました。"
  syntax:
    content: public override string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "ステータス メッセージ。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは、以前に廃棄されています。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose
  id: Dispose
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: AspNetWebSocket.Dispose()
  fullName: System.Web.WebSockets.AspNetWebSocket.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "によって使用されるすべてのリソースを解放する<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>オブジェクト。"
  remarks: "ASP.NET は自動的の Dispose メソッドを呼び出し、<xref:System.Web.WebSockets.AspNetWebSocket>まま、コードが完了した後に実行されているリソースを解放するオブジェクト</xref:System.Web.WebSockets.AspNetWebSocket>。"
  syntax:
    content: public override void Dispose ();
    parameters: []
  overload: System.Web.WebSockets.AspNetWebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "リモート クライアントから&1; つのメッセージ フラグメントを受信します。"
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "メッセージ データを格納する配列。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "保留中の操作をキャンセルするオブジェクト。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "メッセージを受信するタスクへの参照。"
  overload: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが以前に廃棄されています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが中止された状態にします。       - または - 受信操作は利用できません。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "1 つのメッセージ フラグメントをリモート クライアントに送信します。"
  syntax:
    content: public override System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "メッセージ データを格納する配列。"
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "メッセージの型。"
    - id: endOfMessage
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>フラグメントが完全なメッセージの最後であることを示しますそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "保留中の操作をキャンセルするオブジェクト。"
    return:
      type: System.Threading.Tasks.Task
      description: "メッセージを送信するタスクへの参照。"
  overload: System.Web.WebSockets.AspNetWebSocket.SendAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトを破棄します。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクトが中止された状態にします。       または、送信側の操作は利用できません。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.State
  id: State
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: State
  nameWithType: AspNetWebSocket.State
  fullName: System.Web.WebSockets.AspNetWebSocket.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "オープンかクローズ状態を示す値を取得、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>オブジェクト。"
  syntax:
    content: public override System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "現在の状態。"
  overload: System.Web.WebSockets.AspNetWebSocket.State*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは、以前に廃棄されています。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  id: SubProtocol
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
  fullName: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "リモート クライアントとサーバーを使用して経由でデータを交換するアプリケーション固有のプロトコルの名前を取得、 <xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>接続します。"
  syntax:
    content: public override string SubProtocol { get; }
    return:
      type: System.String
      description: "プロトコルの名前です。"
  overload: System.Web.WebSockets.AspNetWebSocket.SubProtocol*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "オブジェクトは、以前に廃棄されています。"
  platform:
  - net462
references:
- uid: System.Net.WebSockets.WebSocket
  isExternal: false
  name: System.Net.WebSockets.WebSocket
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.WebSockets.AspNetWebSocket.Abort
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Abort()
  nameWithType: AspNetWebSocket.Abort()
  fullName: System.Web.WebSockets.AspNetWebSocket.Abort()
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Dispose()
  nameWithType: AspNetWebSocket.Dispose()
  fullName: System.Web.WebSockets.AspNetWebSocket.Dispose()
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.WebSockets.AspNetWebSocket.State
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: State
  nameWithType: AspNetWebSocket.State
  fullName: System.Web.WebSockets.AspNetWebSocket.State
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
  fullName: System.Web.WebSockets.AspNetWebSocket.SubProtocol
- uid: System.Web.WebSockets.AspNetWebSocket.Abort*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Abort
  nameWithType: AspNetWebSocket.Abort
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: AspNetWebSocket.CloseAsync
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: AspNetWebSocket.CloseOutputAsync
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Dispose
  nameWithType: AspNetWebSocket.Dispose
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: AspNetWebSocket.ReceiveAsync
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SendAsync
  nameWithType: AspNetWebSocket.SendAsync
- uid: System.Web.WebSockets.AspNetWebSocket.State*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: State
  nameWithType: AspNetWebSocket.State
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
