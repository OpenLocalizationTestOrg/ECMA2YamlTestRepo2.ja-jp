### YamlMime:ManagedReference
items:
- uid: System.Threading.RegisteredWaitHandle
  id: RegisteredWaitHandle
  children:
  - System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)
  langs:
  - csharp
  name: RegisteredWaitHandle
  nameWithType: RegisteredWaitHandle
  fullName: System.Threading.RegisteredWaitHandle
  type: Class
  summary: "<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>。</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>を呼び出すときに登録されているハンドルを表します このクラスは継承できません。"
  remarks: ''
  example:
  - "The following example shows how to use a RegisteredWaitHandle to determine why a callback method is called, and how to unregister a task if the callback occurred because the wait handle was signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The RegisteredWaitHandle that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the RegisteredWaitHandle.  \n  \n In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked. The `WaitProc` method tests RegisteredWaitHandle to determine whether a time-out occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the RegisteredWaitHandle, stopping additional callbacks. In the case of a time-out, the task continues to wait. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.regis_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.regis_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.regis_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RegisteredWaitHandle : MarshalByRefObject
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)
  id: Unregister(System.Threading.WaitHandle)
  parent: System.Threading.RegisteredWaitHandle
  langs:
  - csharp
  name: Unregister(WaitHandle)
  nameWithType: RegisteredWaitHandle.Unregister(WaitHandle)
  fullName: System.Threading.RegisteredWaitHandle.Unregister(WaitHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "によって発行された登録済みの待機操作をキャンセル、<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>メソッド</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject*>。"
  remarks: "場合`waitObject`を指定すると、通知を受ける場合にのみ、<xref:System.Threading.RegisteredWaitHandle>が正常に登録されていない</xref:System.Threading.RegisteredWaitHandle>。 コールバック メソッドが登録解除を実行するときに進行中の場合`waitObject`コールバック メソッドが完了するまでは通知されません。 特に、コールバック メソッドには、登録解除が実行される場合`waitObject`そのコールバック メソッドが完了するまでは通知されません。"
  example:
  - "The following example shows how to use the Unregister method to unregister a task if a callback occurred because the wait handle was signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks. In the case of a time-out, the task continues to wait. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/m-system.threading.regis_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/m-system.threading.regis_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/m-system.threading.regis_1.vb)]"
  syntax:
    content: public bool Unregister (System.Threading.WaitHandle waitObject);
    parameters:
    - id: waitObject
      type: System.Threading.WaitHandle
      description: "<xref:System.Threading.WaitHandle>シグナル状態になる</xref:System.Threading.WaitHandle>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>関数が成功した場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Threading.RegisteredWaitHandle.Unregister*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)
  parent: System.Threading.RegisteredWaitHandle
  isExternal: false
  name: Unregister(WaitHandle)
  nameWithType: RegisteredWaitHandle.Unregister(WaitHandle)
  fullName: System.Threading.RegisteredWaitHandle.Unregister(WaitHandle)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Threading.RegisteredWaitHandle.Unregister*
  parent: System.Threading.RegisteredWaitHandle
  isExternal: false
  name: Unregister
  nameWithType: RegisteredWaitHandle.Unregister
