### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "コンシューマーとの接続を作成するプロバイダーとして機能するサーバー コントロールを有効にする接続ポイント オブジェクトを定義します。"
  remarks: "すべての Web パーツには、2 つのサーバー コントロールの間の接続が、各コントロールは、その他のコントロールへの接続および指定するか、コントロールがプロバイダーまたは接続のコンシューマーとして指定されているかどうかに応じて、データを使用することを有効にするに関連付けられた接続ポイント オブジェクト (その他の要件) が必要です。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトには一般に、コントロールが別のコントロールおよびと共有できるデータの種類に接続できる方法の詳細が含まれています</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>。 接続のプロバイダーとして機能するコントロール、その接続ポイントは ProviderConnectionPoint オブジェクトである必要があります。 Web パーツの接続および接続ポイントの詳細については、「参照」セクションのトピックを参照してください。       ProviderConnectionPoint オブジェクトを作成するにはいくつかの手順が必要: 1。  インターフェイスを作成します。 ときにコンシューマーとプロバイダーの共有データ、それは、インターフェイスのインスタンスを取得し、コンシューマーにそのインスタンスを返すことで。      2.  プロバイダーのインターフェイスを実装します。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>またはその他のサーバー コントロール (任意の型でのサーバー コントロールの<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンを使用できます)、プロバイダーは、最初の手順で作成したインターフェイスを実装する必要がありますになります</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase></xref:System.Web.UI.WebControls.WebParts.WebPart>。      3.  コールバック メソッドを識別します。 プロバイダーのメソッドは、接続を確立するために、コールバック メソッドとして識別される必要があります。 このメソッドは、コンシューマーに実装されたインターフェイスのインスタンスを返します。 プロバイダーのコールバック メソッドを識別するための Web パーツ方法は、追加する、`ConnectionProvider`メタデータの属性 (によって定義された、<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>クラス) インターフェイスのインスタンスを返すメソッド</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>。 属性が追加されると、唯一必須のパラメーターは、プロバイダー接続ポイントを使用する表示名です。 省略可能なパラメーター追加することも、接続ポイントの ID などです。       プロバイダーとして機能するコントロールを備えたされましたが、コントロール (装備され使用可能なコンシューマーのコントロールが同様があると仮定) 接続に参加できます。 Web ページのマークアップで、宣言型の静的な接続を作成する開発者が使用して、`<asp:webpartconnection>`要素。 場合、`ConnectionProvider`コールバック メソッドを識別するプロバイダーのソース コード内の属性は、接続ポイントの ID を指定し、その値を割り当てる必要があります、`ProviderConnectionPointID`属性、`<asp:webpartconnection>`ページの要素。 開発者がプロバイダー接続ポイントの ID を指定する&1; つの理由は、プロバイダーのコントロールに複数の接続ポイントがあるかどうかです。 割り当てられる値がない場合は、ID プロバイダーのコントロールでのプロバイダー接続ポイントが指定されていない、`ProviderConnectionPointID`から取得した既定値を使用して、接続が作成するため、ページで、属性、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>フィールド</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。       コードで接続を作成する開発者は、呼び出すことによって新しい ProviderConnectionPoint オブジェクトを作成する必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>メソッドの ID またはインデックス プロバイダー コントロールに ProviderConnectionPoint オブジェクトの定義と共に、プロバイダー コントロールの ID を渡すします</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>。 ProviderConnectionPoint の返されたオブジェクトで、プロバイダー コントロールへの参照を対応するコンシューマー コントロールへの参照と共に<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトでは、すべてに渡される、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを作成、新しい<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartConnection></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。       開発者は、宣言またはプログラムによって、接続を確立するための一部として、プロバイダー接続ポイントを使用できますが、ユーザーも、ユーザー インターフェイス (UI) 経由の接続を確立するためにプロバイダー接続ポイントと対話できます。 開発者は、宣言する場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、Web ページ上ユーザー接続を作成するためのランタイムの UI を提供します</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>。 ユーザーをクリックして接続を確立するための出発点として、コンシューマーのコントロールを選択する場合、connect 動詞 (プロバイダーを選択することも以外の場合は、結果として得られる接続に違いはありません)、使用可能なプロバイダー接続ポイント (またはポイントが複数の場合) の表示名のドロップダウン リスト コントロールが UI に表示されます。 ユーザーは、接続を作成するプロバイダー接続ポイントを選択する必要があります。       ProviderConnectionPoint オブジェクトは、特定のプロバイダーのコントロールを直接関連付けます、基本<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>から継承プロパティでは、接続の詳細を格納 たとえばでは、継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>プロパティ、プロバイダー接続ポイントは、プロバイダーによって返されるインターフェイスの型を保持します</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>。 場合は、プロバイダーとの接続を同じ作業両方のコンシューマー インターフェイスの型をコントロールは互換性のあるおよび直接接続を形成することです。 互換性がありませんし、使用する必要があります、プロバイダーとコンシューマーは、同じインターフェイス型を扱うことはできない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>プロバイダー接続ポイントの翻訳をオブジェクト<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>、コンシューマーが使用できる型に値</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A></xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。 他の重要な継承されたプロパティは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>をユーザーが、プロバイダー接続を選択するための UI に表示するフレンドリ名を提供するプロパティが接続を作成するときにポイントします</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>。 開発者を追加するときに、表示名は必須のパラメーター、`ConnectionProvider`属性をプロバイダーのコントロールのコールバック メソッド。 継承された<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>プロパティは上に示されて、プロバイダーが複数の接続ポイントを持つことのプロバイダー接続ポイントの一意識別子を提供するために便利です</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>。 プロバイダーとに定義された、この場合は、開発者は、追加時に複数の ProviderConnectionPoint オブジェクトを持つことができます、`ConnectionProvider`属性、メソッドに各接続ポイントを区別するために ID 値を指定する必要があります。 その他の注目すべき継承されたプロパティは&1; つは、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>プロパティで、プロバイダー接続ポイントが複数のコンシューマーに同時に接続できるかどうかを示します</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>。 このプロパティの値が`true`既定では、プロバイダー接続ポイント (既定値は一方`false`コンシューマー接続ポイントの)。       ProviderConnectionPoint クラス固有のいくつかのメソッドを追加する<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>クラス</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>から継承してメンバーに <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、コールバック メソッドをコンシューマーに返すインターフェイスのインスタンスを取得します</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>メソッドを既存の接続の一部である追加の消費者のインターフェイスを取得しますが、インターフェイスではない接続を確立するために使用します</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>。"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref>クラスです。"
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラスは、基底コンス トラクター、さまざまなパラメーターを渡すと、基本クラスの初期化を呼び出すだけ</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>の ProviderConnectionPoint コンス トラクター       基本クラス コンス トラクターでは、接続ポイントのパラメーターの数を確認し、いくつかの例外をスローすることができます。 可能性のある例外の一覧は、例外を参照してください。       <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>クラス</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>のインスタンスを作成する、ProviderConnectionPoint コンス トラクターを呼び出すことができます。 ただし、しているだけで接続を確立して、クラスを拡張しない場合を呼び出す必要があります、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>プロバイダーから既存の接続ポイント オブジェクトを返すメソッド</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>。"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "インターフェイス インスタンスが接続を確立するコンシューマーに返されますプロバイダー コントロールのメソッドです。"
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>のプロバイダーがコンシューマーに提供するインターフェイス</xref:System.Type>。"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>プロバイダー接続ポイントが関連付けられているプロバイダーのコントロールの</xref:System.Type>。"
    - id: displayName
      type: System.String
      description: "接続のユーザー インターフェイス (UI) のユーザーに表示されるプロバイダー接続ポイントの表示名。"
    - id: id
      type: System.String
      description: "プロバイダー接続ポイントの一意の識別子。"
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "プロバイダー接続ポイントに同時に複数のコンシューマーに接続できるかどうかを示すブール値。"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>プロバイダーのコントロールと同じ型ではありません (または、有効なクラスがそこから派生)。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "コンシューマーに返すインターフェイス インスタンスを取得するプロバイダー コントロールのコールバック メソッドを呼び出します。"
  remarks: "このメソッドは、接続を確立するために使用されるインターフェイスのインスタンスは、プロバイダー管理からオブジェクトを返します。 オブジェクトの型は、実装されたインターフェイスの型になります。 たとえば、2 つのインターフェイス、Web パーツ コントロール セット内の接続<xref:System.Web.UI.WebControls.WebParts.IWebPartField>と<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>。</xref:System.Web.UI.WebControls.WebParts.IWebPartRow></xref:System.Web.UI.WebControls.WebParts.IWebPartField>に実装されています。 GetObject メソッドが呼び出されたとき、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、同じ型、返されたオブジェクトである場合は、関連付けられているプロバイダーでは、これらのインターフェイスの&1; つを実装して、.</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       GetObject メソッドによって呼び出されます<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトの接続をアクティブ化時にします</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>。 これは、実際には、接続を開始し、2 つのコントロールでデータを共有できるようにするプロセスを開始する重要な手順です。       接続のコンシューマー コントロールは、プロバイダーと同じ型のインターフェイスを使用できる必要があります。 コントロールとの互換性がない場合は、および<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトは、接続を確立するために使用する必要があります</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Web パーツ接続においてプロバイダーとして機能するコントロール。"
    return:
      type: System.Object
      description: "<xref:System.Object>は接続を確立するコンシューマーにインターフェイスをプロバイダーのインスタンスを返します</xref:System.Object>。"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "プロバイダー接続ポイントでサポートできるセカンダリ インターフェイスの省略可能なコレクションを取得します。"
  remarks: "プロバイダー接続ポイント オブジェクトは、常にコンシューマーとの接続を確立するために使用される既定のインターフェイスを持ちます。 既定のインターフェイスのインスタンスを呼び出すことによって取得、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>。       ただし、一部のプロバイダー コントロールは、接続の一環として、コンシューマーに提供する複数のインターフェイスを実装します。 これらのインターフェイスでは、既定の接続を確立するために使用するものではないは、セカンダリ インターフェイスと呼ばれます。 GetSecondaryInterfaces メソッドと同様に、セカンダリ インターフェイスへの参照のコレクションを取得する方法を提供する、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>メソッドは、既定のインターフェイスへの参照を返します</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>。"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Web パーツ接続においてプロバイダーとして機能するコントロール。"
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref>プロバイダーとして機能するコントロールによって提供される追加のインターフェイスです。"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
