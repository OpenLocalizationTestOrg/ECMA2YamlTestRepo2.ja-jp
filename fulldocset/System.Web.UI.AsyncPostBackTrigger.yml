### YamlMime:ManagedReference
items:
- uid: System.Web.UI.AsyncPostBackTrigger
  id: AsyncPostBackTrigger
  children:
  - System.Web.UI.AsyncPostBackTrigger.#ctor
  - System.Web.UI.AsyncPostBackTrigger.ControlID
  - System.Web.UI.AsyncPostBackTrigger.EventName
  - System.Web.UI.AsyncPostBackTrigger.HasTriggered
  - System.Web.UI.AsyncPostBackTrigger.Initialize
  - System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  - System.Web.UI.AsyncPostBackTrigger.ToString
  langs:
  - csharp
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger
  fullName: System.Web.UI.AsyncPostBackTrigger
  type: Class
  summary: "コントロールとコントロールの省略可能なイベントの原因となる非同期ポストバック コントロール トリガーとして定義する、 <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref>コントロールを更新します。"
  remarks: "コントロールのトリガーを有効にする、AsyncPostBackTrigger コントロールを使用して、<xref:System.Web.UI.UpdatePanel>コントロール</xref:System.Web.UI.UpdatePanel>。 更新パネル用のトリガーであるコントロールでは、非同期ポストバック後に、パネルのコンテンツの更新を発生させます。 非同期トリガー コントロールを定義することは、次のシナリオで役に立ちます: コントロール パネルの外側にあるのです。      コントロール パネル内にあるときに、<xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>プロパティは`false`</xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>。      -に対して親パネルを更新するために、入れ子になったパネル内にあるコントロールです。       AsyncPostBackTrigger コントロールから参照されるコントロールは、そのトリガーは、更新パネルと同じ名前付けコンテナーでなければなりません。 他の名前付けコンテナー コントロールに基づいているトリガーはサポートされていません。       AsyncPostBackTrigger コントロールを使用していずれかの追加、 **UpdatePanelTrigger コレクション エディター**  ダイアログ ボックスのデザイナーで、または作成することで、`Triggers`要素で宣言によって、<xref:System.Web.UI.UpdatePanel>コントロール</xref:System.Web.UI.UpdatePanel>。 <xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A>プロパティが必要ですが、<xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>プロパティは省略可能</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A></xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A>。 場合、<xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>プロパティが指定されていない、<xref:System.ComponentModel.DefaultEventAttribute>コントロールの属性は既定のイベントの確認に使用します</xref:System.ComponentModel.DefaultEventAttribute></xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>。 たとえば、既定のイベントを<xref:System.Web.UI.WebControls.Button>コントロールは、<xref:System.Web.UI.WebControls.Button.Click>イベント</xref:System.Web.UI.WebControls.Button.Click></xref:System.Web.UI.WebControls.Button>。 <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>プロパティ小文字は区別されません</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>。       名前付けコンテナーは、トリガーとして参照することもできます。 その場合は、コンテナー内のポストバックを発生させるすべての子コントロールと見なされますのトリガー、<xref:System.Web.UI.UpdatePanel>コントロール</xref:System.Web.UI.UpdatePanel>。       AsyncPostBackTrigger コントロールをプログラムで追加することはサポートされていません。 ポストバック コントロールをプログラムで登録するを使用して、<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>のメソッド、<xref:System.Web.UI.ScriptManager>コントロール</xref:System.Web.UI.ScriptManager></xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>。 まず、<xref:System.Web.UI.UpdatePanel.Update%2A>のメソッド、<xref:System.Web.UI.UpdatePanel>ときに、コントロールがポストバックを制御します</xref:System.Web.UI.UpdatePanel></xref:System.Web.UI.UpdatePanel.Update%2A>。       両方を使用してコントロールを定義する場合<xref:System.Web.UI.PostBackTrigger>AsyncPostBackTrigger、例外がスローされます</xref:System.Web.UI.PostBackTrigger>。"
  example:
  - "The following example shows how to add an AsyncPostBackTrigger control declaratively. A <xref:System.Web.UI.WebControls.Button> control that is outside an <xref:System.Web.UI.UpdatePanel> control lets users enter a search term to find in the `Products` table of the Northwind database. A <xref:System.Web.UI.WebControls.GridView> control that is inside the <xref:System.Web.UI.UpdatePanel> control shows the results. The <xref:System.Web.UI.WebControls.Button> control is specified as an asynchronous trigger for the <xref:System.Web.UI.UpdatePanel> control.  \n  \n [!code-vb[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/visualbasic/t-system.web.ui.asyncpos_1.aspx)]\n [!code-cs[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/csharp/t-system.web.ui.asyncpos_1.aspx)]"
  syntax:
    content: 'public class AsyncPostBackTrigger : System.Web.UI.UpdatePanelControlTrigger'
  inheritance:
  - System.Object
  - System.Web.UI.UpdatePanelTrigger
  - System.Web.UI.UpdatePanelControlTrigger
  implements: []
  inheritedMembers:
  - System.Web.UI.UpdatePanelControlTrigger.FindTargetControl(System.Boolean)
  - System.Web.UI.UpdatePanelTrigger.Owner
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  id: '#ctor'
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref>クラスです。"
  remarks: "追加<xref:System.Web.UI.AsyncPostBackTrigger>を使用していずれかを制御、 **UpdatePanelTrigger コレクション エディター**  ダイアログ ボックスのデザイナーで、または作成することで、`Triggers`要素で宣言によって、<xref:System.Web.UI.UpdatePanel>コントロール</xref:System.Web.UI.UpdatePanel></xref:System.Web.UI.AsyncPostBackTrigger>。       追加<xref:System.Web.UI.AsyncPostBackTrigger>コントロール プログラムではサポートされていません</xref:System.Web.UI.AsyncPostBackTrigger>。"
  syntax:
    content: public AsyncPostBackTrigger ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  id: ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "取得または設定を非同期ポストバックをトリガーするコントロールの名前、 <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref>コントロール。"
  syntax:
    content: public string ControlID { get; set; }
    return:
      type: System.String
      description: "サーバー コントロールの id。"
  overload: System.Web.UI.AsyncPostBackTrigger.ControlID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  id: EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "取得または設定のポストバック コントロール イベントをトリガーする、 <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref>コントロールを更新します。"
  remarks: "EventName プロパティはオプションです。 指定されていない場合、<xref:System.ComponentModel.DefaultEventAttribute>コントロールの属性は既定のイベントの確認に使用します</xref:System.ComponentModel.DefaultEventAttribute>。 次の表には、いくつかの一般的な ASP.NET 2.0 コントロールの既定のイベントが一覧表示します。      |コントロール |既定のイベント |  |-------------|-------------------|  |<xref:System.Web.UI.WebControls.Button>|<xref:System.Web.UI.WebControls.Button.Click>|  |<xref:System.Web.UI.WebControls.Calendar>|<xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|  |<xref:System.Web.UI.WebControls.CheckBox>|<xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|  |<xref:System.Web.UI.WebControls.GridView>|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|  |<xref:System.Web.UI.WebControls.TextBox>|<xref:System.Web.UI.WebControls.TextBox.TextChanged>|</xref:System.Web.UI.WebControls.TextBox.TextChanged></xref:System.Web.UI.WebControls.TextBox></xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged></xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.CheckBox.CheckedChanged></xref:System.Web.UI.WebControls.CheckBox></xref:System.Web.UI.WebControls.Calendar.SelectionChanged></xref:System.Web.UI.WebControls.Calendar></xref:System.Web.UI.WebControls.Button.Click></xref:System.Web.UI.WebControls.Button>"
  syntax:
    content: public string EventName { get; set; }
    return:
      type: System.String
      description: "イベント名。 既定値は<xref:System.String>。</xref:System.String>"
  overload: System.Web.UI.AsyncPostBackTrigger.EventName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  id: HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "トリガーが呼び出されるかどうかを示す値を返します。"
  remarks: "コントロールの開発者は、トリガーが呼び出されたかどうかを決定するためのカスタム ロジックを提供する HasTriggered メソッドをオーバーライドできます。 カスタムのトリガーを確認する、`Triggers`の要素、<xref:System.Web.UI.UpdatePanel>コントロール、ページまたは Web.config ファイルの要素には、ディレクティブを追加できます</xref:System.Web.UI.UpdatePanel>。"
  syntax:
    content: protected override bool HasTriggered ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、トリガーが呼び出されました。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  id: Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "初期化、 <xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;> </xref>を制御し、トリガーで指定されているイベントが存在し、有効かどうかを決定します。"
  syntax:
    content: protected override void Initialize ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.Initialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No <xref href=\"System.Web.UI.ScriptManager\"></xref> control was found on the page.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property is not found for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property does not match a standard event handler signature."
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  id: OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "ポストバックおよびの更新をトリガーするイベントを発生させる、 <xref href=&quot;System.Web.UI.UpdatePanel&quot;> </xref>コントロール。"
  syntax:
    content: public void OnEvent (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "イベントの送信元です。"
    - id: e
      type: System.EventArgs
      description: "イベントのデータ。"
  overload: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  id: ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "現在の文字列表現を返します<xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;></xref>コントロール。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "現在を表す文字列<xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;></xref>コントロール。"
  overload: System.Web.UI.AsyncPostBackTrigger.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.UpdatePanelControlTrigger
  isExternal: false
  name: System.Web.UI.UpdatePanelControlTrigger
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
- uid: System.Web.UI.AsyncPostBackTrigger.EventName*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered
  nameWithType: AsyncPostBackTrigger.HasTriggered
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize
  nameWithType: AsyncPostBackTrigger.Initialize
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent
  nameWithType: AsyncPostBackTrigger.OnEvent
- uid: System.Web.UI.AsyncPostBackTrigger.ToString*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString
  nameWithType: AsyncPostBackTrigger.ToString
