### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlSchemaContext
  id: XamlSchemaContext
  children:
  - System.Xaml.XamlSchemaContext.#ctor
  - System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  - System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  - System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  - System.Xaml.XamlSchemaContext.Finalize
  - System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  - System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  - System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  - System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  - System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  - System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  - System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  - System.Xaml.XamlSchemaContext.ReferenceAssemblies
  - System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  - System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  langs:
  - csharp
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
  type: Class
  summary: "解釈または XAML 型、およびそれらの基になるアセンブリの種類のマッピングの再利用可能なコンテキストを定義します。"
  remarks: "XAML スキーマ コンテキストでは、スキーマまたは xaml でボキャブラリと特定のパーサー実装間で抽象化レイヤーを提供します。 スキーマ コンテキストの概念を挿入してスキーマを別の XAML パーサーで使用できるし、スキーマ コンテキストを特定の XAML パーサーと対話するために必要な詳細を入力します。 たとえば、XAML スキーマ コンテキストは、クエリと CLR バインディングを指定し、XAML 型システムまたは XAML の概念に関連する Api を提供します。 XAML スキーマ コンテキストは、バッキング型の XAML パーサーを検索する場所を定義する、読み込まれたアセンブリのアセンブリ リストを保守管理を担当もできます。"
  syntax:
    content: public class XamlSchemaContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext()
  nameWithType: XamlSchemaContext.XamlSchemaContext()
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>クラスです。"
  syntax:
    content: public XamlSchemaContext ();
    parameters: []
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(IEnumerable<Assembly>)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>参照アセンブリのセットに基づくクラスです。"
  syntax:
    content: public XamlSchemaContext (System.Collections.Generic.IEnumerable<System.Reflection.Assembly> referenceAssemblies);
    parameters:
    - id: referenceAssemblies
      type: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
      description: "アセンブリ情報項目の列挙可能なセット。 各アセンブリの情報項目がで指定された、<xref:System.Reflection.Assembly>値</xref:System.Reflection.Assembly>。"
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  id: '#ctor(System.Xaml.XamlSchemaContextSettings)'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>設定オブジェクトに基づくクラスです。"
  remarks: "設定オブジェクトは、コンバーターとスキーマ コンテキストのマークアップ拡張機能の詳細に関する情報を格納します。 詳細については、 <xref:System.Xaml.XamlSchemaContextSettings>。</xref:System.Xaml.XamlSchemaContextSettings>を参照してください。"
  syntax:
    content: public XamlSchemaContext (System.Xaml.XamlSchemaContextSettings settings);
    parameters:
    - id: settings
      type: System.Xaml.XamlSchemaContextSettings
      description: "設定オブジェクトを構築するために使用する、 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>です。"
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>クラス、参照アセンブリおよび設定オブジェクトのセットを基にします。"
  syntax:
    content: public XamlSchemaContext (System.Collections.Generic.IEnumerable<System.Reflection.Assembly> referenceAssemblies, System.Xaml.XamlSchemaContextSettings settings);
    parameters:
    - id: referenceAssemblies
      type: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
      description: "アセンブリ情報の列挙可能なセット。 各アセンブリの情報項目がで指定された、<xref:System.Reflection.Assembly>値</xref:System.Reflection.Assembly>。"
    - id: settings
      type: System.Xaml.XamlSchemaContextSettings
      description: "設定オブジェクトを構築するために使用する、 <xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>です。"
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.Finalize
  id: Finalize
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: Finalize()
  nameWithType: XamlSchemaContext.Finalize()
  fullName: System.Xaml.XamlSchemaContext.Finalize()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "非標準<xref uid=&quot;langword_csharp_Finalize&quot; name=&quot;Finalize&quot; href=&quot;&quot;></xref>呼び出しません実装<xref uid=&quot;langword_csharp_Dispose&quot; name=&quot;Dispose&quot; href=&quot;&quot;></xref>です。"
  remarks: "自動ガベージ コレクションによって、または手動操作によって、XAML スキーマ コンテキストを破棄されなければなりません。 XAML スキーマ コンテキストには、アンマネージ リソースがない<xref:System.Windows.Markup.XamlDeferLoadAttribute>プロパティがアクティブである可能性があり、関連する遅延読み込み操作に干渉することができますな XAML スキーマ コンテキストを破棄します</xref:System.Windows.Markup.XamlDeferLoadAttribute>。       <xref:System.AppDomain.AssemblyLoad>弱い参照として内部的に接続されている、イベント ハンドラーは、この実装でクリーンアップされます。</xref:System.AppDomain.AssemblyLoad>"
  syntax:
    content: ~XamlSchemaContext ();
    parameters: []
  overload: System.Xaml.XamlSchemaContext.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  id: FullyQualifyAssemblyNamesInClrNamespaces
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  fullName: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "XAML スキーマとそのコンテキストが検索 API によって返される値に完全修飾アセンブリ名を使用するかどうかを指定する値を取得します。"
  remarks: "このプロパティを返します、<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>値の設定で規定されている、<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>コンス トラクターのシグネチャ</xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29></xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>。 構築の他の署名に使用された場合、または場合<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>に特に設定されていない`true`、このプロパティの値が`false`</xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>。       このプロパティの値に影響を与えます<xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>。</xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>によって返される文字列 FullyQualifyAssemblyNamesInClrNamespaces 場合`true`、文字列のアセンブリ部分は報告<xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName>.</xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName>の該当するショートカットは、"
  syntax:
    content: public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>XAML スキーマとそのコンテキストは、完全修飾アセンブリ名を使用して、検索 Api; によって返される値の場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  id: GetAllXamlNamespaces
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetAllXamlNamespaces()
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces()
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "これによって保持されているアセンブリが検索<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>名前空間のセットを返します。"
  remarks: "このメソッドは、構築またはプロパティの設定を通じて渡される場合にのみ参照アセンブリを検索します。 このメソッドのロジックが読み込まれているすべてのアセンブリを調べ参照アセンブリとしてアセンブリが作成されていない場合、この<xref:System.Xaml.XamlSchemaContext>がアクティブです</xref:System.Xaml.XamlSchemaContext>。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<string> GetAllXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "名前空間の識別子の列挙可能なセット。 これらの識別子は、文字列として提供されます。"
  overload: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  id: GetAllXamlTypes(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetAllXamlTypes(String)
  nameWithType: XamlSchemaContext.GetAllXamlTypes(String)
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlTypes(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "これによって保持されているアセンブリが検索<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>し、指定の XAML 名前空間の型のセットを返します。"
  syntax:
    content: public virtual System.Collections.Generic.ICollection<System.Xaml.XamlType> GetAllXamlTypes (string xamlNamespace);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "型を返すに XAML 名前空間。"
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlType}
      description: "XAML の型の列挙可能なセット。 各 XAML 型で表される、 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>オブジェクト。"
  overload: System.Xaml.XamlSchemaContext.GetAllXamlTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  id: GetPreferredPrefix(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetPreferredPrefix(String)
  nameWithType: XamlSchemaContext.GetPreferredPrefix(String)
  fullName: System.Xaml.XamlSchemaContext.GetPreferredPrefix(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "指定した XAML 名前空間を割り当てるときに使用するコンシューマーにとって適切なプレフィックスとして報告されている文字列を取得します。"
  remarks: "情報の最もイミディ エイトのコンシューマーは、XAML ライターでは通常です。 その他の間接的なコンシューマーには、デザイン ツールが含まれます。       共通言語ランタイム (CLR) の XAML バインドの一部として、適用することでこの情報を指定できます<xref:System.Windows.Markup.XmlnsPrefixAttribute>アセンブリ レベルでします</xref:System.Windows.Markup.XmlnsPrefixAttribute>。"
  syntax:
    content: public virtual string GetPreferredPrefix (string xmlns);
    parameters:
    - id: xmlns
      type: System.String
      description: "適切なプレフィックスを取得する XAML 名前空間。"
    return:
      type: System.String
      description: "マークアップの指定の XAML 名前空間を割り当てるときにコンシューマーが使用する文字列を使用します。"
  overload: System.Xaml.XamlSchemaContext.GetPreferredPrefix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xmlns</code>null です。"
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  id: GetValueConverter``1(System.Type,System.Xaml.XamlType)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetValueConverter(Type,XamlType)
  nameWithType: XamlSchemaContext.GetValueConverter(Type,XamlType)
  fullName: System.Xaml.XamlSchemaContext.GetValueConverter(Type,XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  syntax:
    content: 'protected System.Xaml.Schema.XamlValueConverter<TConverterBase> GetValueConverter<TConverterBase> (Type converterType, System.Xaml.XamlType targetType) where TConverterBase : class;'
    parameters:
    - id: converterType
      type: System.Type
      description: "追加します。"
    - id: targetType
      type: System.Xaml.XamlType
      description: "追加します。"
    return:
      type: System.Xaml.Schema.XamlValueConverter`1
      description: "追加します。"
  overload: System.Xaml.XamlSchemaContext.GetValueConverter<TConverterBase>*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  id: GetXamlDirective(System.String,System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlDirective(String,String)
  nameWithType: XamlSchemaContext.GetXamlDirective(String,String)
  fullName: System.Xaml.XamlSchemaContext.GetXamlDirective(String,String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返します、 <xref href=&quot;System.Xaml.XamlDirective&quot;> </xref>ディレクティブ、XAML 言語用、または特定の実装を表す値です。"
  remarks: "派生クラスを作成する場合は、このメソッドをオーバーライド<xref:System.Xaml.XamlDirective>XAML 型システムの拡張シナリオの一部として</xref:System.Xaml.XamlDirective>。"
  syntax:
    content: public virtual System.Xaml.XamlDirective GetXamlDirective (string xamlNamespace, string name);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "名前付きのディレクティブを含む XAML 名前空間。"
    - id: name
      type: System.String
      description: "取得するディレクティブの名前。"
    return:
      type: System.Xaml.XamlDirective
      description: "A <xref href=&quot;System.Xaml.XamlDirective&quot;> </xref>要求されたディレクティブを表すオブジェクト。"
  overload: System.Xaml.XamlSchemaContext.GetXamlDirective*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlNamespace</code>or <code>name</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  id: GetXamlType(System.Type)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(Type)
  nameWithType: XamlSchemaContext.GetXamlType(Type)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(Type)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返します、 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> CLR 型の識別子に基づきます。"
  remarks: "このオーバー ロードでは、バッキング型システムの CLR を使用していることを前提としています。 CLR 型システムを使用していない場合は、 <xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>。</xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>を使用します。"
  syntax:
    content: public virtual System.Xaml.XamlType GetXamlType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "取得する型、 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>用です。"
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>入力に一致する<code> type</code>です。"
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  id: GetXamlType(System.Xaml.Schema.XamlTypeName)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(XamlTypeName)
  nameWithType: XamlSchemaContext.GetXamlType(XamlTypeName)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(XamlTypeName)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返します、 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML システム型の名前に基づきます。"
  syntax:
    content: public System.Xaml.XamlType GetXamlType (System.Xaml.Schema.XamlTypeName xamlTypeName);
    parameters:
    - id: xamlTypeName
      type: System.Xaml.Schema.XamlTypeName
      description: "XAML の型名を取得する、 <xref href=&quot;System.Xaml.XamlType&quot;> </xref>用です。"
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>入力に一致する<code> xamlTypeName</code>です。"
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A component of <code>xamlTypeName</code> (<>*> or <>*>) is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlTypeName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  id: GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(String,String,XamlType[])
  nameWithType: XamlSchemaContext.GetXamlType(String,String,XamlType[])
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(String,String,XamlType[])
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返します、 <xref href=&quot;System.Xaml.XamlType&quot;> </xref> XAML 名前空間と型の名前に文字列をベースです。 この署名は、目的の型がジェネリックの型である場合は型引数を指定できます。"
  syntax:
    content: protected virtual System.Xaml.XamlType GetXamlType (string xamlNamespace, string name, System.Xaml.XamlType[] typeArguments);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "目的の型を含む XAML 名前空間。"
    - id: name
      type: System.String
      description: "目的の型の文字列名。"
    - id: typeArguments
      type: System.Xaml.XamlType[]
      description: "ジェネリック型の初期化型の引数。"
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>入力条件に一致します。"
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  id: OnAssemblyResolve(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: OnAssemblyResolve(String)
  nameWithType: XamlSchemaContext.OnAssemblyResolve(String)
  fullName: System.Xaml.XamlSchemaContext.OnAssemblyResolve(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "操作が含まれている XAML 名前空間を解決するために必要なアセンブリを解決するのにはこのスキーマ コンテキストを使用するときに呼び出されます。"
  remarks: "内部 API には、基になるアセンブリの解決方法に基づいて、アセンブリ名の別の文字列形式の組み込みの公差があると、<xref:System.Reflection.AssemblyName>構築動作</xref:System.Reflection.AssemblyName>。       この API の目的は、グローバル アセンブリ キャッシュに対するの代わりに、参照アセンブリなど、アセンブリの既知のセットに対する初回の解決を有効にします。 参照アセンブリの一覧が表示される場合、既定の実装は、既知の参照アセンブリにアクセスできます。"
  syntax:
    content: protected virtual System.Reflection.Assembly OnAssemblyResolve (string assemblyName);
    parameters:
    - id: assemblyName
      type: System.String
      description: "読み込むアセンブリの名前。 「解説」を参照してください。"
    return:
      type: System.Reflection.Assembly
      description: "解決済みのアセンブリ。"
  overload: System.Xaml.XamlSchemaContext.OnAssemblyResolve*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  id: ReferenceAssemblies
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
  fullName: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "XAML スキーマ コンテキストの参照アセンブリの列挙可能なセットを取得します。"
  syntax:
    content: public System.Collections.Generic.IList<System.Reflection.Assembly> ReferenceAssemblies { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.Assembly}
      description: "スキーマ コンテキストの参照アセンブリの列挙可能なセット。 各アセンブリの情報項目がで指定された、<xref:System.Reflection.Assembly>値</xref:System.Reflection.Assembly>。"
  overload: System.Xaml.XamlSchemaContext.ReferenceAssemblies*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  id: SupportMarkupExtensionsWithDuplicateArity
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  fullName: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "XAML スキーマとそのコンテキストがアリティ (入力パラメーターの数) が同じ&2; つのコンス トラクターがあるマークアップ拡張機能をサポートするかどうかを指定する値を取得します。"
  remarks: "このプロパティを返します、<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>値の設定で規定されている、<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>コンス トラクターのシグネチャ</xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29></xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>。 作成するため他の署名が使用されている場合、または場合<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>に特に設定されていない`true`、このプロパティの値は`false`</xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>。       具体的には、マークアップ拡張機能の重複するアリティは XAML の仕様 [MS-XAML] セクション 6.6.7.2 で処理では対応できません。 これは、ため、XAML の情報項目、マークアップ拡張機能の構成は、マークアップ拡張機能の実装に存在する重複するアリティに関係なく同じです。 マークアップ拡張機能の実際の呼び出しだけと、その`ProvideValue`重複するアリティに関連する問題を公開します。 重複するアリティの処理の動作は未定義しは、最大で各実装の XAML スキーマ コンテキストと XAML ライターとの統合されません。 既定の XAML スキーマ コンテキスト .NET Framework XAML サービス操作に対して実装されるとは重複するアリティをサポートしていませんさまざまな .NET Framework XAML サービス Api には、基になる重複するアリティによるマークアップ拡張機能の使用を処理するときに例外がスローされます。       マークアップ拡張機能の定義の詳細については、次を参照してください。 [XAML の概要のマークアップ拡張機能](~/add/includes/ajax-current-ext-md.md)します。"
  syntax:
    content: public bool SupportMarkupExtensionsWithDuplicateArity { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>スキーマ コンテキストは、重複するアリティのマークアップ拡張機能を許可している場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  id: TryGetCompatibleXamlNamespace(System.String,System.String@)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: TryGetCompatibleXamlNamespace(String,String)
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  fullName: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "互換性のある XAML 名前空間の要求の成否を返します。 要求が成功した場合は、out パラメーターとしてその XAML 名前空間を報告します。"
  remarks: "このメソッドは内部的には、次の検索順序を使用する: 1。  内部的に実装された互換性ディクショナリ以前の検索で作成された可能性があります。      2.  <xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>パラメーター評価</xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>。       互換性のあるその他の名前空間が検出されないと、このメソッドが戻るかどうか`false`、`compatibleNamespace`パラメーターの出力と同じ値を持つ可能性があります、`xamlNamespace`入力します。"
  syntax:
    content: public virtual bool TryGetCompatibleXamlNamespace (string xamlNamespace, out string compatibleNamespace);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "<xref uid=&quot;langword_csharp_xmlns&quot; name=&quot;xmlns&quot; href=&quot;&quot;> </xref>互換性のある結果をチェックする XAML 名前空間の文字列。"
    - id: compatibleNamespace
      type: System.String
      description: "このメソッドが戻るとき、 <xref uid=&quot;langword_csharp_xmlns&quot; name=&quot;xmlns&quot; href=&quot;&quot;> </xref>互換性のある XAML 名前空間の要求の文字列。 これと同一である可能性があります`xamlNamespace`メソッドを返す場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<code> compatibleNamespace </code>使用可能な結果が含まれています。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlNamespace</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xaml.XamlSchemaContext.#ctor
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext()
  nameWithType: XamlSchemaContext.XamlSchemaContext()
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext()
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(IEnumerable<Assembly>)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Assembly>
  nameWithType: IEnumerable<Assembly>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
- uid: System.Xaml.XamlSchemaContextSettings
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContextSettings
  nameWithType: XamlSchemaContextSettings
  fullName: System.Xaml.XamlSchemaContextSettings
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
- uid: System.Xaml.XamlSchemaContext.Finalize
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: Finalize()
  nameWithType: XamlSchemaContext.Finalize()
  fullName: System.Xaml.XamlSchemaContext.Finalize()
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  fullName: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlNamespaces()
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces()
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces()
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlTypes(String)
  nameWithType: XamlSchemaContext.GetAllXamlTypes(String)
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlTypes(String)
- uid: System.Collections.Generic.ICollection{System.Xaml.XamlType}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XamlType>
  nameWithType: ICollection<XamlType>
  fullName: System.Collections.Generic.ICollection<System.Xaml.XamlType>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xaml.XamlType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetPreferredPrefix(String)
  nameWithType: XamlSchemaContext.GetPreferredPrefix(String)
  fullName: System.Xaml.XamlSchemaContext.GetPreferredPrefix(String)
- uid: System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetValueConverter(Type,XamlType)
  nameWithType: XamlSchemaContext.GetValueConverter(Type,XamlType)
  fullName: System.Xaml.XamlSchemaContext.GetValueConverter(Type,XamlType)
- uid: System.Xaml.Schema.XamlValueConverter`1
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TConverterBase>
  nameWithType: XamlValueConverter<TConverterBase>
  fullName: System.Xaml.Schema.XamlValueConverter<TConverterBase>
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlDirective(String,String)
  nameWithType: XamlSchemaContext.GetXamlDirective(String,String)
  fullName: System.Xaml.XamlSchemaContext.GetXamlDirective(String,String)
- uid: System.Xaml.XamlDirective
  parent: System.Xaml
  isExternal: false
  name: XamlDirective
  nameWithType: XamlDirective
  fullName: System.Xaml.XamlDirective
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(Type)
  nameWithType: XamlSchemaContext.GetXamlType(Type)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(Type)
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(XamlTypeName)
  nameWithType: XamlSchemaContext.GetXamlType(XamlTypeName)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(XamlTypeName)
- uid: System.Xaml.Schema.XamlTypeName
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeName
  nameWithType: XamlTypeName
  fullName: System.Xaml.Schema.XamlTypeName
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(String,String,XamlType[])
  nameWithType: XamlSchemaContext.GetXamlType(String,String,XamlType[])
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(String,String,XamlType[])
- uid: System.Xaml.XamlType[]
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType[]
  spec.csharp:
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: OnAssemblyResolve(String)
  nameWithType: XamlSchemaContext.OnAssemblyResolve(String)
  fullName: System.Xaml.XamlSchemaContext.OnAssemblyResolve(String)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
  fullName: System.Xaml.XamlSchemaContext.ReferenceAssemblies
- uid: System.Collections.Generic.IList{System.Reflection.Assembly}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<Assembly>
  nameWithType: IList<Assembly>
  fullName: System.Collections.Generic.IList<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  fullName: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: TryGetCompatibleXamlNamespace(String,String)
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  fullName: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
- uid: System.Xaml.XamlSchemaContext.#ctor*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext.XamlSchemaContext
- uid: System.Xaml.XamlSchemaContext.Finalize*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: Finalize
  nameWithType: XamlSchemaContext.Finalize
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlNamespaces
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlTypes
  nameWithType: XamlSchemaContext.GetAllXamlTypes
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetPreferredPrefix
  nameWithType: XamlSchemaContext.GetPreferredPrefix
- uid: System.Xaml.XamlSchemaContext.GetValueConverter<TConverterBase>*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetValueConverter<TConverterBase>
  nameWithType: XamlSchemaContext.GetValueConverter<TConverterBase>
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlDirective
  nameWithType: XamlSchemaContext.GetXamlDirective
- uid: System.Xaml.XamlSchemaContext.GetXamlType*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType
  nameWithType: XamlSchemaContext.GetXamlType
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: OnAssemblyResolve
  nameWithType: XamlSchemaContext.OnAssemblyResolve
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: TryGetCompatibleXamlNamespace
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace
