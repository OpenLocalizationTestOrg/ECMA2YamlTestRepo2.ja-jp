### YamlMime:ManagedReference
items:
- uid: System.IO.Log.LogRecord
  id: LogRecord
  children:
  - System.IO.Log.LogRecord.#ctor
  - System.IO.Log.LogRecord.Data
  - System.IO.Log.LogRecord.Dispose
  - System.IO.Log.LogRecord.Previous
  - System.IO.Log.LogRecord.SequenceNumber
  - System.IO.Log.LogRecord.User
  langs:
  - csharp
  name: LogRecord
  nameWithType: LogRecord
  fullName: System.IO.Log.LogRecord
  type: Class
  summary: "シーケンスに追加されていないログ レコードを表します。"
  syntax:
    content: 'public abstract class LogRecord : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.#ctor
  id: '#ctor'
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: LogRecord()
  nameWithType: LogRecord.LogRecord()
  fullName: System.IO.Log.LogRecord.LogRecord()
  type: Constructor
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Log.LogRecord&quot;> </xref>クラスです。"
  syntax:
    content: protected LogRecord ();
    parameters: []
  overload: System.IO.Log.LogRecord.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.Data
  id: Data
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: Data
  nameWithType: LogRecord.Data
  fullName: System.IO.Log.LogRecord.Data
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、レコード データを格納しているストリームを取得します。"
  syntax:
    content: public abstract System.IO.Stream Data { get; }
    return:
      type: System.IO.Stream
      description: "レコード データを格納するストリーム。"
  overload: System.IO.Log.LogRecord.Data*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.IO.Log.LogRecord&quot;> </xref>破棄されています。"
  platform:
  - net462
- uid: System.IO.Log.LogRecord.Dispose
  id: Dispose
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: Dispose()
  nameWithType: LogRecord.Dispose()
  fullName: System.IO.Log.LogRecord.Dispose()
  type: Method
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.IO.Log.LogRecord&quot;></xref>です。"
  remarks: "使用が終了するときに、このメソッドを呼び出す必要があります、<xref:System.IO.Log.LogRecord>インスタンス</xref:System.IO.Log.LogRecord>。 Dispose メソッドは、<xref:System.IO.Log.LogRecord>使用不可の状態のインスタンス</xref:System.IO.Log.LogRecord>。 このメソッドを呼び出した後は、すべての参照を解放する必要があります、<xref:System.IO.Log.LogRecord>インスタンス、ガベージ コレクターがメモリを再利用できるようにする、<xref:System.IO.Log.LogRecord>インスタンスが使用していた</xref:System.IO.Log.LogRecord></xref:System.IO.Log.LogRecord>。      > [!NOTE] > 常に呼び出しへの参照を解放する前に、Dispose、<xref:System.IO.Log.LogRecord>インスタンス</xref:System.IO.Log.LogRecord>。 ガベージ コレクターの呼び出しまで、使用されているリソースを解放できませんそれ以外の場合、<xref:System.IO.Log.LogRecord>インスタンスの`Finalize`メソッド</xref:System.IO.Log.LogRecord>。"
  syntax:
    content: public abstract void Dispose ();
    parameters: []
  overload: System.IO.Log.LogRecord.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.Previous
  id: Previous
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: Previous
  nameWithType: LogRecord.Previous
  fullName: System.IO.Log.LogRecord.Previous
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、前のレコードのシーケンス番号を取得します。"
  remarks: "このプロパティの値として提供されたシーケンス番号、`previousUndoRecord`内のパラメーター、<xref:System.IO.Log.IRecordSequence.Append%2A>メソッド</xref:System.IO.Log.IRecordSequence.Append%2A>。 別に、列挙体で使用するこのシーケンス番号は不明確なものとして、レコード シーケンスにより処理します。"
  syntax:
    content: public abstract System.IO.Log.SequenceNumber Previous { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "前のレコードのシーケンス番号。"
  overload: System.IO.Log.LogRecord.Previous*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.SequenceNumber
  id: SequenceNumber
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: SequenceNumber
  nameWithType: LogRecord.SequenceNumber
  fullName: System.IO.Log.LogRecord.SequenceNumber
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、このレコードのシーケンス番号を取得します。"
  syntax:
    content: public abstract System.IO.Log.SequenceNumber SequenceNumber { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "このレコードのシーケンス番号。"
  overload: System.IO.Log.LogRecord.SequenceNumber*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Log.LogRecord.User
  id: User
  parent: System.IO.Log.LogRecord
  langs:
  - csharp
  name: User
  nameWithType: LogRecord.User
  fullName: System.IO.Log.LogRecord.User
  type: Property
  assemblies:
  - System.IO.Log
  namespace: System.IO.Log
  summary: "派生クラスでオーバーライドされると、次のレコードのシーケンス番号を取得します。"
  remarks: "このプロパティの値として提供されたシーケンス番号、`nextUndoRecord`内のパラメーター、<xref:System.IO.Log.IRecordSequence.Append%2A>メソッド</xref:System.IO.Log.IRecordSequence.Append%2A>。 別に、列挙体で使用するこのシーケンス番号は不明確なものとして、レコード シーケンスにより処理します。"
  syntax:
    content: public abstract System.IO.Log.SequenceNumber User { get; }
    return:
      type: System.IO.Log.SequenceNumber
      description: "ユーザー指定のチェーンの次のレコードのシーケンス番号。"
  overload: System.IO.Log.LogRecord.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.Log.LogRecord.#ctor
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: LogRecord()
  nameWithType: LogRecord.LogRecord()
  fullName: System.IO.Log.LogRecord.LogRecord()
- uid: System.IO.Log.LogRecord.Data
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Data
  nameWithType: LogRecord.Data
  fullName: System.IO.Log.LogRecord.Data
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Log.LogRecord.Dispose
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Dispose()
  nameWithType: LogRecord.Dispose()
  fullName: System.IO.Log.LogRecord.Dispose()
- uid: System.IO.Log.LogRecord.Previous
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Previous
  nameWithType: LogRecord.Previous
  fullName: System.IO.Log.LogRecord.Previous
- uid: System.IO.Log.SequenceNumber
  parent: System.IO.Log
  isExternal: false
  name: SequenceNumber
  nameWithType: SequenceNumber
  fullName: System.IO.Log.SequenceNumber
- uid: System.IO.Log.LogRecord.SequenceNumber
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: SequenceNumber
  nameWithType: LogRecord.SequenceNumber
  fullName: System.IO.Log.LogRecord.SequenceNumber
- uid: System.IO.Log.LogRecord.User
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: User
  nameWithType: LogRecord.User
  fullName: System.IO.Log.LogRecord.User
- uid: System.IO.Log.LogRecord.#ctor*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: LogRecord
  nameWithType: LogRecord.LogRecord
- uid: System.IO.Log.LogRecord.Data*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Data
  nameWithType: LogRecord.Data
- uid: System.IO.Log.LogRecord.Dispose*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Dispose
  nameWithType: LogRecord.Dispose
- uid: System.IO.Log.LogRecord.Previous*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: Previous
  nameWithType: LogRecord.Previous
- uid: System.IO.Log.LogRecord.SequenceNumber*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: SequenceNumber
  nameWithType: LogRecord.SequenceNumber
- uid: System.IO.Log.LogRecord.User*
  parent: System.IO.Log.LogRecord
  isExternal: false
  name: User
  nameWithType: LogRecord.User
