### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection
  id: WebPartConnection
  children:
  - System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  - System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  - System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  - System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  langs:
  - csharp
  name: WebPartConnection
  nameWithType: WebPartConnection
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection
  type: Class
  summary: "2 つを有効にするオブジェクトを提供<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref>コントロール接続を構成します。 このクラスは継承できません。"
  remarks: "Web パーツ コントロール セットの接続でリンクまたは&2; つの間のアソシエーション<xref:System.Web.UI.WebControls.WebParts.WebPart>(またはその他のサーバーまたはユーザー) のデータを共有できるようにするコントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>。 データを共有するには、この機能により、分離されたコントロールによって提供される機能を以下の方法で使用する接続されているコントロールです。 たとえば、1 つのコントロールは、郵便番号データを提供し、別のコントロールがそのデータが読み込まれ、郵便番号に基づく地域の気象情報を提供、接続されている&2; つのコントロールの機能を提供より多くの価値をユーザーにします。 この例を拡張するには、また表示情報に基づいて、郵便番号、ローカルのニュースへのリンクを持つコントロールなど、郵便番号データの使用できるようにこれらのすべてのコントロールは郵便番号コードを提供する&1; つのコントロールとデータを共有する可能性がありますに他のコントロールを作成する。 作成およびによって提供される標準の接続のユーザー インターフェイス (UI) を使用して、Web ブラウザーから直接このような互換性のあるすべてのコントロール間の接続を管理するエンドユーザーの Web パーツ アプリケーション、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール、または開発者によって提供されるカスタム UI を使用します</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>。       この WebPartConnection クラスの概要は、接続を作成する基本的な詳細の一般的なステートメントです。 詳細については、特定のコンポーネントおよび接続の作成に関連する要件は、次を参照してください。 [Web パーツ接続の概要](~/add/includes/ajax-current-ext-md.md)、コード例を次の説明に記載されているや参照クラスを参照してください。 Web パーツ接続のいくつかの基本的な要素があります: - 次の&2; つ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>。 すべての Web パーツ接続は、2 つのコントロールで構成されます。 コントロールを同時に複数の接続に参加できますが、1 つのすべての接続は、正確に&2; つのコントロールで構成されます。 コントロールがから直接派生させることができます、<xref:System.Web.UI.WebControls.WebParts.WebPart>基底クラス、またはこれらには、ASP.NET コントロール、カスタム サーバー コントロールおよびユーザー コントロールを含む、他のサーバー コントロールを指定できます</xref:System.Web.UI.WebControls.WebParts.WebPart>。 派生していないコントロール、<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスに配置されている場合、<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーンで自動的にラップされて、<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>オブジェクトから継承することができます、実行時に、<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスと関数の実行時刻として<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPart></xref:System.Web.UI.WebControls.WebParts.WebPart></xref:System.Web.UI.WebControls.WebParts.GenericWebPart></xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase></xref:System.Web.UI.WebControls.WebParts.WebPart>。      -コントロール内に存在する<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>ゾーン</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>。 両方<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールおよびサーバー コントロールの他の任意の型である必要があります、 <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>Web パーツの接続 (とその他のほとんどの Web パーツ機能) に参加できるゾーン</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase></xref:System.Web.UI.WebControls.WebParts.WebPart>。      -コンシューマーとプロバイダー。 すべての Web パーツ接続では、2 つのコントロールがあります: データとデータのコンシューマーのプロバイダー。 プロバイダーは、データを返すインターフェイスの形式で指定されたコールバック メソッドをコンシューマーにデータを提供します。 (を作成し、コールバック メソッドを指定する方法の例は、このトピックの例」のセクションを参照してください)。このコールバック メソッドは、プロバイダー接続ポイントと呼びます。 この接続ポイント (その「わかりやすい」名前、ID、および、返されたインターフェイスの型) の詳細が含まれている、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>プロバイダー コントロールに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>。 コンシューマーは、インターフェイスのインスタンスを受け入れることができる指定された方法でデータを受け取ります。 このメソッドがコンシューマー接続ポイントと呼ばれ、接続ポイント (名前、ID、およびインターフェイスの型) の詳細についてに含まれる、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>コンシューマー コントロールに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。      -互換性のあるコントロールまたは有効なトランスフォーマー。 接続が機能するには、コンシューマーおよびプロバイダーする必要がありますか、互換性のある (つまり、インターフェイスの同じ型を持つ、指定した接続ポイントのメソッドが操作できること)、またはそこにしてください、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>コンシューマーによって認識される型に、プロバイダーによって提供される型に変換する機能を持つオブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。      -WebPartConnection オブジェクトです。 存在するへの接続は、接続ポイントの詳細と共に、プロバイダーとコンシューマー コントロールへの参照を含む WebPartConnection クラスのインスタンスが必要があります。 かどうかは互換性がなく、代わりに使用して、プロバイダーとコンシューマー、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクトに接続する接続参照トランスフォーマー</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 。      接続を確立するための手段です。 正しく接続ポイントの方法で設計し、ゾーンに配置されてコンシューマーおよびプロバイダーの互換性のあるコントロールと WebPartConnection オブジェクトは、使用、最後の基本的な手順の必要に応じてとの接続開始を開始します。 これは発生する&1; つの方法は、UI を使用して接続を作成するユーザーです。 配置した場合、`<asp:connectionszone>`接続用のコンポーネントは、代わりに、実行時にユーザーを使用して、ページを接続の表示モードに切り替えることができます動詞をクリックして、接続プロバイダーまたはコンシューマー、および接続の UI のいずれかの動詞メニューを開き、ページと、他の要素が必要な (に基づいて、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール) が表示されます</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>。 この UI を通じて、ユーザーは、接続を開始できます。 接続を開始する別の方法では、プログラムによって実行します。 どちらの場合、UI またはプログラムでは、基になるメソッドを介して接続を開始するかどうかは、同じです。 アプリケーションの呼び出し、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッド (または<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッド トランスフォーマーを使用する場合) で、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>を制御する、プロバイダー、コンシューマー、およびそれらの各接続ポイント オブジェクトを渡すと、WebPartConnection オブジェクトが返されます</xref:System.Web.UI.WebControls.WebParts.WebPartManager></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>。       2 つの間の接続の重要な詳細をカプセル化するオブジェクトが WebPartConnection クラスで定義<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>。 クラスは、ほとんどすべての特定の接続の詳細に関連するプロパティで構成されます。 いくつかのプロパティでは、接続のコンシューマー コントロールに関するものです。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A>プロパティを参照して、コンシューマー コントロール自体、および<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A>プロパティは、コンシューマーの ID を参照</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID%2A></xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>、コンシューマーの接続ポイントの詳細が含まれているオブジェクトは、コンシューマーのによって参照される<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A>プロパティ</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint%2A></xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>プロパティ参照の ID、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint></xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID%2A>。 これらすべてのコンシューマーに関連する接続プロパティに値を割り当てるには接続を作成する必要があります。       WebPartConnection クラスにも、接続のプロバイダーのコントロールに関連するいくつかのプロパティがあり、これらは、コンシューマーのプロパティに対応しています。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A>プロパティ参照プロバイダー コントロール自体では、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>プロパティは、その ID を参照</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID%2A>中には</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Provider%2A> <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>プロパティ参照、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト、および<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A>プロパティは、プロバイダーの接続ポイントの ID を参照します</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID%2A></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint></xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint%2A>。       いくつかのプロパティには、接続の状態が関係します。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>プロパティは、接続が (データを交換現在) アクティブまたは非アクティブな (まだ接続されているが、アクティブに共有ではないデータ) があるかどうかを示します</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive%2A>。 <xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>プロパティは、接続が共有するかどうかを示します (ページのすべてのユーザーが使用可能) またはユーザー固有の接続と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティは、かどうか、コントロールは、静的 (ページのマークアップでしたがって永続的な宣言) を示しますまたは動的 (プログラムによって作成された、削除することを意味する).</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>"
  example:
  - "The following code example demonstrates how to create a simple connection between two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The example demonstrates three ways of forming a connection: declaratively, by placing tags for the connection in the markup of the Web page; programmatically, by creating the connection in code; and through the UI, by placing a <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control on the page, which enables users to establish a connection.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_2.vb)]\n [!code-cs[WebParts_WebPartConnection_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are the `Register` directives for the user control and the custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. Because the example assumes dynamic compilation of the controls, the source code for the controls should be in an App_Code subfolder; the `Register` tag in the page references only an arbitrary tag prefix and the namespace of the controls. The custom <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (the provider and consumer) are declared within the Web page's `<asp:webpartzone>` element, inside a `<zonetemplate>` element.  \n  \n The page provides three ways to form a connection between the custom controls. The first method is declarative. In the markup for the page, a <`StaticConnections>` element is declared, and within that is an `<asp:WebPartConnections>` element, with the various consumer and provider details of the connection specified as attributes. This is one way to create a connection, by declaring it directly in the Web page, specifically within the `<asp:WebPartManager>` element. Because of this static connection, a connection between the two custom controls is created immediately the first time the page loads.  \n  \n A second method for forming a connection between the controls is provided by the `<asp:connectionszone>` element in the page. If a user switches a page into connect display mode at run time, and clicks a connect verb on one of the custom controls, the `<asp:connectionszone>` element automatically renders the UI for creating a connection.  \n  \n The page also demonstrates a third way of creating a connection, which is to do it programmatically. In the `Button1_Click` method, the code creates a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object for the provider control, and retrieves its connection point details by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method. It carries out a similar task for the consumer control, calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> method. Finally, it creates the new WebPartConnection object by calling the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control.  \n  \n [!code-cs[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_343_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_343_3.aspx)]  \n  \n After you load the Web page in a browser, the first connection already exists because it is declared within the `<StaticConnections>` element. Enter some text in the **ZIP Code Provider** control, and it will be displayed in the consumer control. Next, disconnect the two controls. Using the **Display Mode** drop-down list control, change the page to connect display mode. Click the verbs menu (represented by a downward arrow in the title bar) for each of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and notice that each has a **Connect** option. This is a connect verb, which appears in the verbs menu only when the page is in connect mode. Click the connect verb on one of the controls, and the connection UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control appears. Click the **Disconnect** button to end the static connection between the controls. Use the **Display Mode** control to return the page to browse mode. Try to enter some new text in the provider again, and note that because the controls are disconnected, the text fails to update in the consumer control.  \n  \n Next, use the same method as above to switch the page into connect display mode again. Click a connect verb on one of the controls. Click the **Create a Connection** link, and use the UI provided by the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control to create a connection between the controls. This is the second method for creating a connection. Note that as soon as the connection is formed, the last string you entered in the provider control (that failed to appear because the controls were disconnected) suddenly appears in the consumer, because the connection has been recreated. Click the **Disconnect** button to end the current connection that you just created. Return the page to browse mode. Enter some new text in the provider to demonstrate that the text is not updated, and that the controls are again disconnected.  \n  \n Return the page to connect display mode. Instead of clicking a connect verb, click the **Connect WebPart Controls** button, which illustrates the third method of forming a connection. This approach connects the controls programmatically in one simple step without having to use the <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> control. Note that as the connection is created, the last string you entered in the provider suddenly appears in the consumer control."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      [System.Web.UI.ParseChildren(true, "Transformers")]

      public sealed class WebPartConnection
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>クラスです。"
  remarks: "接続が、Web ページのマークアップで宣言されているときに、ASP.NET のパーサーはインスタンスを作成できるように、WebPartConnection コンス トラクターがパブリックこのコンス トラクターは、開発者のコードで使用するものではありません。       作成するときに、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>必要がありますを使用するプログラムでは、オブジェクト、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>または<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName>で提供されるメソッド、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPartManager></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A?displayProperty=fullName></xref:System.Web.UI.WebControls.WebParts.WebPartConnection>。 これらのメソッドは、接続を作成する多くの詳細を処理し、返す、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>。       WebPartConnection コンス トラクター、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>クラスの値の設定、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティ`true`</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A></xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A></xref:System.Web.UI.WebControls.WebParts.WebPartConnection>。 したがって、新しい接続の既定の状態は (含まれる Web ページのマークアップで宣言されていることを意味する) 静的され共有 (ページのすべてのユーザーに表示)。 ある場合、このページのマークアップで接続を宣言することで、典型的なシナリオで接続を追加するときに、`<asp:webpartconnection>`要素。 ただし、他の状況で、接続は、これらのプロパティに別の値があります。 たとえば、コードでは、接続オブジェクトを作成することで、接続をプログラムで追加すると、ユーザーは、ページを表示する既定のユーザーのパーソナル化スコープには、接続が動的、user(visible only to the specific user) あたり接続として作成されます。      > [!NOTE] >、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>と<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A>プロパティは読み取り専用との接続の種類を特定するこれらのプロパティの設定によって内部的に、 <xref:System.Web.UI.WebControls.WebParts.WebPartManager>(ページのマークアップで宣言またはプログラムによって経由で、コードまたはユーザー インターフェイス) に接続を作成する方法によって制御します</xref:System.Web.UI.WebControls.WebParts.WebPartManager></xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic%2A></xref:System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared%2A>。"
  syntax:
    content: public WebPartConnection ();
    parameters: []
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  id: Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>接続のコンシューマー コントロールとして動作しているオブジェクト。"
  remarks: "すべての Web パーツ接続は、データを共有する&2; つのコントロールで構成されます。 1 つのコントロールは、データのプロバイダーとして機能し、他のコントロールは、受信および処理プロバイダーからのデータ コンシューマーとして機能します。 コンシューマー プロパティへの参照を取得する、<xref:System.Web.UI.WebControls.WebParts.WebPart>接続関係コンシューマーとしての動作を制御します</xref:System.Web.UI.WebControls.WebParts.WebPart>。"
  example:
  - "The following code example demonstrates the programmatic use of the Consumer property.  \n  \n The code example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_1.ascx)]\n [!code-cs[WebParts_WebPartConnection_Consumer#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_2.cs)]\n [!code-vb[WebParts_WebPartConnection_Consumer#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the Consumer property. Near the top of the page are the `Register` directives for the user control and the custom controls. Because this example uses dynamic compilation, the `Register` directive for the source file does not need to reference an assembly name; it includes only an arbitrary tag prefix and the namespace of the controls. In the `Button2_Click` method, the code accesses the connection object through the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control, and gets a reference to the consumer control.  \n  \n [!code-cs[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_487_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_Consumer#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_487_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection user interface (UI), to create a connection between the two controls. Click the **Display Consumer Info** button to run the code that demonstrates the Consumer property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Consumer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>接続でコンシューマーとして機能する Web パーツ コントロールを表すです。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "長さ、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>プロパティが&0; です</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "接続でコンシューマーとして機能するコントロール用の接続ポイントとして機能するオブジェクトを取得します。"
  remarks: "2 つの間の接続を作成するため、必要な手順のいずれかの<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールは、各コントロールの接続ポイントを作成する</xref:System.Web.UI.WebControls.WebParts.WebPart>。 コンシューマー接続ポイントは、コンシューマーとして機能するコントロールに接続する方法に関する情報を含むオブジェクトです。 いずれかのコンシューマーのソース コード内で識別する必要があります、`ConnectionConsumer`属性。 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>コンシューマー コントロールに関連付けられているオブジェクトには、メソッドと、属性、メソッド、ユーザー インターフェイス (UI) で使用するための表示名の ID を含む詳細についてが含まれ、どのようなインターフェイス メソッドを取得できます</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。 このコンシューマーに関する情報、接続、およびに認識されるインターフェイスの型を形成するためには、そのメソッドのセットは、総称してコンシューマー接続ポイントを形成します。       既定では、<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクトは、1 つのみに接続できる<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>一度にオブジェクト</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint></xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。 コンシューマーは、使用可能なコンシューマー接続ポイントとして識別される複数のメソッドを持つ可能性がありますが、コンシューマーのみに参加できますコンシューマーとして&1; つの接続 (そのため、そのコンシューマー接続ポイントのいずれかでアクティブにできます) のみ、時にします。 これに対し、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>の任意の数に接続できる<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>。 この既定の動作をオーバーライドすることで変更することができます、<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>プロパティを<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>属性</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute></xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A>。"
  example:
  - "The following code example demonstrates the programmatic use of the ConsumerConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_2.cs)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ConsumerConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object. These objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ConsumerConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1183_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1183_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ConsumerConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint ConsumerConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>接続のコンシューマー コントロールに関連付けられています。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  id: ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得または接続のコンシューマー接続ポイントとして機能しているオブジェクトの ID を参照する接続のプロパティの値を設定します。"
  remarks: "値を割り当てることで、接続のどのコンシューマー接続ポイントが使用される Web ページのマークアップで宣言された静的な接続の開発者が指定できます、`ConsumerConnectionPointID`属性を`<asp:webpartconnection>`要素。 値は、属性に割り当てられていない場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>プロパティの値を使用します</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。       動的 (プログラムによる) 接続を作成するときに通常設定を適用しないで ConsumerConnectionPointID プロパティの値。 単に呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>、制御を渡すコンシューマーとコンシューマー接続ポイント (その他の必要なパラメータと共に)、オブジェクトとそのメソッドが、コンシューマーの接続ポイントで使用する正しい ID を決定します</xref:System.Web.UI.WebControls.WebParts.WebPartManager></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>。 同様に、切断するを呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>メソッド ConsumerConnectionPointID プロパティ値を指定する必要はありません</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>。      > [!NOTE] > を指定するときに、コンシューマーの接続ポイントの ID を決定できます、<xref:System.Web.UI.WebControls.WebParts.WebPart>またはコンシューマーとして他のサーバー コントロールです</xref:System.Web.UI.WebControls.WebParts.WebPart>。 プロバイダーのコントロールまたはトランスフォーマーによって提供されたインターフェイスのインスタンスを取得する、コンシューマーでメソッドを指定する必要があります。 メソッドを指定するを使用してマークする、`ConnectionConsumer`コードの属性です。 この属性を追加する場合は、コンシューマーの ID として機能する省略可能な文字列値パラメーターを追加することができます<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>オブジェクト</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。 省略可能な ID パラメーターの値を指定する場合は、接続の ConsumerConnectionPointID プロパティの値がその値になります。 ID 値を指定しない場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>プロパティの値を使用します</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#6](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#2](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the ConsumerConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/csharp/420efe59-4fbb-4b23-bdd1-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerConnectionPointID#1](~/add/codesnippet/visualbasic/420efe59-4fbb-4b23-bdd1-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ConsumerConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ConsumerConnectionPointID { get; set; }
    return:
      type: System.String
      description: "コンシューマー接続の ID を表す文字列をポイントします。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  id: ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得またはの ID を参照する接続のプロパティの値を設定、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>その接続のコンシューマーとしての動作を制御します。"
  remarks: "ConsumerID プロパティの値は、間の接続を作成するときに必要な<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>。 プロパティの値が割り当てられていない場合、例外がスロー、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールは、接続をアクティブ化しようとしています</xref:System.Web.UI.WebControls.WebParts.WebPartManager>。"
  example:
  - "The following code example shows the declarative and programmatic use of the ConsumerID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ConsumerID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ConsumerID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ConsumerID property and displays it in a label.  \n  \n [!code-vb[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1237_3.aspx)]\n [!code-cs[WebParts_WebPartConnection_ConsumerID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1237_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ConsumerID property value."
  syntax:
    content: public string ConsumerID { get; set; }
    return:
      type: System.String
      description: "接続でコンシューマーとして機能するコントロールの ID を表す文字列。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得または設定の ID、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>オブジェクト。"
  remarks: "各<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトには、ID プロパティに割り当てられている一意の値</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>。 これは、複数の接続を区別する方法があることを確認します。       宣言することによって、静的な接続を作成する場合、 `<asp:webpartconnection>` Web ページにある要素に値を割り当てないでください、`ID`属性、接続の場合、例外がスローされた、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールは、接続をアクティブ化しようとしています</xref:System.Web.UI.WebControls.WebParts.WebPartManager>。       ときに、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールが新しい動的な接続を作成し、呼び出し、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A>接続の一意の ID を生成する方法</xref:System.Web.UI.WebControls.WebParts.WebPartManager.CreateDynamicConnectionID%2A></xref:System.Web.UI.WebControls.WebParts.WebPartManager>。"
  example:
  - "The following code example shows the declarative and programmatic use of the ID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_2.vb)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Here, the ID property is not required, because the connection is dynamic, and the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control assigns an ID to the connection. In the `Button2_Click` method, the code accesses the value of the ID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_443_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_443_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Connection Details** button to run the code that accesses the ID property value."
  syntax:
    content: public string ID { get; set; }
    return:
      type: System.String
      description: "ID を表す文字列、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;></xref>です。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  id: IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>オブジェクトは、現在のプロバイダーとコンシューマーのコントロールの間で確立でき、exchange データ。"
  remarks: "IsActive プロパティの状態を示す、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartConnection>。 通信していると、共通のインターフェイスを介してデータを交換すること、接続のプロバイダーとコンシューマーのコントロールは、接続がこの状態になった場合、または<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。       ユーザーは、通常のブラウズ モードで確立された接続を含む、表示されたページを表示、(ページが読み込まれるときに、いくつかの競合またはその他の問題のためアクティブ化に失敗した) 場合、接続には通常アクティブです。 プロパティの値には、ページおよびコントロールのライフ サイクルの初期の段階で`false`です。 接続がアクティブにした直後、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>でイベントを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールが発生します</xref:System.Web.UI.WebControls.WebParts.WebPartManager></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated>。 具体的には、接続は、コンシューマーがプロバイダーから、指定したインターフェイスのインスタンスを取得した後にアクティブ化されて、または<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。       かどうか接続がアクティブな場合に知っておくと便利である場合、競合やページ上の複数の接続のための同期の問題がある可能性があります。 たとえば、ある種の&2; つの接続間の競合がある場合、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロール、競合を回避するライセンス認証を行わない、接続のいずれかのオプションがあります</xref:System.Web.UI.WebControls.WebParts.WebPartManager>。"
  example:
  - "The following code example demonstrates use of the IsActive property.  \n  \n The example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsActive#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Within the `<script>` element are four event handlers. Each event handler checks the value of the IsActive property on the static connection, and writes a message to the <xref:System.Web.UI.WebControls.Label> control indicating whether the connection is active or inactive at that state of the page and control life cycle. This demonstrates at what point the connection becomes active, and that it remains active after the page is rendered.  \n  \n [!code-cs[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1322_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsActive#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1322_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created, and messages have already been written to the labels showing whether the connection was active at various points in the page and control life cycle. Click the **Connection Details** button, and note that the connection is not active at that point, but that the connection is reactivated each time after the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectionsActivated> event, and that it is still active (and will remain so) after the <xref:System.Web.UI.Control.PreRender> event of the page."
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>接続がアクティブである場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  id: IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>オブジェクトがすべてのユーザーに、または現在のユーザーにのみ表示されます。"
  remarks: "個々 のと同様<xref:System.Web.UI.WebControls.WebParts.WebPart>、コントロール、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>オブジェクトは、共有またはユーザーごとのインスタンスを指定できます</xref:System.Web.UI.WebControls.WebParts.WebPartConnection></xref:System.Web.UI.WebControls.WebParts.WebPart>。 共有インスタンスにすると、接続は、Web ページのすべてのユーザーに表示されているユーザーごとのインスタンスは、接続が特定のユーザーにのみ表示されることを意味します。       一般に、接続は、ページに追加する方法は、接続が共有されているかどうかを判断します。 かどうか、接続が、Web ページのマークアップで宣言されている接続を共有し、ときプロパティの値が`true`です。 さらに、Web ページは、接続が追加されたときに共有パーソナル化スコープでは、接続も共有します。 通常、ユーザーを使用する場合、`<asp:connectionszone>`接続が共有されていない、ときプロパティの値ではユーザーのパーソナル化スコープでは、接続、ページを追加するユーザー インターフェイス (UI)`false`です。"
  example:
  - "The following code example demonstrates programmatic use of the IsShared property.  \n  \n The code example has five parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An entry in the Web.config file that is required to run the example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_2.cs)]\n [!code-vb[WebParts_WebPartConnection_IsShared#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_2.vb)]  \n  \n The third part of the code example is the Web page. In the `Button2_Click` method, it checks the IsShared property of the existing connection and displays the result on the page.  \n  \n [!code-cs[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_784_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_IsShared#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_784_3.aspx)]  \n  \n The fourth part of the code example is an entry in the Web.config file that is required for the user account that will be running the example to be able to edit the page in shared personalization scope. To enable this, you must have an entry in the Web.config file within the `<system.web>` section that looks like the following example.  \n  \n```  \n<webParts>  \n  <personalization>  \n    <authorization>  \n      <allow users=\"UserAccount\"  \n             roles=\"admin\"  \n             verbs=\"enterSharedScope\"/>  \n    </authorization>            \n  </personalization>  \n</webParts>  \n```  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect display mode. Click the **Connect WebPart Controls** button to form a connection. Next, click the **Connection Details** button to display whether the connection is shared. If you created the connection with the page in the default user personalization scope, the IsShared property value should be `false` for the connection.  \n  \n On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (indicated by the downward arrow in the title bar), click the connect verb. When the connection UI appears, click the **Disconnect** button to end the connection. Use the **Display Mode** control to return the page to browse mode.  \n  \n In the **Display Mode** control, select the **Shared** option to switch the page into shared personalization scope. Follow the same steps as those above to create a connection, and again click the **Connection Details** button to display whether the connection is shared. In this case, the value of the IsShared property should be `true`."
  syntax:
    content: public bool IsShared { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>接続が共有されている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  id: IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;> </xref>オブジェクトが、Web ページのマークアップで宣言されているか、プログラムによって作成します。"
  remarks: "Web パーツ コントロール間の接続は、静的または動的のどちらかにできます。 静的な接続が、Web ページのマークアップで宣言を使用して、`<asp:WebPartConnection>`要素。 動的接続がプログラムによって作成されたか、ユーザーがによって定義されたユーザー インターフェイス (UI) を経由して接続を作成するときに、<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>コントロール</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>。       静的な接続は、共有オブジェクトであるため、Web ページのすべてのユーザーに利用します。 また、これらは本質的に永続的なためなどの静的な<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、完全に削除することはできません</xref:System.Web.UI.WebControls.WebParts.WebPart>。      > [!NOTE] > 静的な接続オブジェクトは完全に削除中に、完全に切断できます。 ここでは、切断されたオブジェクトは、サーバーに存在しますが、エンド ユーザーは決してページで、オブジェクトの存在を認識します。"
  example:
  - "The following code example demonstrates the programmatic use of the IsStatic property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_1.cs)]\n [!code-vb[WebParts_WebPartConnection_IsStatic#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method accesses the IsStatic property to check whether the connection is static.  \n  \n [!code-vb[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_499_2.aspx)]\n [!code-cs[WebParts_WebPartConnection_IsStatic#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_499_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to display the value of the IsStatic property."
  syntax:
    content: public bool IsStatic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、接続が静的です。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  id: Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> Web パーツ接続のプロバイダーとして機能するコントロール。"
  remarks: "すべての Web パーツ接続から成る&2; つ<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール--コンシューマーとプロバイダー--およびプロバイダーのプロパティは、接続でプロバイダーのコントロールへの参照を返します</xref:System.Web.UI.WebControls.WebParts.WebPart>。       接続 (コンシューマー制御) 内の対応するなどの接続を確立するためにプロバイダー コントロールが必要です。 プログラムから、またはページ永続形式で宣言することにより、接続を作成するかどうかは、接続のプロバイダーとして機能するコントロールを指定する必要があります。"
  example:
  - "The following code example demonstrates use of the Provider property.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_1.vb)]\n [!code-cs[WebParts_WebPartConnection_Provider#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_1.cs)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. Notice that in the `<asp:webpartconnection>` element, the `ProviderID` attribute has the ID of the provider control assigned to it. This is required to identify the provider for the static connection. The `Button1_Click` method accesses the Provider property and writes some of its details to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_43_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_Provider#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_43_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Provider Details** button to display some of the property values accessed through the Provider property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPart Provider { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPart
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>データのプロバイダーとして機能します。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "長さ、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>プロパティの値は&0; です</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  id: ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "接続ポイントとして機能するオブジェクトを取得、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>接続用のプロバイダーとしての動作を制御します。"
  remarks: "2 つの間の接続を作成するため、必要な手順のいずれかの<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールは、各コントロールの接続ポイントを作成する</xref:System.Web.UI.WebControls.WebParts.WebPart>。 プロバイダー接続ポイントは、プロバイダーとして機能するコントロールに接続する方法に関する情報を含むオブジェクトです。 いずれかのプロバイダーのソース コード内で識別する必要があります、`ConnectionProvider`属性。 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>が関連付けられているプロバイダーとは、コントロールには、メソッドと、属性、メソッド、ユーザー インターフェイス (UI) で使用するための表示名の ID を含む詳細についてにが含まれており、コンシューマー コントロールを返すことができます、メソッドのインターフェイスのインスタンスの種類します</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>。 このプロバイダーについては、接続、およびそれが提供するインターフェイスの型を形成するためには、そのメソッドのセットは、プロバイダー接続ポイントを総称して構成します。       既定では、 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>1 つのみに接続できる<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>一度にオブジェクト</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint></xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>。 コンシューマーは、使用可能なコンシューマー接続ポイントとして識別される複数のメソッドを持つ可能性がありますが、コンシューマーのみに参加できますコンシューマーとして&1; つの接続 (そのため、そのコンシューマー接続ポイントのいずれかでアクティブにできます) のみ、時にします。 これに対し、<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>の任意の数に接続できる<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>既定ではオブジェクトです</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>。 たとえば、郵便番号コードを提供するプロバイダー コントロールは、気象データ、ニュースなどの郵便番号コードに基づくデータのさまざまな種類を作成する郵便番号コードを使用する複数のコンシューマー コントロール接続でした。 この既定の動作をオーバーライドすることで変更することができます、<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>プロパティを<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A>。"
  example:
  - "The following code example demonstrates the programmatic use of the ProviderConnectionPoint property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_1.ascx)]  \n  \n The second part of the code example is the source code for the two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls that serve as the consumer and the provider for the connection, and an interface used for the connection points. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_2.cs)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_2.vb)]  \n  \n The third part of the code example is the code for the Web page that hosts the controls and demonstrates the use of the ProviderConnectionPoint property. In the `Button1_Click` method, all the objects required to form a connection are created, including a <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object. Note the call to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> method on the <xref:System.Web.UI.WebControls.WebParts.WebPartManager> control. The various created objects are all passed to the <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> method to create the connection. In the `Button2_Click` method, the code accesses the ProviderConnectionPoint property and displays some details of the connection point.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_471_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPoint#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_471_3.aspx)]  \n  \n After you load the page in a browser, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Use the **Connect WebPart Controls** button, or the provided connection UI, to create a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that demonstrates the ProviderConnectionPoint property."
  syntax:
    content: public System.Web.UI.WebControls.WebParts.ProviderConnectionPoint ProviderConnectionPoint { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;> </xref>接続のプロバイダーのコントロールに関連付けられています。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  id: ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得または接続のプロバイダー接続ポイントとして機能しているオブジェクトの ID を参照する接続のプロパティの値を設定します。"
  remarks: "値を割り当てることで、接続のどのプロバイダー接続ポイントが使用される Web ページのマークアップで宣言された静的な接続の開発者が指定できます、`ProviderConnectionPointID`属性を`<asp:webpartconnection>`要素。 値は、属性に割り当てられていない場合、<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>プロパティの値を使用します</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>。       動的 (プログラムによる) 接続を作成するときに通常設定を適用しないで ProviderConnectionPointID プロパティの値。 単に呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>、制御を渡すプロバイダーとプロバイダー接続ポイント (その他の必要なパラメータと共に)、オブジェクトとそのメソッドは、プロバイダーの接続ポイントで使用する正しい ID を決定します</xref:System.Web.UI.WebControls.WebParts.WebPartManager></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>。 同様に、切断するを呼び出すことができます、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>メソッド ProviderConnectionPointID プロパティ値を指定する必要はありません</xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisconnectWebParts%2A>。      > [!NOTE] > を指定するときに、プロバイダーの接続ポイントの ID を決定できます、<xref:System.Web.UI.WebControls.WebParts.WebPart>またはその他のサーバー コントロール プロバイダー</xref:System.Web.UI.WebControls.WebParts.WebPart> 。 コンシューマーへのデータを格納しているインターフェイスのインスタンスを提供するプロバイダーのコールバック メソッドを指定する必要があります。 メソッドを指定するを使用してマークする、`ConnectionProvider`コードの属性です。 この属性を追加する場合は、プロバイダーの ID として機能する省略可能な文字列値パラメーターを追加することができます<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>オブジェクト</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>。 省略可能な ID パラメーターの値を指定する場合は、接続の ProviderConnectionPointID プロパティの値がその値になります。 ID 値を指定しない場合、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>オブジェクトが作成されたときに、コントロールは、既定の ID を割り当てます</xref:System.Web.UI.WebControls.WebParts.WebPartManager>。"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderConnectionPointID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#6](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#2](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderConnectionPointID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point (and the ID) defined in the provider control. Then, in the `Button2_Click` method, the code accesses the ProviderConnectionPointID property.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/csharp/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderConnectionPointID#1](~/add/codesnippet/visualbasic/8cfbdeee-12ad-4cb7-abb6-_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. Using the **Display Mode** drop-down list control, switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button. Use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **ConnectionPoint Details** button to run the code that accesses the ProviderConnectionPointID property value. The value is written out in a label below the controls."
  syntax:
    content: public string ProviderConnectionPointID { get; set; }
    return:
      type: System.String
      description: "プロバイダー接続ポイント オブジェクトの ID を表す文字列。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  id: ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得またはの ID を参照する接続のプロパティの値を設定、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>その接続のプロバイダーとしての動作を制御します。"
  remarks: "ProviderID プロパティの値は、2 つの間の接続を作成するときに必要な<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>。 プロパティの値が割り当てられていない場合、例外がスロー、<xref:System.Web.UI.WebControls.WebParts.WebPartManager>コントロールは、接続をアクティブ化しようとしています</xref:System.Web.UI.WebControls.WebParts.WebPartManager>。"
  example:
  - "The following code example shows the declarative and programmatic use of the ProviderID property.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_1.ascx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_1.ascx)]  \n  \n The second part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_2.vb)]\n [!code-cs[WebParts_WebPartConnection_ProviderID#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_2.cs)]  \n  \n The third part of the code example is the Web page. Note that a connection is declared in the page markup, using the `<StaticConnections>` and `<asp:WebPartsConnection>` elements. The connection declaration includes the required `ProviderID` attribute. A second method for creating the connection appears in the `Button1_Click` method, where the code creates a new connection, using the connection point defined in the consumer control. Then, in the `Button2_Click` method, the code accesses the value of the ProviderID property and displays it in a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_577_3.aspx)]\n [!code-vb[WebParts_WebPartConnection_ProviderID#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_577_3.aspx)]  \n  \n After you load the page in a browser, a connection already exists because of the static connection declared in the page. Enter some text in the provider control, and note that it is displayed in the consumer due to the connection. Next, disconnect the controls. To do that, use the **Display Mode** drop-down list control to switch the page to connect mode. Click the verbs menu (represented by the downward arrow in the title bar) on one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and click the connect verb. Click the **Disconnect** button, and the controls are disconnected. Next, use the **Connect WebPart Controls** button to recreate a connection between the two controls. Click the **Consumer Details** button to run the code that accesses the ProviderID property value."
  syntax:
    content: public string ProviderID { get; set; }
    return:
      type: System.String
      description: "プロバイダーのコントロールの ID を表す文字列。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  id: ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "継承したオーバーライド<xref:System.Object.ToString*>メソッドと short の型は、接続オブジェクト名を返します</xref:System.Object.ToString*>。"
  remarks: "このメソッドは利便性のほとんどの場合コントロール デザイナーが使用されます。 デザイン ビューで完全修飾型名ではなく、短い型名を使用して、接続オブジェクトの表示が向上します。 ただし、メソッドを呼び出せる、コードのどの時点でも、接続オブジェクトの型名を知りたいです。"
  example:
  - "The following code example demonstrates how to call the ToString method to return the short type name of a <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> object.  \n  \n The code example has three parts:  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of the code example is the source code for the interface, and the consumer and provider controls. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_1.cs)]\n [!code-vb[WebParts_WebPartConnection_ToString#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_1.vb)]  \n  \n The second part of the code example is the Web page. Near the top is a `Register` directive that refers to the source code for the two dynamically compiled <xref:System.Web.UI.WebControls.WebParts.WebPart> controls. The static connection is declared within the `<StaticConnections>` element on the page. The `Button1_Click` method calls the ToString method to write the type name of the connection to a label.  \n  \n [!code-cs[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_228_2.aspx)]\n [!code-vb[WebParts_WebPartConnection_ToString#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_228_2.aspx)]  \n  \n Load the page in a browser. The static connection is already created. Enter some text in the provider control, and note that the text is displayed in the consumer control. Click the **Connection Details** button to execute the ToString method."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "短い (非修飾) 型名を含む文字列、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartConnection&quot;></xref>です。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  id: Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> Web パーツ接続において、それ以外の場合に互換性がない接続の&2; 点間のデータを変換するために使用できるオブジェクト。"
  remarks: "Web パーツの接続は、接続のプロバイダーとコンシューマーのコントロールの接続に使用できる&2; つの方法があります。 それぞれ経由で直接接続する<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>オブジェクトとは、両方のコントロールによって認識されているインターフェイスの種類</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>。 または、それらに互換性がない場合、直接接続できるされませんを使用して、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>インターフェイス インスタンス プロバイダーからコンシューマーによって認識される型に変換するオブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。       トランスフォーマー プロパティがへの参照を提供トランスフォーマーは、接続の一部として必要なときに、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>オブジェクト</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>。 カスタム トランスフォーマー (または Web パーツ コントロール セットに用意されているトランスフォーマーのいずれか) のタグを追加することで、Web ページのマークアップで宣言によって接続のトランスフォーマーを追加するには内で、`<asp:WebPartConnection>`要素。 追加することも、トランスフォーマー プログラムでは、コードで、そのインスタンスを作成して、呼び出し、<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>メソッドを<xref:System.Web.UI.WebControls.WebParts.WebPartManager>オブジェクトを渡すことを (トランスフォーマーを)、その他の必要なパラメーターと共に、接続を作成するコントロール</xref:System.Web.UI.WebControls.WebParts.WebPartManager></xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%28System.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ProviderConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPart%2CSystem.Web.UI.WebControls.WebParts.ConsumerConnectionPoint%2CSystem.Web.UI.WebControls.WebParts.WebPartTransformer%29>。"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformer Transformer { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformer
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>. 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  id: Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  langs:
  - csharp
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "コレクションを取得<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;> </xref> Web パーツ コントロール セットによって内部的に使用されるオブジェクト。"
  remarks: "開発者がプロパティは、決してトランスフォーマーを使用します。 接続に関連付けられているトランスフォーマーをアクセスするには、常に使用してください、<xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>プロパティ</xref:System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer%2A>。       トランスフォーマー プロパティは、Web パーツ コントロール セット内のトランスフォーマー要素を宣言するページの開発者を有効にするによって内部的に使用されて、 `<asp:webpartconnection>` Web ページのマークアップ内の要素。"
  syntax:
    content: public System.Web.UI.WebControls.WebParts.WebPartTransformerCollection Transformers { get; }
    return:
      type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformerCollection&quot;> </xref>を含む<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPartTransformer&quot;></xref>オブジェクト。"
  overload: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection()
  nameWithType: WebPartConnection.WebPartConnection()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.WebPartConnection()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPart
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPart
  nameWithType: WebPart
  fullName: System.Web.UI.WebControls.WebParts.WebPart
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString()
  nameWithType: WebPartConnection.ToString()
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString()
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformer
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformer
  nameWithType: WebPartTransformer
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
  fullName: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers
- uid: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: WebPartTransformerCollection
  nameWithType: WebPartTransformerCollection
  fullName: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.#ctor*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: WebPartConnection
  nameWithType: WebPartConnection.WebPartConnection
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Consumer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Consumer
  nameWithType: WebPartConnection.Consumer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: WebPartConnection.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerConnectionPointID
  nameWithType: WebPartConnection.ConsumerConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ConsumerID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ConsumerID
  nameWithType: WebPartConnection.ConsumerID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ID
  nameWithType: WebPartConnection.ID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsActive*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsActive
  nameWithType: WebPartConnection.IsActive
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsShared*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsShared
  nameWithType: WebPartConnection.IsShared
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.IsStatic*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: IsStatic
  nameWithType: WebPartConnection.IsStatic
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Provider*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Provider
  nameWithType: WebPartConnection.Provider
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPoint*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: WebPartConnection.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderConnectionPointID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderConnectionPointID
  nameWithType: WebPartConnection.ProviderConnectionPointID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ProviderID*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ProviderID
  nameWithType: WebPartConnection.ProviderID
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.ToString*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: ToString
  nameWithType: WebPartConnection.ToString
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformer*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformer
  nameWithType: WebPartConnection.Transformer
- uid: System.Web.UI.WebControls.WebParts.WebPartConnection.Transformers*
  parent: System.Web.UI.WebControls.WebParts.WebPartConnection
  isExternal: false
  name: Transformers
  nameWithType: WebPartConnection.Transformers
