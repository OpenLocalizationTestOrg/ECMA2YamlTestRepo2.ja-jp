### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.CommonSecurityDescriptor
  id: CommonSecurityDescriptor
  children:
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  - System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  - System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  - System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  - System.Security.AccessControl.CommonSecurityDescriptor.Group
  - System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  - System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  - System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  - System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  - System.Security.AccessControl.CommonSecurityDescriptor.Owner
  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  langs:
  - csharp
  name: CommonSecurityDescriptor
  nameWithType: CommonSecurityDescriptor
  fullName: System.Security.AccessControl.CommonSecurityDescriptor
  type: Class
  summary: "セキュリティ記述子を表します。 セキュリティ記述子には、所有者、プライマリ グループ、随意アクセス制御リスト (DACL)、およびシステム アクセス制御リスト (SACL) が含まれています。"
  syntax:
    content: 'public sealed class CommonSecurityDescriptor : System.Security.AccessControl.GenericSecurityDescriptor'
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericSecurityDescriptor
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - System.Security.AccessControl.GenericSecurityDescriptor.Revision
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>から、指定したクラス<xref href=&quot;System.Security.AccessControl.RawSecurityDescriptor&quot;></xref>オブジェクト。"
  remarks: "場合元となる、基になるセキュリティ記述子新しい<xref:System.Security.AccessControl.RawSecurityDescriptor>オブジェクトの作成が含まれています`null`すべてのユーザーが単一のアクセス制御エントリ (ACE) での随意アクセス制御リスト (DACL) のフル アクセス (AEFA) が、DACL に追加します</xref:System.Security.AccessControl.RawSecurityDescriptor>。 アプリケーションでは、AEFA ACE が追加されているセキュリティ記述子の DACL を変更する場合は、その DACL が保存されるときに、DACL によって AEFA ACE が保存されます。       これは、意図せずプリンシパルへのアクセスを許可するアプリケーションになります。 このため、アプリケーションを AEFA ACE の有無を確認し、任意のセキュリティ記述子を変更する前に削除します。"
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.RawSecurityDescriptor rawSecurityDescriptor);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がコンテナー オブジェクトに関連付けられている場合は。"
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がディレクトリ オブジェクトに関連付けられている場合は。"
    - id: rawSecurityDescriptor
      type: System.Security.AccessControl.RawSecurityDescriptor
      description: "<xref href=&quot;System.Security.AccessControl.RawSecurityDescriptor&quot;> </xref>新しいを作成する対象のオブジェクト<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  id: '#ctor(System.Boolean,System.Boolean,System.String)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,String)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>指定したセキュリティ記述子定義言語 (SDDL) 文字列からのクラスです。"
  remarks: "場合元となる、基になるセキュリティ記述子新しい<xref:System.Security.AccessControl.RawSecurityDescriptor>オブジェクトの作成が含まれています`null`すべてのユーザーが単一のアクセス制御エントリ (ACE) での随意アクセス制御リスト (DACL) のフル アクセス (AEFA) が、DACL に追加します</xref:System.Security.AccessControl.RawSecurityDescriptor>。 アプリケーションでは、AEFA ACE が追加されているセキュリティ記述子の DACL を変更する場合は、その DACL が保存されるときに、DACL によって AEFA ACE が保存されます。       これは、意図せずプリンシパルへのアクセスを許可するアプリケーションになります。 このため、アプリケーションを AEFA ACE の有無を確認し、任意のセキュリティ記述子を変更する前に削除します。"
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, string sddlForm);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がコンテナー オブジェクトに関連付けられている場合は。"
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がディレクトリ オブジェクトに関連付けられている場合は。"
    - id: sddlForm
      type: System.String
      description: "新しい作成元の SDDL 文字列<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  id: '#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>バイト値の指定された配列からクラスです。"
  remarks: "場合元となる、基になるセキュリティ記述子新しい<xref:System.Security.AccessControl.RawSecurityDescriptor>オブジェクトの作成が含まれています`null`すべてのユーザーが単一のアクセス制御エントリ (ACE) での随意アクセス制御リスト (DACL) のフル アクセス (AEFA) が、DACL に追加します</xref:System.Security.AccessControl.RawSecurityDescriptor>。 アプリケーションでは、AEFA ACE が追加されているセキュリティ記述子の DACL を変更する場合は、その DACL が保存されるときに、DACL によって AEFA ACE が保存されます。       これは、意図せずプリンシパルへのアクセスを許可するアプリケーションになります。 このため、アプリケーションを AEFA ACE の有無を確認し、任意のセキュリティ記述子を変更する前に削除します。"
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, byte[] binaryForm, int offset);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がコンテナー オブジェクトに関連付けられている場合は。"
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がディレクトリ オブジェクトに関連付けられている場合は。"
    - id: binaryForm
      type: System.Byte[]
      description: "新しいを作成する対象のバイト値の配列<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
    - id: offset
      type: System.Int32
      description: "内のオフセット、`binaryForm`のコピーを開始する配列。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)'
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>クラス指定した情報からです。"
  remarks: "場合元となる、基になるセキュリティ記述子新しい<xref:System.Security.AccessControl.RawSecurityDescriptor>オブジェクトの作成が含まれています`null`すべてのユーザーが単一のアクセス制御エントリ (ACE) での随意アクセス制御リスト (DACL) のフル アクセス (AEFA) が、DACL に追加します</xref:System.Security.AccessControl.RawSecurityDescriptor>。 アプリケーションでは、AEFA ACE が追加されているセキュリティ記述子の DACL を変更する場合は、その DACL が保存されるときに、DACL によって AEFA ACE が保存されます。       これは、意図せずプリンシパルへのアクセスを許可するアプリケーションになります。 このため、アプリケーションを AEFA ACE の有無を確認し、任意のセキュリティ記述子を変更する前に削除します。"
  syntax:
    content: public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.ControlFlags flags, System.Security.Principal.SecurityIdentifier owner, System.Security.Principal.SecurityIdentifier group, System.Security.AccessControl.SystemAcl systemAcl, System.Security.AccessControl.DiscretionaryAcl discretionaryAcl);
    parameters:
    - id: isContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がコンテナー オブジェクトに関連付けられている場合は。"
    - id: isDS
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>新しいセキュリティ記述子がディレクトリ オブジェクトに関連付けられている場合は。"
    - id: flags
      type: System.Security.AccessControl.ControlFlags
      description: "新しい動作を指定するフラグ<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
    - id: owner
      type: System.Security.Principal.SecurityIdentifier
      description: "新しい所有者<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
    - id: group
      type: System.Security.Principal.SecurityIdentifier
      description: "新しいプライマリ グループ<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
    - id: systemAcl
      type: System.Security.AccessControl.SystemAcl
      description: "システム アクセス制御リスト (SACL)、新しい<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
    - id: discretionaryAcl
      type: System.Security.AccessControl.DiscretionaryAcl
      description: "新しいの随意アクセス制御リスト (DACL) <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>オブジェクト。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  id: AddDiscretionaryAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: AddDiscretionaryAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "設定、<xref:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*>プロパティをこの<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>インスタンスとセット、 <xref href=&quot;System.Security.AccessControl.ControlFlags&quot;> </xref>フラグ</xref:System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*>。"
  remarks: "<xref:System.Security.AccessControl.DiscretionaryAcl>を使用<xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A>し<xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A>この<xref:System.Security.AccessControl.CommonSecurityDescriptor>。</xref:System.Security.AccessControl.CommonSecurityDescriptor>のプロパティ</xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A></xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A></xref:System.Security.AccessControl.DiscretionaryAcl>のコンス トラクター"
  syntax:
    content: public void AddDiscretionaryAcl (byte revision, int trusted);
    parameters:
    - id: revision
      type: System.Byte
      description: "新しいリビジョン レベル<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクト。"
    - id: trusted
      type: System.Int32
      description: "アクセス制御エントリ (Ace) の数この<xref href=&quot;System.Security.AccessControl.DiscretionaryAcl&quot;></xref>オブジェクトを含めることができます。 この番号は、ヒントとしてのみ使用するのには。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  id: AddSystemAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: AddSystemAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "設定、<xref:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*>プロパティをこの<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>インスタンスとセット、 <xref href=&quot;System.Security.AccessControl.ControlFlags&quot;> </xref>フラグ</xref:System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*>。"
  remarks: "<xref:System.Security.AccessControl.SystemAcl>使用<xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A>し<xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A>この<xref:System.Security.AccessControl.CommonSecurityDescriptor>。</xref:System.Security.AccessControl.CommonSecurityDescriptor>のプロパティ</xref:System.Security.AccessControl.CommonSecurityDescriptor.IsDS%2A></xref:System.Security.AccessControl.CommonSecurityDescriptor.IsContainer%2A></xref:System.Security.AccessControl.SystemAcl>のコンス トラクター"
  syntax:
    content: public void AddSystemAcl (byte revision, int trusted);
    parameters:
    - id: revision
      type: System.Byte
      description: "新しいリビジョン レベル<xref href=&quot;System.Security.AccessControl.SystemAcl&quot;></xref>オブジェクト。"
    - id: trusted
      type: System.Int32
      description: "追加します。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  id: ControlFlags
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: ControlFlags
  nameWithType: CommonSecurityDescriptor.ControlFlags
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "動作を指定する値を取得、 <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>オブジェクト。"
  syntax:
    content: public override System.Security.AccessControl.ControlFlags ControlFlags { get; }
    return:
      type: System.Security.AccessControl.ControlFlags
      description: "1 つ以上の値、 <xref href=&quot;System.Security.AccessControl.ControlFlags&quot;> </xref>列挙論理 OR 演算と組み合わせて使用します。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  id: DiscretionaryAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: DiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "随意アクセス制御リスト (DACL) を設定を取得または<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。 DACL には、アクセス ルールが含まれています。"
  remarks: "このプロパティ設定されている場合`null`DACL にフル アクセス (AEFA) が追加されたすべてのユーザーが単一のアクセス制御エントリ (ACE)。 アプリケーションでは、AEFA ACE が追加されているセキュリティ記述子の DACL を変更する場合は、その DACL が保存されるときに、DACL によって AEFA ACE が保存されます。       これは、意図せずプリンシパルへのアクセスを許可するアプリケーションになります。 このため、アプリケーションを AEFA ACE の有無を確認し、任意のセキュリティ記述子を変更する前に削除します。"
  syntax:
    content: public System.Security.AccessControl.DiscretionaryAcl DiscretionaryAcl { get; set; }
    return:
      type: System.Security.AccessControl.DiscretionaryAcl
      description: "この DACL <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>オブジェクト。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group
  id: Group
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: Group
  nameWithType: CommonSecurityDescriptor.Group
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Group
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "プライマリ グループを設定を取得または<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  syntax:
    content: public override System.Security.Principal.SecurityIdentifier Group { get; set; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "このプライマリ グループ<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.Group*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  id: IsContainer
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsContainer
  nameWithType: CommonSecurityDescriptor.IsContainer
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "オブジェクトがこれに関連付けられているかどうかを指定するブール値を取得<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクトがコンテナー オブジェクトです。"
  syntax:
    content: public bool IsContainer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>オブジェクトがこれに関連付けられている場合<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>がコンテナー オブジェクトでは、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  id: IsDiscretionaryAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsDiscretionaryAclCanonical
  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "随意アクセス制御リスト (DACL) がこれに関連付けられているかどうかを指定するブール値を取得<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクトが正規の順序で。"
  syntax:
    content: public bool IsDiscretionaryAclCanonical { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>DACL がこれに関連付けられている場合<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>正規順序であるオブジェクトは、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  id: IsDS
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsDS
  nameWithType: CommonSecurityDescriptor.IsDS
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "オブジェクトがこれに関連付けられているかどうかを指定するブール値を取得<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクトがディレクトリ オブジェクト。"
  syntax:
    content: public bool IsDS { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>オブジェクトがこれに関連付けられている場合<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>がディレクトリ オブジェクトでは、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsDS*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  id: IsSystemAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: IsSystemAclCanonical
  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "システム アクセス制御リスト (SACL) がこれに関連付けられているかどうかを指定するブール値を取得<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクトが正規の順序で。"
  syntax:
    content: public bool IsSystemAclCanonical { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>SACL がこれに関連付けられている場合<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>正規順序であるオブジェクトは、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  id: Owner
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: Owner
  nameWithType: CommonSecurityDescriptor.Owner
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "これに関連付けられているオブジェクトの所有者の設定を取得または<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  syntax:
    content: public override System.Security.Principal.SecurityIdentifier Owner { get; set; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "これに関連付けられているオブジェクトの所有者<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  id: PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: PurgeAccessControl(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "これに関連付けられている随意アクセス制御リスト (DACL) から指定したセキュリティ識別子のすべてのアクセス規則を削除<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  remarks: "プリンシパルへのアクセスを許可する意図を避けるためには、アプリケーションする必要がありますの有無を確認、許可のすべてのユーザー アクセス (AEFA) アクセス制御エントリ (ACE) の完全および DACL を変更する前に削除します。"
  syntax:
    content: public void PurgeAccessControl (System.Security.Principal.SecurityIdentifier sid);
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "アクセス規則を削除する対象のセキュリティ識別子です。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  id: PurgeAudit(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: PurgeAudit(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "これに関連付けられているシステム アクセス制御リスト (SACL) から指定したセキュリティ識別子のすべての監査規則を削除<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。"
  syntax:
    content: public void PurgeAudit (System.Security.Principal.SecurityIdentifier sid);
    parameters:
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: "監査規則を削除する対象のセキュリティ識別子です。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  id: SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: SetDiscretionaryAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "これに関連付けられている随意アクセス制御リスト (DACL) の継承の保護を設定<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。 保護されている Dacl は、親コンテナーからアクセス規則を継承しません。"
  syntax:
    content: public void SetDiscretionaryAclProtection (bool isProtected, bool preserveInheritance);
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>DACL を継承から保護します。"
    - id: preserveInheritance
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>保持するには、DACL; のアクセス ルールを継承<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> DACL から継承されたアクセス規則を削除します。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  id: SetSystemAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: SetSystemAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "これに関連付けられているシステム アクセス制御リスト (SACL) の継承の保護を設定<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。 保護されている Sacl は監査規則が親コンテナーから継承されません。"
  syntax:
    content: public void SetSystemAclProtection (bool isProtected, bool preserveInheritance);
    parameters:
    - id: isProtected
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>SACL を継承から保護します。"
    - id: preserveInheritance
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>SACL; の継承された監査規則を保持するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> SACL から継承された監査規則を削除します。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  id: SystemAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  langs:
  - csharp
  name: SystemAcl
  nameWithType: CommonSecurityDescriptor.SystemAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "システム アクセス制御リスト (SACL) を設定を取得または<xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;></xref>オブジェクト。 SACL には、監査規則が含まれています。"
  syntax:
    content: public System.Security.AccessControl.SystemAcl SystemAcl { get; set; }
    return:
      type: System.Security.AccessControl.SystemAcl
      description: "この SACL <xref href=&quot;System.Security.AccessControl.CommonSecurityDescriptor&quot;> </xref>オブジェクト。"
  overload: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: System.Security.AccessControl.GenericSecurityDescriptor
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawSecurityDescriptor)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,RawSecurityDescriptor)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.RawSecurityDescriptor
  parent: System.Security.AccessControl
  isExternal: false
  name: RawSecurityDescriptor
  nameWithType: RawSecurityDescriptor
  fullName: System.Security.AccessControl.RawSecurityDescriptor
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.String)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,String)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.SystemAcl,System.Security.AccessControl.DiscretionaryAcl)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(Boolean,Boolean,ControlFlags,SecurityIdentifier,SecurityIdentifier,SystemAcl,DiscretionaryAcl)
- uid: System.Security.AccessControl.ControlFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: ControlFlags
  nameWithType: ControlFlags
  fullName: System.Security.AccessControl.ControlFlags
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.AccessControl.SystemAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: SystemAcl
  nameWithType: SystemAcl
  fullName: System.Security.AccessControl.SystemAcl
- uid: System.Security.AccessControl.DiscretionaryAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: DiscretionaryAcl
  nameWithType: DiscretionaryAcl
  fullName: System.Security.AccessControl.DiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddDiscretionaryAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl(Byte,Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(System.Byte,System.Int32)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddSystemAcl(Byte,Int32)
  nameWithType: CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl(Byte,Int32)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: ControlFlags
  nameWithType: CommonSecurityDescriptor.ControlFlags
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags
- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: DiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Group
  nameWithType: CommonSecurityDescriptor.Group
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Group
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsContainer
  nameWithType: CommonSecurityDescriptor.IsContainer
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDiscretionaryAclCanonical
  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDS
  nameWithType: CommonSecurityDescriptor.IsDS
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsDS
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsSystemAclCanonical
  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Owner
  nameWithType: CommonSecurityDescriptor.Owner
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.Owner
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAccessControl(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(SecurityIdentifier)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAudit(SecurityIdentifier)
  nameWithType: CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(SecurityIdentifier)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetDiscretionaryAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(Boolean,Boolean)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(System.Boolean,System.Boolean)
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetSystemAclProtection(Boolean,Boolean)
  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(Boolean,Boolean)
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SystemAcl
  nameWithType: CommonSecurityDescriptor.SystemAcl
  fullName: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.#ctor*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: CommonSecurityDescriptor
  nameWithType: CommonSecurityDescriptor.CommonSecurityDescriptor
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddDiscretionaryAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddDiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.AddDiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.AddSystemAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: AddSystemAcl
  nameWithType: CommonSecurityDescriptor.AddSystemAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.ControlFlags*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: ControlFlags
  nameWithType: CommonSecurityDescriptor.ControlFlags
- uid: System.Security.AccessControl.CommonSecurityDescriptor.DiscretionaryAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: DiscretionaryAcl
  nameWithType: CommonSecurityDescriptor.DiscretionaryAcl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Group*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Group
  nameWithType: CommonSecurityDescriptor.Group
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsContainer*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsContainer
  nameWithType: CommonSecurityDescriptor.IsContainer
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDiscretionaryAclCanonical*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDiscretionaryAclCanonical
  nameWithType: CommonSecurityDescriptor.IsDiscretionaryAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsDS*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsDS
  nameWithType: CommonSecurityDescriptor.IsDS
- uid: System.Security.AccessControl.CommonSecurityDescriptor.IsSystemAclCanonical*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: IsSystemAclCanonical
  nameWithType: CommonSecurityDescriptor.IsSystemAclCanonical
- uid: System.Security.AccessControl.CommonSecurityDescriptor.Owner*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: Owner
  nameWithType: CommonSecurityDescriptor.Owner
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAccessControl
  nameWithType: CommonSecurityDescriptor.PurgeAccessControl
- uid: System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: PurgeAudit
  nameWithType: CommonSecurityDescriptor.PurgeAudit
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetDiscretionaryAclProtection
  nameWithType: CommonSecurityDescriptor.SetDiscretionaryAclProtection
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SetSystemAclProtection
  nameWithType: CommonSecurityDescriptor.SetSystemAclProtection
- uid: System.Security.AccessControl.CommonSecurityDescriptor.SystemAcl*
  parent: System.Security.AccessControl.CommonSecurityDescriptor
  isExternal: false
  name: SystemAcl
  nameWithType: CommonSecurityDescriptor.SystemAcl
