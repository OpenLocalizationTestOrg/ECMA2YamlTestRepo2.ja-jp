### YamlMime:ManagedReference
items:
- uid: System.Data.Services.Client.ChangeOperationResponse
  id: ChangeOperationResponse
  children:
  - System.Data.Services.Client.ChangeOperationResponse.Descriptor
  langs:
  - csharp
  name: ChangeOperationResponse
  nameWithType: ChangeOperationResponse
  fullName: System.Data.Services.Client.ChangeOperationResponse
  type: Class
  summary: "呼び出しの後に結果が返される<xref:System.Data.Services.Client.DataServiceContext.SaveChanges*>によって返された操作応答を列挙するときに、 <xref href=&quot;System.Data.Services.Client.DataServiceResponse&quot;> </xref>クラス</xref:System.Data.Services.Client.DataServiceContext.SaveChanges*>"
  remarks: "ChangeOperationResponse オブジェクトは、このライブラリのユーザーが直接構築されるものではありません。 <xref:System.Data.Services.Client.DataServiceResponse>クラス</xref:System.Data.Services.Client.DataServiceResponse>の列挙子を使用して返された操作応答を列挙するときに、代わりに、参照が返されます       <xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A>保留中の変更を<xref:System.Data.Services.Client.DataServiceContext>最後の呼び出し以降に<xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A>。</xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A></xref:System.Data.Services.Client.DataServiceContext>によって収集されたデータ サービスに送信します。</xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A> 変更は、呼び出すことによって、コンテキストに追加されます<xref:System.Data.Services.Client.DataServiceContext.AddObject%2A>、 <xref:System.Data.Services.Client.DataServiceContext.AddLink%2A>、 <xref:System.Data.Services.Client.DataServiceContext.DeleteObject%2A>、 <xref:System.Data.Services.Client.DataServiceContext.DeleteLink%2A>、 <xref:System.Data.Services.Client.DataServiceContext.Detach%2A>、<xref:System.Data.Services.Client.DataServiceContext.DetachLink%2A>と同様のメソッド</xref:System.Data.Services.Client.DataServiceContext.DetachLink%2A></xref:System.Data.Services.Client.DataServiceContext.Detach%2A></xref:System.Data.Services.Client.DataServiceContext.DeleteLink%2A></xref:System.Data.Services.Client.DataServiceContext.DeleteObject%2A></xref:System.Data.Services.Client.DataServiceContext.AddLink%2A></xref:System.Data.Services.Client.DataServiceContext.AddObject%2A>。       <xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A>返します、<xref:System.Data.Services.Client.DataServiceResponse>データ サービスに送信されたすべての操作への応答を表す</xref:System.Data.Services.Client.DataServiceResponse>。</xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A> <xref:System.Data.Services.Client.DataServiceResponse>オブジェクトには、さらのシーケンスを格納する ChangeOperationResponse オブジェクトのシーケンスが含まれています<xref:System.Data.Services.Client.EntityDescriptor>または<xref:System.Data.Services.Client.LinkDescriptor>永続化または試行された変更を表すインスタンス。</xref:System.Data.Services.Client.LinkDescriptor> </xref:System.Data.Services.Client.EntityDescriptor> </xref:System.Data.Services.Client.DataServiceResponse> 。"
  example:
  - "The following code shows how to process the results of a call to <xref:System.Data.Services.Client.DataServiceContext.SaveChanges%2A>.  \n  \n```  \nDataServiceContext service = new DataServiceContext(new Uri(\"http://myserviceroot\"));  \n  \n// Do insert, update, delete, or attach operations.  \n  \nDataServiceResponse dsr;  \n  \ntry  \n{  \n    dsr = service.SaveChanges(SaveChangesOptions.Batch);    \n   // Or service.SaveChanges(SaveChangesOptions.ContinueOnError);   \n   //Or service.SaveChanges();  \n   // If there are no errors during save changes, process the results:  \n  \n    if (dsr.IsBatchResponse)  \n    {  \n           /*inspect HTTP artifacts associated with the entire batch:  \n                             dsr.BatchHeaders, dsr.BatchStatusCode*/ }  \n  \n    foreach (ChangeOperationResponse cor in dsr)  \n    {  \n  \n            if (cor.Descriptor is EntityDescriptor)  \n            {  \n                EntityDescriptor ed = (EntityDescriptor)cor.Descriptor;  \n                // This should be the case if  \n                // SaveChanges did not throw an exception.    \n  \n                // After an entity is processed by SaveChanges,  \n                // it is always moved to the unchanged state.  \n                System.Diagnostics.Debug.Assert(  \n                           ed.State == EntityStates.Unchanged);    \n                // This shows that the state should be unchanged if  \n                // the result is success.  \n  \n                //process the entity in the response payload: ed.Entity  \n            }  \n            else if (cor.Descriptor is LinkDescriptor)  \n            {  \n                LinkDescriptor ld = (LinkDescriptor)cor.Descriptor;  \n               // This should be the case if SaveChanges did not throw an exception.  \n  \n               // After an entity is processed by SaveChanges it  \n               // is always moved to the unchanged state.  \n                System.Diagnostics.Debug.Assert(  \n                            ld.State == EntityStates.Unchanged);    \n                // The state should be unchanged if the result is success.  \n  \n                //process the link in the response payload: ld.Source,  \n                // ld.SourceProperty, or ld.Target.  \n            }  \n     }  \n  \n}  \ncatch (DataServiceSaveException se)  \n{  \n    // Error while saving changes  \n    dsr = se.Response;  \n  \n    if (dsr.IsBatchResponse)   \n    {   \n        /*inspect HTTP artifacts associated with the entire batch:  \n             dsr.BatchHeaders, dsr.BatchStatusCode*/   \n}      \n}  \n  \n    foreach (ChangeOperationResponse cor in dsr)  \n    {  \n        if (cor.Error != null)  \n        {  \n            //process error  \n        }  \n        else  \n        {  \n            // same success case processing as in the loop over DSRs results in   \n            // the try block. You could put that processing in a method   \n            // and call it from here.      \n        }  \n    }  \n  \n}  \n  \n catch(Exception)  \n {  \n    // Error while saving changes, but not thrown by the client library.  \n  \n    // Process ArgumentException, InvalidOperationException, or similar.  \n}  \n}  \n  \n```"
  syntax:
    content: 'public sealed class ChangeOperationResponse : System.Data.Services.Client.OperationResponse'
  inheritance:
  - System.Object
  - System.Data.Services.Client.OperationResponse
  implements: []
  inheritedMembers:
  - System.Data.Services.Client.OperationResponse.Error
  - System.Data.Services.Client.OperationResponse.Headers
  - System.Data.Services.Client.OperationResponse.StatusCode
  platform:
  - net462
- uid: System.Data.Services.Client.ChangeOperationResponse.Descriptor
  id: Descriptor
  parent: System.Data.Services.Client.ChangeOperationResponse
  langs:
  - csharp
  name: Descriptor
  nameWithType: ChangeOperationResponse.Descriptor
  fullName: System.Data.Services.Client.ChangeOperationResponse.Descriptor
  type: Property
  assemblies:
  - System.Data.Services.Client
  namespace: System.Data.Services.Client
  summary: "取得、 <xref href=&quot;System.Data.Services.Client.EntityDescriptor&quot;> </xref>または<xref href=&quot;System.Data.Services.Client.LinkDescriptor&quot;></xref>変更操作によって変更します。"
  syntax:
    content: public System.Data.Services.Client.Descriptor Descriptor { get; }
    return:
      type: System.Data.Services.Client.Descriptor
      description: "<xref href=&quot;System.Data.Services.Client.EntityDescriptor&quot;> </xref>または<xref href=&quot;System.Data.Services.Client.LinkDescriptor&quot;></xref>変更操作によって変更します。"
  overload: System.Data.Services.Client.ChangeOperationResponse.Descriptor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Services.Client.OperationResponse
  isExternal: false
  name: System.Data.Services.Client.OperationResponse
- uid: System.Data.Services.Client.ChangeOperationResponse.Descriptor
  parent: System.Data.Services.Client.ChangeOperationResponse
  isExternal: false
  name: Descriptor
  nameWithType: ChangeOperationResponse.Descriptor
  fullName: System.Data.Services.Client.ChangeOperationResponse.Descriptor
- uid: System.Data.Services.Client.Descriptor
  parent: System.Data.Services.Client
  isExternal: false
  name: Descriptor
  nameWithType: Descriptor
  fullName: System.Data.Services.Client.Descriptor
- uid: System.Data.Services.Client.ChangeOperationResponse.Descriptor*
  parent: System.Data.Services.Client.ChangeOperationResponse
  isExternal: false
  name: Descriptor
  nameWithType: ChangeOperationResponse.Descriptor
