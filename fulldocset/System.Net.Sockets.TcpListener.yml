### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.TcpListener
  id: TcpListener
  children:
  - System.Net.Sockets.TcpListener.#ctor(System.Int32)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpListener.AcceptSocket
  - System.Net.Sockets.TcpListener.AcceptSocketAsync
  - System.Net.Sockets.TcpListener.AcceptTcpClient
  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  - System.Net.Sockets.TcpListener.Active
  - System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  - System.Net.Sockets.TcpListener.Create(System.Int32)
  - System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  - System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  - System.Net.Sockets.TcpListener.ExclusiveAddressUse
  - System.Net.Sockets.TcpListener.LocalEndpoint
  - System.Net.Sockets.TcpListener.Pending
  - System.Net.Sockets.TcpListener.Server
  - System.Net.Sockets.TcpListener.Start
  - System.Net.Sockets.TcpListener.Start(System.Int32)
  - System.Net.Sockets.TcpListener.Stop
  langs:
  - csharp
  name: TcpListener
  nameWithType: TcpListener
  fullName: System.Net.Sockets.TcpListener
  type: Class
  summary: "TCP ネットワーク クライアントからの接続をリッスンします。"
  remarks: "TcpListener クラスでは、リッスンして、同期モードのブロックで着信接続要求を受け入れるための簡単な方法を提供します。 使用するか、<xref:System.Net.Sockets.TcpClient>または<xref:System.Net.Sockets.Socket>TcpListener に接続する</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpClient>。 TcpListener を使用して、作成、 <xref:System.Net.IPEndPoint>、ローカル IP アドレスとポート番号、またはポート番号だけです</xref:System.Net.IPEndPoint>。 指定<xref:System.Net.IPAddress.Any>ローカル IP アドレスとする場合は、基になるサービス プロバイダーをそれらの値を割り当てるには、ローカル ポート番号の場合は 0 です</xref:System.Net.IPAddress.Any>。 この方法を選択する場合を使用できます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>ソケットが接続した後に、割り当てられている情報を識別するプロパティ</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>。       使用して、<xref:System.Net.Sockets.TcpListener.Start%2A>接続要求のリッスンを開始するメソッド</xref:System.Net.Sockets.TcpListener.Start%2A>。 <xref:System.Net.Sockets.TcpListener.Start%2A>するまでキューの着信接続するか、呼び出す<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッドまたはそれがキューに登録<xref:System.Net.Sockets.SocketOptionName>。</xref:System.Net.Sockets.SocketOptionName> </xref:System.Net.Sockets.TcpListener.Stop%2A></xref:System.Net.Sockets.TcpListener.Start%2A> いずれかを使用して<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>または<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>着信接続要求のキューからの接続をプルする</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A></xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。 これら&2; つの方法がブロックされます。 使用することができますがブロックされないようにする場合、<xref:System.Net.Sockets.TcpListener.Pending%2A>接続要求がキューで利用可能なかどうかを判断するには、最初のメソッド</xref:System.Net.Sockets.TcpListener.Pending%2A>。       呼び出す、 <xref:System.Net.Sockets.TcpListener.Stop%2A>、TcpListener を閉じます</xref:System.Net.Sockets.TcpListener.Stop%2A>。      > [!NOTE] >、<xref:System.Net.Sockets.TcpListener.Stop%2A>承認済みのすべての接続は閉じられません</xref:System.Net.Sockets.TcpListener.Stop%2A>。 ユーザーは、これらを個別に閉じる担当します。"
  example:
  - "The following code example creates a TcpListener.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/t-system.net.sockets.tcp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/t-system.net.sockets.tcp_0_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/t-system.net.sockets.tcp_0_1.vb)]  \n  \n See <xref:System.Net.Sockets.TcpClient> for a client example."
  syntax:
    content: public class TcpListener
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(Int32)
  nameWithType: TcpListener.TcpListener(Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>は指定されたポートでリッスンするクラス。"
  remarks: "このコンス トラクターは今後使用しません。 使用して、<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName>または<xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>コンス トラクター</xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName> 。       このコンス トラクターでは、受信試行の接続をリッスンするポート番号を指定することができます。 このコンス トラクターでは、基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てます。 使用されているローカル ポートを限定しない場合は、ポート番号の場合は 0 を指定できます。 この場合、サービス プロバイダーは 1024 ~ 5000 で、使用可能なポート番号を割り当てます。 このアプローチを使用する場合を使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出することができます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>プロパティ</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>。       呼び出す、<xref:System.Net.Sockets.TcpListener.Start%2A>着信接続要求のリッスンを開始するメソッド</xref:System.Net.Sockets.TcpListener.Start%2A>。"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.TcpListener> using a local port number.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_18_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_18_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_18_1.vb)]"
  syntax:
    content: public TcpListener (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "着信接続の試行をリッスンするポートです。"
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>間<xref:System.Net.IPEndPoint.MinPort>と<xref:System.Net.IPEndPoint.MaxPort>です。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(IPEndPoint)
  nameWithType: TcpListener.TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>指定したローカル エンドポイントを持つクラス。"
  remarks: "このコンス トラクターでは、ローカル IP アドレスを指定することができ、着信接続をリッスンするポート番号がしようとします。 このコンス トラクターを使用して、前に作成する必要があります、<xref:System.Net.IPEndPoint>必要なローカル IP アドレスとポート番号を使用します</xref:System.Net.IPEndPoint>。 これを渡す<xref:System.Net.IPEndPoint>としてコンス トラクターに、`localEP`パラメーター</xref:System.Net.IPEndPoint> 。       ローカル アドレスの割り当てを限定しない場合は、作成、<xref:System.Net.IPEndPoint>を使用して<xref:System.Net.IPAddress.Any?displayProperty=fullName>アドレス パラメーターと、基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てます</xref:System.Net.IPAddress.Any?displayProperty=fullName></xref:System.Net.IPEndPoint>。 これにより、複数のネットワーク インターフェイスがある場合に、アプリケーションを簡略化のに役立ちます。 使用されているローカル ポートを限定しない場合は、作成、<xref:System.Net.IPEndPoint>ポート番号として 0 を使用します</xref:System.Net.IPEndPoint>。 この場合、サービス プロバイダーは 1024 ~ 5000 で、使用可能なポート番号を割り当てます。 このアプローチを使用する場合を使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出することができます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>プロパティ</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>。       呼び出す、<xref:System.Net.Sockets.TcpListener.Start%2A>着信接続要求のリッスンを開始するメソッド</xref:System.Net.Sockets.TcpListener.Start%2A>。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using the local endpoint.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_20_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_20_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_20_1.vb)]"
  syntax:
    content: public TcpListener (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "の<xref:System.Net.IPEndPoint><xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>リスナーをバインドするローカル エンドポイントを表す</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: TcpListener(IPAddress,Int32)
  nameWithType: TcpListener.TcpListener(IPAddress,Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>着信接続をリッスンしているクラスは、指定されたローカル IP アドレスとポート番号に試みます。"
  remarks: "このコンス トラクターでは、ローカル IP アドレスを指定することができ、着信接続をリッスンするポート番号がしようとします。 このコンス トラクターを呼び出す前に作成する必要が最初、 <xref:System.Net.IPAddress>、必要なローカル アドレスを使用します</xref:System.Net.IPAddress>。 これを渡す<xref:System.Net.IPAddress>としてコンス トラクターに、`localaddr`パラメーター</xref:System.Net.IPAddress> 。 ローカル アドレスの割り当てを限定しない場合は、指定<xref:System.Net.IPAddress.Any?displayProperty=fullName>の`localaddr`パラメーター、および基になるサービス プロバイダーは最も適切なネットワーク アドレスを割り当てます</xref:System.Net.IPAddress.Any?displayProperty=fullName>。 これにより、複数のネットワーク インターフェイスがある場合に、アプリケーションを簡略化のに役立ちます。 使用されているローカル ポートを限定しない場合は、ポート番号の場合は 0 を指定できます。 この場合、サービス プロバイダーは 1024 ~ 5000 で、使用可能なポート番号を割り当てます。 このアプローチを使用する場合を使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出することができます、<xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>プロパティ</xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A>。       呼び出す、<xref:System.Net.Sockets.TcpListener.Start%2A>着信接続要求のリッスンを開始するメソッド</xref:System.Net.Sockets.TcpListener.Start%2A>。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example creates an instance of the <xref:System.Net.Sockets.TcpListener> class using a local IP address and port number.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.tcp_19_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.tcp_19_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_19_1.vb)]"
  syntax:
    content: public TcpListener (System.Net.IPAddress localaddr, int port);
    parameters:
    - id: localaddr
      type: System.Net.IPAddress
      description: "<xref:System.Net.IPAddress>ローカル IP アドレスを表す</xref:System.Net.IPAddress>。"
    - id: port
      type: System.Int32
      description: "着信接続の試行をリッスンするポートです。"
  overload: System.Net.Sockets.TcpListener.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localaddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>間<xref:System.Net.IPEndPoint.MinPort>と<xref:System.Net.IPEndPoint.MaxPort>です。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptSocket
  id: AcceptSocket
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptSocket()
  nameWithType: TcpListener.AcceptSocket()
  fullName: System.Net.Sockets.TcpListener.AcceptSocket()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "保留中の接続要求を受け付けます。"
  remarks: "受け入れはブロッキング メソッドを返す、<xref:System.Net.Sockets.Socket>データの送受信を行えます</xref:System.Net.Sockets.Socket>。 ブロックされないようにする場合は、使用、<xref:System.Net.Sockets.TcpListener.Pending%2A>接続要求が着信接続のキューで利用可能なかどうかを判断するメソッド</xref:System.Net.Sockets.TcpListener.Pending%2A>。       <xref:System.Net.Sockets.Socket>返されたリモート ホストの IP アドレスとポート番号で初期化されます</xref:System.Net.Sockets.Socket>。 いずれかを使用することができます、<xref:System.Net.Sockets.Socket.Send%2A>と<xref:System.Net.Sockets.Socket.Receive%2A>で使用できるメソッド、<xref:System.Net.Sockets.Socket>リモート ホストと通信するクラス</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.Socket.Receive%2A></xref:System.Net.Sockets.Socket.Send%2A>。 終了したらを使用して、 <xref:System.Net.Sockets.Socket>、必ずその<xref:System.Net.Sockets.Socket.Close%2A>メソッド</xref:System.Net.Sockets.Socket.Close%2A></xref:System.Net.Sockets.Socket>。 アプリケーションが比較的単純な場合は、使用を検討して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>受け入れメソッドではなく、メソッド</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 <xref:System.Net.Sockets.TcpClient>簡単な方法の同期モードのブロックのネットワーク経由でデータを送受信できます。</xref:System.Net.Sockets.TcpClient>      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "In the following code example, the AcceptSocket method is used to return a <xref:System.Net.Sockets.Socket>. This <xref:System.Net.Sockets.Socket> is used to communicate with the newly connected client.  \n  \n [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_7_1.cpp)]\n [!code-cs[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_7_1.cs)]\n [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_7_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket AcceptSocket ();
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "A<xref:System.Net.Sockets.Socket>データを送受信するために使用します</xref:System.Net.Sockets.Socket>。"
  overload: System.Net.Sockets.TcpListener.AcceptSocket*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.TcpListener.Start*>。</xref:System.Net.Sockets.TcpListener.Start*>への呼び出しにリスナーが開始されていません"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  id: AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptSocketAsync()
  nameWithType: TcpListener.AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "非同期操作として、保留中の接続要求を受け入れます。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、ソケット接続が許可された後に完了します</xref:System.Threading.Tasks.Task%601>。       <xref:System.Net.Sockets.Socket>で返される<xref:System.Threading.Tasks.Task%601>はリモート ホストの IP アドレスとポート番号で初期化します</xref:System.Threading.Tasks.Task%601></xref:System.Net.Sockets.Socket>。 いずれかを使用することができます、<xref:System.Net.Sockets.Socket.Send%2A>と<xref:System.Net.Sockets.Socket.Receive%2A>で使用できるメソッド、<xref:System.Net.Sockets.Socket>リモート ホストと通信するクラス</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.Socket.Receive%2A></xref:System.Net.Sockets.Socket.Send%2A>。 終了したらを使用して、 <xref:System.Net.Sockets.Socket>、必ずその<xref:System.Net.Sockets.Socket.Close%2A>メソッド</xref:System.Net.Sockets.Socket.Close%2A></xref:System.Net.Sockets.Socket>。 アプリケーションが比較的単純な場合は、使用を検討して、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>AcceptSocketAsync メソッドではなく、メソッド</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 <xref:System.Net.Sockets.TcpClient>簡単な方法の同期モードのブロックのネットワーク経由でデータを送受信できます。</xref:System.Net.Sockets.TcpClient>      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.Socket> AcceptSocketAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;非同期操作を表すタスク オブジェクト。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;タスク オブジェクトのプロパティを返します、<xref:System.Net.Sockets.Socket>データを送受信するために使用します</xref:System.Net.Sockets.Socket>。"
  overload: System.Net.Sockets.TcpListener.AcceptSocketAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.TcpListener.Start*>。</xref:System.Net.Sockets.TcpListener.Start*>への呼び出しにリスナーが開始されていません"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient
  id: AcceptTcpClient
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptTcpClient()
  nameWithType: TcpListener.AcceptTcpClient()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "保留中の接続要求を受け付けます。"
  remarks: "AcceptTcpClient はブロッキング メソッドを返す、<xref:System.Net.Sockets.TcpClient>データの送受信を行えます</xref:System.Net.Sockets.TcpClient>。 使用して、<xref:System.Net.Sockets.TcpListener.Pending%2A>がブロックされないようにする場合は、接続要求が着信接続のキューで利用可能なかどうかを調べます</xref:System.Net.Sockets.TcpListener.Pending%2A>。       <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName>基になるが<xref:System.Net.Sockets.NetworkStream>、返された<xref:System.Net.Sockets.TcpClient>。</xref:System.Net.Sockets.TcpClient></xref:System.Net.Sockets.NetworkStream>を入手する方法</xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName>を使用して <xref:System.Net.Sockets.NetworkStream>くれますメソッドでのリモート ホストと送受信します</xref:System.Net.Sockets.NetworkStream>。 経由は、 <xref:System.Net.Sockets.TcpClient>、必ずその<xref:System.Net.Sockets.TcpClient.Close%2A>メソッド</xref:System.Net.Sockets.TcpClient.Close%2A></xref:System.Net.Sockets.TcpClient>。 <xref:System.Net.Sockets.TcpClient>提供物、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>の使用を検討して</xref:System.Net.Sockets.TcpClient>より柔軟性が向上する場合      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "In the following code example, the AcceptTcpClient method is used to return a <xref:System.Net.Sockets.TcpClient>. This <xref:System.Net.Sockets.TcpClient> is used to communicate with the newly connected client.  \n  \n [!code-cs[Classic TcpListenerExample#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_15_1.cs)]\n [!code-cpp[Classic TcpListenerExample#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_15_1.cpp)]\n [!code-vb[Classic TcpListenerExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_15_1.vb)]"
  syntax:
    content: public System.Net.Sockets.TcpClient AcceptTcpClient ();
    parameters: []
    return:
      type: System.Net.Sockets.TcpClient
      description: "A <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref>データを送受信するために使用します。"
  overload: System.Net.Sockets.TcpListener.AcceptTcpClient*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.TcpListener.Start*>。</xref:System.Net.Sockets.TcpListener.Start*>への呼び出しにリスナーが開始されていません"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "使用して、 &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  id: AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AcceptTcpClientAsync()
  nameWithType: TcpListener.AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "非同期操作として、保留中の接続要求を受け入れます。"
  remarks: "この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task%601>オブジェクトは、TCP 接続が許可された後に完了します</xref:System.Threading.Tasks.Task%601>。       使用して<xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName>、基になる<xref:System.Net.Sockets.NetworkStream>の返された<xref:System.Net.Sockets.TcpClient><xref:System.Threading.Tasks.Task%601>。</xref:System.Threading.Tasks.Task%601></xref:System.Net.Sockets.TcpClient></xref:System.Net.Sockets.NetworkStream>を入手する方法</xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> <xref:System.Net.Sockets.NetworkStream>くれますメソッドでのリモート ホストと送受信します</xref:System.Net.Sockets.NetworkStream>。 経由は、 <xref:System.Net.Sockets.TcpClient>、必ずその<xref:System.Net.Sockets.TcpClient.Close%2A>メソッド</xref:System.Net.Sockets.TcpClient.Close%2A></xref:System.Net.Sockets.TcpClient>。 <xref:System.Net.Sockets.TcpClient>提供物、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>または<xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>。</xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A></xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>使用を検討して</xref:System.Net.Sockets.TcpClient>より柔軟性が向上する場合      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.TcpClient> AcceptTcpClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
      description: "返します&lt;xref:System.Threading.Tasks.Task%601&gt;非同期操作を表すタスク オブジェクト。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;タスク オブジェクトのプロパティを返します、 <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref>データを送受信するために使用します。"
  overload: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.TcpListener.Start*>。</xref:System.Net.Sockets.TcpListener.Start*>への呼び出しにリスナーが開始されていません"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "使用して、 &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Active
  id: Active
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Active
  nameWithType: TcpListener.Active
  fullName: System.Net.Sockets.TcpListener.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "示す値を取得するかどうか<xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>クライアント接続のリッスンがアクティブにします。"
  remarks: "派生するクラス<xref:System.Net.Sockets.TcpListener>かどうかをこのプロパティを使用することができます、<xref:System.Net.Sockets.Socket>は着信接続要求をリッスンしている</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpListener>。 <xref:System.Net.Sockets.TcpClient.Active%2A>プロパティは、冗長を避けるために使用できます<xref:System.Net.Sockets.TcpListener.Start%2A>しようとします</xref:System.Net.Sockets.TcpListener.Start%2A></xref:System.Net.Sockets.TcpClient.Active%2A>。"
  syntax:
    content: protected bool Active { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>アクティブにリッスンしている以外の場合は、それ以外の場合は、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Sockets.TcpListener.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: TcpListener.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "有効または無効にネットワーク アドレス変換 (NAT) トラバーサル、 <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>インスタンス。"
  remarks: "AllowNatTraversal メソッドが有効にするにまたは NAT トラバーサルを無効にするため、<xref:System.Net.Sockets.TcpListener>インスタンス</xref:System.Net.Sockets.TcpListener>。 NAT トラバーサルを指定するには、Teredo、6to4、または ISATAP トンネルを使用します。       ときに、`allowed`パラメーターが false の場合、 <xref:System.Net.Sockets.SocketOptionName> <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel>に関連付けられているソケットでオプションが設定されています。</xref:System.Net.Sockets.SocketOptionName> NAT トラバーサルが明示的に無効になります、<xref:System.Net.Sockets.TcpListener>インスタンス</xref:System.Net.Sockets.TcpListener>。       ときに、`allowed`パラメーターが true の場合、 <xref:System.Net.Sockets.SocketOptionName> <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel>に関連付けられているソケットでオプションが設定されています。</xref:System.Net.Sockets.SocketOptionName> これは、NAT トラバーサルを許可することがあります、<xref:System.Net.Sockets.TcpListener>システム上でファイアウォール規則によって異なります</xref:System.Net.Sockets.TcpListener>。       AllowNatTraversal メソッドを呼び出す前に呼び出す必要があります、<xref:System.Net.Sockets.TcpListener.Start%2A>メソッド (前に、ソケットをバインドすると)、接続要求のリッスンが開始します</xref:System.Net.Sockets.TcpListener.Start%2A>。 後 AllowNatTraversal メソッドが呼び出された場合、 <xref:System.Net.Sockets.TcpListener.Start%2A>、メソッド、<xref:System.InvalidOperationException>がスローされます</xref:System.InvalidOperationException></xref:System.Net.Sockets.TcpListener.Start%2A>。       Teredo アドレスは、IPv6 アドレス プレフィックスが 2001年::/32 です。 Teredo アドレスは、通常の DNS 名解決によって返されるまたはローカル インターフェイスに割り当てられている IPv6 アドレスとして列挙できます。"
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "有効にするか、NAT トラバーサルを無効にするかどうかを指定するブール値。"
  overload: System.Net.Sockets.TcpListener.AllowNatTraversal*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.TcpListener.Start*>メソッド</xref:System.Net.Sockets.TcpListener.Start*>を呼び出した後、AllowNatTraversal メソッドが呼び出されました"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  id: BeginAcceptSocket(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: BeginAcceptSocket(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "着信接続の試行をそのまま使用する非同期操作を開始します。"
  remarks: "呼び出して、非同期 BeginAcceptSocket 操作を完了する必要があります、<xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>メソッド</xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A>。 通常、このメソッドはによって、`callback`を委任します。       このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでをブロックするを使用して、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッド</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>、返されたプロパティ<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別します</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/)エラーの詳細な説明をします</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates the use of the BeginAcceptSocket method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/1d0c3046-b366-41a2-aab6-_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/1d0c3046-b366-41a2-aab6-_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/1d0c3046-b366-41a2-aab6-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "受信操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、`callback`委任操作が完了するとします。"
    return:
      type: System.IAsyncResult
      description: "の<xref:System.IAsyncResult><xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>の非同期の作成を参照します。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.TcpListener.BeginAcceptSocket*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットへのアクセス中にエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  id: BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: BeginAcceptTcpClient(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "着信接続の試行をそのまま使用する非同期操作を開始します。"
  remarks: "呼び出して、非同期 BeginAcceptTcpClient 操作を完了する必要があります、<xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>メソッド</xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A>。 通常、このメソッドはによって、`callback`を委任します。       このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでをブロックするを使用して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッド</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。       詳細については、非同期プログラミング モデルを使用して、次を参照してください。[同期のメソッドを非同期に呼び出す](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/)エラーの詳細な説明をします</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates the use of the BeginAcceptTcpClient method to create and connect a socket. The callback delegate calls the <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/5290dfb8-7e8f-4cf6-b64e-_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/5290dfb8-7e8f-4cf6-b64e-_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/5290dfb8-7e8f-4cf6-b64e-_1.vb)]"
  syntax:
    content: public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>操作の完了時に呼び出すメソッドを参照するデリゲート</xref:System.AsyncCallback>。"
    - id: state
      type: System.Object
      description: "受信操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、`callback`委任操作が完了するとします。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>の非同期の作成を参照する、 <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref></xref:System.IAsyncResult> 。"
  overload: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットへのアクセス中にエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Create(System.Int32)
  id: Create(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Create(Int32)
  nameWithType: TcpListener.Create(Int32)
  fullName: System.Net.Sockets.TcpListener.Create(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "新たに作成<xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>のインスタンスを指定されたポートでリッスンします。"
  syntax:
    content: public static System.Net.Sockets.TcpListener Create (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "着信接続の試行をリッスンするポートです。"
    return:
      type: System.Net.Sockets.TcpListener
      description: "Returns <xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>.       新しい<xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>のインスタンスを指定されたポートでリッスンします。"
  overload: System.Net.Sockets.TcpListener.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  id: EndAcceptSocket(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: EndAcceptSocket(IAsyncResult)
  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "非同期的に受信接続の試行を受け入れるし、新たに作成<xref:System.Net.Sockets.Socket>をリモート ホスト間の通信を処理します</xref:System.Net.Sockets.Socket>。"
  remarks: "このメソッドは、操作するまでブロックを完了します。 この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッド</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。      > [!NOTE] > 呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>、返されたプロパティ<xref:System.Net.Sockets.Socket>をリモート ホストのネットワーク アドレスとポート番号を識別します</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/)エラーの詳細な説明をします</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> method to create and connect a socket. The callback delegate calls the EndAcceptSocket method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/cpp/m-system.net.sockets.tcp_14_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/csharp/m-system.net.sockets.tcp_14_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#4](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_14_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>メソッド</xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*></xref:System.IAsyncResult>。"
    return:
      type: System.Net.Sockets.Socket
      description: "A <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>       <xref:System.Net.Sockets.Socket>データを送受信するために使用します</xref:System.Net.Sockets.Socket>。"
  overload: System.Net.Sockets.TcpListener.EndAcceptSocket*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> asyncResult </code>への呼び出しでパラメーターが作成されませんでした、<xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>メソッド</xref:System.Net.Sockets.TcpListener.BeginAcceptSocket*>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndAcceptSocket メソッドが呼び出されました。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>にアクセスしようとしているときにエラーが発生しました 詳細については「解説」セクションを参照してください。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  id: EndAcceptTcpClient(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: EndAcceptTcpClient(IAsyncResult)
  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "非同期的に受信接続の試行を受け入れるし、新たに作成<xref href=&quot;System.Net.Sockets.TcpClient&quot;></xref>をリモート ホスト間の通信を処理します。"
  remarks: "このメソッドは、操作するまでブロックを完了します。 この操作を同期的に実行するを使用して、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッド</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。      > [!NOTE] > 呼び出すことができます、<xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>基になるソケットのプロパティ (<xref:System.Net.Sockets.TcpClient.Client%2A>) をリモート ホストのネットワーク アドレスとポート番号を識別します</xref:System.Net.Sockets.TcpClient.Client%2A></xref:System.Net.Sockets.Socket.RemoteEndPoint%2A>。      > [!NOTE] > を受け取った場合、<xref:System.Net.Sockets.SocketException>を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/)エラーの詳細な説明をします</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName></xref:System.Net.Sockets.SocketException>。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates the use of the <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> method to create and connect a socket. The callback delegate calls the EndAcceptTcpClient method to end the asynchronous request.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/cpp/m-system.net.sockets.tcp_8_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/csharp/m-system.net.sockets.tcp_8_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#5](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_8_1.vb)]"
  syntax:
    content: public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>への呼び出しによって返される、<xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*>メソッド</xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient*></xref:System.IAsyncResult>。"
    return:
      type: System.Net.Sockets.TcpClient
      description: "A <xref href=&quot;System.Net.Sockets.TcpClient&quot;></xref>.       <xref href=&quot;System.Net.Sockets.TcpClient&quot;> </xref>データを送受信するために使用します。"
  overload: System.Net.Sockets.TcpListener.EndAcceptTcpClient*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "取得または設定、<xref:System.Boolean>値を指定するかどうか、 <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>により、特定のポートをリッスンする&1; つだけの基になるソケット</xref:System.Boolean>"
  remarks: "既定では、複数のリスナーは、特定のポートを聴くことができます。 ただし、リスナーの&1; つだけでは、ポートに送信されるネットワーク トラフィックの操作を実行できます。 複数のリスナーが特定のポートにバインドしようとすると、特定の IP アドレスを持つ&1; つはそのポートに送信されるネットワーク トラフィックを処理します。 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>特定のポートをリッスンしている複数のリスナーを防ぐためにプロパティ</xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A>を使用することができます。       呼び出しの前に、このプロパティ設定<xref:System.Net.Sockets.TcpListener.Start%2A>を呼び出したり、<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッドし、このプロパティを設定します</xref:System.Net.Sockets.TcpListener.Stop%2A></xref:System.Net.Sockets.TcpListener.Start%2A>。"
  example:
  - "The following code example gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/cpp/p-system.net.sockets.tcp_9_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/csharp/p-system.net.sockets.tcp_9_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#2](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_9_1.vb)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>により、1 つだけ<xref href=&quot;System.Net.Sockets.TcpListener&quot;></xref>特定のポートをリッスンするようにそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> Windows Server 2003 および Windows XP Service Pack 2 以降および<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>の他のすべてのバージョン。"
  overload: System.Net.Sockets.TcpListener.ExclusiveAddressUse*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref>が開始されました。 呼び出す、 <xref href=&quot;System.Net.Sockets.TcpListener.Stop&quot;> </xref>メソッドとし、セット、<xref:System.Net.Sockets.Socket.ExclusiveAddressUse*>プロパティ</xref:System.Net.Sockets.Socket.ExclusiveAddressUse*>。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "基になるソケットにアクセスしようとするときにエラーが発生しました。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "基になる<xref:System.Net.Sockets.Socket>が閉じられました</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  id: LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "基になる取得<xref:System.Net.EndPoint>、現在の<xref href=&quot;System.Net.Sockets.TcpListener&quot;> </xref></xref:System.Net.EndPoint> 。"
  remarks: "LocalEndpoint プロパティを使用して、ソケット接続が確立した後で着信クライアント接続要求をリッスンするように使用されているローカル ネットワーク インターフェイスとポート番号を特定することができます。 この<xref:System.Net.EndPoint><xref:System.Net.IPEndPoint>。</xref:System.Net.IPEndPoint></xref:System.Net.EndPoint>最初キャストする必要があります。 呼び出すことができます、 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName>、ローカル IP アドレスを取得するプロパティと<xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName>ローカル ポート番号を取得するプロパティ</xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName></xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName>。"
  example:
  - "The following code example displays the local IP address and port number on which the <xref:System.Net.Sockets.TcpListener> is listening for incoming connection requests.  \n  \n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/p-system.net.sockets.tcp_5_1.cpp)]\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_5_1.cs)]\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_5_1.vb)]"
  syntax:
    content: public System.Net.EndPoint LocalEndpoint { get; }
    return:
      type: System.Net.EndPoint
      description: "<xref:System.Net.EndPoint>先、<xref:System.Net.Sockets.Socket>がバインドされています</xref:System.Net.Sockets.Socket></xref:System.Net.EndPoint>。"
  overload: System.Net.Sockets.TcpListener.LocalEndpoint*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Pending
  id: Pending
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Pending()
  nameWithType: TcpListener.Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "保留中の接続要求があるかどうかを判断します。"
  remarks: "この非ブロッキング メソッドは、保留中の接続要求があるかを判断します。 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>と<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>まで実行をブロックする方法、<xref:System.Net.Sockets.TcpListener.Start%2A>メソッドには、受信接続要求がキューに、保留中のメソッドは、ライセンス条項に同意する前に、接続が利用可能なかどうかを判断するために使用できます</xref:System.Net.Sockets.TcpListener.Start%2A></xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A></xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。"
  example:
  - "The following code example checks the Pending method. If a connection request is waiting to be accepted, then a call to the <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> method is made.  \n  \n [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_5_1.cpp)]\n [!code-cs[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_5_1.cs)]\n [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_5_1.vb)]"
  syntax:
    content: public bool Pending ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>接続が保留中の場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Sockets.TcpListener.Pending*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.TcpListener.Start*>。</xref:System.Net.Sockets.TcpListener.Start*>への呼び出しにリスナーが開始されていません"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Server
  id: Server
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Server
  nameWithType: TcpListener.Server
  fullName: System.Net.Sockets.TcpListener.Server
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "基になるネットワーク<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>の取得します。"
  remarks: "<xref:System.Net.Sockets.TcpListener>作成、<xref:System.Net.Sockets.Socket>着信クライアント接続要求をリッスンします</xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.TcpListener> <xref:System.Net.Sockets.TcpListener>この<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>を取得するには、このプロパティを使用することができます</xref:System.Net.Sockets.TcpListener> から派生するクラス 使用して、基になる<xref:System.Net.Sockets.Socket>する以上のアクセスを必要とする場合に、サーバー プロパティによって返されるを<xref:System.Net.Sockets.TcpListener>を提供します</xref:System.Net.Sockets.TcpListener></xref:System.Net.Sockets.Socket>。      > [!NOTE] > のサーバーのプロパティだけを返します、<xref:System.Net.Sockets.Socket>着信クライアント接続要求をリッスンするために使用します</xref:System.Net.Sockets.Socket>。 使用して、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>、保留中の接続要求を受け入れるし、取得する方法、<xref:System.Net.Sockets.Socket>データを送受信するためです</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。 使用することも、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>、保留中の接続要求を受け入れるし、取得する方法、<xref:System.Net.Sockets.TcpClient>データを送受信するためです</xref:System.Net.Sockets.TcpClient></xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。"
  example:
  - "The following code example demonstrates the use of the Server property. The underlying <xref:System.Net.Sockets.Socket> is retrieved and the <xref:System.Net.Sockets.SocketOptionName><xref:System.Net.Sockets.Socket> option is configured to time out after 10 seconds if data still remains in the network buffer after the connection is closed.  \n  \n [!code-vb[TcpListenerProtectedMembers1#1](~/add/codesnippet/visualbasic/p-system.net.sockets.tcp_10_1.vb)]\n [!code-cs[TcpListenerProtectedMembers1#1](~/add/codesnippet/csharp/p-system.net.sockets.tcp_10_1.cs)]"
  syntax:
    content: public System.Net.Sockets.Socket Server { get; }
    return:
      type: System.Net.Sockets.Socket
      description: "基になる<xref:System.Net.Sockets.Socket>。</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.TcpListener.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Start
  id: Start
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Start()
  nameWithType: TcpListener.Start()
  fullName: System.Net.Sockets.TcpListener.Start()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "接続要求のリッスンを開始します。"
  remarks: "Start メソッドを基になる初期化<xref:System.Net.Sockets.Socket>、ローカル エンドポイントにバインドされ、受信接続が試行をリッスンします</xref:System.Net.Sockets.Socket>。 Start メソッドが要求はキューとが呼び出されるまで、追加の要求のリッスンを続行接続要求を受信する場合、<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッド</xref:System.Net.Sockets.TcpListener.Stop%2A>。 場合<xref:System.Net.Sockets.TcpListener>接続要求を受信スローすることにより、接続の最大数が既にキューに、後に、<xref:System.Net.Sockets.SocketException>クライアント</xref:System.Net.Sockets.SocketException></xref:System.Net.Sockets.TcpListener>。       着信接続のキューからの接続を削除するには、いずれかを使用、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドまたは<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッド</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A></xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドは、キューからの接続を削除し、返す、<xref:System.Net.Sockets.TcpClient>データの送受信を行えます</xref:System.Net.Sockets.TcpClient></xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドは、<xref:System.Net.Sockets.Socket>同じ操作を実行に使用できる</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。 アプリケーションには、同期 I/O しか必要とする場合は、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>を使用してください。 詳細な動作の制御、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>を使用します。 これら両方のメソッドは、接続要求が、キューで使用可能になるまでブロックします。       使用して、<xref:System.Net.Sockets.TcpListener.Stop%2A>を終了するメソッド、<xref:System.Net.Sockets.TcpListener>リッスンし、停止します</xref:System.Net.Sockets.TcpListener></xref:System.Net.Sockets.TcpListener.Stop%2A>。 別に、承認済みの接続の終了を担当しています。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how Start is used to listen for incoming client connection attempts.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_6_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_6_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_6_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Net.Sockets.TcpListener.Start*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "使用して、 &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  id: Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Start(Int32)
  nameWithType: TcpListener.Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "保留中の接続の数が最大で着信接続要求のリッスンを開始します。"
  remarks: "<xref:System.Net.Sockets.TcpListener.Start%2A>メソッドは、基になる、初期化<xref:System.Net.Sockets.Socket>、ローカル エンドポイントにバインドされ、受信接続が試行をリッスンします</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpListener.Start%2A>。 接続要求が受信した場合、<xref:System.Net.Sockets.TcpListener.Start%2A>は要求はキューにし、呼び出すまで、追加の要求のリッスンを続行、<xref:System.Net.Sockets.TcpListener.Stop%2A>メソッド</xref:System.Net.Sockets.TcpListener.Stop%2A></xref:System.Net.Sockets.TcpListener.Start%2A>。 場合<xref:System.Net.Sockets.TcpListener>が、スローする接続の最大数は、キューに登録した後、接続要求を受信、<xref:System.Net.Sockets.SocketException>クライアント</xref:System.Net.Sockets.SocketException></xref:System.Net.Sockets.TcpListener>。       着信接続のキューからの接続を削除するには、いずれかを使用、<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドまたは<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッド</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A></xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>メソッドは、キューからの接続を削除し、返す、<xref:System.Net.Sockets.TcpClient>データの送受信を行えます</xref:System.Net.Sockets.TcpClient></xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッドは、<xref:System.Net.Sockets.Socket>同じ操作を実行に使用できる</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。 アプリケーションには、同期 I/O しか必要とする場合は使用<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>。</xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 詳細な動作上のコントロールは、使用して<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>メソッド</xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>。 これら両方のメソッドは、接続要求が、キューで使用可能になるまでブロックします。       使用して、<xref:System.Net.Sockets.TcpListener.Stop%2A>を終了するメソッド、<xref:System.Net.Sockets.TcpListener>リッスンし、停止します</xref:System.Net.Sockets.TcpListener></xref:System.Net.Sockets.TcpListener.Stop%2A>。 別に、承認済みの接続の終了を担当しています。      > [!NOTE] > を使用して、<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API のエラー コード ドキュメントを参照してください[http://msdn.microsoft.com/library/](http://msdn.microsoft.com/library/)のエラーの詳細な説明</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how <xref:System.Net.Sockets.TcpListener.Start%2A> is used to listen for incoming client connection attempts.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/cpp/m-system.net.sockets.tcp_17_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/csharp/m-system.net.sockets.tcp_17_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener1#3](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_17_1.vb)]"
  syntax:
    content: public void Start (int backlog);
    parameters:
    - id: backlog
      type: System.Int32
      description: "保留中の接続のキューの最大長。"
  overload: System.Net.Sockets.TcpListener.Start*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "ソケットへのアクセス中にエラーが発生しました。 詳細については「解説」セクションを参照してください。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>  backlog </code>パラメーターが&0; より小さいか許可されている接続の最大数を超えています。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "基になる<xref:System.Net.Sockets.Socket>が null です</xref:System.Net.Sockets.Socket>。"
  platform:
  - net462
- uid: System.Net.Sockets.TcpListener.Stop
  id: Stop
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  name: Stop()
  nameWithType: TcpListener.Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "リスナーを閉じます。"
  remarks: "停止は、リスナーを閉じます。 キュー内の任意の未承認の接続要求はすべて失われます。 許容されるためにリモート ホスト接続を待って<xref:System.Net.Sockets.SocketException>。</xref:System.Net.Sockets.SocketException>がスローされます。 別に、承認済みの接続の終了を担当しています。      > [!NOTE] > このメンバーは、アプリケーションでネットワーク トレースを有効にする場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates using the Stop method to close the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cpp[System.Net.Sockets.TcpListener#1](~/add/codesnippet/cpp/m-system.net.sockets.tcp_9_1.cpp)]\n [!code-cs[System.Net.Sockets.TcpListener#1](~/add/codesnippet/csharp/m-system.net.sockets.tcp_9_1.cs)]\n [!code-vb[System.Net.Sockets.TcpListener#1](~/add/codesnippet/visualbasic/m-system.net.sockets.tcp_9_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Net.Sockets.TcpListener.Stop*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "使用して、 &lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName&gt;固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントに MSDN でエラーの詳細な説明を参照できます。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.Sockets.TcpListener.#ctor(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(Int32)
  nameWithType: TcpListener.TcpListener(Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(IPEndPoint)
  nameWithType: TcpListener.TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener(IPAddress,Int32)
  nameWithType: TcpListener.TcpListener(IPAddress,Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.TcpListener.AcceptSocket
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocket()
  nameWithType: TcpListener.AcceptSocket()
  fullName: System.Net.Sockets.TcpListener.AcceptSocket()
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocketAsync()
  nameWithType: TcpListener.AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Socket>
  nameWithType: Task<Socket>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.Socket>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: Socket
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClient()
  nameWithType: TcpListener.AcceptTcpClient()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClient()
- uid: System.Net.Sockets.TcpClient
  parent: System.Net.Sockets
  isExternal: false
  name: TcpClient
  nameWithType: TcpClient
  fullName: System.Net.Sockets.TcpClient
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClientAsync()
  nameWithType: TcpListener.AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<TcpClient>
  nameWithType: Task<TcpClient>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.TcpClient>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    nameWithType: TcpClient
    fullName: TcpClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.TcpListener.Active
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Active
  nameWithType: TcpListener.Active
  fullName: System.Net.Sockets.TcpListener.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: TcpListener.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.TcpListener.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptSocket(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptSocket(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptSocket(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptTcpClient(AsyncCallback,Object)
  nameWithType: TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
  fullName: System.Net.Sockets.TcpListener.BeginAcceptTcpClient(AsyncCallback,Object)
- uid: System.Net.Sockets.TcpListener.Create(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Create(Int32)
  nameWithType: TcpListener.Create(Int32)
  fullName: System.Net.Sockets.TcpListener.Create(Int32)
- uid: System.Net.Sockets.TcpListener
  parent: System.Net.Sockets
  isExternal: false
  name: TcpListener
  nameWithType: TcpListener
  fullName: System.Net.Sockets.TcpListener
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptSocket(IAsyncResult)
  nameWithType: TcpListener.EndAcceptSocket(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptSocket(IAsyncResult)
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptTcpClient(IAsyncResult)
  nameWithType: TcpListener.EndAcceptTcpClient(IAsyncResult)
  fullName: System.Net.Sockets.TcpListener.EndAcceptTcpClient(IAsyncResult)
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: true
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.Sockets.TcpListener.Pending
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Pending()
  nameWithType: TcpListener.Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
- uid: System.Net.Sockets.TcpListener.Server
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Server
  nameWithType: TcpListener.Server
  fullName: System.Net.Sockets.TcpListener.Server
- uid: System.Net.Sockets.TcpListener.Start
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start()
  nameWithType: TcpListener.Start()
  fullName: System.Net.Sockets.TcpListener.Start()
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start(Int32)
  nameWithType: TcpListener.Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(Int32)
- uid: System.Net.Sockets.TcpListener.Stop
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Stop()
  nameWithType: TcpListener.Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
- uid: System.Net.Sockets.TcpListener.#ctor*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: TcpListener
  nameWithType: TcpListener.TcpListener
- uid: System.Net.Sockets.TcpListener.AcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocket
  nameWithType: TcpListener.AcceptSocket
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptSocketAsync
  nameWithType: TcpListener.AcceptSocketAsync
- uid: System.Net.Sockets.TcpListener.AcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClient
  nameWithType: TcpListener.AcceptTcpClient
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AcceptTcpClientAsync
  nameWithType: TcpListener.AcceptTcpClientAsync
- uid: System.Net.Sockets.TcpListener.Active*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Active
  nameWithType: TcpListener.Active
- uid: System.Net.Sockets.TcpListener.AllowNatTraversal*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: AllowNatTraversal
  nameWithType: TcpListener.AllowNatTraversal
- uid: System.Net.Sockets.TcpListener.BeginAcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptSocket
  nameWithType: TcpListener.BeginAcceptSocket
- uid: System.Net.Sockets.TcpListener.BeginAcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: BeginAcceptTcpClient
  nameWithType: TcpListener.BeginAcceptTcpClient
- uid: System.Net.Sockets.TcpListener.Create*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Create
  nameWithType: TcpListener.Create
- uid: System.Net.Sockets.TcpListener.EndAcceptSocket*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptSocket
  nameWithType: TcpListener.EndAcceptSocket
- uid: System.Net.Sockets.TcpListener.EndAcceptTcpClient*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: EndAcceptTcpClient
  nameWithType: TcpListener.EndAcceptTcpClient
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: TcpListener.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpListener.LocalEndpoint*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: LocalEndpoint
  nameWithType: TcpListener.LocalEndpoint
- uid: System.Net.Sockets.TcpListener.Pending*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Pending
  nameWithType: TcpListener.Pending
- uid: System.Net.Sockets.TcpListener.Server*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Server
  nameWithType: TcpListener.Server
- uid: System.Net.Sockets.TcpListener.Start*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Start
  nameWithType: TcpListener.Start
- uid: System.Net.Sockets.TcpListener.Stop*
  parent: System.Net.Sockets.TcpListener
  isExternal: false
  name: Stop
  nameWithType: TcpListener.Stop
