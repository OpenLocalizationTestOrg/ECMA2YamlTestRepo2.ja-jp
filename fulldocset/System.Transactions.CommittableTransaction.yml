### YamlMime:ManagedReference
items:
- uid: System.Transactions.CommittableTransaction
  id: CommittableTransaction
  children:
  - System.Transactions.CommittableTransaction.#ctor
  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  - System.Transactions.CommittableTransaction.Commit
  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  langs:
  - csharp
  name: CommittableTransaction
  nameWithType: CommittableTransaction
  fullName: System.Transactions.CommittableTransaction
  type: Class
  summary: "コミットできるトランザクションをについて説明します。"
  remarks: "CommittableTransaction クラスには、アプリケーションを使用してではなく、トランザクションを使用するための明示的な方法が用意されています、<xref:System.Transactions.TransactionScope>クラスが暗黙的にします</xref:System.Transactions.TransactionScope>。 異なり、<xref:System.Transactions.TransactionScope>クラス、アプリケーションの作成者を具体的に呼び出す必要がある、<xref:System.Transactions.CommittableTransaction.Commit%2A>と<xref:System.Transactions.Transaction.Rollback%2A>コミットするか、トランザクションを中止するためにメソッド</xref:System.Transactions.Transaction.Rollback%2A></xref:System.Transactions.CommittableTransaction.Commit%2A></xref:System.Transactions.TransactionScope>。 ただし、トランザクションの作成者のみがトランザクションをコミットすることができます。 コミットできるトランザクションのコピーがを介して取得されたため、<xref:System.Transactions.Transaction.Clone%2A>メソッドはコミットされません</xref:System.Transactions.Transaction.Clone%2A>。      > [!NOTE] > を使用して暗黙のトランザクションを作成することをお勧めしますが、<xref:System.Transactions.TransactionScope>クラスのアンビエント トランザクションのコンテキストが自動的に管理できるようにします</xref:System.Transactions.TransactionScope>。 使用する必要も、<xref:System.Transactions.TransactionScope>と<xref:System.Transactions.DependentTransaction>複数の関数呼び出しまたは複数のスレッド呼び出しの間で同じトランザクションの使用を必要とするアプリケーションのクラス</xref:System.Transactions.DependentTransaction></xref:System.Transactions.TransactionScope>。 このモデルの詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)トピックです。       CommittableTransaction の作成、アンビエント トランザクションで、コードが実行されるトランザクションは、自動的に設定しません。 取得または静的なを呼び出すことによって、アンビエント トランザクションを設定することができます<xref:System.Transactions.Transaction.Current%2A>のグローバル プロパティ<xref:System.Transactions.Transaction>オブジェクト</xref:System.Transactions.Transaction></xref:System.Transactions.Transaction.Current%2A>。 アンビエント トランザクションの詳細については、の「管理するトランザクションを使用してフロー TransactionScopeOption」を参照してください、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)トピックです。 アンビエント トランザクションが設定されていない場合、リソース マネージャーで任意の操作はこのトランザクションの一部ではありません。 明示的に設定し、リソース マネージャーが右のトランザクション コンテキストで動作することを確認する、アンビエント トランザクションをリセットする必要があります。       CommittableTransaction がコミットされるまで、トランザクションに関連するすべてのリソースがまだロックされています。       CommittableTransaction のオブジェクトを再利用できません。 コミットまたはロールバックされましたが、トランザクションで再度使用または現在のアンビエント トランザクションのコンテキストとして設定することはできません。"
  example:
  - "The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor
  id: '#ctor'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref>クラスです。"
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \n  \n [!code-cs[Tx_CommittableTx#1](~/add/codesnippet/csharp/m-system.transactions.co_1.cs)]\n [!code-vb[Tx_CommittableTx#1](~/add/codesnippet/visualbasic/m-system.transactions.co_1.vb)]"
  syntax:
    content: public CommittableTransaction ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Windows 98、Windows 98 Second Edition または Windows Millennium Edition でトランザクションを作成しようとしました。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref> 、指定したクラス<code> timeout </code>値。"
  syntax:
    content: public CommittableTransaction (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "最長時間を中止する前に、トランザクションが存在できます。"
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Windows 98、Windows 98 Second Edition または Windows Millennium Edition でトランザクションを作成しようとしました。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionOptions)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Transactions.CommittableTransaction&quot;> </xref>クラス トランザクション オプションを指定します。"
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public CommittableTransaction (System.Transactions.TransactionOptions options);
    parameters:
    - id: options
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>新しいトランザクションを使用するトランザクション オプションを記述する構造体。"
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Windows 98、Windows 98 Second Edition または Windows Millennium Edition でトランザクションを作成しようとしました。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>options</code>正しくありません。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  id: BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "非同期的に、トランザクションをコミットを開始します。"
  remarks: "このメソッドは、トランザクションが完了する前に、すぐに返します。 トランザクション、別のスレッドでのコミットと`asyncCallback`が完了したときに、デリゲートが呼び出されます。 このメソッドが呼び出された後に表示されません、トランザクションの結果<xref:System.Transactions.CommittableTransaction.EndCommit%2A>。</xref:System.Transactions.CommittableTransaction.EndCommit%2A>が呼び出されるまで      > [!NOTE] > コミット処理は、このメソッドの呼び出しの内部同期をとって実行可能性があります。"
  syntax:
    content: public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>トランザクションが完了したときに呼び出されるデリゲート</xref:System.AsyncCallback>。 このパラメーターを指定できます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、いる場合、アプリケーションは、トランザクションの完了の通知されません。 代わりに、アプリケーションが使用する必要があります、<xref:System.IAsyncResult>の完了を確認し、それに応じて待機するためのインターフェイスを呼び出したり<xref:System.Transactions.CommittableTransaction.EndCommit*>完了するまで待機します</xref:System.Transactions.CommittableTransaction.EndCommit*></xref:System.IAsyncResult>。"
    - id: asyncState
      type: System.Object
      description: "非同期のコミットに関連付けられた任意の状態情報が含まれているオブジェクト。 このオブジェクトは、コールバックに渡されで解釈されない<xref href=&quot;System.Transactions&quot;></xref>です。 Null 参照が許可されます。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>、非同期操作の状態を確認するか、操作が完了するまで待機する、呼び出し元が使用できるインターフェイス</xref:System.IAsyncResult>。"
  overload: System.Transactions.CommittableTransaction.BeginCommit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.Commit
  id: Commit
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "トランザクションをコミットしようとしています。"
  remarks: "このメソッドが呼び出されると、トランザクションに参加する登録されているすべてのオブジェクトをポーリングして、コミットまたはトランザクションをロールバックするには、その投票が個別に示さです。 すべての参加要素は、トランザクションをロールバックする投票する場合、はロールバックし、このメソッドはスロー、<xref:System.Transactions.TransactionException>例外です</xref:System.Transactions.TransactionException>。 これは、トランザクションに対する通常の動作であり、コードでキャッチしてこのような例外を処理する必要があります。       コミットと<xref:System.Transactions.CommittableTransaction.EndCommit%2A>トランザクション処理の最初のフェーズが完了するまでブロックします</xref:System.Transactions.CommittableTransaction.EndCommit%2A>。 すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストは、トランザクションの結果に投票がおよび、<xref:System.Transactions.TransactionManager>コミットするか、トランザクションを中止することにしました永続的に</xref:System.Transactions.TransactionManager>。 処理の&2; 番目のフェーズは、常に非同期にします。 したがって、特定のトランザクション内からコミットされたばかりのデータが使用できることすぐにその後このデータを表示する別のトランザクションを使用していないときに保証はありません。       トランザクション処理の最初のフェーズが完了するまでに十分な注意する必要があります (WinForm) の Windows フォーム アプリケーションの場合、またはデッドロックでこのメソッドを使用するときにこのメソッドはブロックが発生することができます。 (たとえば、ボタンをクリックすると)、1 つの WinForm コントロール イベント内でこのメソッドを呼び出すし、同期を使用する場合<xref:System.Windows.Forms.Control.Invoke%2A>、デッドロックが発生するトランザクションの処理中のいくつかの UI タスク (たとえば、変化する色) を実行するコントロールを送信するためのメソッド</xref:System.Windows.Forms.Control.Invoke%2A>。 これは、ため、<xref:System.Windows.Forms.Control.Invoke%2A>メソッドは同期であり、UI スレッドには、そのジョブが完了するまで、ワーカー スレッドをブロックします</xref:System.Windows.Forms.Control.Invoke%2A>。 ただし、このシナリオでは、UI スレッドも待機しているワーカー スレッドがトランザクションをコミットします。 結果とは、[なし] を続行できませんされ、スコープは、コミットの終了を無期限に待機です。 使用する必要があります<xref:System.Windows.Forms.Control.BeginInvoke%2A>なく<xref:System.Windows.Forms.Control.Invoke%2A>可能な限り、非同期、したがってにくくなりましたデッドロックになっているためです。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A> 。"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.Commit*
  exceptions:
  - type: System.Transactions.TransactionInDoubtException
    commentId: T:System.Transactions.TransactionInDoubtException
    description: "トランザクションで commit が呼び出され、トランザクションになります<xref href=&quot;System.Transactions.TransactionStatus&quot;></xref>です。"
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "コミットが呼び出され、最初にトランザクションがロールバックされます。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  id: EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "非同期的に、トランザクションをコミットする試みを終了します。"
  remarks: "パラメーターとして指定されたコールバック デリゲートでこのメソッドを呼び出す必要があります、<xref:System.Transactions.CommittableTransaction.BeginCommit%2A>メソッドは、非同期のコミットに関連するクリーンアップ作業を完了するとします</xref:System.Transactions.CommittableTransaction.BeginCommit%2A>。 デリゲートを待たずに早い段階このメソッドを呼び出すことができます。 このメソッドを呼び出すまで、トランザクションが完了していない場合は、このメソッドは、その完了を待機します。      > [!CAUTION] >、<xref:System.IAsyncResult.CompletedSynchronously%2A>プロパティから返される`asyncResult`は常に`false`場合でも、同期的に、操作を完了します</xref:System.IAsyncResult.CompletedSynchronously%2A>。       <xref:System.Transactions.CommittableTransaction.Commit%2A>トランザクション処理の最初のフェーズが完了するまで EndCommit ブロックします。</xref:System.Transactions.CommittableTransaction.Commit%2A> すべてのリソース マネージャーの後に最初のフェーズが終了し、トランザクションの参加リストは、トランザクションの結果に投票がおよび、<xref:System.Transactions.TransactionManager>コミットするか、トランザクションを中止することにしました永続的に</xref:System.Transactions.TransactionManager>。 処理の&2; 番目のフェーズは、常に非同期にします。 したがって、特定のトランザクション内からコミットされたばかりのデータが使用できることすぐにその後このデータを表示する別のトランザクションを使用していないときに保証はありません。"
  syntax:
    content: public void EndCommit (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>非同期のコミットに関連付けられているオブジェクト</xref:System.IAsyncResult>。"
  overload: System.Transactions.CommittableTransaction.EndCommit*
  exceptions:
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "<xref:System.Transactions.CommittableTransaction.BeginCommit*>呼び出されたし、最初にトランザクションがロールバックされます。</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  id: System#IAsyncResult#AsyncState
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "最後のパラメーターとして指定されたオブジェクトを取得、<xref:System.Transactions.CommittableTransaction.BeginCommit*>メソッドの呼び出し</xref:System.Transactions.CommittableTransaction.BeginCommit*>。"
  syntax:
    content: object System.IAsyncResult.AsyncState { get; }
    return:
      type: System.Object
      description: "最後のパラメーターとして指定されたオブジェクト、<xref:System.Transactions.CommittableTransaction.BeginCommit*>メソッドの呼び出し</xref:System.Transactions.CommittableTransaction.BeginCommit*>。"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "取得、<xref:System.Threading.WaitHandle>非同期操作が完了するまで待機するために使用されます</xref:System.Threading.WaitHandle>。"
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A<xref:System.Threading.WaitHandle>非同期操作が完了するまで待機するために使用されます</xref:System.Threading.WaitHandle>。"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "かどうかを示す値を取得、非同期コミット操作を同期的に完了します。"
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>非同期のコミット操作が同期的に完了した場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 このプロパティは常に返します<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>場合でも、同期的に、操作を完了します。"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  id: System#IAsyncResult#IsCompleted
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "非同期のコミット操作が完了したかどうか示す値を取得します。"
  syntax:
    content: bool System.IAsyncResult.IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、操作が完了しました。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Transactions.TransactionInDoubtException
  parent: System.Transactions
  isExternal: false
  name: TransactionInDoubtException
  nameWithType: TransactionInDoubtException
  fullName: System.Transactions.TransactionInDoubtException
- uid: System.Transactions.TransactionAbortedException
  parent: System.Transactions
  isExternal: false
  name: TransactionAbortedException
  nameWithType: TransactionAbortedException
  fullName: System.Transactions.TransactionAbortedException
- uid: System.Transactions.CommittableTransaction.#ctor
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Transactions.CommittableTransaction.Commit
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
- uid: System.Transactions.CommittableTransaction.#ctor*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction
  nameWithType: CommittableTransaction.CommittableTransaction
- uid: System.Transactions.CommittableTransaction.BeginCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit
  nameWithType: CommittableTransaction.BeginCommit
- uid: System.Transactions.CommittableTransaction.Commit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit
  nameWithType: CommittableTransaction.Commit
- uid: System.Transactions.CommittableTransaction.EndCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit
  nameWithType: CommittableTransaction.EndCommit
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
