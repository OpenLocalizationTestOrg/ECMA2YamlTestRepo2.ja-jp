### YamlMime:ManagedReference
items:
- uid: Microsoft.JScript.MathObject
  id: MathObject
  children:
  - Microsoft.JScript.MathObject.abs(System.Double)
  - Microsoft.JScript.MathObject.acos(System.Double)
  - Microsoft.JScript.MathObject.asin(System.Double)
  - Microsoft.JScript.MathObject.atan(System.Double)
  - Microsoft.JScript.MathObject.atan2(System.Double,System.Double)
  - Microsoft.JScript.MathObject.ceil(System.Double)
  - Microsoft.JScript.MathObject.cos(System.Double)
  - Microsoft.JScript.MathObject.E
  - Microsoft.JScript.MathObject.exp(System.Double)
  - Microsoft.JScript.MathObject.floor(System.Double)
  - Microsoft.JScript.MathObject.LN10
  - Microsoft.JScript.MathObject.LN2
  - Microsoft.JScript.MathObject.log(System.Double)
  - Microsoft.JScript.MathObject.LOG10E
  - Microsoft.JScript.MathObject.LOG2E
  - Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])
  - Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])
  - Microsoft.JScript.MathObject.PI
  - Microsoft.JScript.MathObject.pow(System.Double,System.Double)
  - Microsoft.JScript.MathObject.random
  - Microsoft.JScript.MathObject.round(System.Double)
  - Microsoft.JScript.MathObject.sin(System.Double)
  - Microsoft.JScript.MathObject.sqrt(System.Double)
  - Microsoft.JScript.MathObject.SQRT1_2
  - Microsoft.JScript.MathObject.SQRT2
  - Microsoft.JScript.MathObject.tan(System.Double)
  langs:
  - csharp
  name: MathObject
  nameWithType: MathObject
  fullName: Microsoft.JScript.MathObject
  type: Class
  summary: "三角関数や対数関数など、他の一般的な数学関数の定数と静的メソッドを提供します。 このクラスは、組み込みのオブジェクト モデルのカテゴリに属しています。"
  syntax:
    content: 'public class MathObject : Microsoft.JScript.JSObject'
  inheritance:
  - System.Object
  - Microsoft.JScript.ScriptObject
  - Microsoft.JScript.JSObject
  implements: []
  inheritedMembers:
  - Microsoft.JScript.JSObject.AddField(System.String)
  - Microsoft.JScript.JSObject.field_table
  - Microsoft.JScript.JSObject.GetMember(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.JSObject.GetMembers(System.Reflection.BindingFlags)
  - Microsoft.JScript.JSObject.SetMemberValue2(System.String,System.Object)
  - Microsoft.JScript.JSObject.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddMethod(System.String,System.Delegate)
  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#AddProperty(System.String)
  - Microsoft.JScript.JSObject.System#Runtime#InteropServices#Expando#IExpando#RemoveMember(System.Reflection.MemberInfo)
  - Microsoft.JScript.JSObject.ToString
  - Microsoft.JScript.ScriptObject.engine
  - Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetParent
  - Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - Microsoft.JScript.ScriptObject.Item(System.Double)
  - Microsoft.JScript.ScriptObject.Item(System.Int32)
  - Microsoft.JScript.ScriptObject.Item(System.Object[])
  - Microsoft.JScript.ScriptObject.Item(System.String)
  - Microsoft.JScript.ScriptObject.parent
  - Microsoft.JScript.ScriptObject.UnderlyingSystemType
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.abs(System.Double)
  id: abs(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: abs(Double)
  nameWithType: MathObject.abs(Double)
  fullName: Microsoft.JScript.MathObject.abs(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数値の絶対値を計算します。"
  syntax:
    content: public static double abs (double d);
    parameters:
    - id: d
      type: System.Double
      description: "絶対値を計算する数値。"
    return:
      type: System.Double
      description: "絶対値<code> d</code>です。"
  overload: Microsoft.JScript.MathObject.abs*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.acos(System.Double)
  id: acos(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: acos(Double)
  nameWithType: MathObject.acos(Double)
  fullName: Microsoft.JScript.MathObject.acos(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数値の逆余弦を計算します。"
  syntax:
    content: public static double acos (double x);
    parameters:
    - id: x
      type: System.Double
      description: "逆余弦を計算する数値。"
    return:
      type: System.Double
      description: "逆余弦<code> x</code>ラジアン単位で計測されます。"
  overload: Microsoft.JScript.MathObject.acos*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.asin(System.Double)
  id: asin(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: asin(Double)
  nameWithType: MathObject.asin(Double)
  fullName: Microsoft.JScript.MathObject.asin(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数値の逆正弦を計算します。"
  syntax:
    content: public static double asin (double x);
    parameters:
    - id: x
      type: System.Double
      description: "逆正弦を計算する数値。"
    return:
      type: System.Double
      description: "逆正弦<code> x</code>ラジアン単位で計測されます。"
  overload: Microsoft.JScript.MathObject.asin*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.atan(System.Double)
  id: atan(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: atan(Double)
  nameWithType: MathObject.atan(Double)
  fullName: Microsoft.JScript.MathObject.atan(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数値の逆正接を計算します。"
  syntax:
    content: public static double atan (double x);
    parameters:
    - id: x
      type: System.Double
      description: "逆正接を計算する数値。"
    return:
      type: System.Double
      description: "逆正接<code> x</code>ラジアン単位で計測されます。"
  overload: Microsoft.JScript.MathObject.atan*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.atan2(System.Double,System.Double)
  id: atan2(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: atan2(Double,Double)
  nameWithType: MathObject.atan2(Double,Double)
  fullName: Microsoft.JScript.MathObject.atan2(Double,Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数値の商の逆正接を計算します。"
  syntax:
    content: public static double atan2 (double dy, double dx);
    parameters:
    - id: dy
      type: System.Double
      description: "逆正接を計算する商の分子です。"
    - id: dx
      type: System.Double
      description: "逆正接を計算する商の分母です。"
    return:
      type: System.Double
      description: "逆正接<code> dy </code> / <code> dx</code>ラジアン単位で計測されます。"
  overload: Microsoft.JScript.MathObject.atan2*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.ceil(System.Double)
  id: ceil(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: ceil(Double)
  nameWithType: MathObject.ceil(Double)
  fullName: Microsoft.JScript.MathObject.ceil(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数以上である最小の整数である、指定された数の上限を計算します。"
  syntax:
    content: public static double ceil (double x);
    parameters:
    - id: x
      type: System.Double
      description: "切り上げを計算する数値。"
    return:
      type: System.Double
      description: "切り上げ<code> x</code>です。"
  overload: Microsoft.JScript.MathObject.ceil*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.cos(System.Double)
  id: cos(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: cos(Double)
  nameWithType: MathObject.cos(Double)
  fullName: Microsoft.JScript.MathObject.cos(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定された角度の余弦を計算します。"
  syntax:
    content: public static double cos (double x);
    parameters:
    - id: x
      type: System.Double
      description: "ラジアンで表した角度。"
    return:
      type: System.Double
      description: "The cosine of <code>x</code>."
  overload: Microsoft.JScript.MathObject.cos*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.E
  id: E
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: E
  nameWithType: MathObject.E
  fullName: Microsoft.JScript.MathObject.E
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "定数 e で指定された、自然対数の底がオイラーの定数を表す値を格納します。"
  syntax:
    content: public const double E = 2.71828182845905;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.exp(System.Double)
  id: exp(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: exp(Double)
  nameWithType: MathObject.exp(Double)
  fullName: Microsoft.JScript.MathObject.exp(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "発生したの指定した指数で e は自然対数の底オイラーの定数を数値 e を計算します。"
  syntax:
    content: public static double exp (double x);
    parameters:
    - id: x
      type: System.Double
      description: "累乗する指数`e`にします。"
    return:
      type: System.Double
      description: "数値 e を累乗、 <code> x </code> power です。"
  overload: Microsoft.JScript.MathObject.exp*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.floor(System.Double)
  id: floor(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: floor(Double)
  nameWithType: MathObject.floor(Double)
  fullName: Microsoft.JScript.MathObject.floor(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数以下である最大の整数である、指定した数値の切り捨てを計算します。"
  syntax:
    content: public static double floor (double x);
    parameters:
    - id: x
      type: System.Double
      description: "切り捨てを計算する数値。"
    return:
      type: System.Double
      description: "The floor of <code>x</code>."
  overload: Microsoft.JScript.MathObject.floor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LN10
  id: LN10
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LN10
  nameWithType: MathObject.LN10
  fullName: Microsoft.JScript.MathObject.LN10
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "E を底と 10、10 の自然対数を表す値を格納します。"
  syntax:
    content: public const double LN10 = 2.30258509299405;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LN2
  id: LN2
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LN2
  nameWithType: MathObject.LN2
  fullName: Microsoft.JScript.MathObject.LN2
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "E を底と 2、2 の自然対数を表す値を格納します。"
  syntax:
    content: public const double LN2 = 0.693147180559945;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.log(System.Double)
  id: log(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: log(Double)
  nameWithType: MathObject.log(Double)
  fullName: Microsoft.JScript.MathObject.log(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数値の自然対数は、指定された数の e を底とする対数を計算します。"
  syntax:
    content: public static double log (double x);
    parameters:
    - id: x
      type: System.Double
      description: "自然対数を計算する数値。"
    return:
      type: System.Double
      description: "自然対数<code> x</code>です。"
  overload: Microsoft.JScript.MathObject.log*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LOG10E
  id: LOG10E
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LOG10E
  nameWithType: MathObject.LOG10E
  fullName: Microsoft.JScript.MathObject.LOG10E
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "E、e の常用対数の 10 を底とする対数を表す値格納します。"
  syntax:
    content: public const double LOG10E = 0.434294481903252;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.LOG2E
  id: LOG2E
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: LOG2E
  nameWithType: MathObject.LOG2E
  fullName: Microsoft.JScript.MathObject.LOG2E
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "E、e の対数バイナリの 2 を底とする対数を表す値格納します。"
  syntax:
    content: public const double LOG2E = 1.44269504088896;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])
  id: max(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: max(Object,Object,Object[])
  nameWithType: MathObject.max(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.max(Object,Object,Object[])
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "2 つ以上の指定された数の最大値を返します。"
  syntax:
    content: public static double max (object x, object y, object[] args);
    parameters:
    - id: x
      type: System.Object
      description: "比較する最初の数。"
    - id: y
      type: System.Object
      description: "比較する&2; 番目の数値。"
    - id: args
      type: System.Object[]
      description: "比較する番号が追加されます。"
    return:
      type: System.Double
      description: "最大規模の<code> x </code>、 <code> y</code>とに含まれる数字<code> args</code>です。"
  overload: Microsoft.JScript.MathObject.max*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])
  id: min(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: min(Object,Object,Object[])
  nameWithType: MathObject.min(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.min(Object,Object,Object[])
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "2 つ以上の指定された数の最小値を返します。"
  syntax:
    content: public static double min (object x, object y, object[] args);
    parameters:
    - id: x
      type: System.Object
      description: "比較する最初の数。"
    - id: y
      type: System.Object
      description: "比較する&2; 番目の数値。"
    - id: args
      type: System.Object[]
      description: "比較する番号が追加されます。"
    return:
      type: System.Double
      description: "最小の<code> x </code>、 <code> y</code>とに含まれる数字<code> args</code>です。"
  overload: Microsoft.JScript.MathObject.min*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.PI
  id: PI
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: PI
  nameWithType: MathObject.PI
  fullName: Microsoft.JScript.MathObject.PI
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "Π の定数で指定された直径の円の円周の割合を表す値を格納します。"
  syntax:
    content: public const double PI = 3.14159265358979;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.pow(System.Double,System.Double)
  id: pow(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: pow(Double,Double)
  nameWithType: MathObject.pow(Double,Double)
  fullName: Microsoft.JScript.MathObject.pow(Double,Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定されたべき乗に発生する、指定した数を計算します。"
  syntax:
    content: public static double pow (double dx, double dy);
    parameters:
    - id: dx
      type: System.Double
      description: "発生させるのには、番号、 `dy` power です。"
    - id: dy
      type: System.Double
      description: "累乗する指数`dx`にします。"
    return:
      type: System.Double
      description: "数<code> dx </code>に上げる、 <code> dy </code> power です。"
  overload: Microsoft.JScript.MathObject.pow*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.random
  id: random
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: random()
  nameWithType: MathObject.random()
  fullName: Microsoft.JScript.MathObject.random()
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "0 ~ 1 の間の乱数を生成します。 このメソッドは、暗号強度が高いランダムな番号を生成しません。"
  syntax:
    content: public static double random ();
    parameters: []
    return:
      type: System.Double
      description: "0 以上 1 未満の数。"
  overload: Microsoft.JScript.MathObject.random*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.round(System.Double)
  id: round(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: round(Double)
  nameWithType: MathObject.round(Double)
  fullName: Microsoft.JScript.MathObject.round(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定された数は、ダウンまたは最も近い整数に丸めます。"
  syntax:
    content: public static double round (double d);
    parameters:
    - id: d
      type: System.Double
      description: "丸める数値。"
    return:
      type: System.Double
      description: "場合の小数部<code> d </code>より小さい、次の整数にちょうど中間にある<code> d </code>切り捨てられます。 場合の小数部<code> d </code>は偶数であるか、次の整数をより<code> d </code>切り上げられます。"
  overload: Microsoft.JScript.MathObject.round*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.sin(System.Double)
  id: sin(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: sin(Double)
  nameWithType: MathObject.sin(Double)
  fullName: Microsoft.JScript.MathObject.sin(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定された角度のサインを計算します。"
  syntax:
    content: public static double sin (double x);
    parameters:
    - id: x
      type: System.Double
      description: "ラジアンで表した角度。"
    return:
      type: System.Double
      description: "The sine of <code>x</code>."
  overload: Microsoft.JScript.MathObject.sin*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.sqrt(System.Double)
  id: sqrt(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: sqrt(Double)
  nameWithType: MathObject.sqrt(Double)
  fullName: Microsoft.JScript.MathObject.sqrt(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定した数値の平方根を計算します。"
  syntax:
    content: public static double sqrt (double x);
    parameters:
    - id: x
      type: System.Double
      description: "平方根を計算する数値。"
    return:
      type: System.Double
      description: "平方根<code> x</code>です。"
  overload: Microsoft.JScript.MathObject.sqrt*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.SQRT1_2
  id: SQRT1_2
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: SQRT1_2
  nameWithType: MathObject.SQRT1_2
  fullName: Microsoft.JScript.MathObject.SQRT1_2
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: '次に相当する値を表す値を格納します。 (√ 2)/2、√(½)、および 1/(√2) です。'
  syntax:
    content: public const double SQRT1_2 = 0.707106781186548;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.SQRT2
  id: SQRT2
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: SQRT2
  nameWithType: MathObject.SQRT2
  fullName: Microsoft.JScript.MathObject.SQRT2
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "√&2; を表す値を格納します。"
  syntax:
    content: public const double SQRT2 = 1.4142135623731;
    return:
      type: System.Double
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.MathObject.tan(System.Double)
  id: tan(System.Double)
  parent: Microsoft.JScript.MathObject
  langs:
  - csharp
  name: tan(Double)
  nameWithType: MathObject.tan(Double)
  fullName: Microsoft.JScript.MathObject.tan(Double)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "指定された角度のタンジェントを計算します。"
  syntax:
    content: public static double tan (double x);
    parameters:
    - id: x
      type: System.Double
      description: "ラジアンで表した角度。"
    return:
      type: System.Double
      description: "タンジェント<code> x</code>です。"
  overload: Microsoft.JScript.MathObject.tan*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.JScript.JSObject
  isExternal: false
  name: Microsoft.JScript.JSObject
- uid: Microsoft.JScript.MathObject.abs(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: abs(Double)
  nameWithType: MathObject.abs(Double)
  fullName: Microsoft.JScript.MathObject.abs(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.JScript.MathObject.acos(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: acos(Double)
  nameWithType: MathObject.acos(Double)
  fullName: Microsoft.JScript.MathObject.acos(Double)
- uid: Microsoft.JScript.MathObject.asin(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: asin(Double)
  nameWithType: MathObject.asin(Double)
  fullName: Microsoft.JScript.MathObject.asin(Double)
- uid: Microsoft.JScript.MathObject.atan(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan(Double)
  nameWithType: MathObject.atan(Double)
  fullName: Microsoft.JScript.MathObject.atan(Double)
- uid: Microsoft.JScript.MathObject.atan2(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan2(Double,Double)
  nameWithType: MathObject.atan2(Double,Double)
  fullName: Microsoft.JScript.MathObject.atan2(Double,Double)
- uid: Microsoft.JScript.MathObject.ceil(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: ceil(Double)
  nameWithType: MathObject.ceil(Double)
  fullName: Microsoft.JScript.MathObject.ceil(Double)
- uid: Microsoft.JScript.MathObject.cos(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: cos(Double)
  nameWithType: MathObject.cos(Double)
  fullName: Microsoft.JScript.MathObject.cos(Double)
- uid: Microsoft.JScript.MathObject.E
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: E
  nameWithType: MathObject.E
  fullName: Microsoft.JScript.MathObject.E
- uid: Microsoft.JScript.MathObject.exp(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: exp(Double)
  nameWithType: MathObject.exp(Double)
  fullName: Microsoft.JScript.MathObject.exp(Double)
- uid: Microsoft.JScript.MathObject.floor(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: floor(Double)
  nameWithType: MathObject.floor(Double)
  fullName: Microsoft.JScript.MathObject.floor(Double)
- uid: Microsoft.JScript.MathObject.LN10
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LN10
  nameWithType: MathObject.LN10
  fullName: Microsoft.JScript.MathObject.LN10
- uid: Microsoft.JScript.MathObject.LN2
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LN2
  nameWithType: MathObject.LN2
  fullName: Microsoft.JScript.MathObject.LN2
- uid: Microsoft.JScript.MathObject.log(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: log(Double)
  nameWithType: MathObject.log(Double)
  fullName: Microsoft.JScript.MathObject.log(Double)
- uid: Microsoft.JScript.MathObject.LOG10E
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LOG10E
  nameWithType: MathObject.LOG10E
  fullName: Microsoft.JScript.MathObject.LOG10E
- uid: Microsoft.JScript.MathObject.LOG2E
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: LOG2E
  nameWithType: MathObject.LOG2E
  fullName: Microsoft.JScript.MathObject.LOG2E
- uid: Microsoft.JScript.MathObject.max(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: max(Object,Object,Object[])
  nameWithType: MathObject.max(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.max(Object,Object,Object[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.MathObject.min(System.Object,System.Object,System.Object[])
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: min(Object,Object,Object[])
  nameWithType: MathObject.min(Object,Object,Object[])
  fullName: Microsoft.JScript.MathObject.min(Object,Object,Object[])
- uid: Microsoft.JScript.MathObject.PI
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: PI
  nameWithType: MathObject.PI
  fullName: Microsoft.JScript.MathObject.PI
- uid: Microsoft.JScript.MathObject.pow(System.Double,System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: pow(Double,Double)
  nameWithType: MathObject.pow(Double,Double)
  fullName: Microsoft.JScript.MathObject.pow(Double,Double)
- uid: Microsoft.JScript.MathObject.random
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: random()
  nameWithType: MathObject.random()
  fullName: Microsoft.JScript.MathObject.random()
- uid: Microsoft.JScript.MathObject.round(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: round(Double)
  nameWithType: MathObject.round(Double)
  fullName: Microsoft.JScript.MathObject.round(Double)
- uid: Microsoft.JScript.MathObject.sin(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sin(Double)
  nameWithType: MathObject.sin(Double)
  fullName: Microsoft.JScript.MathObject.sin(Double)
- uid: Microsoft.JScript.MathObject.sqrt(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sqrt(Double)
  nameWithType: MathObject.sqrt(Double)
  fullName: Microsoft.JScript.MathObject.sqrt(Double)
- uid: Microsoft.JScript.MathObject.SQRT1_2
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: SQRT1_2
  nameWithType: MathObject.SQRT1_2
  fullName: Microsoft.JScript.MathObject.SQRT1_2
- uid: Microsoft.JScript.MathObject.SQRT2
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: SQRT2
  nameWithType: MathObject.SQRT2
  fullName: Microsoft.JScript.MathObject.SQRT2
- uid: Microsoft.JScript.MathObject.tan(System.Double)
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: tan(Double)
  nameWithType: MathObject.tan(Double)
  fullName: Microsoft.JScript.MathObject.tan(Double)
- uid: Microsoft.JScript.MathObject.abs*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: abs
  nameWithType: MathObject.abs
- uid: Microsoft.JScript.MathObject.acos*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: acos
  nameWithType: MathObject.acos
- uid: Microsoft.JScript.MathObject.asin*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: asin
  nameWithType: MathObject.asin
- uid: Microsoft.JScript.MathObject.atan*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan
  nameWithType: MathObject.atan
- uid: Microsoft.JScript.MathObject.atan2*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: atan2
  nameWithType: MathObject.atan2
- uid: Microsoft.JScript.MathObject.ceil*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: ceil
  nameWithType: MathObject.ceil
- uid: Microsoft.JScript.MathObject.cos*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: cos
  nameWithType: MathObject.cos
- uid: Microsoft.JScript.MathObject.exp*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: exp
  nameWithType: MathObject.exp
- uid: Microsoft.JScript.MathObject.floor*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: floor
  nameWithType: MathObject.floor
- uid: Microsoft.JScript.MathObject.log*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: log
  nameWithType: MathObject.log
- uid: Microsoft.JScript.MathObject.max*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: max
  nameWithType: MathObject.max
- uid: Microsoft.JScript.MathObject.min*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: min
  nameWithType: MathObject.min
- uid: Microsoft.JScript.MathObject.pow*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: pow
  nameWithType: MathObject.pow
- uid: Microsoft.JScript.MathObject.random*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: random
  nameWithType: MathObject.random
- uid: Microsoft.JScript.MathObject.round*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: round
  nameWithType: MathObject.round
- uid: Microsoft.JScript.MathObject.sin*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sin
  nameWithType: MathObject.sin
- uid: Microsoft.JScript.MathObject.sqrt*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: sqrt
  nameWithType: MathObject.sqrt
- uid: Microsoft.JScript.MathObject.tan*
  parent: Microsoft.JScript.MathObject
  isExternal: false
  name: tan
  nameWithType: MathObject.tan
