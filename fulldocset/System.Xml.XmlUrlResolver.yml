### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlUrlResolver
  id: XmlUrlResolver
  children:
  - System.Xml.XmlUrlResolver.#ctor
  - System.Xml.XmlUrlResolver.CachePolicy
  - System.Xml.XmlUrlResolver.Credentials
  - System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)
  - System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  - System.Xml.XmlUrlResolver.Proxy
  - System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)
  langs:
  - csharp
  name: XmlUrlResolver
  nameWithType: XmlUrlResolver
  fullName: System.Xml.XmlUrlResolver
  type: Class
  summary: "によって、Uniform Resource Identifier () をという名前の外部 XML リソースを解決します。"
  remarks: "XmlUrlResolver を使用して、エンティティ、ドキュメント型定義 (Dtd) またはスキーマなどの外部の XML リソースを解決します。 使用されてもプロセスを含めるし、拡張スタイル シート言語 (XSL) スタイル シートまたは XML スキーマ定義言語 (XSD) スキーマで検出された要素をインポートします。       XmlUrlResolver はのすべてのクラスの既定のリゾルバー、<xref:System.Xml>名前空間</xref:System.Xml>。 これをサポートしている、`file://`と`http://`プロトコルおよび<xref:System.Net.WebRequest>クラス</xref:System.Net.WebRequest>からの要求      > [!IMPORTANT] > XmlUrlResolver オブジェクトは、ユーザーの資格情報などの機密情報を含めることができます。 XmlUrlResolver オブジェクトをキャッシュし、信頼できないコンポーネントに XmlUrlResolver オブジェクトを渡す必要がありますいないときに、注意する必要があります。      ## Dtd 場合、XML リーダーを解決する (<xref:System.Xml.XmlReader>) を外部の DTD を含む XML ファイルの読み取りは、呼び出し、 <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=fullName>DTD のストリームの表現を取得するメソッド</xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=fullName></xref:System.Xml.XmlReader>。 DTD の URI が相対 URI の場合は、XML リーダーを呼び出して、<xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=fullName>メソッドの絶対 URI を返すと、指定された`relativeUri`と`baseURi`パラメーター</xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=fullName> 。 返すかどうか、XmlUrlResolver は URI を解決する方法を認識しません、`null`です。       <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName>メソッド内の情報を使用して、<xref:System.Xml.XmlUrlResolver.Credentials%2A>リソースにアクセスするために適切なプロパティです</xref:System.Xml.XmlUrlResolver.Credentials%2A></xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName>。 ない`get`のセキュリティの理由からこのプロパティをアクセサー。 上書きする場合<xref:System.Xml.XmlResolver>、 **GetEntity**の資格情報を使用するメソッドは、**資格情報**プロパティ</xref:System.Xml.XmlResolver>。       その他のすべての XML リソースの解決は、Dtd の解決に非常に似ています。 <xref:System.Xml.XmlResolver>外部のリソースへの接続をネゴシエートしを返します、 <xref:System.IO.Stream>、内容の表示</xref:System.IO.Stream>。</xref:System.Xml.XmlResolver> オブジェクトへの呼び出しを行っている<xref:System.Xml.XmlResolver>ストリームを解釈します</xref:System.Xml.XmlResolver>。      ## キャッシュからではなく、そのソースから XML データ リソースを解決するのには、XmlUrlResolver クラス XmlUrlResolver クラスの既定の動作の拡張です。 場合によっては、キャッシュからのデータ リソースを解決することができますを向上させる、アプリケーションのパフォーマンス データ リソース サーバーへのトリップでします。 このパフォーマンスの向上は、最新のコンテンツの必要性を比較検討する必要があります。       次の例は、XmlUrlResolver を拡張し、新しいクラスを構築`XmlCachingResolver`、キャッシュからリソースを取得します。 これは、オーバーライドで、<xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=fullName>プロパティおよび<xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName>メソッド</xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName></xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=fullName>。       [!code-vb[XmlCachingResolver_ex&1;](~/add/codesnippet/visualbasic/t-system.xml.xmlurlresol_1.vb)][!code-cs[XmlCachingResolver_ex&1;](~/add/codesnippet/csharp/t-system.xml.xmlurlresol_1.cs) ]のキャッシュ動作、`XmlCachingResolver`でクラスが実装されている、`GetEntity`メソッドです。   これは、新規に作成するで<xref:System.Net.WebRequest>と<xref:System.Net.Cache.HttpRequestCachePolicy>オブジェクト</xref:System.Net.Cache.HttpRequestCachePolicy></xref:System.Net.WebRequest>。 <xref:System.Net.Cache.HttpRequestCachePolicy>を使用してオブジェクトを作成、<xref:System.Net.Cache.HttpRequestCacheLevel>のメンバー、<xref:System.Net.Cache.HttpRequestCacheLevel>列挙体です</xref:System.Net.Cache.HttpRequestCacheLevel></xref:System.Net.Cache.HttpRequestCacheLevel></xref:System.Net.Cache.HttpRequestCachePolicy>。       <xref:System.Net.WebRequest.CachePolicy%2A>のプロパティ、<xref:System.Net.WebRequest>でオブジェクトが設定されている、<xref:System.Net.Cache.HttpRequestCachePolicy>オブジェクト</xref:System.Net.Cache.HttpRequestCachePolicy></xref:System.Net.WebRequest></xref:System.Net.WebRequest.CachePolicy%2A>。       インスタンス、`XmlCachingResolver`でクラスを作成、`Boolean``enableHttpCaching`です。 この値に設定すると`true`インスタンスが可能であれば、既定のキャッシュからのリソースを解決します。 ときに`enableHttpCaching`に設定されている`false`インスタンスが既定の動作を使用し、それらのソースからリソースを解決します。      > [!NOTE] > この例は .NET Framework の XML クラスの拡張機能を活用します。 その他のクラスを拡張し、特定のアプリケーションのニーズに合わせてカスタマイズできます。"
  example:
  - "The following example creates an <xref:System.Xml.XmlReader> that uses an XmlUrlResolver with default credentials.  \n  \n [!code-vb[XmlResolver_Samples#1](~/add/codesnippet/visualbasic/t-system.xml.xmlurlresol_2.vb)]\n [!code-cs[XmlResolver_Samples#1](~/add/codesnippet/csharp/t-system.xml.xmlurlresol_2.cs)]"
  syntax:
    content: 'public class XmlUrlResolver : System.Xml.XmlResolver'
  inheritance:
  - System.Object
  - System.Xml.XmlResolver
  implements: []
  inheritedMembers:
  - System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.#ctor
  id: '#ctor'
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: XmlUrlResolver()
  nameWithType: XmlUrlResolver.XmlUrlResolver()
  fullName: System.Xml.XmlUrlResolver.XmlUrlResolver()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Xml.XmlUrlResolver&quot;> </xref>クラスです。"
  syntax:
    content: public XmlUrlResolver ();
    parameters: []
  overload: System.Xml.XmlUrlResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.CachePolicy
  id: CachePolicy
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: CachePolicy
  nameWithType: XmlUrlResolver.CachePolicy
  fullName: System.Xml.XmlUrlResolver.CachePolicy
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "基になるのキャッシュ ポリシーの設定を取得または<xref:System.Net.WebRequest>オブジェクト</xref:System.Net.WebRequest>。"
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "基になる web 要求のキャッシュ ポリシー。"
  overload: System.Xml.XmlUrlResolver.CachePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.Credentials
  id: Credentials
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: Credentials
  nameWithType: XmlUrlResolver.Credentials
  fullName: System.Xml.XmlUrlResolver.Credentials
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Web 要求の認証に使用される資格情報を設定します。"
  remarks: "仮想ディレクトリに認証が必要としない場合このプロパティが設定する必要はありません。 それ以外の場合、ユーザーの資格情報を指定する必要があります。       異なる Uri に別の資格情報を関連付けるでき、それらをキャッシュに追加することができます。 資格情報を使用して、XML の送信元に関係なく、別の Uri の認証を確認できます。       次の c# コードでは、資格情報のキャッシュに資格情報のプロパティを設定する方法を示します。      ```   NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);    CredentialCache myCache = new CredentialCache();    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;), &quot;Basic&quot;, myCred);    myCache.Add(new Uri(&quot;http://app.contoso.com/&quot;), &quot;Basic&quot;, myCred);   XmlUrlResolver resolver = new XmlUrlResolver();   resolver.Credentials = myCache;   ```"
  example:
  - "The following example creates an <xref:System.Xml.XmlUrlResolver> object with credentials. The <xref:System.Xml.XmlReader> uses the credentials on the <xref:System.Xml.XmlUrlResolver> object to access a network resource.  \n  \n [!code-vb[XmlResolver_Samples#2](~/add/codesnippet/visualbasic/p-system.xml.xmlurlresol_1.vb)]\n [!code-cs[XmlResolver_Samples#2](~/add/codesnippet/csharp/p-system.xml.xmlurlresol_1.cs)]"
  syntax:
    content: public override System.Net.ICredentials Credentials { set; }
    return:
      type: System.Net.ICredentials
      description: "Web 要求の認証に使用する資格情報です。 このプロパティが設定されていない場合、既定値<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。 つまり、 <xref uid=&quot;langword_csharp_XmlUrlResolver&quot; name=&quot;XmlUrlResolver&quot; href=&quot;&quot;> </xref>ユーザーの資格情報がありません。"
  overload: System.Xml.XmlUrlResolver.Credentials*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)
  id: GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntity(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "URI を実際のリソースを格納しているオブジェクトをマップします。"
  remarks: "このメソッドは、呼び出し元が指定した URI を URI を表すリソースを格納しているオブジェクトにマップするときに使用されます。       このメソッドの非同期バージョン、 <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>。</xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>を参照してください。      > [!IMPORTANT] > IStream を実装することによって、アプリケーションがメモリ サービス拒否の脅威 GetEntity メソッドを緩和できます<xref:System.Runtime.InteropServices.ComTypes.IStream>読み取られたバイト数を制限する</xref:System.Runtime.InteropServices.ComTypes.IStream>。 これにより、悪意のあるコードがメソッドに渡し、バイト ストリーム、GetEntity しようとする状況を防ぐことができます。"
  example:
  - "The following example demonstrates the `GetEntity` and <xref:System.Xml.XmlResolver.ResolveUri%2A> methods.  \n  \n [!code-vb[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlurlresol_1.vb)]\n [!code-cpp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/add/codesnippet/cpp/m-system.xml.xmlurlresol_1.cpp)]\n [!code-cs[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/add/codesnippet/csharp/m-system.xml.xmlurlresol_1.cs)]"
  syntax:
    content: public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "<xref:System.Xml.XmlResolver.ResolveUri*>。</xref:System.Xml.XmlResolver.ResolveUri*>から返された URI"
    - id: role
      type: System.String
      description: "使用されていません。"
    - id: ofObjectToReturn
      type: System.Type
      description: "返すオブジェクトの型。 現在の実装のみ返します<xref:System.IO.Stream>オブジェクト</xref:System.IO.Stream>。"
    return:
      type: System.Object
      description: "ストリーム オブジェクトまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>ストリーム以外の型が指定されている場合。"
  overload: System.Xml.XmlUrlResolver.GetEntity*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>ofObjectToReturn</code>どちらも<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>も<xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;></xref>型です。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "指定された URI は絶対 URI ではないです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>absoluteUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "ランタイム エラー (たとえば、中断されたサーバー接続) があります。"
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  id: GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntityAsync(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "URI を実際のリソースを格納しているオブジェクトを非同期的にマップします。"
  syntax:
    content: public override System.Threading.Tasks.Task<object> GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "<xref:System.Xml.XmlResolver.ResolveUri*>。</xref:System.Xml.XmlResolver.ResolveUri*>から返された URI"
    - id: role
      type: System.String
      description: "使用されていません。"
    - id: ofObjectToReturn
      type: System.Type
      description: "返すオブジェクトの型。 現在の実装のみ返します<xref:System.IO.Stream>オブジェクト</xref:System.IO.Stream>。"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "ストリーム オブジェクトまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>ストリーム以外の型が指定されている場合。"
  overload: System.Xml.XmlUrlResolver.GetEntityAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.Proxy
  id: Proxy
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: Proxy
  nameWithType: XmlUrlResolver.Proxy
  fullName: System.Xml.XmlUrlResolver.Proxy
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "取得または設定、ネットワーク プロキシ、基になる<xref:System.Net.WebRequest>オブジェクト</xref:System.Net.WebRequest>。"
  syntax:
    content: public System.Net.IWebProxy Proxy { set; }
    return:
      type: System.Net.IWebProxy
      description: "<xref:System.Net.IWebProxy>を使用して、インターネット リソースにアクセスする</xref:System.Net.IWebProxy>。"
  overload: System.Xml.XmlUrlResolver.Proxy*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)
  id: ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlUrlResolver
  langs:
  - csharp
  name: ResolveUri(Uri,String)
  nameWithType: XmlUrlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlUrlResolver.ResolveUri(Uri,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "ベース uri と相対 Uri から絶対 URI を解決します。"
  remarks: "絶対 URI は、この URI に対する相対されているエンティティの後続の要求のベース URI として使用できます。"
  syntax:
    content: public override Uri ResolveUri (Uri baseUri, string relativeUri);
    parameters:
    - id: baseUri
      type: System.Uri
      description: "ベース URI は相対 URI の解決に使用されます。"
    - id: relativeUri
      type: System.String
      description: "解決するのには URI です。 絶対パスまたは相対 URI でもかまいません。 かどうか絶対で、この値は効果的に置き換え、`baseUri`値。 かどうか、相対それを組み合わせて、`baseUri`絶対 URI を作成します。"
    return:
      type: System.Uri
      description: "絶対 URI、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>相対 URI を解決できない場合。"
  overload: System.Xml.XmlUrlResolver.ResolveUri*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>baseUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> or <code>relativeUri</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Xml.XmlResolver
  isExternal: false
  name: System.Xml.XmlResolver
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Xml.XmlUrlResolver.#ctor
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: XmlUrlResolver()
  nameWithType: XmlUrlResolver.XmlUrlResolver()
  fullName: System.Xml.XmlUrlResolver.XmlUrlResolver()
- uid: System.Xml.XmlUrlResolver.CachePolicy
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: CachePolicy
  nameWithType: XmlUrlResolver.CachePolicy
  fullName: System.Xml.XmlUrlResolver.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Xml.XmlUrlResolver.Credentials
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlUrlResolver.Credentials
  fullName: System.Xml.XmlUrlResolver.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntity(Uri,String,Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlUrlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlUrlResolver.GetEntityAsync(Uri,String,Type)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlUrlResolver.Proxy
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Proxy
  nameWithType: XmlUrlResolver.Proxy
  fullName: System.Xml.XmlUrlResolver.Proxy
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: ResolveUri(Uri,String)
  nameWithType: XmlUrlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlUrlResolver.ResolveUri(Uri,String)
- uid: System.Xml.XmlUrlResolver.#ctor*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: XmlUrlResolver
  nameWithType: XmlUrlResolver.XmlUrlResolver
- uid: System.Xml.XmlUrlResolver.CachePolicy*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: CachePolicy
  nameWithType: XmlUrlResolver.CachePolicy
- uid: System.Xml.XmlUrlResolver.Credentials*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlUrlResolver.Credentials
- uid: System.Xml.XmlUrlResolver.GetEntity*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntity
  nameWithType: XmlUrlResolver.GetEntity
- uid: System.Xml.XmlUrlResolver.GetEntityAsync*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: GetEntityAsync
  nameWithType: XmlUrlResolver.GetEntityAsync
- uid: System.Xml.XmlUrlResolver.Proxy*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: Proxy
  nameWithType: XmlUrlResolver.Proxy
- uid: System.Xml.XmlUrlResolver.ResolveUri*
  parent: System.Xml.XmlUrlResolver
  isExternal: false
  name: ResolveUri
  nameWithType: XmlUrlResolver.ResolveUri
