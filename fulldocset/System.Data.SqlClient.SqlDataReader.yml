### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlDataReader
  id: SqlDataReader
  children:
  - System.Data.SqlClient.SqlDataReader.Close
  - System.Data.SqlClient.SqlDataReader.Connection
  - System.Data.SqlClient.SqlDataReader.Depth
  - System.Data.SqlClient.SqlDataReader.FieldCount
  - System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetEnumerator
  - System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  - System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSchemaTable
  - System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  - System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  - System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  - System.Data.SqlClient.SqlDataReader.HasRows
  - System.Data.SqlClient.SqlDataReader.IsClosed
  - System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  - System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  - System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  - System.Data.SqlClient.SqlDataReader.Item(System.String)
  - System.Data.SqlClient.SqlDataReader.NextResult
  - System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.Read
  - System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlDataReader.RecordsAffected
  - System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  langs:
  - csharp
  name: SqlDataReader
  nameWithType: SqlDataReader
  fullName: System.Data.SqlClient.SqlDataReader
  type: Class
  summary: "SQL Server データベースからの行の順方向専用ストリームを読み取る手段を提供します。 このクラスは継承できません。"
  remarks: "呼び出す必要があります、SqlDataReader を作成する、<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>のメソッド、<xref:System.Data.SqlClient.SqlCommand>コンス トラクターを直接使用する代わりに、オブジェクトです</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。       SqlDataReader が使用されているときに、関連する<xref:System.Data.SqlClient.SqlConnection>は、ビジー状態、SqlDataReader を提供していると<xref:System.Data.SqlClient.SqlConnection>それを閉じる以外</xref:System.Data.SqlClient.SqlConnection>ではないその他の操作を実行できます</xref:System.Data.SqlClient.SqlConnection> までには、その場合は、 <xref:System.Data.SqlClient.SqlDataReader.Close%2A>SqlDataReader のメソッドが呼び出されます</xref:System.Data.SqlClient.SqlDataReader.Close%2A>。 <xref:System.Data.SqlClient.SqlDataReader.Close%2A>。</xref:System.Data.SqlClient.SqlDataReader.Close%2A>を呼び出した後にするまでの出力パラメーターを取得することはできませんなど       結果データの読み取り中に、別のプロセスまたはスレッドがセットに加えられた変更は、のユーザーに表示される可能性があります、`SqlDataReader`です。 ただし、正確な動作、タイミングによって決まります。       <xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>および<xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>呼び出すことのできる唯一のプロパティは、SqlDataReader が閉じられた後です</xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>。</xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A> <xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>プロパティがあります、SqlDataReader が存在する間、アクセスを常に呼び出す<xref:System.Data.SqlClient.SqlDataReader.Close%2A>の値を返す前に<xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>正確な戻り値を保証する</xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A></xref:System.Data.SqlClient.SqlDataReader.Close%2A></xref:System.Data.SqlClient.SqlDataReader.RecordsAffected%2A>。       順次アクセスを使用する場合 (<xref:System.Data.CommandBehavior?displayProperty=fullName>)、 <xref:System.InvalidOperationException>SqlDataReader の位置を進められ、他の読み取り前の列で操作が試行する場合に生成されます</xref:System.InvalidOperationException></xref:System.Data.CommandBehavior?displayProperty=fullName>。      > [!NOTE] > 不要なオブジェクトを作成またはデータの不要なコピーを作成する最適なパフォーマンスは、SqlDataReader を回避できます。 そのため、何度も呼び出すメソッドになど<xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>、同じオブジェクトへの参照を返します</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>。 <xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>。</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>などのメソッドによって返されるオブジェクトの基になる値を変更する場合は、注意を使用します。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a <xref:System.Data.SqlClient.SqlCommand>, and a SqlDataReader. The example reads through the data, writing it out to the console window. The code then closes the SqlDataReader. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._3_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: 'public class SqlDataReader : System.Data.Common.DbDataReader, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbDataReader
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.Dispose(System.Boolean)
  - System.Data.Common.DbDataReader.GetData(System.Int32)
  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.ReadAsync
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Close
  id: Close
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Close()
  nameWithType: SqlDataReader.Close()
  fullName: System.Data.SqlClient.SqlDataReader.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "閉じる、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>オブジェクト。"
  remarks: "Close メソッドを明示的に呼び出す必要がありますを使用しているときに、<xref:System.Data.SqlClient.SqlDataReader>を使用して、関連付けられている<xref:System.Data.SqlClient.SqlConnection>、他の目的</xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlDataReader>。       `Close`メソッドの出力パラメーター、戻り値の値を入力および`RecordsAffected`、終了するまでにかかる時間を長く、`SqlDataReader`大規模または複雑なクエリの処理に使用されました。 場合、戻り値と、クエリによって影響を受けたレコードの数は意味を持ちません、終了するまでにかかる時間、`SqlDataReader`を呼び出すことによって、減少、<xref:System.Data.SqlClient.SqlCommand.Cancel%2A>関連付けられているメソッド<xref:System.Data.SqlClient.SqlCommand>オブジェクトを呼び出す前に、`Close`メソッド</xref:System.Data.SqlClient.SqlCommand></xref:System.Data.SqlClient.SqlCommand.Cancel%2A>。      > [!CAUTION] > 呼び出さない`Close`または`Dispose`接続、DataReader、または その他のマネージ オブジェクトで、`Finalize`クラスのメソッドです。 ファイナライザーで、クラスが直接所有されているアンマネージ リソースだけを解放する必要があります。 クラスがアンマネージ リソースを所有していない場合は含まれません、`Finalize`メソッド、クラス定義にします。 詳細については、次を参照してください。[ガベージ コレクション](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a `SqlCommand`, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console window. The code then closes the <xref:System.Data.SqlClient.SqlDataReader>. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-vb[Classic WebData SqlDataReader.Close Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._11_1.vb)]\n [!code-cs[Classic WebData SqlDataReader.Close Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlDataReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Connection
  nameWithType: SqlDataReader.Connection
  fullName: System.Data.SqlClient.SqlDataReader.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得、 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>に関連付けられている、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>です。"
  syntax:
    content: protected System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>に関連付けられている、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Depth
  id: Depth
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Depth
  nameWithType: SqlDataReader.Depth
  fullName: System.Data.SqlClient.SqlDataReader.Depth
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "現在の行の入れ子の深さを示す値を取得します。"
  remarks: "最も外側のテーブルは、深さ&0; です。 .NET Framework Data Provider for SQL Server では、入れ子構造をサポートしていませんし、常に&0; を返します。"
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "現在の行の入れ子の深さ。"
  overload: System.Data.SqlClient.SqlDataReader.Depth*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.FieldCount
  id: FieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
  fullName: System.Data.SqlClient.SqlDataReader.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "現在の行に列の数を取得します。"
  remarks: "クエリを実行する、その性質上は行を返しません (削除クエリ) など、FieldCount を 0 に設定します。 ただしです。 この混同しないように 0 行を返すクエリを使用して (SELECT など\\*FROM*テーブル*場所 1 = FieldCount が非表示フィールドを含む、テーブルで列の数を返します 2) いる場合。 使用して<xref:System.Data.SqlClient.SqlDataReader.VisibleFieldCount%2A>を非表示フィールドを除外します</xref:System.Data.SqlClient.SqlDataReader.VisibleFieldCount%2A>。"
  syntax:
    content: public override int FieldCount { get; }
    return:
      type: System.Int32
      description: "0 を有効なレコード セットに配置されない場合それ以外の場合、現在の行の列の数。 既定値は-1 です。"
  overload: System.Data.SqlClient.SqlDataReader.FieldCount*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "SQL Server のインスタンスに現在接続されていません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: SqlDataReader.GetBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "ブール値として指定された列の値を取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータには、ブール値が既にあります。 または例外が発生します。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override bool GetBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Boolean
      description: "列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: SqlDataReader.GetByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定された列の値をバイトとして取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータでは、バイトが既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override byte GetByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Byte
      description: "バイトとして指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列オフセットからバイトのストリームを配列として指定したバッファー オフセットからバッファーに読み取ります。"
  remarks: "GetBytes は、フィールドに使用できるバイト数を返します。 ほとんどの場合これは、フィールドの正確な長さです。 ただし、返される数値フィールドの実際の長さよりも小さい場合あります`GetBytes`バイトを取得するフィールドからは既に使用されています。 これは、場合がありますなどの場合、<xref:System.Data.SqlClient.SqlDataReader>バッファーへの大規模なデータ構造体の読み込みが</xref:System.Data.SqlClient.SqlDataReader>。 詳細については、次を参照してください、 `SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>の設定。       バッファーを渡した場合`null`、GetBytes バッファー オフセット パラメーターに基づく残りサイズではなくバイト単位で全体のフィールドの長さを返します。       変換は実行されません。そのため、取得されたデータでは、バイト配列が既にあります。"
  syntax:
    content: public override long GetBytes (int i, long dataIndex, byte[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    - id: dataIndex
      type: System.Int64
      description: "読み取り操作を開始位置を示すフィールド内のインデックス。"
    - id: buffer
      type: System.Byte[]
      description: "バイトのストリームを読み取るバッファー。"
    - id: bufferIndex
      type: System.Int32
      description: "内のインデックス、`buffer`の書き込み操作を開始することができます。"
    - id: length
      type: System.Int32
      description: "バッファーにコピーする最大の長さ。"
    return:
      type: System.Int64
      description: "実際に読み取られたバイトの数。"
  overload: System.Data.SqlClient.SqlDataReader.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: SqlDataReader.GetChar(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "1 つの文字として指定された列の値を取得します。"
  remarks: "<xref:System.Data.SqlClient>。</xref:System.Data.SqlClient>はサポートされていません"
  syntax:
    content: public override char GetChar (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Char
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定したバッファー オフセットから始まる配列として、文字のストリームを指定した列オフセットからバッファーに読み取ります。"
  remarks: "GetChars は、フィールドに使用できる文字数を返します。 多くの場合、これは、フィールドの正確な長さです。 ただし、返される数値フィールドの実際の長さよりも小さい場合あります`GetChars`フィールドから文字を取得するは既に使用されています。 これは、場合がありますなどの場合、<xref:System.Data.SqlClient.SqlDataReader>バッファーへの大規模なデータ構造体の読み込みが</xref:System.Data.SqlClient.SqlDataReader>。 詳細については、次を参照してください、 `SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>の設定。       実際に読み取られた文字数は、フィールドの末尾に達した場合、要求された長さよりも小さいできます。 バッファーを渡した場合`null`GetChars が文字単位バッファー オフセット パラメーターに基づく残りサイズではなくフィールド全体の長さを返します。       変換は実行されません。そこで。 取得されたデータでは、文字配列が既にあります。      > [!NOTE] > GetChars メソッドは場合は 0 を返します`dataIndex`が負の値。"
  syntax:
    content: public override long GetChars (int i, long dataIndex, char[] buffer, int bufferIndex, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    - id: dataIndex
      type: System.Int64
      description: "読み取り操作を開始位置を示すフィールド内のインデックス。"
    - id: buffer
      type: System.Char[]
      description: "バイトのストリームを読み取るバッファー。"
    - id: bufferIndex
      type: System.Int32
      description: "内のインデックス、`buffer`の書き込み操作を開始することができます。"
    - id: length
      type: System.Int32
      description: "バッファーにコピーする最大の長さ。"
    return:
      type: System.Int64
      description: "実際に読み取られた文字の数。"
  overload: System.Data.SqlClient.SqlDataReader.GetChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: SqlDataReader.GetDataTypeName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定された列のデータ型を表す文字列を取得します。"
  remarks: "バックエンド データ型の名前を返します。       `numeric`用の SQL Server でシノニムは、`decimal`データ型。 `GetDataTypeName`10 進数または数値のいずれかとして定義されている列の&quot;decimal&quot;を返します。"
  syntax:
    content: public override string GetDataTypeName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "検索する列の&0; から始まる序数位置。"
    return:
      type: System.String
      description: "指定された列のデータ型を表す文字列。"
  overload: System.Data.SqlClient.SqlDataReader.GetDataTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: SqlDataReader.GetDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、<xref:System.DateTime>オブジェクト</xref:System.DateTime>。"
  remarks: "変換は実行されません。そのため、取得されたデータおく必要があります、<xref:System.DateTime>オブジェクト</xref:System.DateTime>。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override DateTime GetDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.DateTime
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  id: GetDateTimeOffset(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDateTimeOffset(Int32)
  nameWithType: SqlDataReader.GetDateTimeOffset(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、<xref:System.DateTimeOffset>オブジェクト</xref:System.DateTimeOffset>。"
  remarks: "変換は実行されません。そのため、取得されたデータおく必要があります、<xref:System.DateTimeOffset>オブジェクト</xref:System.DateTimeOffset>。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public virtual DateTimeOffset GetDateTimeOffset (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.DateTimeOffset
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: SqlDataReader.GetDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、<xref:System.Decimal>オブジェクト</xref:System.Decimal>。"
  remarks: "変換は実行されません。そのため、取得されたデータおく必要があります、<xref:System.Decimal>オブジェクト</xref:System.Decimal>。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override decimal GetDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Decimal
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: SqlDataReader.GetDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "倍精度浮動小数点数として指定された列の値を取得します。"
  remarks: "変換は実行されません。 そのため、取得されたデータでは、倍精度浮動小数点数が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override double GetDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Double
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SqlDataReader.GetEnumerator()
  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返します、<xref:System.Collections.IEnumerator>を反復処理する、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref></xref:System.Collections.IEnumerator> 。"
  remarks: "このメソッドを使用して、明示的な列挙子を取得することができます、言語をサポートする、`foreach`構築、データ リーダー内の行を反復処理するために直接ループ構造を使用する方が簡単です。"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Data.SqlClient.SqlDataReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: SqlDataReader.GetFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得、<xref:System.Type>オブジェクトのデータ型です</xref:System.Type>。"
  syntax:
    content: public override Type GetFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Type
      description: "<xref:System.Type>オブジェクトのデータ型です</xref:System.Type>。 クライアントでは、場合、ユーザー定義型 (UDT)、データベースから返された型が存在しない場合**GetFieldType**は null を返します。"
  overload: System.Data.SqlClient.SqlDataReader.GetFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  id: GetFieldValue``1(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldValue(Int32)
  nameWithType: SqlDataReader.GetFieldValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: public override T GetFieldValue<T> (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "追加します。"
    return:
      type: T
      description: "追加します。"
  overload: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  id: GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFieldValueAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: public override System.Threading.Tasks.Task<T> GetFieldValueAsync<T> (int i, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: i
      type: System.Int32
      description: "追加します。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "追加します。"
    return:
      type: System.Threading.Tasks.Task{T}
      description: "追加します。"
  overload: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: SqlDataReader.GetFloat(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "単精度浮動小数点数として指定された列の値を取得します。"
  remarks: "変換は実行されません。 そのため、取得されたデータでは、単精度浮動小数点数が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override float GetFloat (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Single
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetFloat*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: SqlDataReader.GetGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "グローバル一意識別子 (GUID) として指定された列の値を取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータでは、GUID が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override Guid GetGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Guid
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetGuid*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: SqlDataReader.GetInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "16 ビット符号付き整数として指定された列の値を取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータでは、16 ビット符号付き整数が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override short GetInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Int16
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: SqlDataReader.GetInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "32 ビット符号付き整数として指定された列の値を取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータでは、32 ビット符号付き整数が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override int GetInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Int32
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: SqlDataReader.GetInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "64 ビット符号付き整数として指定された列の値を取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータでは、64 ビット符号付き整数が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override long GetInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Int64
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: SqlDataReader.GetName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定された列の名前を取得します。"
  syntax:
    content: public override string GetName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.String
      description: "指定された列の名前です。"
  overload: System.Data.SqlClient.SqlDataReader.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: SqlDataReader.GetOrdinal(String)
  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "列の名前を指定して、列の序数を取得します。"
  remarks: "`GetOrdinal`最初に区別する検索を実行します。 大文字と小文字が発生したが失敗した場合、秒、(大文字と小文字の比較が行われデータベースの照合順序を使用して)。 予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。 たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムは、文字 &quot;i&quot; の言語の文字種の規則を使用しないので&quot;file&quot;にします。 メソッドをスロー、 `IndexOutOfRange`&0; から始まる列序数が見つからない場合に例外です。       `GetOrdinal`カタカナの全角区別されません。       呼び出す効率的ではありません序数に基づく参照は、名前による参照よりも効率的であるため`GetOrdinal`ループ内で。 呼び出すことによって、時間を節約`GetOrdinal`ループ内で使用する整数の変数に結果を割り当てるとします。"
  example:
  - "The following example demonstrates how to use the GetOrdinal method.  \n  \n [!code-cs[Classic WebData SqlDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.sqlclient._27_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._27_1.vb)]"
  syntax:
    content: public override int GetOrdinal (string name);
    parameters:
    - id: name
      type: System.String
      description: "列の名前。"
    return:
      type: System.Int32
      description: "0 から始まる列序数です。"
  overload: System.Data.SqlClient.SqlDataReader.GetOrdinal*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "指定された名前は、有効な列名ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  id: GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>基になるプロバイダー固有のフィールド型の表現されています。"
  syntax:
    content: public override Type GetProviderSpecificFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "<xref:System.Int32>列の序数を表すします</xref:System.Int32>。"
    return:
      type: System.Type
      description: "取得、<xref:System.Object>基になるプロバイダー固有のフィールド型の表現されている</xref:System.Object>。"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  id: GetProviderSpecificValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificValue(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "取得、 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>基になるプロバイダー固有の値の表現されています。"
  syntax:
    content: public override object GetProviderSpecificValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "<xref:System.Int32>列の序数を表すします</xref:System.Int32>。"
    return:
      type: System.Object
      description: "<xref:System.Object>基になるプロバイダー固有の値の表現されている</xref:System.Object>。"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  id: GetProviderSpecificValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetProviderSpecificValues(Object[])
  nameWithType: SqlDataReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "基になるプロバイダー固有の値の表現であるオブジェクトの配列を取得します。"
  syntax:
    content: public override int GetProviderSpecificValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "配列<xref:System.Object>列の値をコピー先</xref:System.Object>。"
    return:
      type: System.Int32
      description: "基になるプロバイダー固有の値の表現であるオブジェクトの配列。"
  overload: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable
  id: GetSchemaTable
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSchemaTable()
  nameWithType: SqlDataReader.GetSchemaTable()
  fullName: System.Data.SqlClient.SqlDataReader.GetSchemaTable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返します、 <xref href=&quot;System.Data.DataTable&quot;> </xref>の列メタデータを記述する、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>です。"
  remarks: "GetSchemaTable のメソッドは、次の順序で各列に関するメタデータを返します |。DataReader 列 |説明 |  |-----------------------|-----------------|  |AllowDBNull |コンシューマーは、null 値に列を設定できる場合、またはプロバイダーでは、コンシューマーが列を null 値に設定できるかどうかを判断できない場合に設定します。 それ以外の場合、設定されていません。 列がある場合、null 値を null 値に設定できない場合でもです |。  |BaseCatalogName |列を含むデータ ストア内のカタログの名前。 ベースのカタログ名を特定できない場合は NULL です。 この列の既定値は null 値です |。  |BaseColumnName |データ ストア内の列の名前。 これは、エイリアスが使用されたかどうか、[ColumnName] 列で、列名が返されては異なる可能性があります。 ベースの列名を特定できない場合や行セットの列が派生したと一致しない、データの列ストアの場合は、null 値。 この列の既定値は null 値です |。  |BaseSchemaName |列を含むデータ ストア内のスキーマの名前です。 ベース スキーマ名を特定できない場合は、null 値です。 この列の既定値は null 値です |。  |BaseServerName |<xref:System.Data.SqlClient.SqlDataReader>によって使用される Microsoft SQL Server のインスタンスの名前です |。  |BaseTableName |テーブルまたは列を含むデータ ストア内のビューの名前</xref:System.Data.SqlClient.SqlDataReader>。 ベース テーブル名を特定できない場合は、null 値です。 この列の既定値は null 値です |。  |ColumnName |列の名前これは一意でない可能性があります。 これを特定できない場合は、null 値が返されます。 この名前が常に最新の現在のビューまたはコマンド テキスト内の列の名前を反映します |。  |ColumnOrdinal |列の&0; から始まる序数です。 この列は null 値を含めることはできません |。  |ColumnSize |列の値の可能な最大長。 固定長データ型を使用する列でのデータ型のサイズです。 `nvarchar(MAX)`、 `varchar(MAX)`、および`varbinary(MAX)`最大サイズ、SQL Server データベースに格納されている列が 2 GB です。 これらの列では、格納され、ファイルとしてアクセスすることが場合、ファイル システムで最大サイズの制限が課せられます。 使用する場合、この値が変更された、`Type System Version`接続文字列キーワードでします。  新しい種類の下位レベルの種類として表されます。 MAX データ型を返すための標準の 4 k`nvarchar`につき 8,000`varchar`です。 詳細については、SQL Server オンライン ブックで TRANSACT-SQL リファレンスを参照してください |。  |DataTypeName |指定された列のデータ型を表す文字列を返します |。  |IsAliased |`true`: 列名は、エイリアスです。<br /><br /> `false`: 列名は、エイリアスではありません。 |  |IsAutoIncrement |`true`: 列が固定された増分で新しい行に値を割り当てます。<br /><br /> `false`: 列は、固定された増分で新しい行に値を割り当てられません。 この列の既定値は`false`|。  |IsColumnSet |`true`: 列が列セットのメンバーであるスパース列です |。  |IsExpression |`true`: 列が式。<br /><br /> `false`: 列が式ではありません。 |  |IsHidden |`true`: 列を非表示にします。<br /><br /> `false`: 列は非表示にします。 |  |IsIdentity |`true`: 列が id 列です。<br /><br /> `false`列は id 列ではありません |。  |IsKey |`true`: 列が行セットの列のセットのいずれかをまとめると、行を一意に識別します。 列のセット`IsKey`&quot;éý&quot;`true`行セット内の行を一意に識別する必要があります。 この列のセットが列の最小セットである必要はありません。 この列のセットは、ベース テーブルの主キー、unique 制約または一意のインデックスから生成される可能性があります。<br /><br /> `false`: 列が行を一意に識別する必要はありません。 |  |IsLong |`true`: 列には非常に長いデータを含むバイナリ長オブジェクト (BLOB) が含まれています。 非常に長いデータの定義は、プロバイダー固有です。<br /><br /> `false`: 列に非常に長いデータを含むバイナリ長オブジェクト (BLOB) が含まれていません。 |  |IsReadOnly |`true`: 列を変更することはできません。<br /><br /> `false`: 列を変更することができます。 |  |IsRowVersion |`true`: 列が、書き込むことができない永続的な行識別子を含むし、意味を持たない値以外の id に、行があります。<br /><br /> `false`: 列が、書き込むことができない永続的な行識別子が含まれず、意味を持たない値以外の id に、行がある。 |  |IsUnique |`true`: 列は型`timestamp`です。<br /><br /> `false`: 列の型ではありません`timestamp`。 |  |NonVersionedProviderType |関係なく、現在の列の型`Type System Version`接続文字列で指定します。 <xref:System.Data.SqlDbType>列挙体からの戻り値です |。  |NumericPrecision |場合`ProviderType`数値データ型は、これは、列の最大有効桁数</xref:System.Data.SqlDbType>。 有効桁数は、列の定義によって異なります。 場合`ProviderType`数値データ型ではない 255 です |。  |NumericScale |場合`ProviderType`DBTYPE_DECIMAL または DBTYPE_NUMERIC、小数点の右側にある数字の数。 それ以外の場合、これは 255 です |。  |ProviderSpecificDataType |に基づいて、列のプロバイダーに固有のデータ型を返します、`Type System Version`接続文字列キーワードでします |。  |プロバイダーの種類 |列のデータ型のインジケーター。 列のデータ型は、行ごとに変化する場合は、オブジェクトこのなければなりません。 この列は null 値を含めることはできません |。  |UdtAssemblyQualifiedName |これは、 <xref:System.Type.AssemblyQualifiedName%2A>。</xref:System.Type.AssemblyQualifiedName%2A>に従って UDT のアセンブリの修飾名、列がユーザー定義型 (UDT) の場合は、します。 列が UDT ではない場合は null です |。  |XmlSchemaCollectionDatabase |この XML インスタンスのスキーマ コレクションが置かれている行に XML 列についての情報が含まれている場合、データベースの名前。 この値は`null`(`Nothing` Visual Basic で) コレクションが現在のデータベース内で定義されている場合。 存在しない場合、スキーマ コレクションの場合は null も、`XmlSchemaCollectionName`と`XmlSchemaCollectionOwningSchema`も null にします |。  |XmlSchemaCollectionName |行に XML 列についての情報が含まれている場合、この XML インスタンスのスキーマ コレクションの名前。 この値は`null`(`Nothing` Visual Basic で) 関連付けられているスキーマ コレクションが存在しない場合。 値が null の場合、`XmlSchemaCollectionDatabase`と`XmlSchemaCollectionOwningSchema`も null にします |。  |XmlSchemaCollectionOwningSchema |この XML インスタンスのスキーマ コレクションが置かれている行に XML 列についての情報が含まれている場合、所有リレーショナル スキーマ。 この値は`null`(`Nothing` Visual Basic で) コレクションが現在のデータベース内で定義されている場合。 存在しない場合、スキーマ コレクションの場合は null も、`XmlSchemaCollectionDatabase`と`XmlSchemaCollectionName`も null にします |。     > [!NOTE] > メタデータ列は、正しい情報を返すことは、呼び出す必要があるかどうかを確認する<xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>で、`behavior`パラメーターに設定`KeyInfo`</xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A>。 それ以外の場合、既定値、null、または不適切なデータを返すスキーマ テーブル内の列のいくつかの可能性があります。"
  syntax:
    content: public override System.Data.DataTable GetSchemaTable ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>列メタデータを記述します。"
  overload: System.Data.SqlClient.SqlDataReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>が閉じられます。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  id: GetSqlBinary(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBinary(Int32)
  nameWithType: SqlDataReader.GetSqlBinary(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlBinary&quot;></xref>です。"
  remarks: "変換は実行されません。したがってバイナリ構造が既に取得したデータがあります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBinary GetSqlBinary (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlBinary
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlBinary&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBinary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  id: GetSqlBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBoolean(Int32)
  nameWithType: SqlDataReader.GetSqlBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlBoolean&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータにはブール値が既にあります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBoolean GetSqlBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBoolean*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  id: GetSqlByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlByte(Int32)
  nameWithType: SqlDataReader.GetSqlByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlByte&quot;></xref>です。"
  remarks: "変換は実行されません。したがって取得されたデータおく必要があります、バイトか、例外が生成されます。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlByte GetSqlByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlByte
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlByte&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlByte*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  id: GetSqlBytes(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlBytes(Int32)
  nameWithType: SqlDataReader.GetSqlBytes(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得<xref href=&quot;System.Data.SqlTypes.SqlBytes&quot;></xref>です。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlBytes GetSqlBytes (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlBytes
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlBytes&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  id: GetSqlChars(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlChars(Int32)
  nameWithType: SqlDataReader.GetSqlChars(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得<xref href=&quot;System.Data.SqlTypes.SqlChars&quot;></xref>です。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlChars GetSqlChars (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlChars
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlChars&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  id: GetSqlDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDateTime(Int32)
  nameWithType: SqlDataReader.GetSqlDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlDateTime&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータの日付/時刻値が既にあります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDateTime GetSqlDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlDateTime
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlDateTime&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  id: GetSqlDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDecimal(Int32)
  nameWithType: SqlDataReader.GetSqlDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlDecimal&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータの&10; 進数の値が既にあります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDecimal GetSqlDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlDecimal
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlDecimal&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDecimal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  id: GetSqlDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlDouble(Int32)
  nameWithType: SqlDataReader.GetSqlDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlDouble&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータを倍精度浮動小数点数、おく必要があります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlDouble GetSqlDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlDouble&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlDouble*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  id: GetSqlGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlGuid(Int32)
  nameWithType: SqlDataReader.GetSqlGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlGuid&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータを GUID、おく必要があります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlGuid GetSqlGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlGuid
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlGuid&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlGuid*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  id: GetSqlInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt16(Int32)
  nameWithType: SqlDataReader.GetSqlInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlInt16&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータを 16 ビット符号付き整数の場合、おく必要があります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt16 GetSqlInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlInt16
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlInt16&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt16*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  id: GetSqlInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt32(Int32)
  nameWithType: SqlDataReader.GetSqlInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlInt32&quot;></xref>です。"
  remarks: "変換は実行されません。したがって取得されたデータには、32 ビット符号付き整数がある必要があります既にまたは例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt32 GetSqlInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlInt32
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlInt32&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt32*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  id: GetSqlInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlInt64(Int32)
  nameWithType: SqlDataReader.GetSqlInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlInt64&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータは、64 ビットの符号付き整数をおく必要があります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlInt64 GetSqlInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlInt64
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlInt64&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlInt64*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  id: GetSqlMoney(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlMoney(Int32)
  nameWithType: SqlDataReader.GetSqlMoney(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlMoney&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータの&10; 進数の値が既にあります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlMoney GetSqlMoney (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlMoney
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlMoney&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlMoney*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  id: GetSqlSingle(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlSingle(Int32)
  nameWithType: SqlDataReader.GetSqlSingle(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlSingle&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータを単精度浮動小数点数、おく必要があります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlSingle GetSqlSingle (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlSingle
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlSingle&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlSingle*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  id: GetSqlString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlString(Int32)
  nameWithType: SqlDataReader.GetSqlString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、 <xref href=&quot;System.Data.SqlTypes.SqlString&quot;></xref>です。"
  remarks: "変換は実行されません。そのため、取得されたデータには、文字列が既にあります。 または例外が発生します。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlString GetSqlString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlString
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlTypes.SqlString&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  id: GetSqlValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlValue(Int32)
  nameWithType: SqlDataReader.GetSqlValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "SQL Server 型として指定された列にデータ値を返します。"
  remarks: "GetSqlValue では、SQL Server のネイティブ型を使用してデータを返します。 .NET Framework の型を使用してデータを取得するには、 <xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>。</xref:System.Data.SqlClient.SqlDataReader.GetValue%2A>を参照してください。"
  syntax:
    content: public virtual object GetSqlValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Object
      description: "として表現される列の値、 <xref href=&quot;System.Data.SqlDbType&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  id: GetSqlValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlValues(Object[])
  nameWithType: SqlDataReader.GetSqlValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "配列<xref:System.Object>、レコード内のすべての列の値を含む SQL Server 型として表されます</xref:System.Object>。"
  remarks: "CLR 型システムではなく、SQL 型システムを使用して、1 回の呼び出しでレコードのすべての列の値を返します。 長さ、<xref:System.Object>配列は、レコード内の列の数と一致する必要はありません</xref:System.Object>。 渡すことができます、<xref:System.Object>レコードに含まれる列数より少ないを格納する配列</xref:System.Object>。 データの量のみ、<xref:System.Object>配列は、列序数に基づく、0 から始まる、配列にコピーを保持します</xref:System.Object>。 渡すことも、<xref:System.Object>配列の長さが、結果の行に含まれる列の数を超える</xref:System.Object>。 残りの列は、影響されません。"
  syntax:
    content: public virtual int GetSqlValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "配列<xref:System.Object>値をコピー先</xref:System.Object>。 列の値は、SQL Server 型として表されます。"
    return:
      type: System.Int32
      description: "コピーする列の数を示す整数。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>values</code>null です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  id: GetSqlXml(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetSqlXml(Int32)
  nameWithType: SqlDataReader.GetSqlXml(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "XML 値として指定された列の値を取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータでは、XML 値が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public virtual System.Data.SqlTypes.SqlXml GetSqlXml (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Data.SqlTypes.SqlXml
      description: "A <xref href=&quot;System.Data.SqlTypes.SqlXml&quot;> </xref>対応するフィールド内に格納された XML を含む値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetSqlXml*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "渡されたインデックスは 0 <xref:System.Data.DataTableReader.FieldCount*>- 1</xref:System.Data.DataTableReader.FieldCount*>の範囲外です。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "読み取りまたはアクセス、閉じられた内の列を試みました<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>です。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "取得したデータと互換性がない、 <xref href=&quot;System.Data.SqlTypes.SqlXml&quot;> </xref>型です。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  id: GetStream(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetStream(Int32)
  nameWithType: SqlDataReader.GetStream(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetStream(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "<xref:System.IO.Stream>。</xref:System.IO.Stream>としてバイナリ、イメージ、varbinary、UDT、およびバリアント データ型を取得します。"
  remarks: "<xref:System.IO.Stream.ReadTimeout%2A>既定値は、値の<xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>; を変更できますが、 <xref:System.IO.Stream.ReadTimeout%2A>GetStream を介して</xref:System.IO.Stream.ReadTimeout%2A></xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>。</xref:System.IO.Stream.ReadTimeout%2A>       Null 値は空 (0 バイト) として返されます<xref:System.IO.Stream>.</xref:System.IO.Stream>       <xref:System.Data.SqlClient.SqlDataReader.GetBytes%2A>生成されます、 <xref:System.InvalidOperationException>GetStream によって返されるオブジェクトで使用すると、例外と<xref:System.Data.CommandBehavior>が有効になって</xref:System.Data.CommandBehavior></xref:System.InvalidOperationException>。</xref:System.Data.SqlClient.SqlDataReader.GetBytes%2A>       <xref:System.Data.SqlClient.SqlException><xref:System.IO.Stream> <xref:System.IO.IOException> <xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException>は、内部例外を確認します。 例外</xref:System.IO.IOException>としてスローされる</xref:System.IO.Stream>例外</xref:System.Data.SqlClient.SqlException>       次<xref:System.IO.Stream>メンバーが GetStream によって返されるオブジェクトでは使用されません: - BeginWrite - EndWrite 長の位置にシーク - SetLength - 書き込み - WriteByte - WriteTimeout される場合に、接続プロパティ`ContextConnection=true`、GetStream では、シーケンシャルの両方の同期のデータの取得のみがサポートしています (<xref:System.Data.CommandBehavior>) と連続していない (<xref:System.Data.CommandBehavior>) アクセス</xref:System.Data.CommandBehavior></xref:System.Data.CommandBehavior></xref:System.IO.Stream>。       詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.IO.Stream GetStream (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.IO.Stream
      description: "ストリーム オブジェクト。"
  overload: System.Data.SqlClient.SqlDataReader.GetStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続が切断またはデータの取得中に閉じられました。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>データの取得中に終了します。       読み取ることができるデータがありません (たとえば、1 つ目<> *> 呼び出されると、または false が返されたされていない)。     順次モード以前読み列を読み取るしようとしています。     実行中の非同期操作が発生しました。これはすべての Get に当てはまります*ストリームを読み取り中に呼び出すことができますが、順次モードで実行されているときに、方法です。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "存在しない列を読み取るしようとしています。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "戻り値の型が次の種類のいずれか: - バイナリの画像の varbinary - udt"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: SqlDataReader.GetString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "文字列として指定された列の値を取得します。"
  remarks: "変換は実行されません。そのため、取得されたデータでは、文字列が既にあります。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public override string GetString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.String
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  id: GetTextReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetTextReader(Int32)
  nameWithType: SqlDataReader.GetTextReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "<xref:System.IO.TextReader>。</xref:System.IO.TextReader>として Char、NChar、NText、NVarChar、テキスト、varChar、および Variant データ型を取得します。"
  remarks: "<xref:System.Data.SqlClient.SqlException><xref:System.IO.TextReader> <xref:System.IO.IOException> <xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException>は、内部例外を確認します。 例外</xref:System.IO.IOException>としてスローされる</xref:System.IO.TextReader>例外</xref:System.Data.SqlClient.SqlException>       Null 値は空 (0 バイト) として返されます<xref:System.IO.TextReader>.</xref:System.IO.TextReader>       <xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>生成されます、 <xref:System.InvalidOperationException>GetTextReader によって返されるオブジェクトで使用すると、例外と<xref:System.Data.CommandBehavior>が有効になって</xref:System.Data.CommandBehavior></xref:System.InvalidOperationException>。</xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>       ときに、接続プロパティ`ContextConnection=true`、GetTextReader では、シーケンシャルの両方の同期のデータの取得のみがサポートしています (<xref:System.Data.CommandBehavior>) と連続していない (<xref:System.Data.CommandBehavior>) アクセス</xref:System.Data.CommandBehavior></xref:System.Data.CommandBehavior>。       詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.IO.TextReader GetTextReader (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "取得する列。"
    return:
      type: System.IO.TextReader
      description: "返されるオブジェクト。"
  overload: System.Data.SqlClient.SqlDataReader.GetTextReader*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続が切断またはデータの取得中に閉じられました。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>データの取得中に終了します。       読み取ることができるデータがありません (たとえば、1 つ目<> *> 呼び出されると、または false が返されたされていない)。     順次モード以前読み列を読み取るしようとしています。     実行中の非同期操作が発生しました。これはすべての Get に当てはまります*ストリームを読み取り中に呼び出すことができますが、順次モードで実行されているときに、方法です。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "存在しない列を読み取るしようとしています。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "戻り値の型が次の種類のいずれか: - char、nchar、ntext、nvarchar、text - varchar"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  id: GetTimeSpan(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetTimeSpan(Int32)
  nameWithType: SqlDataReader.GetTimeSpan(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定した列の値を取得、<xref:System.TimeSpan>オブジェクト</xref:System.TimeSpan>。"
  remarks: "変換は実行されません。そのため、取得されたデータおく必要があります、<xref:System.TimeSpan>オブジェクト</xref:System.TimeSpan>。       呼び出す<xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>このメソッドを呼び出す前に null 値をチェックする</xref:System.Data.SqlClient.SqlDataReader.IsDBNull%2A>。"
  syntax:
    content: public virtual TimeSpan GetTimeSpan (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.TimeSpan
      description: "指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.GetTimeSpan*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定されたキャストは有効ではありません。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: SqlDataReader.GetValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "ネイティブ形式で指定された列の値を取得します。"
  remarks: "GetValue は、.NET Framework の型を使用してデータを返します。"
  syntax:
    content: public override object GetValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Object
      description: "このメソッドが戻る<xref href=&quot;System.DBNull&quot;> </xref> null データベース列にします。"
  overload: System.Data.SqlClient.SqlDataReader.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: SqlDataReader.GetValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "現在の行の列の値を持つオブジェクトの配列を追加します。"
  remarks: "ほとんどのアプリケーションは、このメソッドは、各列を個別に取得する代わりに、すべての列を取得するための効率的な手段を提供します。       渡すことができます、<xref:System.Object>結果の行に含まれる列数より少ないを格納する配列</xref:System.Object>。 データの量のみ、<xref:System.Object>配列では、配列にコピーを保持します</xref:System.Object>。 渡すことも、<xref:System.Object>配列の長さが、結果の行に含まれる列の数を超える</xref:System.Object>。       このメソッドが戻る<xref:System.DBNull>null データベース列にします</xref:System.DBNull>。"
  example:
  - "The following example demonstrates using a correctly sized  array  to read all values from the current row in the supplied <xref:System.Data.SqlClient.SqlDataReader>. In addition, the sample demonstrates using a fixed-sized array that could be either smaller or larger than the number of available columns.  \n  \n [!code-cs[DataWorks DataTableReader.GetValueObject#2](~/add/codesnippet/csharp/m-system.data.sqlclient._28_1.cs)]\n [!code-vb[DataWorks DataTableReader.GetValueObject#2](~/add/codesnippet/visualbasic/m-system.data.sqlclient._28_1.vb)]"
  syntax:
    content: public override int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "配列<xref:System.Object>属性列のコピー先</xref:System.Object>。"
    return:
      type: System.Int32
      description: "インスタンスの数<xref:System.Object>配列にします</xref:System.Object>。"
  overload: System.Data.SqlClient.SqlDataReader.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  id: GetXmlReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: GetXmlReader(Int32)
  nameWithType: SqlDataReader.GetXmlReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "<xref:System.Xml.XmlReader>。</xref:System.Xml.XmlReader>として XML データ型を取得します。"
  remarks: "<xref:System.Xml.XmlReader>GetXmlReader によって返されるオブジェクトは非同期操作をサポートしていません</xref:System.Xml.XmlReader>。 <xref:System.Xml.XmlReader>キャスト、サーバーと使用<xref:System.Data.SqlClient.SqlDataReader.GetTextReader%2A><xref:System.Xml.XmlReader.Create%2A>。</xref:System.Xml.XmlReader.Create%2A> </xref:System.Data.SqlClient.SqlDataReader.GetTextReader%2A> nvarchar (max) に XML 列</xref:System.Xml.XmlReader>で、非同期操作を必要とする場合       <xref:System.Data.SqlClient.SqlException><xref:System.Xml.XmlReader> <xref:System.Xml.XmlException> <xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException>は、内部例外を確認します。 例外</xref:System.Xml.XmlException>としてスローされる</xref:System.Xml.XmlReader>例外</xref:System.Data.SqlClient.SqlException>       <xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>生成されます、 <xref:System.InvalidOperationException>GetXmlReader によって返されるオブジェクトで使用すると、例外と<xref:System.Data.CommandBehavior>が有効になって</xref:System.Data.CommandBehavior></xref:System.InvalidOperationException>。</xref:System.Data.SqlClient.SqlDataReader.GetChars%2A>       詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public virtual System.Xml.XmlReader GetXmlReader (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "指定された列の値です。"
    return:
      type: System.Xml.XmlReader
      description: "返されるオブジェクト。"
  overload: System.Data.SqlClient.SqlDataReader.GetXmlReader*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続が切断またはデータの取得中に閉じられました。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>データの取得中に終了します。       読み取ることができるデータがありません (たとえば、1 つ目<> *> 呼び出されると、または false が返されたされていない)。     連続モードで以前に読み取られた列を読み取るしようとしています。     実行中の非同期操作が発生しました。これはすべての Get に当てはまります*ストリームを読み取り中に呼び出すことができますが、順次モードで実行されているときに、方法です。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "存在しない列を読み取るしようとしています。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "返される種類は、xml ではありませんでした。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.HasRows
  id: HasRows
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: HasRows
  nameWithType: SqlDataReader.HasRows
  fullName: System.Data.SqlClient.SqlDataReader.HasRows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>&1; つまたは複数の行が含まれています。"
  syntax:
    content: public override bool HasRows { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>&1; つまたは複数の行が含まれます。 それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.HasRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsClosed
  id: IsClosed
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
  fullName: System.Data.SqlClient.SqlDataReader.IsClosed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "示すブール値を取得するかどうか、指定した<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>インスタンスが閉じられました。"
  remarks: "読み取ることはできません、<xref:System.Data.SqlClient.SqlDataReader>閉じられているインスタンス</xref:System.Data.SqlClient.SqlDataReader>。"
  syntax:
    content: public override bool IsClosed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定した<xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;></xref>インスタンスが閉じている<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.IsClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  id: IsCommandBehavior(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsCommandBehavior(CommandBehavior)
  nameWithType: SqlDataReader.IsCommandBehavior(CommandBehavior)
  fullName: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "決定するかどうか、指定した<xref href=&quot;System.Data.CommandBehavior&quot;></xref>のものと一致する、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>です。"
  remarks: "このメンバーは、.NET Framework インフラストラクチャをサポートしているをコードから直接使用するものではありません。"
  syntax:
    content: protected bool IsCommandBehavior (System.Data.CommandBehavior condition);
    parameters:
    - id: condition
      type: System.Data.CommandBehavior
      description: "A <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>列挙します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定した<xref href=&quot;System.Data.CommandBehavior&quot;></xref>が true の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>それ以外の場合。"
  overload: System.Data.SqlClient.SqlDataReader.IsCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: SqlDataReader.IsDBNull(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "列に値が存在しないまたは欠損値が含まれるかどうかを示す値を取得します。"
  remarks: "チェック、型指定されたを呼び出す前に null 列値は get メソッドには、このメソッドを呼び出す (たとえば、 <xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>、<xref:System.Data.SqlClient.SqlDataReader.GetChar%2A>など) エラーの発生を防ぐ</xref:System.Data.SqlClient.SqlDataReader.GetChar%2A></xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>。       [!code-vb[SqlDataReader_IsDbNull&1;](~/add/codesnippet/visualbasic/m-system.data.sqlclient._29_1.vb)][!code-cs[SqlDataReader_IsDbNull&1;  ](~/add/codesnippet/csharp/m-system.data.sqlclient._29_1.cs)]"
  syntax:
    content: public override bool IsDBNull (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定された列の値と等しい場合<xref href=&quot;System.DBNull&quot;></xref>それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  id: IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: IsDBNullAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>、列に値が存在しないまたは欠損値が含まれるかどうかを示す値を取得する</xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>。       キャンセル トークンを使用してをコマンド タイムアウトが経過する前に、操作を破棄することを要求できます。 例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "詳細については、次を参照してください。 [SqlClient ストリーミング サポート](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.Threading.Tasks.Task<bool> IsDBNullAsync (int i, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: i
      type: System.Int32
      description: "取得する&0; から始まる列です。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令、操作を取り消す必要がある通知を伝達します。 これは、操作では、取り消しは保証されません。 設定<xref uid=&quot;langword_csharp_CancellationToken.None&quot; name=&quot;CancellationToken.None&quot; href=&quot;&quot;></xref>により、このメソッドが<xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>.</xref:System.Data.SqlClient.SqlDataReader.IsDBNull*>に相当 取り消された、返されたタスクをマークする必要があります。"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定された列の値と等しい場合<xref uid=&quot;langword_csharp_DBNull&quot; name=&quot;DBNull&quot; href=&quot;&quot;></xref>それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.IsDBNullAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "接続が切断またはデータの取得中に閉じられました。       <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>データの取得中に終了します。       読み取ることができるデータがありません (たとえば、1 つ目<> *> 呼び出されると、または false が返されたされていない)。     連続モードで以前に読み取られた列を読み取るしようとしています。     実行中の非同期操作が発生しました。これはすべての Get に当てはまります*ストリームを読み取り中に呼び出すことができますが、順次モードで実行されているときに、方法です。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "存在しない列を読み取るしようとしています。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SqlDataReader.Item(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "序数の列を指定して、ネイティブ形式で指定された列の値を取得します。"
  syntax:
    content: public override object this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
      description: "0 から始まる列序数です。"
    return:
      type: System.Object
      description: "ネイティブ形式で指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "渡されたインデックス 0 <xref:System.Data.IDataRecord.FieldCount*>。</xref:System.Data.IDataRecord.FieldCount*>までの範囲外"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Item(String)
  nameWithType: SqlDataReader.Item(String)
  fullName: System.Data.SqlClient.SqlDataReader.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "列の名前を指定されたネイティブ形式で指定された列の値を取得します。"
  remarks: "大文字小文字を区別ルックアップが最初に実行されます。 2 番目の検索が行われた、失敗した場合は (大文字と小文字の比較が行われデータベース照合順序を使用)。 予期しない結果は、比較がカルチャに固有の大文字と小文字の規則によって影響を受けるときに発生します。 たとえば、トルコ語では次の例間違った結果が生成トルコ語で、ファイル システムは、文字 &quot;i&quot; の言語の文字種の規則を使用しないので&quot;file&quot;にします。       このメソッドは、カタカナの全角を区別します。"
  syntax:
    content: public override object this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "列の名前。"
    return:
      type: System.Object
      description: "ネイティブ形式で指定された列の値です。"
  overload: System.Data.SqlClient.SqlDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "指定した名前の列は見つかりませんでした。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.NextResult
  id: NextResult
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: NextResult()
  nameWithType: SqlDataReader.NextResult()
  fullName: System.Data.SqlClient.SqlDataReader.NextResult()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "バッチ TRANSACT-SQL ステートメントの結果を読み込むときに、次の結果にデータ リーダーを進めます。"
  remarks: "TRANSACT-SQL バッチのステートメントを実行することによって生成される複数の結果を処理するために使用します。       既定では、データ リーダーは、最初の結果に位置付けられます。"
  syntax:
    content: public override bool NextResult ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>次の結果セットがある場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.NextResult*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  id: NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: NextResultAsync(CancellationToken)
  nameWithType: SqlDataReader.NextResultAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<xref:System.Data.SqlClient.SqlDataReader.NextResult*>、バッチの結果を読み取っているときに、次の結果にデータ リーダーを進めますを[!INCLUDE[tsql](~/add/includes/tsql-md.md)]ステートメント</xref:System.Data.SqlClient.SqlDataReader.NextResult*>。       キャンセル トークンを使用してをコマンド タイムアウトが経過する前に、操作を破棄することを要求できます。  例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "非同期プログラミングの詳細については、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.Threading.Tasks.Task<bool> NextResultAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlDataReader.NextResultAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して NextResultAsync を複数回呼び出しています。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.Read
  id: Read
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: Read()
  nameWithType: SqlDataReader.Read()
  fullName: System.Data.SqlClient.SqlDataReader.Read()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "進めます、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>次のレコードにします。"
  remarks: "既定の位置、<xref:System.Data.SqlClient.SqlDataReader>最初のレコードの前に、です</xref:System.Data.SqlClient.SqlDataReader>。 したがって、データへのアクセスを開始する読み取りを呼び出す必要があります。       1 つだけ`SqlDataReader`ごとに関連付けられている<xref:System.Data.SqlClient.SqlConnection>、時に、開いている可能性があります最初の&1; つが閉じられるまでを開くには別の試行は失敗します</xref:System.Data.SqlClient.SqlConnection>。 同様に、`SqlDataReader`が使用されている、関連付けられた`SqlConnection`呼び出し<xref:System.Data.SqlClient.SqlDataReader.Close%2A>.</xref:System.Data.SqlClient.SqlDataReader.Close%2A>まで、処理中"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, a <xref:System.Data.SqlClient.SqlCommand>, and a <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console window. The code then closes the <xref:System.Data.SqlClient.SqlDataReader>. The <xref:System.Data.SqlClient.SqlConnection> is closed automatically at the end of the `using` code block.  \n  \n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._26_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._26_1.vb)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>複数の行がある場合それ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Data.SqlClient.SqlDataReader.Read*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  id: ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: ReadAsync(CancellationToken)
  nameWithType: SqlDataReader.ReadAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "非同期バージョンの<xref:System.Data.SqlClient.SqlDataReader.Read*>、どの進歩、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>次のレコードにします</xref:System.Data.SqlClient.SqlDataReader.Read*>。       キャンセル トークンを使用してをコマンド タイムアウトが経過する前に、操作を破棄することを要求できます。 例外は、返されたタスク オブジェクトによって報告されます。"
  remarks: "場合、`behavior`のパラメーター <xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync%2A>éý &quot; è `Default`ReadAsync は、タスクを返す前に行全体を読み取ります</xref:System.Data.SqlClient.SqlCommand.ExecuteReaderAsync%2A>。       詳細については、非同期プログラミングの方法のコード サンプルを含む、 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]を参照してください[非同期プログラミング](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public override System.Threading.Tasks.Task<bool> ReadAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取り消し命令。"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "非同期操作を表すタスク。"
  overload: System.Data.SqlClient.SqlDataReader.ReadAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "タスクの完了前に、同じインスタンスに対して ReadAsync を複数回呼び出しています。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>接続文字列で指定されます。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: '[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]コマンド テキストの実行中にエラーが返されます。'
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "変更、挿入、または TRANSACT-SQL ステートメントの実行によって削除された行の数を取得します。"
  remarks: "RecordsAffected プロパティが設定されていないすべての行が読み取られ、 <xref:System.Data.SqlClient.SqlDataReader>。</xref:System.Data.SqlClient.SqlDataReader>       このプロパティの値は、累積的なです。 たとえば、バッチ モードの値で&2; つのレコードが挿入された`RecordsAffected`2 になります。       <xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>RecordsAffected が後に呼び出すことができる唯一のプロパティと、<xref:System.Data.SqlClient.SqlDataReader>が閉じられた</xref:System.Data.SqlClient.SqlDataReader>。</xref:System.Data.SqlClient.SqlDataReader.IsClosed%2A>"
  syntax:
    content: public override int RecordsAffected { get; }
    return:
      type: System.Int32
      description: "変更、挿入、または削除された行の数影響を受けた行がない場合は 0 またはステートメントが失敗しました。SELECT ステートメントの場合は-1。"
  overload: System.Data.SqlClient.SqlDataReader.RecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  id: System#Data#IDataRecord#GetData(System.Int32)
  isEii: true
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: System.Data.IDataRecord.GetData(Int32)
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返します、 <xref href=&quot;System.Data.IDataReader&quot;> </xref>指定された列の序数に対応します。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.SqlClient.SqlDataReader>にインスタンスをキャスト、<xref:System.IDataRecord>インターフェイス</xref:System.IDataRecord></xref:System.Data.SqlClient.SqlDataReader>。"
  syntax:
    content: System.Data.IDataReader IDataRecord.GetData (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "列の序数。"
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>指定された列の序数のインスタンス。"
  overload: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  id: VisibleFieldCount
  parent: System.Data.SqlClient.SqlDataReader
  langs:
  - csharp
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "内のフィールドの数を取得、 <xref href=&quot;System.Data.SqlClient.SqlDataReader&quot;> </xref>表示します。"
  remarks: "この値はでフィールドの数を決定するために使用、<xref:System.Data.SqlClient.SqlDataReader>表示されます</xref:System.Data.SqlClient.SqlDataReader>。 たとえば、部分的な主キー上の SELECT は、非表示フィールドとして、キーの残りの部分を返します。 非表示フィールドは常に表示されるフィールドの後ろに追加されます。"
  syntax:
    content: public override int VisibleFieldCount { get; }
    return:
      type: System.Int32
      description: "非表示フィールドの数。"
  overload: System.Data.SqlClient.SqlDataReader.VisibleFieldCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataReader
  isExternal: false
  name: System.Data.Common.DbDataReader
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlDataReader.Close
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Close()
  nameWithType: SqlDataReader.Close()
  fullName: System.Data.SqlClient.SqlDataReader.Close()
- uid: System.Data.SqlClient.SqlDataReader.Connection
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Connection
  nameWithType: SqlDataReader.Connection
  fullName: System.Data.SqlClient.SqlDataReader.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlDataReader.Depth
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Depth
  nameWithType: SqlDataReader.Depth
  fullName: System.Data.SqlClient.SqlDataReader.Depth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlDataReader.FieldCount
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
  fullName: System.Data.SqlClient.SqlDataReader.FieldCount
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: SqlDataReader.GetBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBoolean(Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlDataReader.GetByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetByte(Int32)
  nameWithType: SqlDataReader.GetByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.SqlClient.SqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetChar(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChar(Int32)
  nameWithType: SqlDataReader.GetChar(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.SqlClient.SqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: SqlDataReader.GetDataTypeName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: SqlDataReader.GetDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTime(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTimeOffset(Int32)
  nameWithType: SqlDataReader.GetDateTimeOffset(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset(Int32)
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: SqlDataReader.GetDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.SqlClient.SqlDataReader.GetDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: SqlDataReader.GetDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: SqlDataReader.GetEnumerator()
  fullName: System.Data.SqlClient.SqlDataReader.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: SqlDataReader.GetFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue``1(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValue(Int32)
  nameWithType: SqlDataReader.GetFieldValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValue(Int32)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValueAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{T}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlDataReader.GetFloat(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: SqlDataReader.GetFloat(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.SqlClient.SqlDataReader.GetGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: SqlDataReader.GetGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlDataReader.GetInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: SqlDataReader.GetInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.SqlClient.SqlDataReader.GetInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: SqlDataReader.GetInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt32(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: SqlDataReader.GetInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetInt64(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetName(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetName(Int32)
  nameWithType: SqlDataReader.GetName(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetName(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: SqlDataReader.GetOrdinal(String)
  fullName: System.Data.SqlClient.SqlDataReader.GetOrdinal(String)
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValue(Int32)
  nameWithType: SqlDataReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValues(Object[])
  nameWithType: SqlDataReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: SqlDataReader.GetSchemaTable()
  fullName: System.Data.SqlClient.SqlDataReader.GetSchemaTable()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBinary(Int32)
  nameWithType: SqlDataReader.GetSqlBinary(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBinary(Int32)
- uid: System.Data.SqlTypes.SqlBinary
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBinary
  nameWithType: SqlBinary
  fullName: System.Data.SqlTypes.SqlBinary
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBoolean(Int32)
  nameWithType: SqlDataReader.GetSqlBoolean(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBoolean(Int32)
- uid: System.Data.SqlTypes.SqlBoolean
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBoolean
  nameWithType: SqlBoolean
  fullName: System.Data.SqlTypes.SqlBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlByte(Int32)
  nameWithType: SqlDataReader.GetSqlByte(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlByte(Int32)
- uid: System.Data.SqlTypes.SqlByte
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlByte
  nameWithType: SqlByte
  fullName: System.Data.SqlTypes.SqlByte
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBytes(Int32)
  nameWithType: SqlDataReader.GetSqlBytes(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlBytes(Int32)
- uid: System.Data.SqlTypes.SqlBytes
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBytes
  nameWithType: SqlBytes
  fullName: System.Data.SqlTypes.SqlBytes
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlChars(Int32)
  nameWithType: SqlDataReader.GetSqlChars(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlChars(Int32)
- uid: System.Data.SqlTypes.SqlChars
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlChars
  nameWithType: SqlChars
  fullName: System.Data.SqlTypes.SqlChars
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDateTime(Int32)
  nameWithType: SqlDataReader.GetSqlDateTime(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDateTime(Int32)
- uid: System.Data.SqlTypes.SqlDateTime
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDateTime
  nameWithType: SqlDateTime
  fullName: System.Data.SqlTypes.SqlDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDecimal(Int32)
  nameWithType: SqlDataReader.GetSqlDecimal(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDecimal(Int32)
- uid: System.Data.SqlTypes.SqlDecimal
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDecimal
  nameWithType: SqlDecimal
  fullName: System.Data.SqlTypes.SqlDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDouble(Int32)
  nameWithType: SqlDataReader.GetSqlDouble(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlDouble(Int32)
- uid: System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDouble
  nameWithType: SqlDouble
  fullName: System.Data.SqlTypes.SqlDouble
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlGuid(Int32)
  nameWithType: SqlDataReader.GetSqlGuid(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlGuid(Int32)
- uid: System.Data.SqlTypes.SqlGuid
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlGuid
  nameWithType: SqlGuid
  fullName: System.Data.SqlTypes.SqlGuid
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt16(Int32)
  nameWithType: SqlDataReader.GetSqlInt16(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt16(Int32)
- uid: System.Data.SqlTypes.SqlInt16
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt16
  nameWithType: SqlInt16
  fullName: System.Data.SqlTypes.SqlInt16
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt32(Int32)
  nameWithType: SqlDataReader.GetSqlInt32(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt32(Int32)
- uid: System.Data.SqlTypes.SqlInt32
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt32
  nameWithType: SqlInt32
  fullName: System.Data.SqlTypes.SqlInt32
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt64(Int32)
  nameWithType: SqlDataReader.GetSqlInt64(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlInt64(Int32)
- uid: System.Data.SqlTypes.SqlInt64
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt64
  nameWithType: SqlInt64
  fullName: System.Data.SqlTypes.SqlInt64
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlMoney(Int32)
  nameWithType: SqlDataReader.GetSqlMoney(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlMoney(Int32)
- uid: System.Data.SqlTypes.SqlMoney
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlMoney
  nameWithType: SqlMoney
  fullName: System.Data.SqlTypes.SqlMoney
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlSingle(Int32)
  nameWithType: SqlDataReader.GetSqlSingle(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlSingle(Int32)
- uid: System.Data.SqlTypes.SqlSingle
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlSingle
  nameWithType: SqlSingle
  fullName: System.Data.SqlTypes.SqlSingle
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlString(Int32)
  nameWithType: SqlDataReader.GetSqlString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlString(Int32)
- uid: System.Data.SqlTypes.SqlString
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlString
  nameWithType: SqlString
  fullName: System.Data.SqlTypes.SqlString
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValue(Int32)
  nameWithType: SqlDataReader.GetSqlValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValue(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValues(Object[])
  nameWithType: SqlDataReader.GetSqlValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlValues(Object[])
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlXml(Int32)
  nameWithType: SqlDataReader.GetSqlXml(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetSqlXml(Int32)
- uid: System.Data.SqlTypes.SqlXml
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlXml
  nameWithType: SqlXml
  fullName: System.Data.SqlTypes.SqlXml
- uid: System.Data.SqlClient.SqlDataReader.GetStream(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetStream(Int32)
  nameWithType: SqlDataReader.GetStream(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetStream(Int32)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Data.SqlClient.SqlDataReader.GetString(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetString(Int32)
  nameWithType: SqlDataReader.GetString(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetString(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTextReader(Int32)
  nameWithType: SqlDataReader.GetTextReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTextReader(Int32)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTimeSpan(Int32)
  nameWithType: SqlDataReader.GetTimeSpan(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetTimeSpan(Int32)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValue(Int32)
  nameWithType: SqlDataReader.GetValue(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetValue(Int32)
- uid: System.Data.SqlClient.SqlDataReader.GetValues(System.Object[])
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValues(Object[])
  nameWithType: SqlDataReader.GetValues(Object[])
  fullName: System.Data.SqlClient.SqlDataReader.GetValues(Object[])
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetXmlReader(Int32)
  nameWithType: SqlDataReader.GetXmlReader(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.GetXmlReader(Int32)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Data.SqlClient.SqlDataReader.HasRows
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: HasRows
  nameWithType: SqlDataReader.HasRows
  fullName: System.Data.SqlClient.SqlDataReader.HasRows
- uid: System.Data.SqlClient.SqlDataReader.IsClosed
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
  fullName: System.Data.SqlClient.SqlDataReader.IsClosed
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsCommandBehavior(CommandBehavior)
  nameWithType: SqlDataReader.IsCommandBehavior(CommandBehavior)
  fullName: System.Data.SqlClient.SqlDataReader.IsCommandBehavior(CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: SqlDataReader.IsDBNull(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNull(Int32)
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNullAsync(Int32,CancellationToken)
  nameWithType: SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.IsDBNullAsync(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlDataReader.Item(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item(Int32)
  nameWithType: SqlDataReader.Item(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.Item(Int32)
- uid: System.Data.SqlClient.SqlDataReader.Item(System.String)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item(String)
  nameWithType: SqlDataReader.Item(String)
  fullName: System.Data.SqlClient.SqlDataReader.Item(String)
- uid: System.Data.SqlClient.SqlDataReader.NextResult
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResult()
  nameWithType: SqlDataReader.NextResult()
  fullName: System.Data.SqlClient.SqlDataReader.NextResult()
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResultAsync(CancellationToken)
  nameWithType: SqlDataReader.NextResultAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.NextResultAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlDataReader.Read
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Read()
  nameWithType: SqlDataReader.Read()
  fullName: System.Data.SqlClient.SqlDataReader.Read()
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: ReadAsync(CancellationToken)
  nameWithType: SqlDataReader.ReadAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlDataReader.ReadAsync(CancellationToken)
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
  fullName: System.Data.SqlClient.SqlDataReader.RecordsAffected
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData(System.Int32)
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: System.Data.IDataRecord.GetData(Int32)
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData(Int32)
  fullName: System.Data.SqlClient.SqlDataReader.System.Data.IDataRecord.GetData(Int32)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
  fullName: System.Data.SqlClient.SqlDataReader.VisibleFieldCount
- uid: System.Data.SqlClient.SqlDataReader.Close*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Close
  nameWithType: SqlDataReader.Close
- uid: System.Data.SqlClient.SqlDataReader.Connection*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Connection
  nameWithType: SqlDataReader.Connection
- uid: System.Data.SqlClient.SqlDataReader.Depth*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Depth
  nameWithType: SqlDataReader.Depth
- uid: System.Data.SqlClient.SqlDataReader.FieldCount*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: FieldCount
  nameWithType: SqlDataReader.FieldCount
- uid: System.Data.SqlClient.SqlDataReader.GetBoolean*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBoolean
  nameWithType: SqlDataReader.GetBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetByte*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetByte
  nameWithType: SqlDataReader.GetByte
- uid: System.Data.SqlClient.SqlDataReader.GetBytes*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetBytes
  nameWithType: SqlDataReader.GetBytes
- uid: System.Data.SqlClient.SqlDataReader.GetChar*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChar
  nameWithType: SqlDataReader.GetChar
- uid: System.Data.SqlClient.SqlDataReader.GetChars*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetChars
  nameWithType: SqlDataReader.GetChars
- uid: System.Data.SqlClient.SqlDataReader.GetDataTypeName*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDataTypeName
  nameWithType: SqlDataReader.GetDataTypeName
- uid: System.Data.SqlClient.SqlDataReader.GetDateTime*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTime
  nameWithType: SqlDataReader.GetDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetDateTimeOffset*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDateTimeOffset
  nameWithType: SqlDataReader.GetDateTimeOffset
- uid: System.Data.SqlClient.SqlDataReader.GetDecimal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDecimal
  nameWithType: SqlDataReader.GetDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetDouble*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetDouble
  nameWithType: SqlDataReader.GetDouble
- uid: System.Data.SqlClient.SqlDataReader.GetEnumerator*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetEnumerator
  nameWithType: SqlDataReader.GetEnumerator
- uid: System.Data.SqlClient.SqlDataReader.GetFieldType*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldType
  nameWithType: SqlDataReader.GetFieldType
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValue<T>*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValue<T>
  nameWithType: SqlDataReader.GetFieldValue<T>
- uid: System.Data.SqlClient.SqlDataReader.GetFieldValueAsync<T>*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFieldValueAsync<T>
  nameWithType: SqlDataReader.GetFieldValueAsync<T>
- uid: System.Data.SqlClient.SqlDataReader.GetFloat*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetFloat
  nameWithType: SqlDataReader.GetFloat
- uid: System.Data.SqlClient.SqlDataReader.GetGuid*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetGuid
  nameWithType: SqlDataReader.GetGuid
- uid: System.Data.SqlClient.SqlDataReader.GetInt16*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt16
  nameWithType: SqlDataReader.GetInt16
- uid: System.Data.SqlClient.SqlDataReader.GetInt32*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt32
  nameWithType: SqlDataReader.GetInt32
- uid: System.Data.SqlClient.SqlDataReader.GetInt64*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetInt64
  nameWithType: SqlDataReader.GetInt64
- uid: System.Data.SqlClient.SqlDataReader.GetName*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetName
  nameWithType: SqlDataReader.GetName
- uid: System.Data.SqlClient.SqlDataReader.GetOrdinal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetOrdinal
  nameWithType: SqlDataReader.GetOrdinal
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificFieldType*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificFieldType
  nameWithType: SqlDataReader.GetProviderSpecificFieldType
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValue
  nameWithType: SqlDataReader.GetProviderSpecificValue
- uid: System.Data.SqlClient.SqlDataReader.GetProviderSpecificValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetProviderSpecificValues
  nameWithType: SqlDataReader.GetProviderSpecificValues
- uid: System.Data.SqlClient.SqlDataReader.GetSchemaTable*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSchemaTable
  nameWithType: SqlDataReader.GetSchemaTable
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBinary*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBinary
  nameWithType: SqlDataReader.GetSqlBinary
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBoolean*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBoolean
  nameWithType: SqlDataReader.GetSqlBoolean
- uid: System.Data.SqlClient.SqlDataReader.GetSqlByte*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlByte
  nameWithType: SqlDataReader.GetSqlByte
- uid: System.Data.SqlClient.SqlDataReader.GetSqlBytes*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlBytes
  nameWithType: SqlDataReader.GetSqlBytes
- uid: System.Data.SqlClient.SqlDataReader.GetSqlChars*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlChars
  nameWithType: SqlDataReader.GetSqlChars
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDateTime*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDateTime
  nameWithType: SqlDataReader.GetSqlDateTime
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDecimal*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDecimal
  nameWithType: SqlDataReader.GetSqlDecimal
- uid: System.Data.SqlClient.SqlDataReader.GetSqlDouble*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlDouble
  nameWithType: SqlDataReader.GetSqlDouble
- uid: System.Data.SqlClient.SqlDataReader.GetSqlGuid*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlGuid
  nameWithType: SqlDataReader.GetSqlGuid
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt16*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt16
  nameWithType: SqlDataReader.GetSqlInt16
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt32*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt32
  nameWithType: SqlDataReader.GetSqlInt32
- uid: System.Data.SqlClient.SqlDataReader.GetSqlInt64*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlInt64
  nameWithType: SqlDataReader.GetSqlInt64
- uid: System.Data.SqlClient.SqlDataReader.GetSqlMoney*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlMoney
  nameWithType: SqlDataReader.GetSqlMoney
- uid: System.Data.SqlClient.SqlDataReader.GetSqlSingle*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlSingle
  nameWithType: SqlDataReader.GetSqlSingle
- uid: System.Data.SqlClient.SqlDataReader.GetSqlString*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlString
  nameWithType: SqlDataReader.GetSqlString
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValue
  nameWithType: SqlDataReader.GetSqlValue
- uid: System.Data.SqlClient.SqlDataReader.GetSqlValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlValues
  nameWithType: SqlDataReader.GetSqlValues
- uid: System.Data.SqlClient.SqlDataReader.GetSqlXml*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetSqlXml
  nameWithType: SqlDataReader.GetSqlXml
- uid: System.Data.SqlClient.SqlDataReader.GetStream*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetStream
  nameWithType: SqlDataReader.GetStream
- uid: System.Data.SqlClient.SqlDataReader.GetString*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetString
  nameWithType: SqlDataReader.GetString
- uid: System.Data.SqlClient.SqlDataReader.GetTextReader*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTextReader
  nameWithType: SqlDataReader.GetTextReader
- uid: System.Data.SqlClient.SqlDataReader.GetTimeSpan*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetTimeSpan
  nameWithType: SqlDataReader.GetTimeSpan
- uid: System.Data.SqlClient.SqlDataReader.GetValue*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValue
  nameWithType: SqlDataReader.GetValue
- uid: System.Data.SqlClient.SqlDataReader.GetValues*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetValues
  nameWithType: SqlDataReader.GetValues
- uid: System.Data.SqlClient.SqlDataReader.GetXmlReader*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: GetXmlReader
  nameWithType: SqlDataReader.GetXmlReader
- uid: System.Data.SqlClient.SqlDataReader.HasRows*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: HasRows
  nameWithType: SqlDataReader.HasRows
- uid: System.Data.SqlClient.SqlDataReader.IsClosed*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsClosed
  nameWithType: SqlDataReader.IsClosed
- uid: System.Data.SqlClient.SqlDataReader.IsCommandBehavior*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsCommandBehavior
  nameWithType: SqlDataReader.IsCommandBehavior
- uid: System.Data.SqlClient.SqlDataReader.IsDBNull*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNull
  nameWithType: SqlDataReader.IsDBNull
- uid: System.Data.SqlClient.SqlDataReader.IsDBNullAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: IsDBNullAsync
  nameWithType: SqlDataReader.IsDBNullAsync
- uid: System.Data.SqlClient.SqlDataReader.Item*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Item
  nameWithType: SqlDataReader.Item
- uid: System.Data.SqlClient.SqlDataReader.NextResult*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResult
  nameWithType: SqlDataReader.NextResult
- uid: System.Data.SqlClient.SqlDataReader.NextResultAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: NextResultAsync
  nameWithType: SqlDataReader.NextResultAsync
- uid: System.Data.SqlClient.SqlDataReader.Read*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: Read
  nameWithType: SqlDataReader.Read
- uid: System.Data.SqlClient.SqlDataReader.ReadAsync*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: ReadAsync
  nameWithType: SqlDataReader.ReadAsync
- uid: System.Data.SqlClient.SqlDataReader.RecordsAffected*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: SqlDataReader.RecordsAffected
- uid: System.Data.SqlClient.SqlDataReader.System#Data#IDataRecord#GetData*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: System.Data.IDataRecord.GetData
  nameWithType: SqlDataReader.System.Data.IDataRecord.GetData
- uid: System.Data.SqlClient.SqlDataReader.VisibleFieldCount*
  parent: System.Data.SqlClient.SqlDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: SqlDataReader.VisibleFieldCount
