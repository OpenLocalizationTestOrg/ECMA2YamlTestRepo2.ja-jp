### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Rfc2898DeriveBytes
  id: Rfc2898DeriveBytes
  children:
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  - System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  - System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  - System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  langs:
  - csharp
  name: Rfc2898DeriveBytes
  nameWithType: Rfc2898DeriveBytes
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes
  type: Class
  summary: "基づく擬似乱数ジェネレーターを使用して、キー派生機能 (pbkdf2) のパスワードに基づく実装<xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref>です。"
  remarks: "Rfc2898DeriveBytes、パスワード、salt、および、反復カウントを呼び出すことでキーを生成し、<xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>メソッド</xref:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes%2A>。       RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。 Rfc2898DeriveBytes クラスは、基本キーおよびその他のパラメーターから派生キーを生成するために使用できます。 関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。       PBKDF2 の詳細については、RFC 2898 を参照してください。&quot;PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、&quot;で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。 詳細については、セクション 5.2、&quot;PBKDF2、&quot;を参照してください。      > [!IMPORTANT] > ハードコーディングしないでをソース コード内のパスワード。  使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。"
  example:
  - "The following code example uses the Rfc2898DeriveBytes class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/t-system.security.crypto_117_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/t-system.security.crypto_117_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/t-system.security.crypto_117_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class Rfc2898DeriveBytes : System.Security.Cryptography.DeriveBytes
  inheritance:
  - System.Object
  - System.Security.Cryptography.DeriveBytes
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.DeriveBytes.Dispose
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Byte[])
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref>クラスをキーを派生させるため、パスワードおよび salt を使用します。"
  remarks: "Salt のサイズは 8 バイトである必要がありますか大きいです。       RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます</xref:System.Security.Cryptography.Rfc2898DeriveBytes>。 関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。       PBKDF2 の詳細については、RFC 2898 を参照してください。&quot;PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、&quot;で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。 詳細については、セクション 5.2、&quot;PBKDF2、&quot;を参照してください。      > [!IMPORTANT] > ハードコーディングしないでをソース コード内のパスワード。  使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/7aa0756c-8905-4e75-ae9a-_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/7aa0756c-8905-4e75-ae9a-_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/7aa0756c-8905-4e75-ae9a-_1.cpp)]"
  syntax:
    content: public Rfc2898DeriveBytes (string password, byte[] salt);
    parameters:
    - id: password
      type: System.String
      description: "キーの派生に使用するパスワード。"
    - id: salt
      type: System.Byte[]
      description: "キーを派生させるために使用するキー salt。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "パスワード、または salt が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref>クラスをキーを派生させるため、パスワードおよび salt のサイズを使用します。"
  remarks: "Salt のサイズは 8 バイトである必要がありますか大きいです。       RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます</xref:System.Security.Cryptography.Rfc2898DeriveBytes>。 関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。       PBKDF2 の詳細については、RFC 2898 を参照してください。&quot;PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、&quot;で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。 詳細については、セクション 5.2、&quot;PBKDF2、&quot;を参照してください。      > [!IMPORTANT] > ハードコーディングしないでをソース コード内のパスワード。  使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。"
  syntax:
    content: public Rfc2898DeriveBytes (string password, int saltSize);
    parameters:
    - id: password
      type: System.String
      description: "キーの派生に使用するパスワード。"
    - id: saltSize
      type: System.Int32
      description: "クラスを生成するランダム salt のサイズ。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された salt のサイズは 8 バイト未満です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "パスワード、または salt が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  id: '#ctor(System.Byte[],System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref>クラスをキーを派生させるため、パスワード、salt、およびイテレーションの数を使用します。"
  remarks: "Salt のサイズは 8 バイトである必要がありますか、大きい反復カウントは 0 より大きい値である必要があります。 イテレーションの推奨される最小数は 1000 です。       RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます</xref:System.Security.Cryptography.Rfc2898DeriveBytes>。 関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。       PBKDF2 の詳細については、RFC 2898 を参照してください。&quot;PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、&quot;で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。 詳細については、セクション 5.2、&quot;PBKDF2、&quot;を参照してください。      > [!IMPORTANT] > ハードコーディングしないでをソース コード内のパスワード。  使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。"
  syntax:
    content: public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);
    parameters:
    - id: password
      type: System.Byte[]
      description: "キーの派生に使用するパスワード。"
    - id: salt
      type: System.Byte[]
      description: "キーを派生させるために使用するキー salt。"
    - id: iterations
      type: System.Int32
      description: "操作のイテレーションの数。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "パスワード、または salt が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  id: '#ctor(System.String,System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref>クラスをキーを派生させるため、パスワード、salt、およびイテレーションの数を使用します。"
  remarks: "Salt のサイズは 8 バイトである必要がありますか、大きい反復カウントは 0 より大きい値である必要があります。 イテレーションの推奨される最小数は 1000 です。       RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます</xref:System.Security.Cryptography.Rfc2898DeriveBytes>。 関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。       PBKDF2 の詳細については、RFC 2898 を参照してください。&quot;PKCS 5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、&quot;で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。 詳細については、セクション 5.2、&quot;PBKDF2、&quot;を参照してください。      > [!IMPORTANT] > ハードコーディングしないでをソース コード内のパスワード。  使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class to create two identical keys for the <xref:System.Security.Cryptography.TripleDES> class.  It then encrypts and decrypts some data using the keys.  \n  \n [!code-cs[rfc28981#1](~/add/codesnippet/csharp/8b79aa42-3b6a-4a39-985a-_1.cs)]\n [!code-vb[rfc28981#1](~/add/codesnippet/visualbasic/8b79aa42-3b6a-4a39-985a-_1.vb)]\n [!code-cpp[rfc28981#1](~/add/codesnippet/cpp/8b79aa42-3b6a-4a39-985a-_1.cpp)]"
  syntax:
    content: public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);
    parameters:
    - id: password
      type: System.String
      description: "キーの派生に使用するパスワード。"
    - id: salt
      type: System.Byte[]
      description: "キーを派生させるために使用するキー salt。"
    - id: iterations
      type: System.Int32
      description: "操作のイテレーションの数。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "パスワード、または salt が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Rfc2898DeriveBytes(String,Int32,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref>クラスをキーを派生させるため、パスワード、salt サイズ、およびイテレーションの数を使用します。"
  remarks: "Salt のサイズは 8 バイトである必要がありますか、大きい反復カウントは 0 より大きい値である必要があります。 イテレーションの推奨される最小数は 1000 です。       RFC 2898 には、パスワードおよび salt からキーと初期化ベクター (IV) を作成するためのメソッドが含まれています。 擬似乱数関数により、生成される実質的に無制限の長さのキーを使用するキーを派生させる PBKDF2、パスワード ベースのキー派生関数を使用できます。 <xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスを基本キーおよびその他のパラメーターから派生キーを生成するために使用できます</xref:System.Security.Cryptography.Rfc2898DeriveBytes>。 関数では、パスワード ベースのキー派生、ベースのキーがパスワードと他のパラメーターは salt 値と、反復カウントします。       PBKDF2 の詳細については、RFC 2898 を参照してください。&quot;PKCS #5: パスワードに基づく暗号化の仕様のバージョン 2.0 では、&quot;で使用できる、[コメント Web サイトの要求](http://go.microsoft.com/fwlink/?LinkID=37119)です。 詳細については、セクション 5.2、&quot;PBKDF2、&quot;を参照してください。      > [!IMPORTANT] > ハードコーディングしないでをソース コード内のパスワード。  使用してパスワードをハードコーディング アセンブリから取得できる、 [Ildasm.exe (IL 逆アセンブラー)](~/add/includes/ajax-current-ext-md.md)16 進数のエディターを使用して、または単に Notepad.exe などのテキスト エディターでアセンブリを開いて、します。"
  syntax:
    content: public Rfc2898DeriveBytes (string password, int saltSize, int iterations);
    parameters:
    - id: password
      type: System.String
      description: "キーの派生に使用するパスワード。"
    - id: saltSize
      type: System.Int32
      description: "クラスを生成するランダム salt のサイズ。"
    - id: iterations
      type: System.Int32
      description: "操作のイテレーションの数。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された salt のサイズが 8 バイトより小さいか、イテレーションのカウントが 1 より小さい。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "パスワード、または salt が<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>iterations </code>範囲外です。 このパラメーターには、負でない値が必要です。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  id: CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "暗号化キーを派生、 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref>オブジェクト。"
  remarks: "この関数は、CryptDeriveKey() Crypto API 関数のラッパーであり、Crypto API を使用するアプリケーションとの相互運用性を提供するためのものでは、します。       場合、`keySize`パラメーターが 0 のビットに設定されている、指定したアルゴリズムの既定のキー サイズが使用されます。"
  syntax:
    content: public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);
    parameters:
    - id: algname
      type: System.String
      description: "キーを派生させる対象のアルゴリズム名。"
    - id: alghashname
      type: System.String
      description: "キーの派生に使用するハッシュ アルゴリズムの名前。"
    - id: keySize
      type: System.Int32
      description: "キーを派生させるためのビット単位のサイズ。"
    - id: rgbIV
      type: System.Byte[]
      description: "初期化ベクター (IV) を使用して、キーを取得します。"
    return:
      type: System.Byte[]
      description: "派生キー。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code> keySize </code>パラメーターが正しくありません。       - または - 暗号化サービス プロバイダー (CSP) を取得できません。       - または -、 <code> algname </code>パラメーターが有効なアルゴリズムの名前ではありません。       - または -、 <code> alghashname </code>パラメーターが有効なハッシュ アルゴリズムの名前ではありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Rfc2898DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Cryptography.Rfc2898DeriveBytes&quot;> </xref>クラスし、必要に応じてマネージ リソースも解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび`Finalize`メソッドです。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 `Finalize`呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.Cryptography.Rfc2898DeriveBytes>参照。</xref:System.Security.Cryptography.Rfc2898DeriveBytes> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: GetBytes(Int32)
  nameWithType: Rfc2898DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "このオブジェクトの擬似ランダム キーを返します。"
  remarks: "<xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスは<xref:System.Security.Cryptography.HMACSHA1>。</xref:System.Security.Cryptography.HMACSHA1>に基づく擬似乱数ジェネレーターを使用して、PBKDF2 機能を実装</xref:System.Security.Cryptography.Rfc2898DeriveBytes>する <xref:System.Security.Cryptography.Rfc2898DeriveBytes>クラスは、パスワード、salt、および、反復カウントを受け取るし、GetBytes メソッドを呼び出すことでキーが生成されます</xref:System.Security.Cryptography.Rfc2898DeriveBytes>。 このメソッドを繰り返し呼び出すは同じキーを生成しませんGetBytes を使用してメソッドの&2; つの呼び出しを代わりに、追加、`cb`パラメーターの値`20`が&1; 回 GetBytes メソッドを呼び出すのと同じ、`cb`パラメーターの値`40`です。"
  example:
  - "The following example shows how to use the GetBytes method to get the key for an instance of <xref:System.Security.Cryptography.Rfc2898DeriveBytes>. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#2](~/add/codesnippet/csharp/m-system.security.crypto_127_1.cs)]\n [!code-vb[rfc28981#2](~/add/codesnippet/visualbasic/m-system.security.crypto_127_1.vb)]\n [!code-cpp[rfc28981#2](~/add/codesnippet/cpp/m-system.security.crypto_127_1.cpp)]"
  syntax:
    content: public override byte[] GetBytes (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: "生成する擬似ランダム キー バイトの数。"
    return:
      type: System.Byte[]
      description: "擬似ランダム キー バイトを格納したバイト配列。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>cb </code>範囲外です。 このパラメーターには、負でない値が必要です。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  id: IterationCount
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得または操作のイテレーションの数を設定します。"
  remarks: "イテレーションのカウントが何回の操作を実行します。 このメソッドのカウントは&0; より大きい値にする必要があります。 イテレーションの推奨される最小数は 1000 です。"
  example:
  - "The following example shows how to use the IterationCount property to display the number of iterations used in the generation of the key. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#3](~/add/codesnippet/csharp/p-system.security.crypto_117_1.cs)]\n [!code-vb[rfc28981#3](~/add/codesnippet/visualbasic/p-system.security.crypto_117_1.vb)]\n [!code-cpp[rfc28981#3](~/add/codesnippet/cpp/p-system.security.crypto_117_1.cpp)]"
  syntax:
    content: public int IterationCount { get; set; }
    return:
      type: System.Int32
      description: "操作のイテレーションの数。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "イテレーションの数は、1 より小さいです。"
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Reset()
  nameWithType: Rfc2898DeriveBytes.Reset()
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "操作の状態をリセットします。"
  remarks: "Salt またはイテレーションの数が変更された場合、このメソッドは自動的に呼び出されます。"
  example:
  - "The following example shows how to use the Reset method. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.Rfc2898DeriveBytes> class.  \n  \n [!code-cs[rfc28981#5](~/add/codesnippet/csharp/m-system.security.crypto_26_1.cs)]\n [!code-vb[rfc28981#5](~/add/codesnippet/visualbasic/m-system.security.crypto_26_1.vb)]\n [!code-cpp[rfc28981#5](~/add/codesnippet/cpp/m-system.security.crypto_26_1.cpp)]"
  syntax:
    content: public override void Reset ();
    parameters: []
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  id: Salt
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得または操作するキー salt 値を設定します。"
  remarks: "Salt、ランダムなデータセット (バイト単位) より難しいメッセージの承認されていない復号化するために使用されます。 辞書攻撃は、攻撃者が事前に計算された暗号化キーの値を最も可能性の高いで暗号化された値を比較することで、暗号化されたメッセージを復号化しようと攻撃です。 このような攻撃は salt、またはランダム (バイト単位)、キーの派生前に、パスワードの最後の導入によって非常に困難になります。"
  syntax:
    content: public byte[] Salt { get; set; }
    return:
      type: System.Byte[]
      description: "操作のキー salt 値。"
  overload: System.Security.Cryptography.Rfc2898DeriveBytes.Salt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定された salt のサイズは 8 バイト未満です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Salt は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: System.Security.Cryptography.DeriveBytes
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Byte[])
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[],Byte[],Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Byte[],Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Byte[],Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes(String,Int32,Int32)
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(String,Int32,Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: CryptDeriveKey(String,String,Int32,Byte[])
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(String,String,Int32,Byte[])
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Rfc2898DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: GetBytes(Int32)
  nameWithType: Rfc2898DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Reset()
  nameWithType: Rfc2898DeriveBytes.Reset()
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Rfc2898DeriveBytes
  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: CryptDeriveKey
  nameWithType: Rfc2898DeriveBytes.CryptDeriveKey
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Dispose
  nameWithType: Rfc2898DeriveBytes.Dispose
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: GetBytes
  nameWithType: Rfc2898DeriveBytes.GetBytes
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: IterationCount
  nameWithType: Rfc2898DeriveBytes.IterationCount
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Reset
  nameWithType: Rfc2898DeriveBytes.Reset
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt*
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  isExternal: false
  name: Salt
  nameWithType: Rfc2898DeriveBytes.Salt
