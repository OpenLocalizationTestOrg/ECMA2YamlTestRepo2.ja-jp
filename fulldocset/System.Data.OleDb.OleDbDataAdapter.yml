### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbDataAdapter
  id: OleDbDataAdapter
  children:
  - System.Data.OleDb.OleDbDataAdapter.#ctor
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  - System.Data.OleDb.OleDbDataAdapter.InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.RowUpdated
  - System.Data.OleDb.OleDbDataAdapter.RowUpdating
  - System.Data.OleDb.OleDbDataAdapter.SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  - System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter
  fullName: System.Data.OleDb.OleDbDataAdapter
  type: Class
  summary: "データ コマンドおよび塗りつぶしに使用されるデータベース接続のセットを表す、 <xref href=&quot;System.Data.DataSet&quot;> </xref>およびデータ ソースを更新します。"
  remarks: "OleDbDataAdapter 役割間の仲介役を果たす、<xref:System.Data.DataSet>とデータ ソースを取得して、データを保存します</xref:System.Data.DataSet>。 OleDbDataAdapter を使用してこのブリッジは、<xref:System.Data.Common.DbDataAdapter.Fill%2A>にデータ ソースからデータを読み込み、<xref:System.Data.DataSet>を使用して<xref:System.Data.Common.DbDataAdapter.Update%2A>で行われた変更を送信する、<xref:System.Data.DataSet>データ ソースに戻る</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A></xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Fill%2A>。       OleDbDataAdapter を入力すると、 <xref:System.Data.DataSet>、まだ存在しない場合、適切なテーブルと列が返されたデータの作成されます</xref:System.Data.DataSet>。 ただし、主キーの情報は含まれません、暗黙的に作成されたスキーマにしない限り、 <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> <xref:System.Data.MissingSchemaAction>.</xref:System.Data.MissingSchemaAction>にプロパティが設定されています。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> OleDbDataAdapter を<xref:System.Data.DataSet>含む主キー情報、 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>。</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>を使用してデータを入力する前に、</xref:System.Data.DataSet>スキーマを作成することもできます。 詳細については、次を参照してください。[データセットへの既存の制約を追加する](~/add/includes/ajax-current-ext-md.md)です。       ベース テーブルまたは主キーの情報は返されません、MSDataShape プロバイダーを含む一部の OLE DB プロバイダーに注意してください。 したがって、OleDbDataAdapter 正しくを設定できません<xref:System.Data.DataTable.PrimaryKey%2A>、作成した<xref:System.Data.DataTable>。</xref:System.Data.DataTable>プロパティ</xref:System.Data.DataTable.PrimaryKey%2A> このような場合は、 <xref:System.Data.DataSet>。</xref:System.Data.DataSet>内のテーブルの主キーを明示的に指定する必要があります。       OleDbDataAdapter も含まれています、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>、 <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>、 <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>、 <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>、および<xref:System.Data.Common.DataAdapter.TableMappings%2A>プロパティが、読み込みとデータの更新を容易になります</xref:System.Data.Common.DataAdapter.TableMappings%2A></xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A></xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A></xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>。       OleDbDataAdapter のインスタンスを作成するときに、プロパティは、初期値に設定されます。 これらの値の一覧は、OleDbDataAdapter コンス トラクターを参照してください。"
  example:
  - "The following example uses the <xref:System.Data.OleDb.OleDbCommand>, OleDbDataAdapter and <xref:System.Data.OleDb.OleDbConnection>, to select records from an Access data source, and populate a <xref:System.Data.DataSet> with the selected rows. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is an SQL SELECT statement.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_7_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_7_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowUpdated")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  - System.Data.Common.DbDataAdapter
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>クラスです。"
  remarks: "インスタンスを作成する場合<xref:System.Data.OleDb.OleDbDataAdapter>、次の読み取り/書き込みプロパティは、次の初期値に設定されます</xref:System.Data.OleDb.OleDbDataAdapter>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      これらのプロパティを個別に呼び出してプロパティのいずれかの値を変更することができます</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_28_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_28_1.cs)]"
  syntax:
    content: public OleDbDataAdapter ();
    parameters: []
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  id: '#ctor(System.Data.OleDb.OleDbCommand)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> 、指定したクラス<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;></xref>として、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>プロパティ</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>。"
  remarks: "この実装、<xref:System.Data.OleDb.OleDbDataAdapter>コンス トラクターのセット、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>プロパティで指定された値を`selectCommand`パラメーター</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter> 。       インスタンスを作成する場合<xref:System.Data.OleDb.OleDbDataAdapter>、次の読み取り/書き込みプロパティは、次の初期値に設定されます</xref:System.Data.OleDb.OleDbDataAdapter>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      これらのプロパティを個別に呼び出してプロパティのいずれかの値を変更することができます</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_17_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_17_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);
    parameters:
    - id: selectCommand
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> SELECT ステートメントまたはストアド プロシージャととして設定されている、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>のプロパティ、 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> 。"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  id: '#ctor(System.String,System.Data.OleDb.OleDbConnection)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>クラス。"
  remarks: "この実装、<xref:System.Data.OleDb.OleDbDataAdapter>開閉、<xref:System.Data.OleDb.OleDbConnection>がまだ開いていない場合</xref:System.Data.OleDb.OleDbConnection></xref:System.Data.OleDb.OleDbDataAdapter>。 これを呼び出す必要のあるアプリケーションで利用する、 <xref:System.Data.Common.DbDataAdapter.Fill%2A>2 つ以上のメソッド<xref:System.Data.OleDb.OleDbDataAdapter>オブジェクト</xref:System.Data.OleDb.OleDbDataAdapter></xref:System.Data.Common.DbDataAdapter.Fill%2A>。 場合、<xref:System.Data.OleDb.OleDbConnection>は既に開かれている、明示的に呼び出す必要があります<xref:System.Data.OleDb.OleDbConnection.Close%2A>または**Dispose**を閉じます</xref:System.Data.OleDb.OleDbConnection.Close%2A></xref:System.Data.OleDb.OleDbConnection>。       インスタンスを作成する場合<xref:System.Data.OleDb.OleDbDataAdapter>、次の読み取り/書き込みプロパティは、次の初期値に設定されます</xref:System.Data.OleDb.OleDbDataAdapter>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      これらのプロパティをプロパティに別個の呼び出しのいずれかの値を変更することができます</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/visualbasic/f3cd089b-2d52-49c5-b101-_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/csharp/f3cd089b-2d52-49c5-b101-_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "文字列は、SQL SELECT ステートメントまたはストアド プロシージャで使用される、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>のプロパティ、 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> 。"
    - id: selectConnection
      type: System.Data.OleDb.OleDbConnection
      description: "<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>の接続を表すです。"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref> <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>クラス。"
  remarks: "このオーバー ロード、<xref:System.Data.OleDb.OleDbDataAdapter>コンス トラクターを使用して、`selectConnectionString`を設定するパラメーター、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>プロパティ</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A></xref:System.Data.OleDb.OleDbDataAdapter>。 ただし、接続は開かれません。 引き続き開く必要があります明示的に接続します。       インスタンスを作成する場合<xref:System.Data.OleDb.OleDbDataAdapter>、次の読み取り/書き込みプロパティは、次の初期値に設定されます</xref:System.Data.OleDb.OleDbDataAdapter>。      |プロパティ |初期値 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      これらのプロパティを個別に呼び出してプロパティのいずれかの値を変更することができます</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_4_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_4_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, string selectConnectionString);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "文字列は、SQL SELECT ステートメントまたはストアド プロシージャで使用される、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>のプロパティ、 <xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*> 。"
    - id: selectConnectionString
      type: System.String
      description: "接続文字列。"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "追加します。"
    - id: command
      type: System.Data.IDbCommand
      description: "追加します。"
    - id: statementType
      type: System.Data.StatementType
      description: "追加します。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "追加します。"
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "追加します。"
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "追加します。"
    - id: command
      type: System.Data.IDbCommand
      description: "追加します。"
    - id: statementType
      type: System.Data.StatementType
      description: "追加します。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "追加します。"
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "追加します。"
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得または SQL ステートメントまたはデータ セットからレコードを削除するためのストアド プロシージャを設定します。"
  remarks: "<xref:System.Data.Common.DbDataAdapter.Update%2A>このプロパティを設定しないと、主キーの情報は<xref:System.Data.DataSet>自動的に設定した場合、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>プロパティと使用<xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> DeleteCommand が生成されることができます、</xref:System.Data.DataSet>内に存在する場合は、</xref:System.Data.Common.DbDataAdapter.Update%2A>中 次に、追加のコマンドを設定しないは、 <xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder>によって生成されます。 この生成ロジックには、 <xref:System.Data.DataSet>。</xref:System.Data.DataSet>に存在するキー列情報が必要です。 詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。       DeleteCommand が割り当てられている場合、以前に作成した<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>は複製されません</xref:System.Data.OleDb.OleDbCommand></xref:System.Data.OleDb.OleDbCommand>。 DeleteCommand が以前に作成したへの参照を保持<xref:System.Data.OleDb.OleDbCommand>オブジェクト</xref:System.Data.OleDb.OleDbCommand>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and DeleteCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_21_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_21_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>中に使用される<xref:System.Data.Common.DbDataAdapter.Update*>レコードに対応するデータ ソースを削除するには、内の行を削除、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Data.Common.DbDataAdapter.Update*> 。"
  overload: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  id: Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "追加または内の行を更新、 <xref href=&quot;System.Data.DataTable&quot;> </xref>一致するように ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref>オブジェクトの指定を使用して<xref href=&quot;System.Data.DataTable&quot;></xref>と ADO オブジェクト。"
  remarks: "ActiveX データ オブジェクト (ADO) と ADO.NET の間のリンクは、一方向の操作を ADO からデータをコピーすることで、<xref:System.Data.DataSet>が ADO.NET によって、データの更新を処理する必要があります</xref:System.Data.DataSet>。       Fill メソッドのこのオーバー ロードには、入力は閉じません`Recordset`Fill 操作の完了時にします。       複数の結果、塗りつぶしのこの実装を返す SQL ステートメントのバッチを処理するときに、<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>の OLE DB.NET Framework データ プロバイダーは、最初の結果のみのスキーマ情報を取得します</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>。       格納操作は、指定したコピー先に行を追加<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは既に存在しない</xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Data.DataTable>。 作成するときに、<xref:System.Data.DataTable>オブジェクト、格納操作は通常のみの列名のメタデータを作成します</xref:System.Data.DataTable>。 ただし場合、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>。       同じ<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 、Fill メソッド複数回を使用できます。 主キーが存在する場合は、受信した行が既に存在する行と一致すると共にマージされます。 主キーがない場合、受信した行が<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 主キーの情報が存在する場合、重複する行は調整が行われ、 <xref:System.Data.DataTable> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>に対応する</xref:System.Data.DataTable>で&1; 回にのみ表示されます。 主キーの情報を設定するを通じて<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>を指定して、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.DataTable></xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.Common.DbDataAdapter.FillSchema%2A>。       場合、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>OUTER JOIN の結果を返します、 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A>結果として得られる<xref:System.Data.DataTable>.</xref:System.Data.DataTable>の値</xref:System.Data.DataTable.PrimaryKey%2A>を設定しません</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 重複する行が正しく解決されるかどうかを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/add/includes/ajax-current-ext-md.md)です。       .NET Framework Data Provider for OLE DB と正しく機能する`AddWithKey`は、主にのどの列を決定し、ネイティブの OLE DB プロバイダー DBPROP_UNIQUEROWS プロパティを設定して必要な主キーの情報を取得する必要がありますに DBCOLUMN_KEYCOLUMN を確認するにはキー列、`IColumnsRowset`です。 または、ユーザーが各<xref:System.Data.DataTable>。</xref:System.Data.DataTable>に主キー制約明示的に設定します。 これによりの代わりに既存のレコードと一致する受信したレコードが更新されることを確認して追加されます。       場合、<xref:System.Data.OleDb.OleDbDataAdapter>重複する列を設定中に検出すると、<xref:System.Data.DataTable>のパターンを使用して、後続の列名が生成されます&quot;*columnname*1&quot;、&quot;*columnname*2「,」*columnname*3&quot;のようにします</xref:System.Data.DataTable></xref:System.Data.OleDb.OleDbDataAdapter>。 空の列名を追加、 <xref:System.Data.DataTable>、空の文字列を使用して、最初の列の「1」、「2」、「3」、および後続の空の列のように続きます</xref:System.Data.DataTable>。       ADO では値`Recordset`または`Record`オブジェクトの記憶域<xref:System.Data.DataSet>.</xref:System.Data.DataSet>の共通言語ランタイムの型に変換されます      > [!CAUTION] > Fill メソッドのこのオーバー ロードが暗黙的に呼び出していない`Close`fill 操作が完了すると、ADO オブジェクトでします。 したがって、常に呼び出す`Close`ADO の使用が終了したときに`Recordset`または`Record`オブジェクト。 これにより、データ ソースへの接続を基になるが、適切なタイミングでリリースされ、既存の参照がまだ存在しているときに、ガベージ コレクションによって解放されるアンマネージの ADO オブジェクトによりアクセス違反を防ぐことができます。       呼び出すと、`TableMappings.Add`メソッドを`DataAdapter`とソース テーブルのパラメーターを空の文字列に明示的にマップが正常にデータセットがソース テーブルを使用して、データセットが何も設定されます。 たとえば、次の例で`rDataSet`が何も設定されます。      ```   rAdapter.TableMappings.Add(&quot;source table&quot;, &quot;&quot;);   rAdapter.Fill(rDataSet, &quot;source table&quot;);      ```この例では、複数の結果を処理する場合、結果をスキップする方法を示します。       次の例では、<xref:System.Data.OleDb.OleDbDataAdapter>を埋める、 <xref:System.Data.DataTable>ADO を使用して`Recordset`</xref:System.Data.DataTable></xref:System.Data.OleDb.OleDbDataAdapter>。 この例では、ADO を作成している`Recordset`です。      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        Dim custTable As DataTable = New DataTable(&quot;Customers&quot;)        custTable.Columns.Add(&quot;CustomerID&quot;, Type.GetType(&quot;System.String&quot;))        custTable.Columns.Add(&quot;CompanyName&quot;, Type.GetType(&quot;System.String&quot;))        custDS.Tables.Add(custTable)        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custTable, adoRS)        adoRS.Close()        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        DataTable custTable = new DataTable(&quot;Customers&quot;);        custTable.Columns.Add(&quot;CustomerID&quot;, typeof(String));        custTable.Columns.Add(&quot;CompanyName&quot;, typeof(String));        custDS.Tables.Add(custTable);        //Use ADO objects from ADO library (msado15.dll) imported        //  as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custTable, adoRS);        adoRS.Close();        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>のレコードを格納して、それが必要な場合、スキーマです。"
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    return:
      type: System.Int32
      description: "行の数が正常に更新され、 <xref href=&quot;System.Data.DataTable&quot;></xref>です。 これには、行を返さないステートメントによって影響を受けた行は含まれません。"
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  id: Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "追加または内の行を更新、 <xref href=&quot;System.Data.DataSet&quot;> </xref>一致するように ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref>オブジェクトの指定を使用して<xref href=&quot;System.Data.DataSet&quot;> </xref>、ADO オブジェクトとソース テーブル名。"
  remarks: "ActiveX データ オブジェクト (ADO) と ADO.NET の間のリンクは、一方向の操作を ADO からデータをコピーすることで、<xref:System.Data.DataSet>が ADO.NET によって、データの更新を処理する必要があります</xref:System.Data.DataSet>。       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>メソッドは、呼び出すことによって、複数の結果を反復処理、`NextRecordset`メソッドを`Recordset`、入力を閉じる`Recordset`の完了時に、<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A></xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>。       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作は、指定したコピー先に行を追加<xref:System.Data.DataTable>内のオブジェクト、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataTable>オブジェクトのかどうかは既に存在しない</xref:System.Data.DataTable></xref:System.Data.DataSet></xref:System.Data.DataTable></xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>。 作成するときに、<xref:System.Data.DataTable>オブジェクト、<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作が通常は列名のメタデータのみを作成します</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A></xref:System.Data.DataTable>。 ただし場合、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティに設定されている`AddWithKey`、適切なプライマリ キーと制約も作成されます</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>。       主キーの情報が存在する場合、重複する行は調整が行われ、 <xref:System.Data.DataTable> <xref:System.Data.DataSet>。</xref:System.Data.DataSet>に対応する</xref:System.Data.DataTable>で&1; 回にのみ表示されます。 主キーの情報を設定するを通じて<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>を指定して、<xref:System.Data.DataTable.PrimaryKey%2A>のプロパティ、 <xref:System.Data.DataTable>、かを設定して、<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>プロパティを`AddWithKey`</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A></xref:System.Data.DataTable></xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.Common.DbDataAdapter.FillSchema%2A>。       .NET Framework Data Provider for OLE DB は正しく機能する`AddWithKey`DBPROP_UNIQUEROWS プロパティを設定して必要な主キーの情報を取得しは、主に列を特定するネイティブの OLE DB プロバイダーが必要で DBCOLUMN_KEYCOLUMN を確認するにはキー列、 **IColumnsRowset**です。 または、ユーザーが各<xref:System.Data.DataTable>。</xref:System.Data.DataTable>に主キー制約明示的に設定します。 これによりの代わりに既存のレコードと一致する受信したレコードが更新される追加されます。       場合、 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>OUTER JOIN の結果を返します、 `DataAdapter` <xref:System.Data.DataTable.PrimaryKey%2A>結果として得られる<xref:System.Data.DataTable>.</xref:System.Data.DataTable>の値</xref:System.Data.DataTable.PrimaryKey%2A>を設定しません</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 重複する行が正しく解決されるかどうかを確認する主キーを明示的に定義する必要があります。 詳細については、次を参照してください。[主キーを定義する](~/add/includes/ajax-current-ext-md.md)です。       場合、`Recordset`の開始する前に閉じ、<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作、エラーは発生しません</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>。 これは、複数の結果の処理に必要な行を返さないクエリが示されているため、閉じられたによって`Recordset`です。 <xref:System.Data.OleDb.OleDbDataAdapter>呼び出すだけ`NextRecordset`閉じたで`Recordset`し処理を続行します</xref:System.Data.OleDb.OleDbDataAdapter>。       エラーの発生前に追加された行が<xref:System.Data.DataSet>。</xref:System.Data.DataSet>残りますデータ セットの設定中にエラーが発生した場合 残りの操作は中止されます。       場合、<xref:System.Data.Common.DbDataAdapter>オブジェクトの設定中に重複した列を検出した、 <xref:System.Data.DataTable>、パターンを使用して、後続の列に名前が生成されます&quot;*columnname*1&quot;、&quot;*columnname*2「,」*columnname*3&quot;のようにします</xref:System.Data.DataTable></xref:System.Data.Common.DbDataAdapter>。 配置された受信データに名前のない列が含まれている場合、<xref:System.Data.DataSet>に従ってパターン&quot;Column1&quot;、&quot;Column2&quot;など</xref:System.Data.DataSet>。 複数の結果セットが追加されたとき、<xref:System.Data.DataSet>各結果セットは、個別のテーブルに配置されます</xref:System.Data.DataSet>。 追加の結果セットは整数値名を追加して、指定されたテーブル (たとえば、&quot;Table&quot;、&quot;Table1&quot;、&quot;Table2&quot;、およびなどです。) という名前です。 列とテーブルの名前を使用するアプリケーションは、これらの名前付けパターンとの競合が発生しないことを確認ください。       ADO では値`Recordset`または`Record`オブジェクトの記憶域<xref:System.Data.DataSet>.</xref:System.Data.DataSet>の共通言語ランタイムの型に変換されます      > [!NOTE] > のこのオーバー ロード、<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>メソッドを暗黙的に呼び出します`Close`fill 操作が完了すると、ADO オブジェクトでします</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>。       次の例では、<xref:System.Data.OleDb.OleDbDataAdapter>を埋める、 <xref:System.Data.DataSet>ADO を使用して`Recordset`ADO は`Record`オブジェクト</xref:System.Data.DataSet></xref:System.Data.OleDb.OleDbDataAdapter>。 この例では、ADO を作成している`RecordSet`と`Record`オブジェクト。      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custDS, adoRS, &quot;Customers&quot;)        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        //Use ADO objects from ADO library (msado15.dll) imported        // as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custDS, adoRS, &quot;Customers&quot;);        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref>のレコードを格納して、それが必要な場合、スキーマです。"
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    - id: srcTable
      type: System.String
      description: "テーブル マップに使用されるソース テーブル。"
    return:
      type: System.Int32
      description: "行の数が正常に追加または更新されて、 <xref href=&quot;System.Data.DataSet&quot;></xref>です。 これには、行を返さないステートメントによって影響を受けた行は含まれません。"
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ソース テーブルが正しくありません。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得または設定、SQL ステートメントまたはストアド プロシージャが、データ ソースに新しいレコードを挿入するために使用します。"
  remarks: "<xref:System.Data.Common.DbDataAdapter.Update%2A>このプロパティを設定しないと、主キーの情報は<xref:System.Data.DataSet>自動的に設定した場合、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>プロパティと使用<xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> insert コマンドを生成することができます、</xref:System.Data.DataSet>内に存在する場合は、</xref:System.Data.Common.DbDataAdapter.Update%2A>中 次に、追加のコマンドを設定しないは、 <xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder>によって生成されます。 この生成ロジックには、 <xref:System.Data.DataSet>。</xref:System.Data.DataSet>に存在するキー列情報が必要です。 詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。       InsertCommand が割り当てられている場合、以前に作成した<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>は複製されません</xref:System.Data.OleDb.OleDbCommand></xref:System.Data.OleDb.OleDbCommand>。 InsertCommand が以前に作成したへの参照を保持<xref:System.Data.OleDb.OleDbCommand>オブジェクト</xref:System.Data.OleDb.OleDbCommand>。      > [!NOTE] > にこれらの行を追加することがありますこのコマンドの実行には、行が返された場合、<xref:System.Data.DataSet>を設定する方法に応じて、<xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>のプロパティ、<xref:System.Data.OleDb.OleDbCommand>オブジェクト</xref:System.Data.OleDb.OleDbCommand></xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A></xref:System.Data.DataSet>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and InsertCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_9_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_9_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand InsertCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>中に使用される<xref:System.Data.Common.DbDataAdapter.Update*>で新しい行に対応するデータ ソースのレコードを挿入する、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Data.Common.DbDataAdapter.Update*> 。"
  overload: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "追加します。"
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "追加します。"
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  id: RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "中に発生した<xref:System.Data.Common.DbDataAdapter.Update*>データ ソースに対してコマンドが実行された後です</xref:System.Data.Common.DbDataAdapter.Update*>。 更新の試行が行われます。 そのため、イベントが発生します。"
  remarks: "使用すると<xref:System.Data.Common.DbDataAdapter.Update%2A>、更新されたデータ行ごとに発生する&2; つのイベントがある</xref:System.Data.Common.DbDataAdapter.Update%2A>。 実行の順序のとおりです: 1。  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます</xref:System.Data.DataRow>。      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>。      3.  コマンドを実行します。      4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果は<xref:System.Data.DataRow>.</xref:System.Data.DataRow>に配置されます。      5.  <xref:System.Data.DataRow>。</xref:System.Data.DataRow>に配置される出力パラメーターがある場合      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>。      7.  <xref:System.Data.DataRow.AcceptChanges%2A>呼び出されます。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> and RowUpdated events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;
    return:
      type: System.Data.OleDb.OleDbRowUpdatedEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  id: RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "中に発生した<xref:System.Data.Common.DbDataAdapter.Update*>データ ソースに対してコマンドを実行する前にします</xref:System.Data.Common.DbDataAdapter.Update*>。 更新の試行が行われます。 そのため、イベントが発生します。"
  remarks: "使用すると<xref:System.Data.Common.DbDataAdapter.Update%2A>、更新されたデータ行ごとに発生する&2; つのイベントがある</xref:System.Data.Common.DbDataAdapter.Update%2A>。 実行の順序のとおりです: 1。  内の値、<xref:System.Data.DataRow>パラメーターの値に移動されます</xref:System.Data.DataRow>。      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>。      3.  コマンドを実行します。      4.  コマンドに設定されている場合`FirstReturnedRecord`、最初に返された結果は<xref:System.Data.DataRow>.</xref:System.Data.DataRow>に配置されます。      5.  <xref:System.Data.DataRow>。</xref:System.Data.DataRow>に配置される出力パラメーターがある場合      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>イベントが発生します</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>。      7.  <xref:System.Data.DataRow.AcceptChanges%2A>呼び出されます。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the RowUpdating and <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_0_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_0_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;
    return:
      type: System.Data.OleDb.OleDbRowUpdatingEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得または設定、SQL ステートメントまたはストアド プロシージャがデータ ソースのレコードを選択するために使用します。"
  remarks: "SelectCommand が割り当てられている場合、以前に作成した<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>は複製されません</xref:System.Data.OleDb.OleDbCommand></xref:System.Data.OleDb.OleDbCommand>。 SelectCommand が以前に作成したへの参照を保持<xref:System.Data.OleDb.OleDbCommand>オブジェクト</xref:System.Data.OleDb.OleDbCommand>。       SelectCommand に行が返されなかった場合のテーブルに追加されて、 <xref:System.Data.DataSet>、例外が発生したことはありません</xref:System.Data.DataSet>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the SelectCommand and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_3_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand SelectCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>中に使用される<xref:System.Data.Common.DbDataAdapter.Fill*>に配置するデータ ソースからレコードを選択する、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Data.Common.DbDataAdapter.Fill*> 。"
  overload: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このメンバーの説明、 <xref:System.Data.IDbDataAdapter.DeleteCommand*>。</xref:System.Data.IDbDataAdapter.DeleteCommand*>を参照してください。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.OleDb.OleDbDataAdapter>にインスタンスをキャスト、<xref:System.Data.IDbDataAdapter>インターフェイス</xref:System.Data.IDbDataAdapter></xref:System.Data.OleDb.OleDbDataAdapter>。"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>更新中に、データ セットの削除された行のデータ ソースのレコードを削除するために使用します。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このメンバーの説明、 <xref:System.Data.IDbDataAdapter.InsertCommand*>。</xref:System.Data.IDbDataAdapter.InsertCommand*>を参照してください。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.OleDb.OleDbDataAdapter>にインスタンスをキャスト、<xref:System.Data.IDbDataAdapter>インターフェイス</xref:System.Data.IDbDataAdapter></xref:System.Data.OleDb.OleDbDataAdapter>。"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>レコードを挿入するデータ セットに配置するデータ ソースから更新中に使用されます。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このメンバーの説明、 <xref:System.Data.IDbDataAdapter.SelectCommand*>。</xref:System.Data.IDbDataAdapter.SelectCommand*>を参照してください。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.OleDb.OleDbDataAdapter>にインスタンスをキャスト、<xref:System.Data.IDbDataAdapter>インターフェイス</xref:System.Data.IDbDataAdapter></xref:System.Data.OleDb.OleDbDataAdapter>。"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>データ セット内の配置用のデータ ソースからレコードを選択、更新中に使用されます。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このメンバーの説明、 <xref:System.Data.IDbDataAdapter.UpdateCommand*>。</xref:System.Data.IDbDataAdapter.UpdateCommand*>を参照してください。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.OleDb.OleDbDataAdapter>にインスタンスをキャスト、<xref:System.Data.IDbDataAdapter>インターフェイス</xref:System.Data.IDbDataAdapter></xref:System.Data.OleDb.OleDbDataAdapter>。"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>データ セット内で変更された行のデータ ソース内の更新プログラムを更新するレコードの中に使用します。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "このメンバーの説明は、次を参照してください。 &lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;です。"
  remarks: "このメンバーは、明示的なインターフェイス メンバーの実装です。 使用する場合にのみ、<xref:System.Data.OleDb.OleDbDataAdapter>にインスタンスをキャスト、<xref:System.ICloneable>インターフェイス</xref:System.ICloneable></xref:System.Data.OleDb.OleDbDataAdapter>。"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "新しい<xref:System.Object>のこのインスタンスのコピーである</xref:System.Object>。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "取得または設定、SQL ステートメントまたはストアド プロシージャが、データ ソースのレコードを更新するために使用します。"
  remarks: "<xref:System.Data.Common.DbDataAdapter.Update%2A>このプロパティを設定しないと、主キーの情報は<xref:System.Data.DataSet>自動的に設定した場合、<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>プロパティと使用<xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> UpdateCommand が生成されることができます、</xref:System.Data.DataSet>内に存在する場合は、</xref:System.Data.Common.DbDataAdapter.Update%2A>中 次に、追加のコマンドを設定しないは、 <xref:System.Data.OleDb.OleDbCommandBuilder>。</xref:System.Data.OleDb.OleDbCommandBuilder>によって生成されます。 この生成ロジックには、 <xref:System.Data.DataSet>。</xref:System.Data.DataSet>に存在するキー列情報が必要です。 詳細については、次を参照してください。 [Commandbuilder でのコマンドを生成する](~/add/includes/ajax-current-ext-md.md)です。       UpdateCommand が割り当てられている場合、以前に作成した<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>は複製されません</xref:System.Data.OleDb.OleDbCommand></xref:System.Data.OleDb.OleDbCommand>。 UpdateCommand が以前に作成したへの参照を保持<xref:System.Data.OleDb.OleDbCommand>オブジェクト</xref:System.Data.OleDb.OleDbCommand>。      > [!NOTE] > でこれらの行がマージされる可能性がこのコマンドの実行には、行が返された場合、<xref:System.Data.DataSet>を設定する方法に応じて、<xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>のプロパティ、<xref:System.Data.OleDb.OleDbCommand>オブジェクト</xref:System.Data.OleDb.OleDbCommand></xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A></xref:System.Data.DataSet>。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and UpdateCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_7_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_7_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>中に使用される<xref:System.Data.Common.DbDataAdapter.Update*>内の行を変更に対応するデータ ソースのレコードを更新する、 <xref href=&quot;System.Data.DataSet&quot;> </xref></xref:System.Data.Common.DbDataAdapter.Update*> 。"
  overload: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.Common.DbDataAdapter
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
- uid: System.Data.OleDb.OleDbCommand
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbCommand
  nameWithType: OleDbCommand
  fullName: System.Data.OleDb.OleDbCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnection
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbConnection
  nameWithType: OleDbConnection
  fullName: System.Data.OleDb.OleDbConnection
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
- uid: System.Data.OleDb.OleDbRowUpdatedEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatedEventHandler
  nameWithType: OleDbRowUpdatedEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatedEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
- uid: System.Data.OleDb.OleDbRowUpdatingEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatingEventHandler
  nameWithType: OleDbRowUpdatingEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatingEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter.OleDbDataAdapter
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: OleDbDataAdapter.Fill
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: OleDbDataAdapter.OnRowUpdated
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: OleDbDataAdapter.OnRowUpdating
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
