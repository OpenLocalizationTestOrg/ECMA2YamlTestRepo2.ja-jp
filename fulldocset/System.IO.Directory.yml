### YamlMime:ManagedReference
items:
- uid: System.IO.Directory
  id: Directory
  children:
  - System.IO.Directory.CreateDirectory(System.String)
  - System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.Delete(System.String)
  - System.IO.Directory.Delete(System.String,System.Boolean)
  - System.IO.Directory.EnumerateDirectories(System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String)
  - System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFiles(System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String)
  - System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  - System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.Exists(System.String)
  - System.IO.Directory.GetAccessControl(System.String)
  - System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  - System.IO.Directory.GetCreationTime(System.String)
  - System.IO.Directory.GetCreationTimeUtc(System.String)
  - System.IO.Directory.GetCurrentDirectory
  - System.IO.Directory.GetDirectories(System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String)
  - System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetDirectoryRoot(System.String)
  - System.IO.Directory.GetFiles(System.String)
  - System.IO.Directory.GetFiles(System.String,System.String)
  - System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetFileSystemEntries(System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  - System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  - System.IO.Directory.GetLastAccessTime(System.String)
  - System.IO.Directory.GetLastAccessTimeUtc(System.String)
  - System.IO.Directory.GetLastWriteTime(System.String)
  - System.IO.Directory.GetLastWriteTimeUtc(System.String)
  - System.IO.Directory.GetLogicalDrives
  - System.IO.Directory.GetParent(System.String)
  - System.IO.Directory.Move(System.String,System.String)
  - System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  - System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  - System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetCurrentDirectory(System.String)
  - System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  - System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  langs:
  - csharp
  name: Directory
  nameWithType: Directory
  fullName: System.IO.Directory
  type: Class
  summary: "作成、移動、およびディレクトリやサブディレクトリを通じてを列挙するための静的メソッドを公開します。 このクラスは継承できません。       この型の .NET Framework ソース コードを参照するを参照してください。、[参照ソース](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28)です。"
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/directory.cs#b3ad5f0ba800bb28). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n Use the Directory class for typical operations such as copying, moving, renaming, creating, and deleting directories.  \n  \n-   To create a directory, use one of the <xref:System.IO.Directory.CreateDirectory%2A> methods.  \n  \n-   To delete a directory, use one of the <xref:System.IO.Directory.Delete%2A> methods.  \n  \n-   To get or set the current directory for an app, use the <xref:System.IO.Directory.GetCurrentDirectory%2A> or <xref:System.IO.Directory.SetCurrentDirectory%2A> method.  \n  \n-   To manipulate <xref:System.DateTime> information related to the creation, access, and writing of a directory, use methods such as <xref:System.IO.Directory.SetLastAccessTime%2A> and <xref:System.IO.Directory.SetCreationTime%2A>.  \n  \n The static methods of the Directory class perform security checks on all methods. If you are going to reuse an object several times, consider using the corresponding instance method of <xref:System.IO.DirectoryInfo> instead, because the security check will not always be necessary.  \n  \n If you are performing only one directory-related action, it might be more efficient to use a static Directory method rather than a corresponding <xref:System.IO.DirectoryInfo> instance method. Most Directory methods require the path to the directory that you are manipulating.  \n  \n> [!NOTE]\n>  In members that accept a string `path` parameter, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space (\" c:\\temp\"), the path string isn't trimmed, so the path is considered malformed and an exception is raised. In addition, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception. Ensure that your paths are well-formed when using methods that accept a path string. For more information see <xref:System.IO.Path>.  \n  \n In members that accept a path, the path can refer to a file or a directory. You can use a full path, a relative path, or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  \n  \n-   \"c:\\\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.  \n  \n-   \"MyDir\\\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.  \n  \n-   \"\\\\\\\\\\\\\\MyServer\\\\\\MyShare\" in C#, or \"\\\\\\MyServer\\MyShare\" in Visual Basic.  \n  \n By default, full read/write access to new directories is granted to all users. However, the app must have the correct security to access existing directories.  \n  \n To demand permissions for a directory and all its subdirectories, end the path string with the directory separator character. (For example, \"C:\\Temp\\\\\" grants access to C:\\Temp\\ and all its subdirectories.) To demand permissions only for a specific directory, end the path string with a period. (For example, \"C:\\Temp\\\\.\" grants access only to C:\\Temp\\\\, not to its subdirectories.)  \n  \n In members that accept a `searchPattern` parameter, the search string can be any combination of literal characters and two wildcard characters; * and ?. This parameter does not recognize regular expressions. For more information, see the <xref:System.IO.Directory.EnumerateDirectories%28System.String%2CSystem.String%29> method or any other method that uses the `searchPattern` parameter.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md).  \n  \n Directory and <xref:System.IO.DirectoryInfo> are not supported for use in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps. For information about how to access files and folders in [!INCLUDE[win8_appstore_long](~/add/includes/win8-appstore-long-md.md)] apps, see [Accessing data and files (Windows Store apps)](http://msdn.microsoft.com/library/windows/apps/hh758319.aspx)."
  example:
  - "The following example shows how to retrieve all the text files from a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/t-system.io.directory_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/t-system.io.directory_1.vb)]  \n  \n The following example demonstrates how to use the <xref:System.IO.Directory.EnumerateFiles%2A> method to retrieve a collection of text files from a directory, and then use that collection in a query to find all the lines that contain \"Example\".  \n  \n [!code-cs[System.IO.Directory#11](~/add/codesnippet/csharp/t-system.io.directory_2.cs)]\n [!code-vb[System.IO.Directory#11](~/add/codesnippet/visualbasic/t-system.io.directory_2.vb)]  \n  \n The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/t-system.io.directory_3.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/t-system.io.directory_3.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Directory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String)
  id: CreateDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "既に存在している場合、指定したパスにすべてのディレクトリとサブディレクトリを作成します。"
  remarks: "Any and all directories specified in `path` are created, unless they already exist or unless some part of `path` is invalid. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n The `path` parameter specifies a directory path, not a file path.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported, and will cause a `NotSupportedException` to be thrown."
  example:
  - "The following example creates and deletes the specified directory.  \n  \n [!code-cs[Dir_CreateDir#1](~/add/codesnippet/csharp/m-system.io.directory.cr_1.cs)]\n [!code-vb[Dir_CreateDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.cr_1.vb)]\n [!code-cpp[Dir_CreateDir#1](~/add/codesnippet/cpp/m-system.io.directory.cr_1.cpp)]  \n  \n To create the directory C:\\Users\\User1\\Public\\Html when the current directory is C:\\Users\\User1, use any of the following calls to ensure that the backslash is interpreted properly.  \n  \n In Visual Basic:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\Html\")   \n    Directory.CreateDirectory(\"\\Users\\User1\\Public\\Html\")   \n    Directory.CreateDirectory(\"c:\\Users\\User1\\Public\\Html\")  \n```  \n  \n In C#:  \n  \n```  \nDirectory.CreateDirectory(\"Public\\\\Html\");  \n    Directory.CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory.CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```  \n  \n In C++:  \n  \n```  \nDirectory::CreateDirectory(\"Public\\\\Html\");  \n    Directory::CreateDirectory(\"\\\\Users\\\\User1\\\\Public\\\\Html\");  \n    Directory::CreateDirectory(\"c:\\\\Users\\\\User1\\\\Public\\\\Html\");  \n```"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "作成するディレクトリ。"
    return:
      type: System.IO.DirectoryInfo
      description: "指定されたパスに存在するディレクトリを表すオブジェクト。 このオブジェクトは、指定したパスにおいてディレクトリが既に存在するかどうかに関係なく返されます。"
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定されたディレクトリ<code> path </code>ファイルします。       または、ネットワーク名が不明です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。       - または -<code>path</code>が付いて、またはコロン文字 (:) のみを含んでいます。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>ドライブのラベルの一部ではないコロン文字 (:) が含まれています (&quot;c:\\&quot;)。"
  platform:
  - net462
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  id: CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "しない限り、指定したパスにすべてのディレクトリを作成が既に存在する、指定した Windows セキュリティを適用します。"
  remarks: "Use this method overload to create a directory with access control, so there is no chance the directory can be accessed before security is applied.  \n  \n Any and all directories specified in the `path` parameter are created, unless they already exist or unless some part of `path` is invalid. The `path` parameter specifies a directory path, not a file path. If the directory already exists, this method does not create a new directory, but it returns a <xref:System.IO.DirectoryInfo> object for the existing directory.  \n  \n Trailing spaces are removed from the end of the `path` parameter before creating the directory.  \n  \n You can create a directory on a remote computer, on a share that you have write access to. UNC paths are supported; for example, you can specify the following for `path`: `\\\\2009\\Archives\\December` in Visual Basic, and `\\\\\\\\2009\\\\Archives\\\\December` in C#.  \n  \n Creating a directory with only the colon character (:) is not supported and causes a `NotSupportedException` to be thrown."
  example:
  - "The following example creates a new directory with access rules for two user accounts.  \n  \n [!code-cs[System.IO.Directory#15](~/add/codesnippet/csharp/52b6d5ea-0f1d-4395-a346-_1.cs)]\n [!code-vb[System.IO.Directory#15](~/add/codesnippet/visualbasic/52b6d5ea-0f1d-4395-a346-_1.vb)]"
  syntax:
    content: public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "作成するディレクトリ。"
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "ディレクトリに適用するアクセス制御。"
    return:
      type: System.IO.DirectoryInfo
      description: "指定されたパスに存在するディレクトリを表すオブジェクト。 このオブジェクトは、指定したパスにおいてディレクトリが既に存在するかどうかに関係なく返されます。"
  overload: System.IO.Directory.CreateDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定されたディレクトリ<code> path </code>ファイルします。       または、ネットワーク名が不明です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。       - または -<code>path</code>が付いて、またはコロン文字 (:) のみを含んでいます。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>path</code>ドライブのラベルの一部ではないコロン文字 (:) が含まれています (&quot;c:\\&quot;)。"
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String)
  id: Delete(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスから空のディレクトリを削除します。"
  remarks: "このメソッドの動作と同じように<xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29>で`false`2 番目のパラメーターを指定します</xref:System.IO.Directory.Delete%28System.String%2CSystem.Boolean%29>。       `path`パラメーターは相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       末尾のスペースがの末尾から削除された、`path`ディレクトリを削除する前にパラメーター。       このメソッドは、<xref:System.IO.IOException>でディレクトリが指定されている場合、`path`パラメーターには、ファイルまたはサブディレクトリが含まれています</xref:System.IO.IOException>。       `path`パラメーター小文字は区別されません。       場合によっては、ファイル エクスプ ローラーで開く、指定したディレクトリがある場合は Delete メソッドできないことがありますを削除します。"
  example:
  - "The following example shows how to create a new directory and subdirectory, and then delete only the subdirectory.  \n  \n [!code-vb[System.IO.Directory.Delete#1](~/add/codesnippet/visualbasic/m-system.io.directory.de_0_1.vb)]\n [!code-cs[System.IO.Directory.Delete#1](~/add/codesnippet/csharp/m-system.io.directory.de_0_1.cs)]"
  syntax:
    content: public static void Delete (string path);
    parameters:
    - id: path
      type: System.String
      description: "削除する空のディレクトリの名前。 このディレクトリは、書き込み可能で空にする必要があります。"
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルと同じ名前で指定された場所<code> path </code>が存在します。       または、ディレクトリは、アプリケーションの現在の作業ディレクトリです。       - または - で指定されたディレクトリ<code> path </code>空ではありません。       または、ディレクトリは読み取り専用または読み取り専用ファイルが含まれています。       または、ディレクトリが別のプロセスによって使用されています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>存在しないか、見つかりませんでした。       または、指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  id: Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたディレクトリを削除し、任意のサブディレクトリおよびディレクトリ内のファイルに示される場合。"
  remarks: "`path`パラメーターは相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       末尾のスペースがの末尾から削除された、`path`ディレクトリを削除する前にパラメーター。       `path`パラメーター小文字は区別されません。       場合、`recursive`パラメーターは`true`ユーザーは、現在のディレクトリもすべてのサブディレクトリに対する書き込みアクセス許可が必要です。       シンボリック リンクやマウント ポイントなどの再解析ポイントを格納するディレクトリを削除するときに、このメソッドの動作は若干異なります。 再解析ポイントが、ディレクトリの場合は、マウント ポイントなどマウントが解除され、マウント ポイントが削除されます。 このメソッドは、再解析ポイントを介しては再帰しません。 再解析ポイントが削除された場合は、再解析ポイントは、ファイルへのシンボリック リンクは、シンボリック リンクのターゲットではなくとします。       場合によっては、ファイル エクスプ ローラーで開く、指定したディレクトリがある場合は Delete メソッドできないことがありますを削除します。"
  example:
  - "The following example shows how to create a new directory, subdirectory, and file in the subdirectory, and then recursively delete all the new items.  \n  \n [!code-cs[System.IO.Directory.Delete#2](~/add/codesnippet/csharp/m-system.io.directory.de_1_1.cs)]\n [!code-vb[System.IO.Directory.Delete#2](~/add/codesnippet/visualbasic/m-system.io.directory.de_1_1.vb)]"
  syntax:
    content: public static void Delete (string path, bool recursive);
    parameters:
    - id: path
      type: System.String
      description: "削除するディレクトリの名前です。"
    - id: recursive
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ディレクトリ、サブディレクトリ、および内のファイルを削除する`path`、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Directory.Delete*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ファイルと同じ名前で指定された場所<code> path </code>が存在します。       - または - で指定されたディレクトリ<code> path </code>は読み取り専用、または<code> recursive </code>は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>と<code> path </code>は空のディレクトリではありません。       または、ディレクトリは、アプリケーションの現在の作業ディレクトリです。       または、ディレクトリが読み取り専用ファイルを格納します。       または、ディレクトリが別のプロセスによって使用されています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>存在しないか、見つかりませんでした。       または、指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスにディレクトリ名の列挙可能なコレクションを返します。"
  remarks: "内の相対パスまたは絶対パス情報を指定することができます、`path`パラメーター。 相対パスの詳細についてを使用して指定できますが、現在の作業ディレクトリに対して相対的に解釈されます、<xref:System.IO.Directory.GetCurrentDirectory%2A>メソッド</xref:System.IO.Directory.GetCurrentDirectory%2A>。 返されたディレクトリ名が付きます。 で指定された値、`path`パラメーター。 相対パスを指定する場合など、`path`パラメーター、返されたディレクトリ名には、相対パスにが含まれます。       <xref:System.IO.Directory.EnumerateDirectories%2A>と<xref:System.IO.Directory.GetDirectories%2A>メソッドが次のように異なります: を使用すると<xref:System.IO.Directory.EnumerateDirectories%2A>、コレクション全体が返される前に、名前のコレクションを列挙することができます使用すると<xref:System.IO.Directory.GetDirectories%2A>、配列にアクセスする前に返される名前の配列全体を待つ必要があります。</xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> </xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> 。 そのためとを扱う多くのファイルとディレクトリ、<xref:System.IO.Directory.EnumerateDirectories%2A>効率的であることができます</xref:System.IO.Directory.EnumerateDirectories%2A>。       返されるコレクションはキャッシュされません。呼び出しごとに、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>コレクションで新しい列挙体が開始されます</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>。"
  example:
  - "The following example enumerates the top-level directories in a specified path.  \n  \n [!code-vb[System.IO.EnumDirs1#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_2_1.vb)]\n [!code-cs[System.IO.EnumDirs1#1](~/add/codesnippet/csharp/m-system.io.directory.en_2_1.cs)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のディレクトリの完全名 (パスを含む) の列挙可能なコレクション<code> path</code>です。"
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>長さ&0; の文字列か、空白のみが含まれています、無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  id: EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスから、検索パターンに一致するディレクトリ名の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates the top-level directories in a specified path that match a specified search pattern.  \n  \n [!code-cs[System.IO.EnumDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.en_0_1.cs)]\n [!code-vb[System.IO.EnumDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_0_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のディレクトリの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のディレクトリの完全名 (パスを含む) の列挙可能なコレクション<code> path </code>指定した検索パターンに一致するとします。"
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "パスでは、指定した検索パターンに一致するディレクトリ名の列挙可能なコレクションを返し、オプションでサブディレクトリを検索します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Exactly one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative or absolute path information in the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method. The returned directory names are prefixed with the value you provided in the `path` parameter. For example, if you provide a relative path in the `path` parameter, the returned directory names will contain a relative path.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example enumerates directories in a specified path that match a specified search pattern. It uses the `searchOption` parameter to specify that all subdirectories should be included in the search.  \n  \n [!code-cs[System.IO.EnumDirs3#1](~/add/codesnippet/csharp/d54eb053-19f8-45e5-b70d-_1.cs)]\n [!code-vb[System.IO.EnumDirs3#1](~/add/codesnippet/visualbasic/d54eb053-19f8-45e5-b70d-_1.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のディレクトリの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみを含める必要がありますか、すべてのサブディレクトリを含める必要があるかどうかを指定する列挙値の&1; つ。       既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のディレクトリの完全名 (パスを含む) の列挙可能なコレクション<code> path </code>指定した検索パターンおよびオプションに一致するとします。"
  overload: System.IO.Directory.EnumerateDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the  <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスにファイル名の列挙可能なコレクションを返します。"
  remarks: "相対パス情報を指定できます、`path`パラメーター。 相対パスの詳細についてを使用して指定できますが、現在の作業ディレクトリに対して相対的に解釈されます、<xref:System.IO.Directory.GetCurrentDirectory%2A>メソッド</xref:System.IO.Directory.GetCurrentDirectory%2A>。       <xref:System.IO.Directory.EnumerateFiles%2A>と<xref:System.IO.Directory.GetFiles%2A>メソッドが次のように異なります: を使用すると<xref:System.IO.Directory.EnumerateFiles%2A>、コレクション全体が返される前に、名前のコレクションを列挙することができます使用すると<xref:System.IO.Directory.GetFiles%2A>、配列にアクセスする前に返される名前の配列全体を待つ必要があります。</xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> </xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> 。 そのためとを扱う多くのファイルとディレクトリ、<xref:System.IO.Directory.EnumerateFiles%2A>効率的であることができます</xref:System.IO.Directory.EnumerateFiles%2A>。       返されるコレクションはキャッシュされません。呼び出しごとに、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>コレクションで新しい列挙体が開始されます</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>。"
  example:
  - "The following example shows how to retrieve all the files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#12](~/add/codesnippet/csharp/m-system.io.directory.en_3_1.cs)]\n [!code-vb[System.IO.Directory#12](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_1.vb)]  \n  \n The following example enumerates the files in the specified directory, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles#1](~/add/codesnippet/csharp/m-system.io.directory.en_3_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_3_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のファイルの完全名 (パスを含む) の列挙可能なコレクション<code> path</code>です。"
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>長さ&0; の文字列か、空白のみが含まれています、無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  id: EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスから、検索パターンに一致するファイル名の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and move them to a new directory. After the files are moved, they no longer exist in the original directory.  \n  \n [!code-cs[System.IO.Directory#10](~/add/codesnippet/csharp/m-system.io.directory.en_1_1.cs)]\n [!code-vb[System.IO.Directory#10](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_1.vb)]  \n  \n The following example enumerates the files in the specified directory that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Europe\".  \n  \n [!code-cs[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.en_1_2.cs)]\n [!code-vb[System.IO.Directory.EnumFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.en_1_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のファイルの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のファイルの完全名 (パスを含む) の列挙可能なコレクション<code> path </code>指定した検索パターンに一致するとします。"
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "パスでは、指定した検索パターンに一致するファイル名の列挙可能なコレクションを返し、オプションでサブディレクトリを検索します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  example:
  - "The following example shows how to retrieve all the text files in a directory and its subdirectories, and move them to a new directory. After the files are moved, they no longer exist in the original directories.  \n  \n [!code-cs[System.IO.Directory#13](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_1.cs)]\n [!code-vb[System.IO.Directory#13](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_1.vb)]  \n  \n The following example recursively enumerates all files that have a .txt extension, reads each line of the file, and displays the line if it contains the string \"Microsoft\".  \n  \n [!code-cs[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/csharp/5542867a-6e9d-46bd-b2ed-_2.cs)]\n [!code-vb[System.IO.Directory.EnumerateFiles#1](~/add/codesnippet/visualbasic/5542867a-6e9d-46bd-b2ed-_2.vb)]"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のファイルの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみを含める必要がありますか、すべてのサブディレクトリを含める必要があるかどうかを指定する列挙値の&1; つ。       既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のファイルの完全名 (パスを含む) の列挙可能なコレクション<code> path </code>指定した検索パターンおよびオプションに一致するとします。"
  overload: System.IO.Directory.EnumerateFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  id: EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスにファイル名とディレクトリ名の列挙可能なコレクションを返します。"
  remarks: "相対パス情報を指定できます、`path`パラメーター。 相対パスの詳細についてを使用して指定できますが、現在の作業ディレクトリに対して相対的に解釈されます、<xref:System.IO.Directory.GetCurrentDirectory%2A>メソッド</xref:System.IO.Directory.GetCurrentDirectory%2A>。       <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>と<xref:System.IO.Directory.GetFileSystemEntries%2A>メソッドが次のように異なります: を使用すると<xref:System.IO.Directory.EnumerateFileSystemEntries%2A>、コレクション全体が返される前に、エントリのコレクションを列挙することができます使用すると<xref:System.IO.Directory.GetFileSystemEntries%2A>、配列にアクセスする前に返されるエントリの配列全体を待つ必要があります。</xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> </xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 。 そのためとを扱う多くのファイルとディレクトリ、<xref:System.IO.Directory.EnumerateFiles%2A>効率的であることができます</xref:System.IO.Directory.EnumerateFiles%2A>。       返されるコレクションはキャッシュされません。呼び出しごとに、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>コレクションで新しい列挙体が開始されます</xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A>。"
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のファイル システム エントリの列挙可能なコレクション<code> path</code>です。"
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>長さ&0; の文字列か、空白のみが含まれています、無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  id: EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイル名と指定されたパスから、検索パターンに一致するディレクトリ名の列挙可能なコレクションを返します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`..  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のファイル システム エントリの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のファイル システム エントリの列挙可能なコレクション<code> path </code>指定した検索パターンに一致するとします。"
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイル名とパスでは、指定した検索パターンに一致するディレクトリ名の列挙可能なコレクションを返し、オプションでサブディレクトリを検索します。"
  remarks: "`searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The returned collection is not cached; each call to the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the collection will start a new enumeration."
  syntax:
    content: public static System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のファイル システム エントリと照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみを含める必要がありますか、すべてのサブディレクトリを含める必要があるかどうかを指定する列挙値の&1; つ。       既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "指定されたディレクトリ内のファイル システム エントリの列挙可能なコレクション<code> path </code>指定した検索パターンおよびオプションに一致するとします。"
  overload: System.IO.Directory.EnumerateFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.Exists(System.String)
  id: Exists(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスがディスク上の既存のディレクトリを参照するかどうかを判断します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。       末尾のスペースがの末尾から削除された、`path`ディレクトリが存在するかどうかをチェックする前にパラメーター。       `path`パラメーター小文字は区別されません。       かどうか、最小読み取り専用のアクセス許可をディレクトリにある必要はありません、Exists メソッドを返します`false`です。       Exists メソッドを返します`false`指定したファイルが存在するかどうかを判断するときにエラーが発生した場合。 これは無効な文字または文字が多すぎます、失敗、または見つからないディスクでは、ファイル名を渡すなどの例外が発生する状況で発生する、呼び出し元には、ファイルの読み取りアクセス許可がない場合またはします。"
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#2](~/add/codesnippet/cpp/m-system.io.directory.ex_1.cpp)]\n [!code-cs[Recursive file finder#2](~/add/codesnippet/csharp/m-system.io.directory.ex_1.cs)]\n [!code-vb[Recursive file finder#2](~/add/codesnippet/visualbasic/m-system.io.directory.ex_1.vb)]"
  syntax:
    content: public static bool Exists (string path);
    parameters:
    - id: path
      type: System.String
      description: "テストするパス。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<code> path </code> ; の既存のディレクトリを参照<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>ディレクトリが存在しないか、指定されたディレクトリが存在するかどうかを決定するときにエラーが発生したかどうか。"
  overload: System.IO.Directory.Exists*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String)
  id: GetAccessControl(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得、 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>指定したディレクトリのアクセス制御リスト (ACL) エントリをカプセル化するオブジェクト。"
  remarks: "GetAccessControl メソッドを使用すると、ディレクトリのアクセス制御リスト (ACL) エントリを取得できます。       ACL には、個人、グループ、または権限がない、指定したファイルまたはディレクトリの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: 追加または削除するアクセス制御リスト エントリ](~/add/includes/ajax-current-ext-md.md)です。       環境では NTFS、<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>場合は、ユーザーがあるユーザーに付与されます<xref:System.Security.AccessControl.FileSystemRights>親フォルダーに対する権限</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。 拒否する<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>、拒否<xref:System.Security.AccessControl.FileSystemRights>親ディレクトリにします</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。"
  example:
  - "The following example uses the GetAccessControl and the <xref:System.IO.Directory.SetAccessControl%2A> methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/m-system.io.directory.ge_7_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/m-system.io.directory.ge_7_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_7_1.vb)]"
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);
    parameters:
    - id: path
      type: System.String
      description: "含むディレクトリへのパス、 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>ファイルのアクセス制御リスト (ACL) 情報を記述するオブジェクト。"
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "によって記述されるファイルの規則、アクセス制御をカプセル化するオブジェクト、 <code> path </code>パラメーター。"
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリを開くときに I/O エラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムは Windows 2000 以降ではありません。"
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ディレクトリが見つかりませんでしたなど、システム レベルのエラーが発生しました。 特定の例外のサブクラスである可能性があります<xref href=&quot;System.SystemException&quot;></xref>です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> path </code>パラメーターは読み取り専用であるディレクトリを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  id: GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "取得、 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>指定した型の指定したディレクトリのアクセス制御リスト (ACL) エントリをカプセル化するオブジェクト。"
  remarks: "GetAccessControl メソッドを使用すると、ディレクトリのアクセス制御リスト (ACL) エントリを取得できます。       ACL には、個人、グループ、または権限がない、指定したファイルまたはディレクトリの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: 追加または削除するアクセス制御リスト エントリ](~/add/includes/ajax-current-ext-md.md)です。       環境では NTFS、<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>場合は、ユーザーがあるユーザーに付与されます<xref:System.Security.AccessControl.FileSystemRights>親フォルダーに対する権限</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。 拒否する<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>、拒否<xref:System.Security.AccessControl.FileSystemRights>親ディレクトリにします</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。"
  syntax:
    content: public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: path
      type: System.String
      description: "含むディレクトリへのパス、 <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>ファイルのアクセス制御リスト (ACL) 情報を記述するオブジェクト。"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "1 つ、 <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref>アクセスの種類を指定する値を受け取るリスト (ACL) 情報を制御します。"
    return:
      type: System.Security.AccessControl.DirectorySecurity
      description: "によって記述されるファイルの規則、アクセス制御をカプセル化するオブジェクト、 <code> path </code>パラメーター。"
  overload: System.IO.Directory.GetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ディレクトリを開くときに I/O エラーが発生しました。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムは Windows 2000 以降ではありません。"
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "ディレクトリが見つかりませんでしたなど、システム レベルのエラーが発生しました。 特定の例外のサブクラスである可能性があります<xref href=&quot;System.SystemException&quot;></xref>です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> path </code>パラメーターは読み取り専用であるディレクトリを指定します。       または、この操作は現在のプラットフォームでサポートされていません。       または、呼び出し元に必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTime(System.String)
  id: GetCreationTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ディレクトリの作成日時を取得します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       このメソッドは<xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>。</xref:System.IO.File.GetCreationTime%2A?displayProperty=fullName>       ディレクトリが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC) では、現地時刻に調整されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example gets the creation time of the specified directory.  \n  \n [!code-cpp[Dir_GetCreation#1](~/add/codesnippet/cpp/m-system.io.directory.ge_1_1.cpp)]\n [!code-cs[Dir_GetCreation#1](~/add/codesnippet/csharp/m-system.io.directory.ge_1_1.cs)]\n [!code-vb[Dir_GetCreation#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_1_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "ディレクトリのパス。"
    return:
      type: System.DateTime
      description: "指定したディレクトリの作成日時に設定されている構造体。 この値は現地時刻で表示します。"
  overload: System.IO.Directory.GetCreationTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  platform:
  - net462
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  id: GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ディレクトリの世界協定時刻 (UTC) 形式で、作成日と時間を取得します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       ディレクトリが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC)。       このメソッドを使用して、世界協定時刻 (UTC) に基づいて、ディレクトリの作成時刻を取得します。"
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_11_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_11_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_11_1.vb)]"
  syntax:
    content: public static DateTime GetCreationTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "ディレクトリのパス。"
    return:
      type: System.DateTime
      description: "指定したディレクトリの作成日時に設定されている構造体。 この値は UTC 時刻で表現します。"
  overload: System.IO.Directory.GetCreationTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  platform:
  - net462
- uid: System.IO.Directory.GetCurrentDirectory
  id: GetCurrentDirectory
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "アプリケーションの現在の作業ディレクトリを取得します。"
  remarks: "現在のディレクトリとは異なりますが、プロセスが開始された元のディレクトリです。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use the `GetCurrentDirectory` method.  \n  \n [!code-cs[Dir_GetCurDir#1](~/add/codesnippet/csharp/m-system.io.directory.ge_16_1.cs)]\n [!code-vb[Dir_GetCurDir#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_16_1.vb)]\n [!code-cpp[Dir_GetCurDir#1](~/add/codesnippet/cpp/m-system.io.directory.ge_16_1.cpp)]"
  syntax:
    content: public static string GetCurrentDirectory ();
    parameters: []
    return:
      type: System.String
      description: "文字列を現在の作業ディレクトリのパスを格納して、円記号が付いていません (\\\\)。"
  overload: System.IO.Directory.GetCurrentDirectory*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "オペレーティング システムは、Windows CE では、現在のディレクトリの機能はありません。       このメソッドは、.NET Compact Framework で使用できますが、現在サポートされていません。"
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したディレクトリ内のサブディレクトリ (パスを含む) の名前を返します。"
  remarks: "このメソッドは<xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29>と同じですが、検索パターンと指定されたアクタリスク (*)、これが返されますすべてのサブディレクトリ。サブディレクトリを検索する必要がある場合、<xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29>に一致するサブディレクトリの検索を指定することにより、メソッド、`searchOption`パラメーター</xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> </xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%29> 。       <xref:System.IO.Directory.EnumerateDirectories%2A>と<xref:System.IO.Directory.GetDirectories%2A>メソッドが次のように異なります: を使用すると<xref:System.IO.Directory.EnumerateDirectories%2A>、コレクション全体が返される前に、名前のコレクションを列挙することができます使用すると<xref:System.IO.Directory.GetDirectories%2A>、配列にアクセスする前に返される名前の配列全体を待つ必要があります。</xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> </xref:System.IO.Directory.GetDirectories%2A> </xref:System.IO.Directory.EnumerateDirectories%2A> 。 そのためとを扱う多くのファイルとディレクトリ、<xref:System.IO.Directory.EnumerateDirectories%2A>効率的であることができます</xref:System.IO.Directory.EnumerateDirectories%2A>。       `path`パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       このメソッドによって返された名前が付きます。 で提供されるディレクトリ情報`path`です。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example takes an array of file or directory names on the command line, determines what kind of name it is, and processes it appropriately.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_13_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_13_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_13_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    return:
      type: System.String[]
      description: "指定したパス、またはディレクトリが見つからない場合は空の配列内のサブディレクトリの完全名 (パスを含む) の配列。"
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  id: GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "(パスを含む)、指定したディレクトリ内の指定した検索パターンに一致するサブディレクトリの名前を返します。"
  remarks: "This method returns all subdirectories directly under the specified directory that match the specified search pattern. If the specified directory has no subdirectories, or no subdirectories match the `searchPattern` parameter, this method returns an empty array. Only the top directory is searched. If you want to search the subdirectories as well, use the <xref:System.IO.Directory.GetDirectories%28System.String%2CSystem.String%2CSystem.IO.SearchOption%29> method and specify <xref:System.IO.SearchOption> in the `searchOption` parameter.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The `path` parameter can specify relative or absolute path information, and is not case-sensitive.  Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories in a path that begin with the specified letter.  \n  \n [!code-cpp[Dir_GetDirs2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_12_1.cpp)]\n [!code-cs[Dir_GetDirs2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_12_1.cs)]\n [!code-vb[Dir_GetDirs2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_12_1.vb)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のサブディレクトリの名前と照合する検索文字列`path`です。 このパラメーターは、有効なリテラルのパスとワイルドカード文字 (「解説」を参照してください) の組み合わせを含めることできますが、正規表現をサポートしていますいません。"
    return:
      type: System.String[]
      description: "指定したディレクトリ内の検索パターンに一致するサブディレクトリの完全名 (パスを含む) の配列。 またはディレクトリが見つからない場合は空の配列。"
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会する<xref:System.IO.Path.GetInvalidPathChars*>です。       - または -<code>searchPattern</code>は有効なパターンが含まれていません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "(パスを含む) 指定したディレクトリ内の指定した検索パターンに一致するサブディレクトリの名前を返し、オプションでサブディレクトリを検索します。"
  remarks: "The `path` parameter can specify relative or absolute path information, and is not case-sensitive. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n The <xref:System.IO.Directory.EnumerateDirectories%2A> and <xref:System.IO.Directory.GetDirectories%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateDirectories%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetDirectories%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateDirectories%2A> can be more efficient.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of directories that begin with the specified letter in a path. Only the top-level directory is searched.  \n  \n [!code-vb[Dir_GetDirs2#2](~/add/codesnippet/visualbasic/15c0f479-3a12-4c2f-95ac-_1.vb)]\n [!code-cs[Dir_GetDirs2#2](~/add/codesnippet/csharp/15c0f479-3a12-4c2f-95ac-_1.cs)]"
  syntax:
    content: public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のサブディレクトリの名前と照合する検索文字列`path`です。 このパラメーターは、有効なリテラルのパスとワイルドカード文字 (「解説」を参照してください) の組み合わせを含めることできますが、正規表現をサポートしていますいません。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作がすべてのサブディレクトリまたは現在のディレクトリのみを含めるかどうかを指定する列挙値の&1; つ。"
    return:
      type: System.String[]
      description: "指定した条件に一致するサブディレクトリの完全名 (パスを含む) の配列。 またはディレクトリが見つからない場合は空の配列。"
  overload: System.IO.Directory.GetDirectories*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。       - または -<code>searchPattern</code>は有効なパターンが含まれていません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  id: GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ボリューム情報、ルート情報、または指定されたパスの両方を返します。"
  remarks: "このメソッドの完全修飾パス名を取得`path`によって返されるように、 <xref:System.IO.Path.GetFullPath%2A>、ルート ディレクトリ情報を返すとします</xref:System.IO.Path.GetFullPath%2A>。 指定されたパスが存在する必要はありません。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.ge_10_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.ge_10_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_10_1.vb)]"
  syntax:
    content: public static string GetDirectoryRoot (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはディレクトリのパス。"
    return:
      type: System.String
      description: "ボリューム情報、ルート情報、または指定されたパスの両方を含む文字列。"
  overload: System.IO.Directory.GetDirectoryRoot*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する<xref:System.IO.Path.GetInvalidPathChars*>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したディレクトリ内のファイル (パスを含む) の名前を返します。"
  remarks: "<xref:System.IO.Directory.EnumerateFiles%2A>と<xref:System.IO.Directory.GetFiles%2A>メソッドが次のように異なります: を使用すると<xref:System.IO.Directory.EnumerateFiles%2A>、コレクション全体が返される前に、名前のコレクションを列挙することができます使用すると<xref:System.IO.Directory.GetFiles%2A>、配列にアクセスする前に返される名前の配列全体を待つ必要があります。</xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> </xref:System.IO.Directory.GetFiles%2A> </xref:System.IO.Directory.EnumerateFiles%2A> 。 そのためとを扱う多くのファイルとディレクトリ、<xref:System.IO.Directory.EnumerateFiles%2A>効率的であることができます</xref:System.IO.Directory.EnumerateFiles%2A>。       返されるファイル名が追加されますを指定された`path`パラメーター。       このメソッドは同じ<xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>アスタリスク (*)、検索パターンと指定したとします</xref:System.IO.Directory.GetFiles%28System.String%2CSystem.String%29>。       `path`パラメーターは、相対パスまたは絶対パス情報を指定できます。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       返されるファイル名の順序は保証されません。使用して、<xref:System.Array.Sort%2A>メソッドの特定の並べ替え順序が必要な場合</xref:System.Array.Sort%2A>。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use the GetFiles method to return file names from a user-specified location. The example is configured to catch all errors common to this method.  \n  \n [!code-cpp[Recursive file finder#1](~/add/codesnippet/cpp/m-system.io.directory.ge_0_1.cpp)]\n [!code-cs[Recursive file finder#1](~/add/codesnippet/csharp/m-system.io.directory.ge_0_1.cs)]\n [!code-vb[Recursive file finder#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_0_1.vb)]"
  syntax:
    content: public static string[] GetFiles (string path);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    return:
      type: System.String[]
      description: "指定したディレクトリ内のファイルの完全名 (パスを含む) の配列。 またはファイルが見つからない場合は空の配列。"
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。       または、ネットワーク エラーが発生します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会することができます、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが見つからないか無効です (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  id: GetFiles(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したディレクトリ内の指定した検索パターンに一致する (パスを含む) ファイルの名前を返します。"
  remarks: "The returned file names are appended to the supplied `path` parameter and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example counts the number of files that begin with the specified letter.  \n  \n [!code-vb[Dir_GetFiles2#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_15_1.vb)]\n [!code-cs[Dir_GetFiles2#1](~/add/codesnippet/csharp/m-system.io.directory.ge_15_1.cs)]\n [!code-cpp[Dir_GetFiles2#1](~/add/codesnippet/cpp/m-system.io.directory.ge_15_1.cpp)]"
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のファイルの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    return:
      type: System.String[]
      description: "指定したディレクトリ内のファイルの完全名 (パスを含む) の配列に一致する指定した検索パターン、または空の配列のファイルが見つからない場合。"
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。       または、ネットワーク エラーが発生します。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 使用して無効な文字を照会する<xref:System.IO.Path.GetInvalidPathChars*>です。       - または -<code>searchPattern</code>は有効なパターンが含まれていません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが見つからないか無効です (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "(パスを含む) のサブディレクトリを検索するかどうかを決定する値を使用して、指定したディレクトリ内の指定した検索パターンに一致するファイルの名前を返します。"
  remarks: "The returned file names are appended to the supplied  parameter `path` and the order of the returned file names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n> [!NOTE]\n>  Because this method checks against file names with both the 8.3 file name format and the long file name format, a search pattern similar to \"*1\\*.txt\" may return unexpected file names. For example, using a search pattern of \"\\*1\\*.txt\" returns \"longfilename.txt\" because the equivalent 8.3 file name format is \"LONGFI~1.TXT\".  \n  \n The <xref:System.IO.Directory.EnumerateFiles%2A> and <xref:System.IO.Directory.GetFiles%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFiles%2A>, you can start enumerating the collection of names before the whole collection is returned; when you use <xref:System.IO.Directory.GetFiles%2A>, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n The file names include the full path.  \n  \n The `path` parameter can specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "内のファイルの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作がすべてのサブディレクトリまたは現在のディレクトリのみを含めるかどうかを指定する列挙値の&1; つ。"
    return:
      type: System.String[]
      description: "指定したディレクトリ内の指定した検索パターンおよびオプションに一致するファイルの完全名 (パスを含む) の配列またはファイルの場合は空の配列が見つかりました。"
  overload: System.IO.Directory.GetFiles*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。       - または -<code>searchPattern</code>は有効なパターンが含まれていません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchpattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが見つからないか無効です (たとえば、上にある、マップされていないドライブ)。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。       または、ネットワーク エラーが発生します。"
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  id: GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したパス内のすべてのファイルとサブディレクトリ名を返します。"
  remarks: "返されるファイルとディレクトリ名の順序は保証されません。使用して、<xref:System.Array.Sort%2A>メソッドの特定の並べ替え順序が必要な場合</xref:System.Array.Sort%2A>。       <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>と<xref:System.IO.Directory.GetFileSystemEntries%2A>メソッドが次のように異なります: を使用すると<xref:System.IO.Directory.EnumerateFileSystemEntries%2A>、コレクション全体が返される前に、エントリのコレクションを列挙することができます使用すると<xref:System.IO.Directory.GetFileSystemEntries%2A>、配列にアクセスする前に返されるエントリの配列全体を待つ必要があります。</xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> </xref:System.IO.Directory.GetFileSystemEntries%2A> </xref:System.IO.Directory.EnumerateFileSystemEntries%2A> 。 そのためとを扱う多くのファイルとディレクトリ、<xref:System.IO.Directory.EnumerateFiles%2A>効率的であることができます</xref:System.IO.Directory.EnumerateFiles%2A>。       このメソッドは同じ<xref:System.IO.Directory.GetFileSystemEntries%2A>アスタリスク (*)、検索パターンと指定したとします</xref:System.IO.Directory.GetFileSystemEntries%2A>。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files and subdirectories in a user-specified location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#1](~/add/codesnippet/csharp/m-system.io.directory.ge_4_1.cs)]\n [!code-vb[System.IO.Directory#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_4_1.vb)]\n [!code-cpp[System.IO.Directory#1](~/add/codesnippet/cpp/m-system.io.directory.ge_4_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    return:
      type: System.String[]
      description: "指定したディレクトリ内ファイルとサブディレクトリの名前の配列。 またはファイルやサブディレクトリが見つからない場合は空の配列。"
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する<xref:System.IO.Path.GetInvalidPathChars*>です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  id: GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたパスにファイル名とディレクトリ名を検索に一致するパターンの配列を返します。"
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example uses the GetFileSystemEntries method to fill an array of strings with the names of all files matching a user-specified filter in a specific location and prints each string in the array to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#2](~/add/codesnippet/csharp/m-system.io.directory.ge_8_1.cs)]\n [!code-vb[System.IO.Directory#2](~/add/codesnippet/visualbasic/m-system.io.directory.ge_8_1.vb)]\n [!code-cpp[System.IO.Directory#2](~/add/codesnippet/cpp/m-system.io.directory.ge_8_1.cpp)]"
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "ファイルおよびディレクトリの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    return:
      type: System.String[]
      description: "ファイル名と、指定した検索条件に一致するディレクトリ名の配列。 またはファイルやディレクトリが見つからない場合は空の配列。"
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。       - または -<code>searchPattern</code>は有効なパターンが含まれていません。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>or <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  id: GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "オプションでサブディレクトリを検索およびすべてのファイル名とパスでは、指定した検索パターンに一致するディレクトリ名の配列を返します。"
  remarks: "The order of the returned file and directory names is not guaranteed; use the <xref:System.Array.Sort%2A> method if a specific sort order is required.  \n  \n `searchPattern` can be a combination of literal and wildcard characters, but doesn't support regular expressions. The following wildcard specifiers are permitted in `searchPattern`.  \n  \n|Wildcard specifier|Matches|  \n|------------------------|-------------|  \n|* (asterisk)|Zero or more characters in that position.|  \n|? (question mark)|Zero or one character in that position.|  \n  \n Characters other than the wildcard are literal characters. For example, the `searchPattern` string \"*t\" searches for all names in `path` ending with the letter \"t\". The `searchPattern` string \"s\\*\" searches for all names in `path` beginning with the letter \"s\".  \n  \n `searchPattern` cannot end in two periods (\"..\") or contain two periods (\"..\") followed by <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, nor can it contain any invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars%2A> method.  \n  \n> [!NOTE]\n>  When you use the asterisk wildcard character in a `searchPattern` such as \"*.txt\", the number of characters in the specified extension affects the search as follows:  \n>   \n>  -   If the specified extension is exactly three characters long, the method returns files with extensions that begin with the specified extension. For example, \"*.xls\" returns both \"book.xls\" and \"book.xlsx\".  \n> -   In all other cases, the method returns files that exactly match the specified extension. For example, \"*.ai\" returns \"file.ai\" but not \"file.aif\".  \n>   \n>  When you use the question mark wildcard character, this method returns only files that match the specified file extension. For example, given two files, \"file1.txt\" and \"file1.txtother\", in a directory, a search pattern of \"file?.txt\" returns just the first file, whereas a search pattern of \"file*.txt\" returns both files.  \n  \n The <xref:System.IO.Directory.EnumerateFileSystemEntries%2A> and <xref:System.IO.Directory.GetFileSystemEntries%2A> methods differ as follows: When you use <xref:System.IO.Directory.EnumerateFileSystemEntries%2A>, you can start enumerating the collection of entries before the whole collection is returned; when you use <xref:System.IO.Directory.GetFileSystemEntries%2A>, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, <xref:System.IO.Directory.EnumerateFiles%2A> can be more efficient.  \n  \n You can specify relative path information with the `path` parameter. Relative path information is interpreted as relative to the current working directory, which you can determine by using the <xref:System.IO.Directory.GetCurrentDirectory%2A> method."
  syntax:
    content: public static string[] GetFileSystemEntries (string path, string searchPattern, System.IO.SearchOption searchOption);
    parameters:
    - id: path
      type: System.String
      description: "検索するディレクトリへの相対パスまたは絶対パス。 この文字列は区別されません。"
    - id: searchPattern
      type: System.String
      description: "ファイルおよびディレクトリの名前と照合する検索文字列`path`です。  このパラメーターは有効なリテラル パスとワイルドカードの組み合わせを含めることができます (* と?) 文字 (「解説」を参照してください) が正規表現をサポートしていますいません。"
    - id: searchOption
      type: System.IO.SearchOption
      description: "検索操作が現在のディレクトリのみを含める必要がありますか、すべてのサブディレクトリを含める必要があるかどうかを指定する列挙値の&1; つ。       既定値は<xref href=&quot;System.IO.SearchOption&quot;></xref>です。"
    return:
      type: System.String[]
      description: "ファイル名とファイルやディレクトリの場合は、指定した検索条件、または空の配列を一致するディレクトリ名が検出されたファイルの配列。"
  overload: System.IO.Directory.GetFileSystemEntries*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path </code>is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <xref:System.IO.Path.GetInvalidPathChars*> method.  \n  \n \\- or -  \n  \n <code>searchPattern</code> does not contain a valid pattern."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>searchPattern</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>searchOption</code>有効ではありません<xref href=&quot;System.IO.SearchOption&quot;></xref>値。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code>path</code>マップされていないドライブを参照するなど、正しくありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<code>path</code>ファイル名です。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、または結合は、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  id: GetLastAccessTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "日付と時刻を返します、指定したファイルまたはディレクトリに最後にアクセスします。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       このメソッドが<xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>。</xref:System.IO.File.GetLastAccessTime%2A?displayProperty=fullName>と同じです。       ディレクトリが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC) では、現地時刻に調整されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use `GetLastAccessTime`.  \n  \n [!code-cpp[Dir_GetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.ge_6_1.cpp)]\n [!code-vb[Dir_GetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_6_1.vb)]\n [!code-cs[Dir_GetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.ge_6_1.cs)]"
  syntax:
    content: public static DateTime GetLastAccessTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはアクセス日時情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "構造体は、日付に設定され、指定したファイルまたはディレクトリに最後にアクセスします。 この値は現地時刻で表示します。"
  overload: System.IO.Directory.GetLastAccessTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code> path </code>パラメーターは、形式が無効です。"
  platform:
  - net462
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  id: GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を世界協定時刻 (UTC) 形式で返します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       ディレクトリが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC)。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_9_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_9_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_9_1.vb)]"
  syntax:
    content: public static DateTime GetLastAccessTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはアクセス日時情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "構造体は、日付に設定され、指定したファイルまたはディレクトリに最後にアクセスします。 この値は UTC 時刻で表現します。"
  overload: System.IO.Directory.GetLastAccessTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code> path </code>パラメーターは、形式が無効です。"
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  id: GetLastWriteTime(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "日付と時刻を返します、指定したファイルまたはディレクトリに最後に書き込んだです。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       ディレクトリが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC) では、現地時刻に調整されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use `GetLastWriteTime`.  \n  \n [!code-cs[Dir_GetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.ge_14_1.cs)]\n [!code-cpp[Dir_GetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.ge_14_1.cpp)]\n [!code-vb[Dir_GetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_14_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTime (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたは変更の日付と時刻の情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "構造体は、日付に設定され、指定したファイルまたはディレクトリに、最後に書き込んだです。 この値は現地時刻で表示します。"
  overload: System.IO.Directory.GetLastWriteTime*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  platform:
  - net462
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  id: GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルまたはディレクトリに最後に書き込んだ世界協定時刻 (UTC) 形式で日付と時刻を返します。"
  remarks: "> [!NOTE]> 値を持つが継続的に更新されない、オペレーティング システムでネイティブ関数を使用しているために、このメソッドは、不正確な値を返す可能性があります。       ディレクトリが記述されている場合、`path`パラメーターが存在しないか、このメソッドは、西暦 1601 年 1 月 1 日深夜 12時 00分を返します。 (西暦)世界協定時刻 (UTC)。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.ge_2_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.ge_2_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.ge_2_1.vb)]"
  syntax:
    content: public static DateTime GetLastWriteTimeUtc (string path);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたは変更の日付と時刻の情報を取得する対象のディレクトリ。"
    return:
      type: System.DateTime
      description: "構造体は、日付に設定され、指定したファイルまたはディレクトリに、最後に書き込んだです。 この値は UTC 時刻で表現します。"
  overload: System.IO.Directory.GetLastWriteTimeUtc*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  platform:
  - net462
- uid: System.IO.Directory.GetLogicalDrives
  id: GetLogicalDrives
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "フォームでは、このコンピューター上の論理ドライブの名前を取得&quot;&lt;ドライブ文字&gt;:\\&quot;です。"
  remarks: "GetLogicalDrives は、フロッピー ドライブは、任意の光学式ドライブなど、特定のコンピューターにアクセス可能なドライブのすべてを返します。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example uses the GetLogicalDrives method to assign the name of each drive on the calling computer to an array of strings. Each member of this string array is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#3](~/add/codesnippet/csharp/m-system.io.directory.ge_3_1.cs)]\n [!code-vb[System.IO.Directory#3](~/add/codesnippet/visualbasic/m-system.io.directory.ge_3_1.vb)]\n [!code-cpp[System.IO.Directory#3](~/add/codesnippet/cpp/m-system.io.directory.ge_3_1.cpp)]"
  syntax:
    content: public static string[] GetLogicalDrives ();
    parameters: []
    return:
      type: System.String[]
      description: "このコンピューターの論理ドライブ。"
  overload: System.IO.Directory.GetLogicalDrives*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました (ディスク エラーなど)。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  platform:
  - net462
- uid: System.IO.Directory.GetParent(System.String)
  id: GetParent(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "絶対と相対パスの両方を含む、指定したパスの親ディレクトリを取得します。"
  remarks: "The `path` parameter is permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the `path` parameter before getting the directory.  \n  \n The string returned by this method consists of all characters in the path up to, but not including, the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. For example, passing the path \"C:\\Directory\\SubDirectory\\test.txt\" to GetParent returns \"C:\\Directory\\SubDirectory\". Passing \"C:\\Directory\\SubDirectory\" returns \"C:\\Directory\". However, passing \"C:\\Directory\\SubDirectory\\\\\" returns \"C:\\Directory\\SubDirectory\", because the ending directory separator is after \"SubDirectory\".  \n  \n The `path` parameter is not case-sensitive.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to use the GetParent method to retrieve the parent directory of a user-specified location, \"path\". The value returned by the GetParent method is then printed to the console. The example is configured to catch all errors common to this method.  \n  \n [!code-cs[System.IO.Directory#4](~/add/codesnippet/csharp/m-system.io.directory.ge_5_1.cs)]\n [!code-vb[System.IO.Directory#4](~/add/codesnippet/visualbasic/m-system.io.directory.ge_5_1.vb)]\n [!code-cpp[System.IO.Directory#4](~/add/codesnippet/cpp/m-system.io.directory.ge_5_1.cpp)]"
  syntax:
    content: public static System.IO.DirectoryInfo GetParent (string path);
    parameters:
    - id: path
      type: System.String
      description: "親ディレクトリを取得する対象のパス。"
    return:
      type: System.IO.DirectoryInfo
      description: "親ディレクトリ。 または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合<code> path </code> UNC サーバーまたは共有名のルートを含む、ルート ディレクトリです。"
  overload: System.IO.Directory.GetParent*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "指定されたディレクトリ<code> path </code>は読み取り専用です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  platform:
  - net462
- uid: System.IO.Directory.Move(System.String,System.String)
  id: Move(System.String,System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ファイルまたはディレクトリとその内容を新しい場所に移動します。"
  remarks: "This method creates a new directory with the name specified by `destDirName` and moves the contents of `sourceDirName` to the newly created destination directory. If you try to move a directory to a directory that already exists, an <xref:System.IO.IOException> will occur. For example, an exception will occur if you try to move c:\\mydir to c:\\public, and c:\\public already exists. Alternatively, you could specify \"c:\\\\\\public\\\\\\mydir\" as the `destDirName` parameter, provided that \"mydir\" does not exist under \"c:\\\\\\public\", or specify a new directory name such as \"c:\\\\\\newdir\".  \n  \n The `sourceDirName` and `destDirName` arguments are permitted to specify relative or absolute path information. Relative path information is interpreted as relative to the current working directory. To obtain the current working directory, see <xref:System.IO.Directory.GetCurrentDirectory%2A>.  \n  \n Trailing spaces are removed from the end of the path parameters before moving the directory.  \n  \n For a list of common I/O tasks, see [Common I/O Tasks](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example demonstrates how to move a directory and all its files to a new directory. The original directory no longer exists after it has been moved.  \n  \n [!code-vb[System.IO.Directory#14](~/add/codesnippet/visualbasic/m-system.io.directory.mo_1.vb)]\n [!code-cs[System.IO.Directory#14](~/add/codesnippet/csharp/m-system.io.directory.mo_1.cs)]"
  syntax:
    content: public static void Move (string sourceDirName, string destDirName);
    parameters:
    - id: sourceDirName
      type: System.String
      description: "ファイルまたは移動するディレクトリのパス。"
    - id: destDirName
      type: System.String
      description: "新しい場所へのパス`sourceDirName`です。 場合`sourceDirName`し、ファイルは、`destDirName`ファイル名である必要があります。"
  overload: System.IO.Directory.Move*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "別のボリュームにディレクトリを移動しようとしました。       - または - <code> destDirName </code>既に存在します。       - または -、 <code> sourceDirName </code>と<code> destDirName </code>パラメーターが同じファイルまたはディレクトリを参照してください。       または、ディレクトリまたはその中のファイルが別のプロセスによって使用されています。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceDirName</code>または<code>destDirName</code>長さ&0; の文字列は、空白しか含んでいないか&1; つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceDirName</code>or <code>destDirName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "によって指定されたパス<code> sourceDirName </code>が正しくありません (たとえば、上にある、マップされていないドライブ)。"
  platform:
  - net462
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  id: SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "示すアクセス制御リスト (ACL) エントリを適用する<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>オブジェクトを指定したディレクトリにします。"
  remarks: "SetAccessControl メソッドは、継承されない ACL リストを表すファイルへのアクセス制御リスト (ACL) エントリを適用します。      > [!CAUTION] >、ACL に指定された、`directorySecurity`パラメーターは、ディレクトリの既存の ACL を置き換えます。 新しいユーザーのアクセス許可を追加するには、<xref:System.IO.Directory.GetAccessControl%2A>既存の ACL を取得し、それを変更する方法</xref:System.IO.Directory.GetAccessControl%2A>を使用します。       ACL には、個人、グループ、または権限がない、指定したファイルまたはディレクトリの特定のアクションをユーザーがについて説明します。 詳細については、次を参照してください。[する方法: 追加または削除するアクセス制御リスト エントリ](~/add/includes/ajax-current-ext-md.md)です。       SetAccessControl メソッドにのみが引き続き発生する<xref:System.Security.AccessControl.DirectorySecurity>オブジェクトがオブジェクトの作成後に変更されました</xref:System.Security.AccessControl.DirectorySecurity>。  場合、<xref:System.Security.AccessControl.DirectorySecurity>オブジェクトが変更されていない、ファイルに永続化はできません</xref:System.Security.AccessControl.DirectorySecurity>。  したがって、取得することはありません、 <xref:System.Security.AccessControl.DirectorySecurity>1 つのファイルからオブジェクトを別のファイルを同じオブジェクトを再適用します</xref:System.Security.AccessControl.DirectorySecurity>。       ACL の情報を別の 1 つのファイルにコピーする: 1。  使用して、<xref:System.IO.Directory.GetAccessControl%2A>を取得する方法、<xref:System.Security.AccessControl.DirectorySecurity>ソース ファイルからのオブジェクト</xref:System.Security.AccessControl.DirectorySecurity></xref:System.IO.Directory.GetAccessControl%2A>。      2.  新しい<xref:System.Security.AccessControl.DirectorySecurity>先のファイル オブジェクト</xref:System.Security.AccessControl.DirectorySecurity>。      3.  使用して、<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>または<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>メソッドのソースの<xref:System.Security.AccessControl.DirectorySecurity>ACL 情報を取得するオブジェクト</xref:System.Security.AccessControl.DirectorySecurity></xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A></xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm%2A>。      4.  使用して、<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>または<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>に情報をコピーする方法は、先には、手順 3. で取得<xref:System.Security.AccessControl.DirectorySecurity>オブジェクト</xref:System.Security.AccessControl.DirectorySecurity></xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A></xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm%2A>。      5.  出力先を設定<xref:System.Security.AccessControl.DirectorySecurity>SetAccessControl メソッドを使用して変換先ファイルへのオブジェクト</xref:System.Security.AccessControl.DirectorySecurity>。       環境では NTFS、<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>場合は、ユーザーがあるユーザーに付与されます<xref:System.Security.AccessControl.FileSystemRights>親フォルダーに対する権限</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。 拒否する<xref:System.Security.AccessControl.FileSystemRights>と<xref:System.Security.AccessControl.FileSystemRights>、拒否<xref:System.Security.AccessControl.FileSystemRights>親ディレクトリにします</xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights></xref:System.Security.AccessControl.FileSystemRights>。"
  example:
  - "The following example uses the <xref:System.IO.Directory.GetAccessControl%2A> and the SetAccessControl methods to add an access control list (ACL) entry and then remove an ACL entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/57b88d80-60eb-4344-b644-_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/57b88d80-60eb-4344-b644-_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/57b88d80-60eb-4344-b644-_1.vb)]"
  syntax:
    content: public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);
    parameters:
    - id: path
      type: System.String
      description: "追加またはからのアクセス制御リスト (ACL) エントリを削除するディレクトリ。"
    - id: directorySecurity
      type: System.Security.AccessControl.DirectorySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;> </xref>によって記述されるディレクトリに適用する ACL エントリを記述するオブジェクト、`path`のパラメーターです。"
  overload: System.IO.Directory.SetAccessControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>directorySecurity</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "ディレクトリが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> path </code>が無効です。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "現在のプロセスで指定されたディレクトリにアクセスできない<code> path</code>です。       または、現在のプロセスには、ACL エントリを設定するための十分な特権はありません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムは Windows 2000 以降ではありません。"
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  id: SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルまたはディレクトリの作成日時を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。"
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_4_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_4_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_4_1.vb)]"
  syntax:
    content: public static void SetCreationTime (string path, DateTime creationTime);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはディレクトリの作成日時情報を設定します。"
    - id: creationTime
      type: System.DateTime
      description: "日付と時刻のファイルまたはディレクトリに最後に書き込んだです。 この値は現地時刻で表示します。"
  overload: System.IO.Directory.SetCreationTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  platform:
  - net462
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  id: SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "世界協定時刻 (UTC) 形式で指定したファイルまたはディレクトリの作成の日付と時刻を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはディレクトリの作成日時情報を設定します。"
    - id: creationTimeUtc
      type: System.DateTime
      description: "日付と時刻のディレクトリまたはファイルが作成されました。 この値は現地時刻で表示します。"
  overload: System.IO.Directory.SetCreationTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>creationTime</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  platform:
  - net462
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  id: SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定されたディレクトリをアプリケーションの現在の作業ディレクトリを設定します。"
  remarks: "アプリケーションが終了すると、作業ディレクトリは元の場所 (プロセスが開始されたディレクトリ) に復元されます。       `path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       末尾のスペースがの末尾から削除された、`path`ディレクトリを設定する前にパラメーター。       `path`パラメーター小文字は区別されません。       使用して、ドライブが準備ができているかどうかを確認できます (「a:」フロッピー ディスク ドライブ用)、CD-ROM ドライブの「e:」などにリムーバブル メディア ドライブにディレクトリを設定する場合、<xref:System.IO.DriveInfo.IsReady%2A>プロパティ</xref:System.IO.DriveInfo.IsReady%2A>。"
  example:
  - "The following example illustrates how to set the current directory and display the directory root.  \n  \n [!code-cpp[System.IO.DirectoryRoot#1](~/add/codesnippet/cpp/m-system.io.directory.se_2_1.cpp)]\n [!code-cs[System.IO.DirectoryRoot#1](~/add/codesnippet/csharp/m-system.io.directory.se_2_1.cs)]\n [!code-vb[System.IO.DirectoryRoot#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_2_1.vb)]"
  syntax:
    content: public static void SetCurrentDirectory (string path);
    parameters:
    - id: path
      type: System.String
      description: "現在の作業ディレクトリが設定されるパスです。"
  overload: System.IO.Directory.SetCurrentDirectory*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "I/O エラーが発生しました。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出し元には、アンマネージ コードへのアクセスに必要なアクセス許可がありません。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定されたディレクトリが見つかりませんでした。"
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  id: SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定した日付と時刻を設定ファイルまたはディレクトリに最後にアクセスします。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use `SetLastAccessTime`.  \n  \n [!code-cs[Dir_SetLastAccess#1](~/add/codesnippet/csharp/m-system.io.directory.se_1_1.cs)]\n [!code-cpp[Dir_SetLastAccess#1](~/add/codesnippet/cpp/m-system.io.directory.se_1_1.cpp)]\n [!code-vb[Dir_SetLastAccess#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_1_1.vb)]"
  syntax:
    content: public static void SetLastAccessTime (string path, DateTime lastAccessTime);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはアクセス日時情報を設定する対象のディレクトリ。"
    - id: lastAccessTime
      type: System.DateTime
      description: "オブジェクトにアクセスした日付と時刻の設定に値を含む`path`です。 この値は現地時刻で表示します。"
  overload: System.IO.Directory.SetLastAccessTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTime</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  id: SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定したファイルまたはディレクトリに最後にアクセスした日付と時刻を世界協定時刻 (UTC) 形式で設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_0_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_0_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_0_1.vb)]"
  syntax:
    content: public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "ファイルまたはアクセス日時情報を設定する対象のディレクトリ。"
    - id: lastAccessTimeUtc
      type: System.DateTime
      description: "オブジェクトにアクセスした日付と時刻の設定に値を含む`path`です。 この値は UTC 時刻で表現します。"
  overload: System.IO.Directory.SetLastAccessTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastAccessTimeUtc</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  id: SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ディレクトリに最後に書き込んだ日時に設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example demonstrates how to use `SetLastWriteTime`.  \n  \n [!code-cpp[Dir_SetLastWrite#1](~/add/codesnippet/cpp/m-system.io.directory.se_3_1.cpp)]\n [!code-cs[Dir_SetLastWrite#1](~/add/codesnippet/csharp/m-system.io.directory.se_3_1.cs)]\n [!code-vb[Dir_SetLastWrite#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_3_1.vb)]"
  syntax:
    content: public static void SetLastWriteTime (string path, DateTime lastWriteTime);
    parameters:
    - id: path
      type: System.String
      description: "ディレクトリのパス。"
    - id: lastWriteTime
      type: System.DateTime
      description: "日付と時刻、ディレクトリに最後に書き込んだです。 この値は現地時刻で表示します。"
  overload: System.IO.Directory.SetLastWriteTime*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTime</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  id: SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  langs:
  - csharp
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "ディレクトリに最後に書き込んだ、世界協定時刻 (UTC) 形式で日付と時刻を設定します。"
  remarks: "`path`相対パスまたは絶対パス情報を指定するパラメーターは許可されています。 相対パスの詳細については、現在の作業ディレクトリに対して相対的に解釈されます。 現在の作業ディレクトリを取得するには、 <xref:System.IO.Directory.GetCurrentDirectory%2A>。</xref:System.IO.Directory.GetCurrentDirectory%2A>を参照してください。       `path`パラメーター小文字は区別されません。       共通 I/O タスクの一覧は、次を参照してください。[共通 I/O タスク](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example illustrates the differences in output when using Coordinated Universal Time (UTC) output.  \n  \n [!code-cs[System.IO.UTCExample#1](~/add/codesnippet/csharp/m-system.io.directory.se_5_1.cs)]\n [!code-cpp[System.IO.UTCExample#1](~/add/codesnippet/cpp/m-system.io.directory.se_5_1.cpp)]\n [!code-vb[System.IO.UTCExample#1](~/add/codesnippet/visualbasic/m-system.io.directory.se_5_1.vb)]"
  syntax:
    content: public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);
    parameters:
    - id: path
      type: System.String
      description: "ディレクトリのパス。"
    - id: lastWriteTimeUtc
      type: System.DateTime
      description: "日付と時刻、ディレクトリに最後に書き込んだです。 この値は UTC 時刻で表現します。"
  overload: System.IO.Directory.SetLastWriteTimeUtc*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "指定されたパスが見つかりませんでした。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>長さ&0; の文字列か、空白のみが含まれています、1 つまたは複数の無効な文字が含まれています。 無効な文字を照会する、<xref:System.IO.Path.GetInvalidPathChars*>メソッドです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定したパス、ファイル名、またはその両方に、システム定義の最大長を超えています。 たとえば、Windows ベースのプラットフォームでは、パスは 248 文字未満である必要があり、ファイル名は 260 文字未満にする必要があります。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "呼び出し元には、必要なアクセス許可がありません。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "現在のオペレーティング システムが Windows NT 以降です。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>lastWriteTimeUtc</code>日付またはこの操作に許可される時刻の範囲外の値を指定します。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.Directory.CreateDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String)
  nameWithType: Directory.CreateDirectory(String)
  fullName: System.IO.Directory.CreateDirectory(String)
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory(String,DirectorySecurity)
  nameWithType: Directory.CreateDirectory(String,DirectorySecurity)
  fullName: System.IO.Directory.CreateDirectory(String,DirectorySecurity)
- uid: System.Security.AccessControl.DirectorySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
- uid: System.IO.Directory.Delete(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String)
  nameWithType: Directory.Delete(String)
  fullName: System.IO.Directory.Delete(String)
- uid: System.IO.Directory.Delete(System.String,System.Boolean)
  parent: System.IO.Directory
  isExternal: false
  name: Delete(String,Boolean)
  nameWithType: Directory.Delete(String,Boolean)
  fullName: System.IO.Directory.Delete(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Directory.EnumerateDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String)
  nameWithType: Directory.EnumerateDirectories(String)
  fullName: System.IO.Directory.EnumerateDirectories(String)
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String)
  nameWithType: Directory.EnumerateDirectories(String,String)
  fullName: System.IO.Directory.EnumerateDirectories(String,String)
- uid: System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories(String,String,SearchOption)
  nameWithType: Directory.EnumerateDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateDirectories(String,String,SearchOption)
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  name: SearchOption
  nameWithType: SearchOption
  fullName: System.IO.SearchOption
- uid: System.IO.Directory.EnumerateFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String)
  nameWithType: Directory.EnumerateFiles(String)
  fullName: System.IO.Directory.EnumerateFiles(String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String)
  nameWithType: Directory.EnumerateFiles(String,String)
  fullName: System.IO.Directory.EnumerateFiles(String,String)
- uid: System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles(String,String,SearchOption)
  nameWithType: Directory.EnumerateFiles(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFiles(String,String,SearchOption)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String)
  nameWithType: Directory.EnumerateFileSystemEntries(String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String)
- uid: System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.EnumerateFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.EnumerateFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.Exists(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Exists(String)
  nameWithType: Directory.Exists(String)
  fullName: System.IO.Directory.Exists(String)
- uid: System.IO.Directory.GetAccessControl(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String)
  nameWithType: Directory.GetAccessControl(String)
  fullName: System.IO.Directory.GetAccessControl(String)
- uid: System.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl(String,AccessControlSections)
  nameWithType: Directory.GetAccessControl(String,AccessControlSections)
  fullName: System.IO.Directory.GetAccessControl(String,AccessControlSections)
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.IO.Directory.GetCreationTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime(String)
  nameWithType: Directory.GetCreationTime(String)
  fullName: System.IO.Directory.GetCreationTime(String)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IO.Directory.GetCreationTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc(String)
  nameWithType: Directory.GetCreationTimeUtc(String)
  fullName: System.IO.Directory.GetCreationTimeUtc(String)
- uid: System.IO.Directory.GetCurrentDirectory
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory()
  nameWithType: Directory.GetCurrentDirectory()
  fullName: System.IO.Directory.GetCurrentDirectory()
- uid: System.IO.Directory.GetDirectories(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String)
  nameWithType: Directory.GetDirectories(String)
  fullName: System.IO.Directory.GetDirectories(String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Directory.GetDirectories(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String)
  nameWithType: Directory.GetDirectories(String,String)
  fullName: System.IO.Directory.GetDirectories(String,String)
- uid: System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories(String,String,SearchOption)
  nameWithType: Directory.GetDirectories(String,String,SearchOption)
  fullName: System.IO.Directory.GetDirectories(String,String,SearchOption)
- uid: System.IO.Directory.GetDirectoryRoot(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot(String)
  nameWithType: Directory.GetDirectoryRoot(String)
  fullName: System.IO.Directory.GetDirectoryRoot(String)
- uid: System.IO.Directory.GetFiles(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String)
  nameWithType: Directory.GetFiles(String)
  fullName: System.IO.Directory.GetFiles(String)
- uid: System.IO.Directory.GetFiles(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String)
  nameWithType: Directory.GetFiles(String,String)
  fullName: System.IO.Directory.GetFiles(String,String)
- uid: System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles(String,String,SearchOption)
  nameWithType: Directory.GetFiles(String,String,SearchOption)
  fullName: System.IO.Directory.GetFiles(String,String,SearchOption)
- uid: System.IO.Directory.GetFileSystemEntries(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String)
  nameWithType: Directory.GetFileSystemEntries(String)
  fullName: System.IO.Directory.GetFileSystemEntries(String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String)
  nameWithType: Directory.GetFileSystemEntries(String,String)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String)
- uid: System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries(String,String,SearchOption)
  nameWithType: Directory.GetFileSystemEntries(String,String,SearchOption)
  fullName: System.IO.Directory.GetFileSystemEntries(String,String,SearchOption)
- uid: System.IO.Directory.GetLastAccessTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime(String)
  nameWithType: Directory.GetLastAccessTime(String)
  fullName: System.IO.Directory.GetLastAccessTime(String)
- uid: System.IO.Directory.GetLastAccessTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc(String)
  nameWithType: Directory.GetLastAccessTimeUtc(String)
  fullName: System.IO.Directory.GetLastAccessTimeUtc(String)
- uid: System.IO.Directory.GetLastWriteTime(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime(String)
  nameWithType: Directory.GetLastWriteTime(String)
  fullName: System.IO.Directory.GetLastWriteTime(String)
- uid: System.IO.Directory.GetLastWriteTimeUtc(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc(String)
  nameWithType: Directory.GetLastWriteTimeUtc(String)
  fullName: System.IO.Directory.GetLastWriteTimeUtc(String)
- uid: System.IO.Directory.GetLogicalDrives
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives()
  nameWithType: Directory.GetLogicalDrives()
  fullName: System.IO.Directory.GetLogicalDrives()
- uid: System.IO.Directory.GetParent(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: GetParent(String)
  nameWithType: Directory.GetParent(String)
  fullName: System.IO.Directory.GetParent(String)
- uid: System.IO.Directory.Move(System.String,System.String)
  parent: System.IO.Directory
  isExternal: false
  name: Move(String,String)
  nameWithType: Directory.Move(String,String)
  fullName: System.IO.Directory.Move(String,String)
- uid: System.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl(String,DirectorySecurity)
  nameWithType: Directory.SetAccessControl(String,DirectorySecurity)
  fullName: System.IO.Directory.SetAccessControl(String,DirectorySecurity)
- uid: System.IO.Directory.SetCreationTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime(String,DateTime)
  nameWithType: Directory.SetCreationTime(String,DateTime)
  fullName: System.IO.Directory.SetCreationTime(String,DateTime)
- uid: System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc(String,DateTime)
  nameWithType: Directory.SetCreationTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetCreationTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetCurrentDirectory(System.String)
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory(String)
  nameWithType: Directory.SetCurrentDirectory(String)
  fullName: System.IO.Directory.SetCurrentDirectory(String)
- uid: System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime(String,DateTime)
  nameWithType: Directory.SetLastAccessTime(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTime(String,DateTime)
- uid: System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastAccessTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastAccessTimeUtc(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime(String,DateTime)
  nameWithType: Directory.SetLastWriteTime(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTime(String,DateTime)
- uid: System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc(String,DateTime)
  nameWithType: Directory.SetLastWriteTimeUtc(String,DateTime)
  fullName: System.IO.Directory.SetLastWriteTimeUtc(String,DateTime)
- uid: System.IO.Directory.CreateDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: CreateDirectory
  nameWithType: Directory.CreateDirectory
- uid: System.IO.Directory.Delete*
  parent: System.IO.Directory
  isExternal: false
  name: Delete
  nameWithType: Directory.Delete
- uid: System.IO.Directory.EnumerateDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateDirectories
  nameWithType: Directory.EnumerateDirectories
- uid: System.IO.Directory.EnumerateFiles*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFiles
  nameWithType: Directory.EnumerateFiles
- uid: System.IO.Directory.EnumerateFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: EnumerateFileSystemEntries
  nameWithType: Directory.EnumerateFileSystemEntries
- uid: System.IO.Directory.Exists*
  parent: System.IO.Directory
  isExternal: false
  name: Exists
  nameWithType: Directory.Exists
- uid: System.IO.Directory.GetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: GetAccessControl
  nameWithType: Directory.GetAccessControl
- uid: System.IO.Directory.GetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTime
  nameWithType: Directory.GetCreationTime
- uid: System.IO.Directory.GetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetCreationTimeUtc
  nameWithType: Directory.GetCreationTimeUtc
- uid: System.IO.Directory.GetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: GetCurrentDirectory
  nameWithType: Directory.GetCurrentDirectory
- uid: System.IO.Directory.GetDirectories*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectories
  nameWithType: Directory.GetDirectories
- uid: System.IO.Directory.GetDirectoryRoot*
  parent: System.IO.Directory
  isExternal: false
  name: GetDirectoryRoot
  nameWithType: Directory.GetDirectoryRoot
- uid: System.IO.Directory.GetFiles*
  parent: System.IO.Directory
  isExternal: false
  name: GetFiles
  nameWithType: Directory.GetFiles
- uid: System.IO.Directory.GetFileSystemEntries*
  parent: System.IO.Directory
  isExternal: false
  name: GetFileSystemEntries
  nameWithType: Directory.GetFileSystemEntries
- uid: System.IO.Directory.GetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTime
  nameWithType: Directory.GetLastAccessTime
- uid: System.IO.Directory.GetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastAccessTimeUtc
  nameWithType: Directory.GetLastAccessTimeUtc
- uid: System.IO.Directory.GetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTime
  nameWithType: Directory.GetLastWriteTime
- uid: System.IO.Directory.GetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: GetLastWriteTimeUtc
  nameWithType: Directory.GetLastWriteTimeUtc
- uid: System.IO.Directory.GetLogicalDrives*
  parent: System.IO.Directory
  isExternal: false
  name: GetLogicalDrives
  nameWithType: Directory.GetLogicalDrives
- uid: System.IO.Directory.GetParent*
  parent: System.IO.Directory
  isExternal: false
  name: GetParent
  nameWithType: Directory.GetParent
- uid: System.IO.Directory.Move*
  parent: System.IO.Directory
  isExternal: false
  name: Move
  nameWithType: Directory.Move
- uid: System.IO.Directory.SetAccessControl*
  parent: System.IO.Directory
  isExternal: false
  name: SetAccessControl
  nameWithType: Directory.SetAccessControl
- uid: System.IO.Directory.SetCreationTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTime
  nameWithType: Directory.SetCreationTime
- uid: System.IO.Directory.SetCreationTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetCreationTimeUtc
  nameWithType: Directory.SetCreationTimeUtc
- uid: System.IO.Directory.SetCurrentDirectory*
  parent: System.IO.Directory
  isExternal: false
  name: SetCurrentDirectory
  nameWithType: Directory.SetCurrentDirectory
- uid: System.IO.Directory.SetLastAccessTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTime
  nameWithType: Directory.SetLastAccessTime
- uid: System.IO.Directory.SetLastAccessTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastAccessTimeUtc
  nameWithType: Directory.SetLastAccessTimeUtc
- uid: System.IO.Directory.SetLastWriteTime*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTime
  nameWithType: Directory.SetLastWriteTime
- uid: System.IO.Directory.SetLastWriteTimeUtc*
  parent: System.IO.Directory
  isExternal: false
  name: SetLastWriteTimeUtc
  nameWithType: Directory.SetLastWriteTimeUtc
