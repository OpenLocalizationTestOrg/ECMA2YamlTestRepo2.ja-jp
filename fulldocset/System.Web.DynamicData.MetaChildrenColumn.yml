### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.MetaChildrenColumn
  id: MetaChildrenColumn
  children:
  - System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  - System.Web.DynamicData.MetaChildrenColumn.ChildTable
  - System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  - System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  - System.Web.DynamicData.MetaChildrenColumn.Initialize
  - System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  langs:
  - csharp
  name: MetaChildrenColumn
  nameWithType: MetaChildrenColumn
  fullName: System.Web.DynamicData.MetaChildrenColumn
  type: Class
  summary: "一対多の関係を表すデータベース フィールドを表します。"
  remarks: "ASP.NET 動的データのアプリケーションでは、MetaChildrenColumn クラスは、一対多のリレーションシップまたは親と子の関係を示すデータベースのフィールドを表します。       MetaChildrenColumn クラスでは、一対多リレーションシップの親テーブル内のフィールドを表します。 ただしを使用して子テーブル オブジェクトにアクセスすることができます、<xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A>プロパティ</xref:System.Web.DynamicData.MetaChildrenColumn.ChildTable%2A>。 使用して、子テーブルの外部キー フィールドを取得することも、<xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A>プロパティ</xref:System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable%2A>。"
  syntax:
    content: 'public class MetaChildrenColumn : System.Web.DynamicData.MetaColumn'
  inheritance:
  - System.Object
  - System.Web.DynamicData.MetaColumn
  implements: []
  inheritedMembers:
  - System.Web.DynamicData.MetaColumn.AllowInitialValue
  - System.Web.DynamicData.MetaColumn.ApplyFormatInEditMode
  - System.Web.DynamicData.MetaColumn.Attributes
  - System.Web.DynamicData.MetaColumn.BuildAttributeCollection
  - System.Web.DynamicData.MetaColumn.ColumnType
  - System.Web.DynamicData.MetaColumn.ConvertEmptyStringToNull
  - System.Web.DynamicData.MetaColumn.DataFormatString
  - System.Web.DynamicData.MetaColumn.DataTypeAttribute
  - System.Web.DynamicData.MetaColumn.DefaultValue
  - System.Web.DynamicData.MetaColumn.Description
  - System.Web.DynamicData.MetaColumn.DisplayName
  - System.Web.DynamicData.MetaColumn.EntityTypeProperty
  - System.Web.DynamicData.MetaColumn.FilterUIHint
  - System.Web.DynamicData.MetaColumn.HtmlEncode
  - System.Web.DynamicData.MetaColumn.IsBinaryData
  - System.Web.DynamicData.MetaColumn.IsCustomProperty
  - System.Web.DynamicData.MetaColumn.IsFloatingPoint
  - System.Web.DynamicData.MetaColumn.IsForeignKeyComponent
  - System.Web.DynamicData.MetaColumn.IsGenerated
  - System.Web.DynamicData.MetaColumn.IsInteger
  - System.Web.DynamicData.MetaColumn.IsLongString
  - System.Web.DynamicData.MetaColumn.IsPrimaryKey
  - System.Web.DynamicData.MetaColumn.IsReadOnly
  - System.Web.DynamicData.MetaColumn.IsRequired
  - System.Web.DynamicData.MetaColumn.IsString
  - System.Web.DynamicData.MetaColumn.MaxLength
  - System.Web.DynamicData.MetaColumn.Model
  - System.Web.DynamicData.MetaColumn.Name
  - System.Web.DynamicData.MetaColumn.NullDisplayText
  - System.Web.DynamicData.MetaColumn.Prompt
  - System.Web.DynamicData.MetaColumn.Provider
  - System.Web.DynamicData.MetaColumn.RequiredErrorMessage
  - System.Web.DynamicData.MetaColumn.ResetMetadata
  - System.Web.DynamicData.MetaColumn.Scaffold
  - System.Web.DynamicData.MetaColumn.ShortDisplayName
  - System.Web.DynamicData.MetaColumn.SortExpression
  - System.Web.DynamicData.MetaColumn.Table
  - System.Web.DynamicData.MetaColumn.ToString
  - System.Web.DynamicData.MetaColumn.TypeCode
  - System.Web.DynamicData.MetaColumn.UIHint
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  id: '#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)'
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: MetaChildrenColumn(MetaTable,ColumnProvider)
  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.DynamicData.MetaChildrenColumn&quot;> </xref>クラスです。"
  syntax:
    content: public MetaChildrenColumn (System.Web.DynamicData.MetaTable table, System.Web.DynamicData.ModelProviders.ColumnProvider entityMember);
    parameters:
    - id: table
      type: System.Web.DynamicData.MetaTable
      description: "メタデータ テーブルです。"
    - id: entityMember
      type: System.Web.DynamicData.ModelProviders.ColumnProvider
      description: "列のプロバイダー。"
  overload: System.Web.DynamicData.MetaChildrenColumn.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  id: ChildTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "一対多リレーションシップの子テーブルを表すオブジェクトを取得します。"
  remarks: "ChildTable プロパティを使用して、一対多リレーションシップの子テーブルを表すオブジェクトを取得します。 使用して、親テーブルにアクセスすることができます、<xref:System.Web.DynamicData.MetaColumn.Table%2A>プロパティ</xref:System.Web.DynamicData.MetaColumn.Table%2A>。"
  syntax:
    content: public System.Web.DynamicData.MetaTable ChildTable { get; }
    return:
      type: System.Web.DynamicData.MetaTable
      description: "一対多リレーションシップの子テーブルを表すオブジェクト。"
  overload: System.Web.DynamicData.MetaChildrenColumn.ChildTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  id: ColumnInOtherTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "子テーブルの外部キー フィールドを表すオブジェクトを取得します。"
  remarks: "ColumnInOtherTable プロパティでは、子テーブル内のフィールドへの参照を取得することができます。"
  syntax:
    content: public System.Web.DynamicData.MetaColumn ColumnInOtherTable { get; }
    return:
      type: System.Web.DynamicData.MetaColumn
      description: "子テーブルの外部キー フィールドを表すオブジェクト。"
  overload: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  id: GetChildrenListPath(System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenListPath(Object)
  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "子テーブルの一覧操作のページのパスを取得します。"
  remarks: "親として指定された行を使用して、子テーブルの一覧操作のページを取得する場合は、GetChildrenListPath メソッドを使用します。 指定された外部キー フィールドの値が含まれている URL にクエリ文字列値を追加することによって、このパスを取得、`row`パラメーター。       呼び出すのと同じでは GetChildrenListPath メソッドを使用して、<xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29>メソッドと受け渡し、<xref:System.Web.DynamicData.PageAction.List%2A>最初のパラメーターとしてアクション</xref:System.Web.DynamicData.PageAction.List%2A></xref:System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath%28System.String%2CSystem.Object%29>。"
  syntax:
    content: public string GetChildrenListPath (object row);
    parameters:
    - id: row
      type: System.Object
      description: "外部キー フィールドを含む行です。"
    return:
      type: System.String
      description: "子テーブルの一覧操作のページのパス。"
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  id: GetChildrenPath(System.String,System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenPath(String,Object)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "子テーブルの指定されたアクション ページのパスを取得します。"
  remarks: "GetChildrenPath メソッドは、子テーブルの指定されたアクション ページのパスを返します。 返されるパスは、ASP.NET 動的データ アプリケーションに対して定義されているルートに基づいており、親として指定された行があります。 指定された外部キー フィールドの値が含まれている URL にクエリ文字列値を追加することによって、このパスを取得、`row`パラメーター。       場合`row`は`null`、彼の方法は、空の文字列を返します。       定義されている値を使用して、<xref:System.Web.DynamicData.PageAction>のクラス、`action`パラメーター</xref:System.Web.DynamicData.PageAction> 。"
  syntax:
    content: public string GetChildrenPath (string action, object row);
    parameters:
    - id: action
      type: System.String
      description: "ターゲットのアクション。"
    - id: row
      type: System.Object
      description: "外部キー フィールドを含む行です。"
    return:
      type: System.String
      description: "子テーブルの指定されたアクション ページのパス。"
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  id: GetChildrenPath(System.String,System.Object,System.String)
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: GetChildrenPath(String,Object,String)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "子テーブルの指定されたアクション ページのパスを取得します。"
  remarks: "GetChildrenPath メソッドは、子テーブルの指定されたアクション ページのパスを返します。 パスを親として指定された行で指定したパスに基づきます。 指定された外部キー フィールドの値が含まれている URL にクエリ文字列値を追加することによって、このパスを取得、`row`パラメーター。       場合`row`は`null`、このメソッドは、空の文字列を返します。 場合`path`は`null`、GetChildrenPath メソッド ASP.NET 動的データ アプリケーションに対して定義されているルートに基づくパスを返します。       定義されている値を使用して、<xref:System.Web.DynamicData.PageAction>のクラス、`action`パラメーター</xref:System.Web.DynamicData.PageAction> 。"
  syntax:
    content: public string GetChildrenPath (string action, object row, string path);
    parameters:
    - id: action
      type: System.String
      description: "ターゲットのアクション。"
    - id: row
      type: System.Object
      description: "外部キー フィールドを含む行です。"
    - id: path
      type: System.String
      description: "ターゲット ページ。"
    return:
      type: System.String
      description: "子テーブルの指定されたアクション ページのパス。"
  overload: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize
  id: Initialize
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: Initialize()
  nameWithType: MetaChildrenColumn.Initialize()
  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "コンス トラクターが呼び出されたときに使用できない可能性があるデータを初期化します。"
  remarks: "このメソッドは、直接呼び出すことはできません。 初期化をカスタマイズするには、このクラスから派生し、オーバーライドすることができます、、`Initialize`メソッドです。 このメソッドをオーバーライドする場合は、基本コントロールを呼び出す`Initialize`メソッドです。"
  syntax:
    content: protected override void Initialize ();
    parameters: []
  overload: System.Web.DynamicData.MetaChildrenColumn.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  id: IsManyToMany
  parent: System.Web.DynamicData.MetaChildrenColumn
  langs:
  - csharp
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "列の多対多のリレーションシップの状態を示す値を取得します。"
  syntax:
    content: public bool IsManyToMany { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列のリレーションシップは多対多です。 場合、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.DynamicData.MetaColumn
  isExternal: false
  name: System.Web.DynamicData.MetaColumn
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor(System.Web.DynamicData.MetaTable,System.Web.DynamicData.ModelProviders.ColumnProvider)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: MetaChildrenColumn(MetaTable,ColumnProvider)
  nameWithType: MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
  fullName: System.Web.DynamicData.MetaChildrenColumn.MetaChildrenColumn(MetaTable,ColumnProvider)
- uid: System.Web.DynamicData.MetaTable
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaTable
  nameWithType: MetaTable
  fullName: System.Web.DynamicData.MetaTable
- uid: System.Web.DynamicData.ModelProviders.ColumnProvider
  parent: System.Web.DynamicData.ModelProviders
  isExternal: false
  name: ColumnProvider
  nameWithType: ColumnProvider
  fullName: System.Web.DynamicData.ModelProviders.ColumnProvider
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ChildTable
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
  fullName: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenListPath(Object)
  nameWithType: MetaChildrenColumn.GetChildrenListPath(Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath(Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath(String,Object)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object)
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(System.String,System.Object,System.String)
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath(String,Object,String)
  nameWithType: MetaChildrenColumn.GetChildrenPath(String,Object,String)
  fullName: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath(String,Object,String)
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: Initialize()
  nameWithType: MetaChildrenColumn.Initialize()
  fullName: System.Web.DynamicData.MetaChildrenColumn.Initialize()
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
  fullName: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.DynamicData.MetaChildrenColumn.#ctor*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: MetaChildrenColumn
  nameWithType: MetaChildrenColumn.MetaChildrenColumn
- uid: System.Web.DynamicData.MetaChildrenColumn.ChildTable*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ChildTable
  nameWithType: MetaChildrenColumn.ChildTable
- uid: System.Web.DynamicData.MetaChildrenColumn.ColumnInOtherTable*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: ColumnInOtherTable
  nameWithType: MetaChildrenColumn.ColumnInOtherTable
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenListPath*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenListPath
  nameWithType: MetaChildrenColumn.GetChildrenListPath
- uid: System.Web.DynamicData.MetaChildrenColumn.GetChildrenPath*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: GetChildrenPath
  nameWithType: MetaChildrenColumn.GetChildrenPath
- uid: System.Web.DynamicData.MetaChildrenColumn.Initialize*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: Initialize
  nameWithType: MetaChildrenColumn.Initialize
- uid: System.Web.DynamicData.MetaChildrenColumn.IsManyToMany*
  parent: System.Web.DynamicData.MetaChildrenColumn
  isExternal: false
  name: IsManyToMany
  nameWithType: MetaChildrenColumn.IsManyToMany
