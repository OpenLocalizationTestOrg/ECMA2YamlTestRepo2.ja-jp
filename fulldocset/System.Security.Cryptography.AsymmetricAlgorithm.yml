### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  id: AsymmetricAlgorithm
  children:
  - System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Create
  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  langs:
  - csharp
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
  type: Class
  summary: "非対称アルゴリズムのすべての実装が継承する必要があります元となる抽象基本クラスを表します。"
  remarks: "非対称の暗号アルゴリズムとも呼ばれる公開キー アルゴリズム、送信者と受信者の両方が関連するキーのペアを保持することを必要とします。 秘密キーと公開キー。 両方のキーは、エンティティに固有です。 公開キーが利用できるだれこのキーは受信者に送信されるデータをエンコードするために使用されます。 秘密キー保持する必要がプライベート; 受信側でこのキーは、受信者の公開キーを使用してエンコードされたメッセージをデコードに使用されます。 <xref:System.Security.Cryptography.RSACryptoServiceProvider>クラスは、公開キー アルゴリズムの実装</xref:System.Security.Cryptography.RSACryptoServiceProvider>。 公開キー暗号化アルゴリズムとアルゴリズムの詳しい説明、「公開キー暗号化」セクションを参照してください。 [Cryptographic Services](~/add/includes/ajax-current-ext-md.md)です。 厳密名ツール (Sn.exe) を使用して、キーのペアを作成する方法については、次を参照してください。[する方法: 公開/秘密キー ペアを作成する](~/add/includes/ajax-current-ext-md.md)です。       公開キー システムを使用すると、デジタル署名を形成します。 デジタル署名は、データの整合性を保護するために使用されます。 たとえばを公開キー システムを使用して、メッセージのデジタル署名、送信者まずハッシュ関数を適用、メッセージ ダイジェストを作成するためです。 送信者は、送信者の個人用の署名を作成する、送信側の秘密キーで、メッセージ ダイジェストを暗号化します。 メッセージと署名を受信したときに、受信者は、メッセージ ダイジェストを復元する送信者の公開キーを使用して署名を復号化され、送信者が使用されるのと同じハッシュ アルゴリズムを使用してメッセージをハッシュします。 受信者が計算メッセージ ダイジェストには、送信者から受け取ったメッセージ ダイジェストが一致すると、受信側はメッセージが転送中に変更されなかったことを想定できます。 送信者の公開キーは、一般的な知識があるため、署名すべてのユーザーを確認できることに注意してください。 この手法ではメッセージを秘密にすることはできません。メッセージが秘密にするには、その必要がありますも暗号化されます。       .NET Framework には、デジタル署名アルゴリズムを実装する次のクラスが用意されています: <xref:System.Security.Cryptography.DSACryptoServiceProvider>、 <xref:System.Security.Cryptography.RSACryptoServiceProvider>、 <xref:System.Security.Cryptography.ECDsa>(基本クラス)、および<xref:System.Security.Cryptography.ECDsaCng>.</xref:System.Security.Cryptography.ECDsaCng> </xref:System.Security.Cryptography.ECDsa> </xref:System.Security.Cryptography.RSACryptoServiceProvider> </xref:System.Security.Cryptography.DSACryptoServiceProvider>       <xref:System.Security.Cryptography>名前空間の具象クラスを提供する<xref:System.Security.Cryptography.RSA>と<xref:System.Security.Cryptography.DSA>のみ</xref:System.Security.Cryptography.DSA></xref:System.Security.Cryptography.RSA></xref:System.Security.Cryptography>。       RSA アルゴリズムを使用して、暗号化し、XML データの暗号化を解除し、XML デジタル署名を確認する方法については、次の記事を参照してください:-[する方法: 非対称キーで XML 要素を暗号化](~/add/includes/ajax-current-ext-md.md)      -   [する方法: 非対称キーで XML 要素を復号化](~/add/includes/ajax-current-ext-md.md)      -   [する方法: デジタル署名で XML ドキュメントに](~/add/includes/ajax-current-ext-md.md)      -   [する方法: XML ドキュメントのデジタル署名のことを確認](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "The following code example demonstrates how to implement a custom asymmetric algorithm inherited from the AsymmetricAlgorithm class.  An additional class is provided to demonstrate how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/csharp/t-system.security.crypto_0_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/cpp/t-system.security.crypto_0_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#2](~/add/codesnippet/visualbasic/t-system.security.crypto_0_1.vb)]  \n  \n Here's an additional class that demonstrates how to use the custom class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/csharp/t-system.security.crypto_0_2.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/visualbasic/t-system.security.crypto_0_2.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#3](~/add/codesnippet/cpp/t-system.security.crypto_0_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class AsymmetricAlgorithm : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>クラスです。"
  remarks: "抽象クラスのインスタンスを作成することはできません。 アプリケーション コードでは、派生クラスの新しいインスタンスを作成します。 <xref:System.Security.Cryptography.RSACryptoServiceProvider>と<xref:System.Security.Cryptography.DSACryptoServiceProvider>クラスは、現在サポートされている唯一の実装</xref:System.Security.Cryptography.DSACryptoServiceProvider></xref:System.Security.Cryptography.RSACryptoServiceProvider>。"
  syntax:
    content: protected AsymmetricAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "派生クラスの実装が正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>クラスです。"
  remarks: "このメソッドは、単純に、<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>メソッド</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>。       呼び出す`Dispose`により、リソースで使用される、<xref:System.Security.Cryptography.AsymmetricAlgorithm>を他の目的を再割り当てするクラスです</xref:System.Security.Cryptography.AsymmetricAlgorithm>。 詳細については`Dispose`を参照してください[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to call the Clear method to release the resources of the current `customCrypto` object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/csharp/m-system.security.crypto_101_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/visualbasic/m-system.security.crypto_101_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#1](~/add/codesnippet/cpp/m-system.security.crypto_101_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "非対称アルゴリズムを実行するために使用する既定の暗号オブジェクトを作成します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/csharp/m-system.security.crypto_87_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/cpp/m-system.security.crypto_87_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#11](~/add/codesnippet/visualbasic/m-system.security.crypto_87_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "新しい<xref href=&quot;System.Security.Cryptography.RSACryptoServiceProvider&quot;></xref>インスタンス、既定の設定が変更されていない限り、 [ &lt;cryptoClass&gt;要素](../Topic/%3CcryptoClass%3E%20Element.md)です。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "非対称アルゴリズムの指定した実装のインスタンスを作成します。"
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the Create method in an extended class. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/csharp/m-system.security.crypto_118_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/cpp/m-system.security.crypto_118_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#12](~/add/codesnippet/visualbasic/m-system.security.crypto_118_1.vb)]"
  syntax:
    content: public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "使用する非対称アルゴリズムの実装です。 次の表に有効な値を示しています、`algName`パラメーターおよびそれらの割り当て先のアルゴリズムです。       <table><thead><tr><th> パラメーターの値       </th><th> 実装       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref></td></tr><tr><td> RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.RSA       </td><td><xref href=&quot;System.Security.Cryptography.RSA&quot;></xref></td></tr><tr><td> DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> System.Security.Cryptography.DSA       </td><td><xref href=&quot;System.Security.Cryptography.DSA&quot;></xref></td></tr><tr><td> ECDsa       </td><td><xref href=&quot;System.Security.Cryptography.ECDsa&quot;></xref></td></tr><tr><td> ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDsaCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref></td></tr><tr><td> ECDH       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellman       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellman&quot;></xref></td></tr><tr><td> ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng       </td><td><xref href=&quot;System.Security.Cryptography.ECDiffieHellmanCng&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.AsymmetricAlgorithm
      description: "指定した非対称アルゴリズムの実装の新しいインスタンス。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "現在のインスタンスによって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>クラスです。"
  remarks: "呼び出す`Dispose` <xref:System.Security.Cryptography.AsymmetricAlgorithm>.</xref:System.Security.Cryptography.AsymmetricAlgorithm>の使用が終了したときに `Dispose`メソッドによって、<xref:System.Security.Cryptography.AsymmetricAlgorithm>使用不可の状態</xref:System.Security.Cryptography.AsymmetricAlgorithm>。 呼び出した後`Dispose`へのすべての参照を解放する必要があります、<xref:System.Security.Cryptography.AsymmetricAlgorithm>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.Cryptography.AsymmetricAlgorithm>占有されていた</xref:System.Security.Cryptography.AsymmetricAlgorithm></xref:System.Security.Cryptography.AsymmetricAlgorithm>。       詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 常に呼び出し`Dispose`<xref:System.Security.Cryptography.AsymmetricAlgorithm></xref:System.Security.Cryptography.AsymmetricAlgorithm>の最後の参照を解放する前に。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.Cryptography.AsymmetricAlgorithm>オブジェクトの`Finalize`メソッド</xref:System.Security.Cryptography.AsymmetricAlgorithm>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref>クラスし、必要に応じてマネージ リソースも解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび`Finalize`メソッドです。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 `Finalize`呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.Cryptography.AsymmetricAlgorithm>参照。</xref:System.Security.Cryptography.AsymmetricAlgorithm> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、再構築、 <xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;> </xref> XML 文字列からオブジェクト。 それ以外の場合、 <xref:System.NotImplementedException>。</xref:System.NotImplementedException>がスローされます。"
  remarks: ''
  example:
  - "The following code example demonstrates how to implement the FromXmlString method to parse the specified XML string to populate the current <xref:System.Security.Cryptography.CspParameters> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/csharp/m-system.security.crypto_86_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/cpp/m-system.security.crypto_86_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#4](~/add/codesnippet/visualbasic/m-system.security.crypto_86_1.vb)]"
  syntax:
    content: public virtual void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "再構築に使用する XML 文字列の<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、キー交換アルゴリズムの名前を取得します。 それ以外の場合、 <xref:System.NotImplementedException>。</xref:System.NotImplementedException>がスローされます。"
  remarks: ''
  example:
  - "The following code example demonstrates how to override the KeyExchangeAlgorithm property to return the name for the key exchange algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/csharp/p-system.security.crypto_83_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/cpp/p-system.security.crypto_83_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#6](~/add/codesnippet/visualbasic/p-system.security.crypto_83_1.vb)]"
  syntax:
    content: public virtual string KeyExchangeAlgorithm { get; }
    return:
      type: System.String
      description: "キー交換アルゴリズムの名前。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "取得または非対称アルゴリズムで使用されるキー モジュラスのビット単位、サイズを設定します。"
  remarks: "有効なキー サイズが非対称アルゴリズムの特定の実装によって指定されに記載されて、<xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>プロパティ</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>。"
  example:
  - "The following code example demonstrates how to override the KeySize property to verify that it falls within the range identified in the local `keySizes` member variable. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/csharp/p-system.security.crypto_112_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/cpp/p-system.security.crypto_112_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#9](~/add/codesnippet/visualbasic/p-system.security.crypto_112_1.vb)]"
  syntax:
    content: public virtual int KeySize { get; set; }
    return:
      type: System.Int32
      description: "非対称アルゴリズムで使用されるキー モジュラスのビット単位のサイズ。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "キー モジュラスのサイズが正しくありません。"
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "非対称アルゴリズムで使用されるキー モジュラスのビット単位のサイズを表します。"
  remarks: "有効なキー サイズが非対称アルゴリズムの特定の実装によって指定されに記載されて、<xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>プロパティ</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>。       このフィールドには、<xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A>プロパティ</xref:System.Security.Cryptography.AsymmetricAlgorithm.KeySize%2A>。"
  syntax:
    content: protected int KeySizeValue;
    return:
      type: System.Int32
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "非対称アルゴリズムでサポートされているキー サイズを取得します。"
  remarks: "非対称アルゴリズムでは、この配列内のエントリに一致するキーのサイズのみをサポートします。"
  example:
  - "The following code example demonstrates how to call the LegalKeySizes property to retrieve the <xref:System.Security.Cryptography.KeySizes.MinSize%2A>, <xref:System.Security.Cryptography.KeySizes.MaxSize%2A>, and <xref:System.Security.Cryptography.KeySizes.SkipSize%2A> properties. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/csharp/p-system.security.crypto_30_1.cs)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/visualbasic/p-system.security.crypto_30_1.vb)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#10](~/add/codesnippet/cpp/p-system.security.crypto_30_1.cpp)]"
  syntax:
    content: public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "非対称アルゴリズムでサポートされているキー サイズを格納する配列。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "非対称アルゴリズムでサポートされているキー サイズを指定します。"
  remarks: "非対称アルゴリズムでは、この配列内のエントリに一致するキーのサイズのみをサポートします。       このフィールドには、<xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>プロパティ</xref:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes%2A>。"
  syntax:
    content: protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  id: SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスとして実装された場合は、署名アルゴリズムの名前を取得します。 それ以外の場合、 <xref:System.NotImplementedException>。</xref:System.NotImplementedException>は常にスローします。"
  remarks: ''
  example:
  - "The following code example demonstrates how to override the SignatureAlgorithm property to return the name of the signature algorithm. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/csharp/p-system.security.crypto_43_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/cpp/p-system.security.crypto_43_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#7](~/add/codesnippet/visualbasic/p-system.security.crypto_43_1.vb)]"
  syntax:
    content: public virtual string SignatureAlgorithm { get; }
    return:
      type: System.String
      description: "署名アルゴリズムの名前です。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "派生クラスでオーバーライドされると、作成し、現在の XML 文字列表現を返します<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>オブジェクト。 それ以外の場合、 <xref:System.NotImplementedException>。</xref:System.NotImplementedException>がスローされます。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the ToXmlString method to create an XML representation of the parameters in the current <xref:System.Security.Cryptography.AsymmetricAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.AsymmetricAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/csharp/m-system.security.crypto_109_1.cs)]\n [!code-cpp[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/cpp/m-system.security.crypto_109_1.cpp)]\n [!code-vb[System.Security.Cryptography.AsymmetricAlgorithm#5](~/add/codesnippet/visualbasic/m-system.security.crypto_109_1.vb)]"
  syntax:
    content: public virtual string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>プライベート パラメーターを含めるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.String
      description: "現在の XML 文字列エンコーディング<xref href=&quot;System.Security.Cryptography.AsymmetricAlgorithm&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm()
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.AsymmetricAlgorithm()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create()
  nameWithType: AsymmetricAlgorithm.Create()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create()
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(String)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.KeySizes[]
  parent: System.Security.Cryptography
  isExternal: false
  name: KeySizes
  nameWithType: KeySizes
  fullName: System.Security.Cryptography.KeySizes[]
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    nameWithType: KeySizes
    fullName: KeySizes[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(Boolean)
- uid: System.Security.Cryptography.AsymmetricAlgorithm.#ctor*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm.AsymmetricAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Clear
  nameWithType: AsymmetricAlgorithm.Clear
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Create
  nameWithType: AsymmetricAlgorithm.Create
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: AsymmetricAlgorithm.Dispose
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: FromXmlString
  nameWithType: AsymmetricAlgorithm.FromXmlString
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString*
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: ToXmlString
  nameWithType: AsymmetricAlgorithm.ToXmlString
