### YamlMime:ManagedReference
items:
- uid: System.MarshalByRefObject
  id: MarshalByRefObject
  children:
  - System.MarshalByRefObject.#ctor
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  langs:
  - csharp
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
  type: Class
  summary: "アクセスできるようにオブジェクトをアプリケーションでのアプリケーション ドメインの境界を越えてリモート処理をサポートします。"
  remarks: "アプリケーション ドメインは、1 つまたは複数のアプリケーションが存在するオペレーティング システムのプロセス内のパーティションです。 同じアプリケーション ドメイン内のオブジェクトは直接通信します。 別のアプリケーション ドメイン内のオブジェクトは、アプリケーション ドメインの境界を越えてオブジェクトのコピーを転送するか、メッセージを交換するプロキシを使用して通信します。       MarshalByRefObject は、プロキシを使用してメッセージを交換することで、アプリケーション ドメインの境界を越えて通信オブジェクトの基本クラスです。 MarshalByRefObject から継承しないオブジェクトは、暗黙的に値渡しのマーシャ リングします。 リモート アプリケーションは、オブジェクトの値によって、マーシャ リングを参照する場合は、オブジェクトのコピーがアプリケーション ドメインの境界を越えて渡されます。       MarshalByRefObject オブジェクトは、ローカルのアプリケーション ドメインの境界内に直接アクセスします。 初めてリモート アプリケーション ドメインでアプリケーションにアクセスして、MarshalByRefObject プロキシは、リモート アプリケーションに渡されます。 後続の呼び出しはプロキシでは、ローカルのアプリケーション ドメイン内に存在するオブジェクトをマーシャ リングされます。       型は、型がアプリケーション ドメインの境界を越えて使用するし、オブジェクトのメンバーが作成されたアプリケーション ドメインの外部で使用可能ではないために、オブジェクトの状態はコピーされません必要があります、MarshalByRefObject から継承する必要があります。       オブジェクト MarshalByRefObject から派生させて使用するアプリケーション ドメインの境界を越えて、ときにそのメンバーをオーバーライドしないでください。 またそのメソッドを直接呼び出す必要があります。 ランタイムは、MarshalByRefObject から派生したクラスがアプリケーション ドメインの境界を越えてマーシャ リングすることを認識します。"
  example:
  - "This section contains two code examples. The first code example shows how to create an instance of a class in another application domain. The second code example shows a simple class that can be used for remoting.  \n  \n **Example 1**  \n  \n The following code example shows the simplest way to execute code in another application domain. The example defines a class named `Worker` that inherits MarshalByRefObject, with a method that displays the name of the application domain in which it is executing. The example creates instances of `Worker` in the default application domain and in a new application domain.  \n  \n> [!NOTE]\n>  The assembly that contains `Worker` must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.  \n  \n [!code-cpp[CreateInstanceAndUnwrap2#1](~/add/codesnippet/cpp/t-system.marshalbyrefobj_1.cpp)]\n [!code-cs[CreateInstanceAndUnwrap2#1](~/add/codesnippet/csharp/t-system.marshalbyrefobj_1.cs)]\n [!code-vb[CreateInstanceAndUnwrap2#1](~/add/codesnippet/visualbasic/t-system.marshalbyrefobj_1.vb)]  \n  \n **Example 2**  \n  \n The following example demonstrates a class derived from MarshalByRefObject that is used later in remoting.  \n  \n [!code-cpp[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/cpp/t-system.marshalbyrefobj_2.cpp)]\n [!code-cs[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/csharp/t-system.marshalbyrefobj_2.cs)]\n [!code-vb[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/visualbasic/t-system.marshalbyrefobj_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MarshalByRefObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.MarshalByRefObject.#ctor
  id: '#ctor'
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: MarshalByRefObject()
  nameWithType: MarshalByRefObject.MarshalByRefObject()
  fullName: System.MarshalByRefObject.MarshalByRefObject()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.MarshalByRefObject&quot;> </xref>クラスです。"
  syntax:
    content: protected MarshalByRefObject ();
    parameters: []
  overload: System.MarshalByRefObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  id: CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "リモート オブジェクトとの通信に使用するプロキシの生成に必要なすべての関連情報を格納しているオブジェクトを作成します。"
  remarks: "TheCreateObjRef メソッド<xref:System.AppDomain.CreateInstance%2A?displayProperty=fullName>や<xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName>。</xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName></xref:System.AppDomain.CreateInstance%2A?displayProperty=fullName>などのリモート オブジェクトの作成方法によって呼び出されます ほとんどの場合は、このメソッドをオーバーライドする必要はありません。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);
    parameters:
    - id: requestedType
      type: System.Type
      description: "<xref:System.Type>オブジェクトを新しい<xref href=&quot;System.Runtime.Remoting.ObjRef&quot;></xref>参照することができます</xref:System.Type>。"
    return:
      type: System.Runtime.Remoting.ObjRef
      description: "プロキシを生成するために必要な情報です。"
  overload: System.MarshalByRefObject.CreateObjRef*
  exceptions:
  - type: System.Runtime.Remoting.RemotingException
    commentId: T:System.Runtime.Remoting.RemotingException
    description: "このインスタンスは、有効なリモート処理オブジェクトではありません。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "直前の呼び出し元には、インフラストラクチャのアクセス許可がありません。"
  platform:
  - net462
- uid: System.MarshalByRefObject.GetLifetimeService
  id: GetLifetimeService
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "このインスタンスの有効期間ポリシーを制御する現在の有効期間サービス オブジェクトを取得します。"
  remarks: "有効期間サービスの詳細については、<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>クラス</xref:System.Runtime.Remoting.Lifetime.LifetimeServices>を参照してください。"
  syntax:
    content: public object GetLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "型のオブジェクト<xref href=&quot;System.Runtime.Remoting.Lifetime.ILease&quot;></xref>このインスタンスの有効期間ポリシーを制御するために使用します。"
  overload: System.MarshalByRefObject.GetLifetimeService*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "直前の呼び出し元には、インフラストラクチャのアクセス許可がありません。"
  platform:
  - net462
- uid: System.MarshalByRefObject.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "このインスタンスの有効期間ポリシーを制御する有効期間サービス オブジェクトを取得します。"
  remarks: "有効期間サービスの詳細については、<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>クラス</xref:System.Runtime.Remoting.Lifetime.LifetimeServices>を参照してください。"
  example:
  - "The following code example demonstrates creating a lease.  \n  \n [!code-cpp[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/cpp/m-system.marshalbyrefobj_1.cpp)]\n [!code-vb[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/visualbasic/m-system.marshalbyrefobj_1.vb)]\n [!code-cs[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/csharp/m-system.marshalbyrefobj_1.cs)]"
  syntax:
    content: public virtual object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "型のオブジェクト<xref href=&quot;System.Runtime.Remoting.Lifetime.ILease&quot;></xref>このインスタンスの有効期間ポリシーを制御するために使用します。 これは、1 つの場合は、このインスタンスのサービス オブジェクトが存在する現在の有効期間それ以外の場合、新しい有効期間サービス オブジェクトは初期化の値に、 &lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A?displayProperty=fullName&gt;プロパティです。"
  overload: System.MarshalByRefObject.InitializeLifetimeService*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "直前の呼び出し元には、インフラストラクチャのアクセス許可がありません。"
  platform:
  - net462
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  id: MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "現在の簡易コピーを作成<xref href=&quot;System.MarshalByRefObject&quot;></xref>オブジェクト。"
  remarks: "MemberwiseClone メソッドでは、シャロー コピーを作成、新しいを作成して<xref:System.MarshalByRefObject>オブジェクト、および現在の非静的フィールドをコピー<xref:System.MarshalByRefObject>オブジェクトを新しいオブジェクト</xref:System.MarshalByRefObject></xref:System.MarshalByRefObject>。 フィールドが値型の場合、フィールドのビットごとのコピーは実行されます。 フィールドが参照型の場合、参照はコピーしますが、参照されるオブジェクトではありません。そのため、元のオブジェクトとその複製は、同じオブジェクトを参照します。       たとえば、<xref:System.MarshalByRefObject>と呼ばれるオブジェクトをさらに、オブジェクト A と B を参照する X 参照オブジェクト c です。X の簡易コピーを作成もオブジェクト A と B を参照する新しいオブジェクト X2これに対し、X の詳細コピーが A2 と B2、A のコピーである新しいオブジェクトを参照する新しいオブジェクト X2 を作成し、B. B2 を参照している C. を実装するクラスを使用してコピーである新しいオブジェクト、C2、<xref:System.ICloneable>オブジェクトの簡易コピーを実行するインターフェイス</xref:System.ICloneable></xref:System.MarshalByRefObject>。       Id、<xref:System.MarshalByRefObject>オブジェクトはリモート処理クライアントの呼び出しの対象となっているリモート サーバー オブジェクトとして定義します</xref:System.MarshalByRefObject>。 既定では、メンバーごとの複製、<xref:System.MarshalByRefObject>オブジェクトには、クライアント側のリモート処理境界を越えてマーシャ リングをサーバー側オブジェクトのクローンが正常に動作が通常、元のオブジェクトと同じ id です</xref:System.MarshalByRefObject>。 指定`false`、これは通常、適切な複製の id を削除し、複製は、リモート処理境界を越えてマーシャ リングする際に割り当てられるに新しい id または`true`、複製元の id を保持するが発生する<xref:System.MarshalByRefObject>オブジェクト</xref:System.MarshalByRefObject>。 MemberwiseClone メソッドは、開発者がリモート サーバーのオブジェクトを実装するために使用します。"
  syntax:
    content: protected MarshalByRefObject MemberwiseClone (bool cloneIdentity);
    parameters:
    - id: cloneIdentity
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>現在の削除に<xref href=&quot;System.MarshalByRefObject&quot;></xref>これによりがリモート処理の境界を越えてマーシャ リングされるときに、新しい id を割り当てられるオブジェクトのオブジェクトの id。 値<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>は大抵適切です。 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>現在のコピーを<xref href=&quot;System.MarshalByRefObject&quot;></xref>その複製は、リモート サーバー オブジェクトにルーティングされるリモート クライアントの呼び出しが発生するオブジェクトの id。"
    return:
      type: System.MarshalByRefObject
      description: "現在の簡易コピー <xref href=&quot;System.MarshalByRefObject&quot;> </xref>オブジェクト。"
  overload: System.MarshalByRefObject.MemberwiseClone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Remoting.RemotingException
  parent: System.Runtime.Remoting
  isExternal: false
  name: RemotingException
  nameWithType: RemotingException
  fullName: System.Runtime.Remoting.RemotingException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.MarshalByRefObject.#ctor
  parent: System.MarshalByRefObject
  isExternal: false
  name: MarshalByRefObject()
  nameWithType: MarshalByRefObject.MarshalByRefObject()
  fullName: System.MarshalByRefObject.MarshalByRefObject()
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(Type)
- uid: System.Runtime.Remoting.ObjRef
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjRef
  nameWithType: ObjRef
  fullName: System.Runtime.Remoting.ObjRef
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(Boolean)
- uid: System.MarshalByRefObject
  parent: System
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.MarshalByRefObject.#ctor*
  parent: System.MarshalByRefObject
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject.MarshalByRefObject
- uid: System.MarshalByRefObject.CreateObjRef*
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef
  nameWithType: MarshalByRefObject.CreateObjRef
- uid: System.MarshalByRefObject.GetLifetimeService*
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService
  nameWithType: MarshalByRefObject.GetLifetimeService
- uid: System.MarshalByRefObject.InitializeLifetimeService*
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: MarshalByRefObject.InitializeLifetimeService
- uid: System.MarshalByRefObject.MemberwiseClone*
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone
  nameWithType: MarshalByRefObject.MemberwiseClone
