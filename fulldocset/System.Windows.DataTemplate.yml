### YamlMime:ManagedReference
items:
- uid: System.Windows.DataTemplate
  id: DataTemplate
  children:
  - System.Windows.DataTemplate.#ctor
  - System.Windows.DataTemplate.#ctor(System.Object)
  - System.Windows.DataTemplate.DataTemplateKey
  - System.Windows.DataTemplate.DataType
  - System.Windows.DataTemplate.Triggers
  - System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  langs:
  - csharp
  name: DataTemplate
  nameWithType: DataTemplate
  fullName: System.Windows.DataTemplate
  type: Class
  summary: "データ オブジェクトの視覚的な構造をについて説明します。"
  remarks: "DataTemplate を使用するには、データ オブジェクトの視覚エフェクトを指定します。 DataTemplate オブジェクトは、バインドしているときに特に便利です、<xref:System.Windows.Controls.ItemsControl>など、<xref:System.Windows.Controls.ListBox>コレクション全体を</xref:System.Windows.Controls.ListBox></xref:System.Windows.Controls.ItemsControl>。 詳細については、なし、<xref:System.Windows.Controls.ListBox>コレクション内のオブジェクトの文字列形式を表示します</xref:System.Windows.Controls.ListBox>。 その場合は、データ オブジェクトの外観を定義する DataTemplate を使用することができます。 データ オブジェクトの視覚的な構造をデータ テンプレートの内容になります。       詳細については、次を参照してください。[データ テンプレートの概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following example shows how to create a DataTemplate inline. The DataTemplate specifies that each data item appears as three <xref:System.Windows.Controls.TextBlock> elements within a <xref:System.Windows.Controls.StackPanel>. In this example, the data object is a class called `Task`. Note that each <xref:System.Windows.Controls.TextBlock> element in this template is bound to a property of the `Task` class.  \n  \n [!code-xml[DataTemplatingIntro_snip#Inline](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#inline)]  \n  \n It is more common to define a DataTemplate in the resources section so it can be a reusable object, as in the following example:  \n  \n [!code-xml[DataTemplatingIntro_snip#R1](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r1)]  \n[!code-xml[DataTemplatingIntro_snip#AsResource](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#asresource)]  \n[!code-xml[DataTemplatingIntro_snip#R2](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#r2)]  \n  \n Now you can use `myTaskTemplate` as a resource, as in the following example:  \n  \n [!code-xml[DataTemplatingIntro_snip#MyTaskTemplate](~/add/codesnippet/xaml/DataTemplatingSample/Window1.xaml#mytasktemplate)]  \n  \n For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009)."
  syntax:
    content: >-
      [System.Windows.Markup.DictionaryKeyProperty("DataTemplateKey")]

      public class DataTemplate : System.Windows.FrameworkTemplate
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.FrameworkTemplate
  implements: []
  inheritedMembers:
  - System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)
  - System.Windows.FrameworkTemplate.HasContent
  - System.Windows.FrameworkTemplate.IsSealed
  - System.Windows.FrameworkTemplate.LoadContent
  - System.Windows.FrameworkTemplate.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkTemplate.Resources
  - System.Windows.FrameworkTemplate.Seal
  - System.Windows.FrameworkTemplate.ShouldSerializeResources(System.Windows.Markup.XamlDesignerSerializationManager)
  - System.Windows.FrameworkTemplate.ShouldSerializeVisualTree
  - System.Windows.FrameworkTemplate.System#Windows#Markup#INameScope#FindName(System.String)
  - System.Windows.FrameworkTemplate.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkTemplate.Template
  - System.Windows.FrameworkTemplate.UnregisterName(System.String)
  - System.Windows.FrameworkTemplate.VisualTree
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DataTemplate.#ctor
  id: '#ctor'
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataTemplate()
  nameWithType: DataTemplate.DataTemplate()
  fullName: System.Windows.DataTemplate.DataTemplate()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.DataTemplate&quot;> </xref>クラスです。"
  syntax:
    content: public DataTemplate ();
    parameters: []
  overload: System.Windows.DataTemplate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataTemplate(Object)
  nameWithType: DataTemplate.DataTemplate(Object)
  fullName: System.Windows.DataTemplate.DataTemplate(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.DataTemplate&quot;> </xref> 、指定したクラス<xref:System.Windows.DataTemplate.DataType*>プロパティ</xref:System.Windows.DataTemplate.DataType*>。"
  remarks: "クラスの型名、参照を使用して、 [X:type マークアップ拡張機能](~/add/includes/ajax-current-ext-md.md)します。 テンプレートを使用する場合[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]データ、これは、データのタグ名を表す文字列。"
  syntax:
    content: public DataTemplate (object dataType);
    parameters:
    - id: dataType
      type: System.Object
      description: "場合は、テンプレート オブジェクトのデータを対象には、データ オブジェクトの型名です。"
  overload: System.Windows.DataTemplate.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.DataTemplateKey
  id: DataTemplateKey
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataTemplateKey
  nameWithType: DataTemplate.DataTemplateKey
  fullName: System.Windows.DataTemplate.DataTemplateKey
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "既定のキーを取得、 <xref href=&quot;System.Windows.DataTemplate&quot;></xref>です。"
  remarks: "設定しない場合、 [X:key ディレクティブ](~/add/includes/ajax-current-ext-md.md)上、<xref:System.Windows.DataTemplate>内にある、 <xref:System.Windows.ResourceDictionary>、DataTemplateKey がキーとして使用します</xref:System.Windows.ResourceDictionary></xref:System.Windows.DataTemplate>。"
  syntax:
    content: public object DataTemplateKey { get; }
    return:
      type: System.Object
      description: "既定のキー、 <xref href=&quot;System.Windows.DataTemplate&quot;></xref>です。"
  overload: System.Windows.DataTemplate.DataTemplateKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.DataType
  id: DataType
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: DataType
  nameWithType: DataTemplate.DataType
  fullName: System.Windows.DataTemplate.DataType
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "対象の種類の設定を取得または<xref href=&quot;System.Windows.DataTemplate&quot;></xref>が対象としています。"
  remarks: "このプロパティが<xref:System.Windows.Style.TargetType%2A><xref:System.Windows.Style>クラス</xref:System.Windows.Style>のプロパティ</xref:System.Windows.Style.TargetType%2A>によく似ています。 ときにこのプロパティを設定するデータ型を指定せず、 `x:Key`、<xref:System.Windows.DataTemplate>その種類のデータ オブジェクトに自動的に適用されます</xref:System.Windows.DataTemplate>。 実行すると、`x:Key`が暗黙的に設定します。 そのため、これを割り当てる場合<xref:System.Windows.DataTemplate>、`x:Key`値、暗黙的なをオーバーライドする`x:Key`と<xref:System.Windows.DataTemplate>自動的には適用されません</xref:System.Windows.DataTemplate></xref:System.Windows.DataTemplate>。       なおをバインドする場合、<xref:System.Windows.Controls.ContentControl>のコレクションに`Task`、オブジェクト、<xref:System.Windows.Controls.ContentControl>使用しない、<xref:System.Windows.DataTemplate>自動的にします</xref:System.Windows.DataTemplate></xref:System.Windows.Controls.ContentControl></xref:System.Windows.Controls.ContentControl>。 これは、ためのバインドに、<xref:System.Windows.Controls.ContentControl>詳細については、全体のコレクションまたは個々 のオブジェクトにバインドするかどうかを区別する必要があります</xref:System.Windows.Controls.ContentControl>。 場合、<xref:System.Windows.Controls.ContentControl>の選択の追跡は、<xref:System.Windows.Controls.ItemsControl>の種類を設定できます、<xref:System.Windows.Data.Binding.Path%2A>のプロパティ、<xref:System.Windows.Controls.ContentControl>へのバインド&quot;`/`&quot;を現在のアイテムを興味のあることを示します</xref:System.Windows.Controls.ContentControl></xref:System.Windows.Data.Binding.Path%2A></xref:System.Windows.Controls.ItemsControl></xref:System.Windows.Controls.ContentControl>。 例については、次を参照してください。[する方法: コレクションと選択内容に基づいて情報を表示するバインド](~/add/includes/ajax-current-ext-md.md)です。 それ以外の場合、指定する必要があります、<xref:System.Windows.DataTemplate>設定して明示的に、<xref:System.Windows.Controls.ContentControl.ContentTemplate%2A>プロパティ</xref:System.Windows.Controls.ContentControl.ContentTemplate%2A></xref:System.Windows.DataTemplate>。       DataType プロパティがある場合に特に便利です、<xref:System.Windows.Data.CompositeCollection>データ オブジェクトのさまざまな種類の</xref:System.Windows.Data.CompositeCollection>。       このプロパティは、既定の名前空間に含まれていない XML 要素をターゲットとする場合、名前空間、名前空間の指定子を持つ要素名の前する必要があります。 かっこをエスケープ シーケンスによって前にを介して公開される xml の LINQ の XML に中かっこで、名前空間が表示されます: ```xaml   <DataTemplate DataType=&quot;{}{http://myNamespace}Details&quot;>   ``` XPath を通じて公開される For XML、要素名の前のインスタンスによって確立された名前空間の指定子によって<xref:System.Windows.Data.XmlNamespaceMapping>: ```xaml   <DataTemplate DataType=&quot;mn:Details&quot;>   ``` <a name=&quot;xamlAttributeUsage_DataType&quot;> </a> ## XAML 属性の使用```   <object DataType=&quot;typeName&quot;/>   ``` <a name=&quot;xamlValues_DataType&quot;> </a> ## XAML 値*typeName*場合は、テンプレート オブジェクトのデータを対象には、このプロパティは、(文字列) として、データ オブジェクトの型名を含みます            </xref:System.Windows.Data.XmlNamespaceMapping>。 クラスの型名、参照を使用して、 [X:type マークアップ拡張機能](~/add/includes/ajax-current-ext-md.md)します。 テンプレートを使用する場合[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]データ、このプロパティには、XML 要素名が含まれています。 XML 要素の既定以外の名前空間の指定に関する詳細については、ドキュメントの解説を参照してください。"
  syntax:
    content: public object DataType { get; set; }
    return:
      type: System.Object
      description: "既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.DataTemplate.DataType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.Triggers
  id: Triggers
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: Triggers
  nameWithType: DataTemplate.Triggers
  fullName: System.Windows.DataTemplate.Triggers
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "プロパティの値を適用または&1; つまたは複数の条件に基づいてアクションを実行するトリガーのコレクションを取得します。"
  remarks: "データ テンプレート内でトリガーを作成する場合、トリガーの set アクセス操作子プロパティを設定、データ テンプレートのスコープ内にあります。 それ以外の場合、データを含む型を対象とするスタイルを使用してトリガーを作成するのには適切な場合があります。 バインドする場合など、 <xref:System.Windows.Controls.ListBox>、コンテナーは、コントロール、<xref:System.Windows.Controls.ListBoxItem>オブジェクト</xref:System.Windows.Controls.ListBoxItem></xref:System.Windows.Controls.ListBox>。 スコープ内ではないプロパティを設定するトリガーを使用している場合、 <xref:System.Windows.DataTemplate>、作成する適切な場合があります、<xref:System.Windows.Controls.ListBoxItem>スタイルを設定し、そのスタイル内でトリガーを作成します</xref:System.Windows.Controls.ListBoxItem></xref:System.Windows.DataTemplate>。 詳細については、DataTemplate に属している新機能を参照してくださいしますか。[データ テンプレートの概要](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > このプロパティのみ設定できます[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]に示すコレクション構文を使用して、またはコレクション オブジェクトにアクセスして追加などのさまざまなメソッドを使用します。 コレクション オブジェクト自体にアクセスするプロパティは読み取り専用で、コレクション自体は読み取り/書き込みです。      <a name=&quot;xamlPropertyElementUsage_Triggers&quot;></a>## XAML プロパティ要素の使用```   <object>     <object.Triggers>       OneOrMoreTriggers     </object.Triggers>   </object>   ``` <a name=&quot;xamlValues_Triggers&quot;> </a> ## XAML 値*OneOrMoreTriggers*&0; 個以上<xref:System.Windows.TriggerBase>オブジェクト</xref:System.Windows.TriggerBase>。      "
  example:
  - "The following <xref:System.Windows.DataTemplate> demonstrates the use of the Triggers property.  \n  \n [!code-xml[DataBindingLab#AuctionItemDataTemplate](~/add/codesnippet/xaml/DataBindingLab/DataBindingLabApp.xaml#auctionitemdatatemplate)]  \n  \n For the complete sample, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)."
  syntax:
    content: public System.Windows.TriggerCollection Triggers { get; }
    return:
      type: System.Windows.TriggerCollection
      description: "トリガー オブジェクトのコレクション。 既定値は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.DataTemplate.Triggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  id: ValidateTemplatedParent(System.Windows.FrameworkElement)
  parent: System.Windows.DataTemplate
  langs:
  - csharp
  name: ValidateTemplatedParent(FrameworkElement)
  nameWithType: DataTemplate.ValidateTemplatedParent(FrameworkElement)
  fullName: System.Windows.DataTemplate.ValidateTemplatedParent(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "一連のルールに対してテンプレートの親を確認します。"
  remarks: "メソッドは、次の規則を使用します -`templatedParent`非 null <xref:System.Windows.FrameworkElement>。</xref:System.Windows.FrameworkElement>をする必要があります。      - <xref:System.Windows.DataTemplate> <xref:System.Windows.Controls.ContentPresenter>。</xref:System.Windows.Controls.ContentPresenter>に適用する必要があります。</xref:System.Windows.DataTemplate>"
  syntax:
    content: protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);
    parameters:
    - id: templatedParent
      type: System.Windows.FrameworkElement
      description: "要素にこのテンプレートが適用されます。"
  overload: System.Windows.DataTemplate.ValidateTemplatedParent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.FrameworkTemplate
  isExternal: false
  name: System.Windows.FrameworkTemplate
- uid: System.Windows.DataTemplate.#ctor
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplate()
  nameWithType: DataTemplate.DataTemplate()
  fullName: System.Windows.DataTemplate.DataTemplate()
- uid: System.Windows.DataTemplate.#ctor(System.Object)
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplate(Object)
  nameWithType: DataTemplate.DataTemplate(Object)
  fullName: System.Windows.DataTemplate.DataTemplate(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DataTemplate.DataTemplateKey
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplateKey
  nameWithType: DataTemplate.DataTemplateKey
  fullName: System.Windows.DataTemplate.DataTemplateKey
- uid: System.Windows.DataTemplate.DataType
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataType
  nameWithType: DataTemplate.DataType
  fullName: System.Windows.DataTemplate.DataType
- uid: System.Windows.DataTemplate.Triggers
  parent: System.Windows.DataTemplate
  isExternal: false
  name: Triggers
  nameWithType: DataTemplate.Triggers
  fullName: System.Windows.DataTemplate.Triggers
- uid: System.Windows.TriggerCollection
  parent: System.Windows
  isExternal: false
  name: TriggerCollection
  nameWithType: TriggerCollection
  fullName: System.Windows.TriggerCollection
- uid: System.Windows.DataTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)
  parent: System.Windows.DataTemplate
  isExternal: false
  name: ValidateTemplatedParent(FrameworkElement)
  nameWithType: DataTemplate.ValidateTemplatedParent(FrameworkElement)
  fullName: System.Windows.DataTemplate.ValidateTemplatedParent(FrameworkElement)
- uid: System.Windows.FrameworkElement
  parent: System.Windows
  isExternal: false
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.DataTemplate.#ctor*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplate
  nameWithType: DataTemplate.DataTemplate
- uid: System.Windows.DataTemplate.DataTemplateKey*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataTemplateKey
  nameWithType: DataTemplate.DataTemplateKey
- uid: System.Windows.DataTemplate.DataType*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: DataType
  nameWithType: DataTemplate.DataType
- uid: System.Windows.DataTemplate.Triggers*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: Triggers
  nameWithType: DataTemplate.Triggers
- uid: System.Windows.DataTemplate.ValidateTemplatedParent*
  parent: System.Windows.DataTemplate
  isExternal: false
  name: ValidateTemplatedParent
  nameWithType: DataTemplate.ValidateTemplatedParent
