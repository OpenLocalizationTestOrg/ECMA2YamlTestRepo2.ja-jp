### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "操作を実行する前に十分なメモリ リソースを確認します。 このクラスは継承できません。"
  remarks: "> [!NOTE]> このクラスは高度な開発で使用するものです。       MemoryFailPoint クラスのインスタンスを作成するには、メモリ ゲートが作成されます。 メモリ ゲートは、大量のメモリを必要とするアクティビティを開始する前に、十分なリソースを確認します。 チェックに失敗した結果、<xref:System.InsufficientMemoryException>例外がスローされます</xref:System.InsufficientMemoryException>。 この例外は、開始してから、操作を防止して、リソース不足の原因のエラーの可能性を低減できます。 この使用を回避するのにパフォーマンスが低下する、<xref:System.OutOfMemoryException>例外と、コード内の任意の場所に、例外の不適切な処理からにつながる可能性のある状態の破損</xref:System.OutOfMemoryException>。      > [!IMPORTANT] > この型は、<xref:System.IDisposable>インターフェイス</xref:System.IDisposable>。 型を使用してが完了したらを直接的または間接的にその破棄する必要があります。 型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロック</xref:System.IDisposable.Dispose%2A>。 直接ことのない破棄する場合など、言語コンストラクトを使用して`using`(C# の場合) または`Using`(Visual Basic で)。 詳細についてを参照してください&quot;を使用して、オブジェクトを実装する IDisposable&quot;、<xref:System.IDisposable>インターフェイスに関するトピック</xref:System.IDisposable>。       スローすることによって、<xref:System.InsufficientMemoryException>の例外を除き、アプリケーションを区別できるとアプリケーションの状態が破損した可能性のある部分的に完了した操作の推定値を操作を完了することにすることはできません</xref:System.InsufficientMemoryException>。 これにより、アプリケーションが現在をアンロードする必要があります、ペシミスティック エスカレーションのポリシーの頻度を減らす<xref:System.AppDomain>やプロセスのリサイクルします</xref:System.AppDomain>。       MemoryFailPoint を確認するかどうかと連続する仮想アドレス空間のための十分なメモリ ヒープですべてのガベージ コレクションで使用可能なし、スワップ ファイルのサイズを増やすことがあります。  MemoryFailPoint は、ゲートの有効期間中にメモリの長期的な可用性に関する保証を行いませんが、呼び出し元は常に使用する必要があります、 <xref:System.Runtime.MemoryFailPoint.Dispose%2A>MemoryFailPoint に関連付けられたリソースが解放されることを確認するメソッド</xref:System.Runtime.MemoryFailPoint.Dispose%2A>。       メモリ ゲートを使用するには、MemoryFailPoint オブジェクトを作成し、メモリのメガバイト (MB) の数を指定する必要がありますを使用する次の操作が必要です。 十分なメモリが使用できない場合、<xref:System.InsufficientMemoryException>例外がスローされます</xref:System.InsufficientMemoryException>。       コンス トラクターのパラメーターは正の整数である必要があります。 負の値を生成、<xref:System.ArgumentOutOfRangeException>例外です</xref:System.ArgumentOutOfRangeException>。       MemoryFailPoint は、16 MB の粒度で動作します。 16 MB より小さい値は 16 MB で、として処理され、その他の値は次に最大 16 MB の倍数として扱われます。"
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>が正常に実行に必要なメモリの量を指定します。"
  remarks: "作業項目を処理して、アプリケーションによって使用されるメモリの量が経験的に決定できます。  アプリケーションが要求を処理する必要があるメモリの量を推定するには、使用を検討して、<xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>メソッドを作業項目を処理するメソッドの呼び出しの前後の前に使用できるメモリの量を決定します</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>。 参照してください、<xref:System.Runtime.MemoryFailPoint>クラスの値を動的に決定するコード例については、`sizeInMegabytes`パラメーター</xref:System.Runtime.MemoryFailPoint> 。"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "必要なメモリ サイズ (メガバイト単位)。 これには、正の値があります。"
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定したモリ サイズは負の値です。"
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "ゲートによって保護されているコードの実行を開始する十分なメモリがあります。"
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Runtime.MemoryFailPoint&quot;></xref>です。"
  remarks: "<xref:System.Runtime.MemoryFailPoint>。</xref:System.Runtime.MemoryFailPoint>の使用が終了したときに、Dispose を呼び出す Dispose メソッドは、<xref:System.Runtime.MemoryFailPoint>使用不可の状態</xref:System.Runtime.MemoryFailPoint>。 呼び出した後<xref:System.Runtime.MemoryFailPoint>へのすべての参照を解放する必要があります、<xref:System.Runtime.MemoryFailPoint>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Runtime.MemoryFailPoint>占有されていた</xref:System.Runtime.MemoryFailPoint></xref:System.Runtime.MemoryFailPoint></xref:System.Runtime.MemoryFailPoint>。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] ><xref:System.Runtime.MemoryFailPoint></xref:System.Runtime.MemoryFailPoint>の最後の参照を解放する前に常に呼び出しが破棄。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Runtime.MemoryFailPoint>オブジェクトの`Finalize`メソッド</xref:System.Runtime.MemoryFailPoint>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "リソースが解放され、ガベージ コレクターがクリアするときに他のクリーンアップ操作が実行されることにより、 <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>オブジェクト。"
  remarks: "ガベージ コレクターは、現在のオブジェクトが完了する準備ができたときに、Finalize メソッドを呼び出します。"
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
