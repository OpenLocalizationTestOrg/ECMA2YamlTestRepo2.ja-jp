### YamlMime:ManagedReference
items:
- uid: System.Web.DefaultHttpHandler
  id: DefaultHttpHandler
  children:
  - System.Web.DefaultHttpHandler.#ctor
  - System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  - System.Web.DefaultHttpHandler.Context
  - System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)
  - System.Web.DefaultHttpHandler.ExecuteUrlHeaders
  - System.Web.DefaultHttpHandler.IsReusable
  - System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure
  - System.Web.DefaultHttpHandler.OverrideExecuteUrlPath
  - System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)
  langs:
  - csharp
  name: DefaultHttpHandler
  nameWithType: DefaultHttpHandler
  fullName: System.Web.DefaultHttpHandler
  type: Class
  summary: "プロパティと既定の HTTP ハンドラーのメソッドを表します。"
  remarks: "DefaultHttpHandler オブジェクトは、両方が要求のインターセプトにインターネット インフォメーション サービス (IIS) 6.0 を通じてが構成され、要求された拡張機能に明示的なバインドが適用されないときに、HTTP パイプラインで受信要求を受け取ります。       要求のインターセプトは、IIS 6.0 で導入された、アプリケーションのワイルドカード マッピング機能を設定できます。 詳細については、検索、 [MSDN ライブラリ](http://go.microsoft.com/fwlink/?linkid=37118)ワイルドカード アプリケーション マップを使用して URL を再マップする方法についてはします。       DefaultHttpHandler クラスを実装して、<xref:System.Web.IHttpAsyncHandler>非同期要求の処理を提供するインターフェイス</xref:System.Web.IHttpAsyncHandler>。 HTTP ハンドラーの概要については、次を参照してください。 [HTTP ハンドラーと HTTP モジュールの概要](~/add/includes/ajax-current-ext-md.md)です。 さらに、詳細については、次を参照してください: - 非同期の HTTP ハンドラーの作成についてを参照してください[チュートリアル: 非同期 HTTP ハンドラーを作成する](~/add/includes/ajax-current-ext-md.md)です。      -について、HTTP ハンドラーを登録するには、次を参照してください。[する方法: HTTP ハンドラーの登録](~/add/includes/ajax-current-ext-md.md)です。       クラスは、要求のカスタマイズされた処理を提供する DefaultHttpHandler クラスから派生できます。 DefaultHttpHandler から派生する非同期の HTTP ハンドラーをオーバーライド、<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>要求の処理方法を変更するメソッド</xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A>。       DefaultHttpHandler は、ASP.NET エラーには使用しません。 既存のコンテンツまたは IIS のエラーを使用する、こうした ISAPI のカスタム エラー メカニズムは変更なしで動作します。"
  example:
  - "The following code example demonstrates how to implement a customized HTTP handler by deriving from the DefaultHttpHandler class.  \n  \n [!code-vb[System.Web.DefaultHttpHandler#1](~/add/codesnippet/visualbasic/t-system.web.defaulthttp_1.vb)]\n [!code-cs[System.Web.DefaultHttpHandler#1](~/add/codesnippet/csharp/t-system.web.defaulthttp_1.cs)]"
  syntax:
    content: 'public class DefaultHttpHandler : System.Web.IHttpAsyncHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpAsyncHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.#ctor
  id: '#ctor'
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: DefaultHttpHandler()
  nameWithType: DefaultHttpHandler.DefaultHttpHandler()
  fullName: System.Web.DefaultHttpHandler.DefaultHttpHandler()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.DefaultHttpHandler&quot;> </xref>クラスです。"
  syntax:
    content: public DefaultHttpHandler ();
    parameters: []
  overload: System.Web.DefaultHttpHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  id: BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "HTTP ハンドラーへの非同期呼び出しを開始します。"
  remarks: "ハンドラーが非同期 BeginProcessRequest を実装する必要がありますを非同期に使用する HTTP ハンドラーを作成する場合と<xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>ASP.NET によって非同期的に呼び出されるメソッド</xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A>。"
  syntax:
    content: public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "組み込みのサーバーへの参照を提供するオブジェクトは、HTTP 要求を処理するために使用されるオブジェクトです。"
    - id: callback
      type: System.AsyncCallback
      description: "非同期メソッドの呼び出しが完了したときに呼び出すメソッド。 場合`callback`は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>デリゲートは呼び出されません。"
    - id: state
      type: System.Object
      description: "要求を処理するために必要な任意の状態データ。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>プロセスの状態に関する情報を格納します</xref:System.IAsyncResult>。"
  overload: System.Web.DefaultHttpHandler.BeginProcessRequest*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "要求失敗して、要求されたファイルを処理するための前提条件がサフィックス .asp または、POST 要求が送信されました。"
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.Context
  id: Context
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: Context
  nameWithType: DefaultHttpHandler.Context
  fullName: System.Web.DefaultHttpHandler.Context
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在関連付けられているコンテキストを取得<xref href=&quot;System.Web.DefaultHttpHandler&quot;></xref>オブジェクト。"
  remarks: "コンテキスト プロパティを現在のアクセスを提供<xref:System.Web.HttpContext>派生クラスのオブジェクト</xref:System.Web.HttpContext>。 <xref:System.Web.HttpContext>オブジェクトは、組み込み<xref:System.Web.HttpApplication.Request%2A>、 <xref:System.Web.HttpApplication.Response%2A>、および<xref:System.Web.HttpApplication.Server%2A>要求のプロパティ</xref:System.Web.HttpApplication.Server%2A></xref:System.Web.HttpApplication.Response%2A></xref:System.Web.HttpApplication.Request%2A></xref:System.Web.HttpContext>。 コンテキスト情報にアクセスする方法の詳細については、 <xref:System.Web.HttpContext>。</xref:System.Web.HttpContext>を参照してください。"
  syntax:
    content: protected System.Web.HttpContext Context { get; }
    return:
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>現在のコンテキストを含むオブジェクトです。"
  overload: System.Web.DefaultHttpHandler.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)
  id: EndProcessRequest(System.IAsyncResult)
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: EndProcessRequest(IAsyncResult)
  nameWithType: DefaultHttpHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.DefaultHttpHandler.EndProcessRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "非同期プロセスの終了メソッドを提供します。"
  remarks: "EndProcessRequest メソッドを使用して、非同期処理中にキャッチした例外をスローすることができます。"
  syntax:
    content: public virtual void EndProcessRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "プロセスの状態に関する情報を格納するオブジェクト。"
  overload: System.Web.DefaultHttpHandler.EndProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.ExecuteUrlHeaders
  id: ExecuteUrlHeaders
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: ExecuteUrlHeaders
  nameWithType: DefaultHttpHandler.ExecuteUrlHeaders
  fullName: System.Web.DefaultHttpHandler.ExecuteUrlHeaders
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "要求ヘッダーと、要求と共に転送要求の値のコレクションを取得します。"
  remarks: "<xref:System.Web.DefaultHttpHandler>クラス</xref:System.Web.DefaultHttpHandler>から派生したクラスで指定される場合を除き、ExecuteUrlHeaders プロパティが空のコレクションを返します 追加されるヘッダーは、バックアップにインターネット インフォメーション サービス (IIS) の要求を渡す前に、要求のヘッダーのコレクションに追加されます。"
  syntax:
    content: protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref>要求ヘッダーと値を含むです。"
  overload: System.Web.DefaultHttpHandler.ExecuteUrlHeaders*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.IsReusable
  id: IsReusable
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: IsReusable
  nameWithType: DefaultHttpHandler.IsReusable
  fullName: System.Web.DefaultHttpHandler.IsReusable
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "別の要求の現在のインスタンスを使用できることを示すブール値を取得、 <xref href=&quot;System.Web.DefaultHttpHandler&quot;> </xref>クラスです。"
  remarks: "明示的にプロパティを設定する、IsReusable`true`または`false`、IsReusable プロパティをオーバーライドします。"
  syntax:
    content: public virtual bool IsReusable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Web.DefaultHttpHandler&quot;> </xref>は再利用可能なそれ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.DefaultHttpHandler.IsReusable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure
  id: OnExecuteUrlPreconditionFailure
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: OnExecuteUrlPreconditionFailure()
  nameWithType: DefaultHttpHandler.OnExecuteUrlPreconditionFailure()
  fullName: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "状態、 <xref href=&quot;System.Web.DefaultHttpHandler&quot;> </xref>から要求を処理するオブジェクト。"
  remarks: "前提条件は、要求ヘッダー フィールドにクライアントによって指定され、Web サーバーで評価されます。 たとえば、前提条件を使用すると、クライアントされないようにできます (たとえば、GET) 要求されたメソッド、1 つを意図したもの以外のリソースに適用されています。 詳細については、14、「Header Field Definitions」セクションを参照してください、[ハイパー テキスト転送プロトコル--http/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) World Wide Web Consortium (W3C) の Web サイトを指定します。       OnExecuteUrlPreconditionFailure メソッドは、前提条件ができない場合に呼び出されますが、<xref:System.Web.DefaultHttpHandler>から要求を処理するオブジェクト</xref:System.Web.DefaultHttpHandler>。 派生クラスでは、前提条件が失敗したときに例外をスローする OnExecuteUrlPreconditionFailure メソッドをオーバーライド可能性があります。 <xref:System.Web.DefaultHttpHandler>OnExecuteUrlPreconditionFailure メソッドで、例外はスローされません</xref:System.Web.DefaultHttpHandler>。       前提条件が失敗すると、次のいずれかの:- <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.</xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>を呼び出す      呼び出し<xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>。</xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>      呼び出し<xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>。</xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>      -応答のキャッシュ ポリシーを変更します。      -追加、<xref:System.IO.Stream>オブジェクトをフィルターとして、<xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName>プロパティ</xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName></xref:System.IO.Stream>。"
  syntax:
    content: public virtual void OnExecuteUrlPreconditionFailure ();
    parameters: []
  overload: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath
  id: OverrideExecuteUrlPath
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: OverrideExecuteUrlPath()
  nameWithType: DefaultHttpHandler.OverrideExecuteUrlPath()
  fullName: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "現在の要求のターゲット URL をオーバーライドします。"
  remarks: "OverrideExecuteUrlPath メソッドを返します`null`<xref:System.Web.DefaultHttpHandler>クラス</xref:System.Web.DefaultHttpHandler>から派生したクラスでオーバーライドされた場合を除き、       ASP.NET は IIS 6.0 ワーカー プロセス分離モードで実行されている場合、および応答がなかった場合は、前に変更のみ OverrideExecuteUrlPath メソッドが呼び出されます、<xref:System.Web.DefaultHttpHandler>オブジェクトが呼び出されました</xref:System.Web.DefaultHttpHandler>。 応答は、次のいずれかによって変更された:- <xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>.</xref:System.Web.HttpResponse.Write%2A?displayProperty=fullName>を呼び出す      呼び出し<xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>。</xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=fullName>      呼び出し<xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>。</xref:System.Web.HttpResponse.Flush%2A?displayProperty=fullName>      -応答のキャッシュ ポリシーを変更します。      -追加、<xref:System.IO.Stream>オブジェクトをフィルターとして、<xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName>プロパティ</xref:System.Web.HttpResponse.Filter%2A?displayProperty=fullName></xref:System.IO.Stream>。"
  syntax:
    content: public virtual string OverrideExecuteUrlPath ();
    parameters: []
    return:
      type: System.String
      description: "要求で使用するオーバーライドの URLまたは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>オーバーライドされた URL が指定されていない場合。"
  overload: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)
  id: ProcessRequest(System.Web.HttpContext)
  parent: System.Web.DefaultHttpHandler
  langs:
  - csharp
  name: ProcessRequest(HttpContext)
  nameWithType: DefaultHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.DefaultHttpHandler.ProcessRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "により、 <xref href=&quot;System.Web.DefaultHttpHandler&quot;> </xref> HTTP Web 要求の処理するオブジェクトします。"
  remarks: "ProcessRequest メソッドは、同期的に呼び出すことはできません。 派生したクラス、<xref:System.Web.DefaultHttpHandler>クラスは、カスタマイズされた要求の処理を提供する ProcessRequest をオーバーライドできます</xref:System.Web.DefaultHttpHandler>。"
  syntax:
    content: public virtual void ProcessRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "HTTP 要求を処理するために使用組み込みサーバー オブジェクトへの参照を提供するオブジェクト。"
  overload: System.Web.DefaultHttpHandler.ProcessRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ProcessRequest は同期的に呼び出されます。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.DefaultHttpHandler.#ctor
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: DefaultHttpHandler()
  nameWithType: DefaultHttpHandler.DefaultHttpHandler()
  fullName: System.Web.DefaultHttpHandler.DefaultHttpHandler()
- uid: System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.DefaultHttpHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.DefaultHttpHandler.Context
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: Context
  nameWithType: DefaultHttpHandler.Context
  fullName: System.Web.DefaultHttpHandler.Context
- uid: System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: EndProcessRequest(IAsyncResult)
  nameWithType: DefaultHttpHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.DefaultHttpHandler.EndProcessRequest(IAsyncResult)
- uid: System.Web.DefaultHttpHandler.ExecuteUrlHeaders
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: ExecuteUrlHeaders
  nameWithType: DefaultHttpHandler.ExecuteUrlHeaders
  fullName: System.Web.DefaultHttpHandler.ExecuteUrlHeaders
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.DefaultHttpHandler.IsReusable
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: IsReusable
  nameWithType: DefaultHttpHandler.IsReusable
  fullName: System.Web.DefaultHttpHandler.IsReusable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: OnExecuteUrlPreconditionFailure()
  nameWithType: DefaultHttpHandler.OnExecuteUrlPreconditionFailure()
  fullName: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure()
- uid: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: OverrideExecuteUrlPath()
  nameWithType: DefaultHttpHandler.OverrideExecuteUrlPath()
  fullName: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: ProcessRequest(HttpContext)
  nameWithType: DefaultHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.DefaultHttpHandler.ProcessRequest(HttpContext)
- uid: System.Web.DefaultHttpHandler.#ctor*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: DefaultHttpHandler
  nameWithType: DefaultHttpHandler.DefaultHttpHandler
- uid: System.Web.DefaultHttpHandler.BeginProcessRequest*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: BeginProcessRequest
  nameWithType: DefaultHttpHandler.BeginProcessRequest
- uid: System.Web.DefaultHttpHandler.Context*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: Context
  nameWithType: DefaultHttpHandler.Context
- uid: System.Web.DefaultHttpHandler.EndProcessRequest*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: EndProcessRequest
  nameWithType: DefaultHttpHandler.EndProcessRequest
- uid: System.Web.DefaultHttpHandler.ExecuteUrlHeaders*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: ExecuteUrlHeaders
  nameWithType: DefaultHttpHandler.ExecuteUrlHeaders
- uid: System.Web.DefaultHttpHandler.IsReusable*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: IsReusable
  nameWithType: DefaultHttpHandler.IsReusable
- uid: System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: OnExecuteUrlPreconditionFailure
  nameWithType: DefaultHttpHandler.OnExecuteUrlPreconditionFailure
- uid: System.Web.DefaultHttpHandler.OverrideExecuteUrlPath*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: OverrideExecuteUrlPath
  nameWithType: DefaultHttpHandler.OverrideExecuteUrlPath
- uid: System.Web.DefaultHttpHandler.ProcessRequest*
  parent: System.Web.DefaultHttpHandler
  isExternal: false
  name: ProcessRequest
  nameWithType: DefaultHttpHandler.ProcessRequest
