### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitCallback
  id: WaitCallback
  langs:
  - csharp
  name: WaitCallback
  nameWithType: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  summary: "スレッド プールのスレッドによって実行されるコールバック メソッドを表します。"
  remarks: "WaitCallback が上で実行するコールバック メソッドを表す、<xref:System.Threading.ThreadPool>スレッド</xref:System.Threading.ThreadPool>。 コールバック メソッドを WaitCallback コンス トラクターに渡すことによって、デリゲートを作成します。 メソッドには、次に示す署名が必要です。       <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>。</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName> WaitCallback デリゲートを渡すことによって、タスクの実行をキューします。 スレッド プールのスレッドが利用可能になったら、コールバック メソッドを実行します。      > [!NOTE] > Visual Basic の場合は WaitCallback コンス トラクターの省略でき、単に使用、 `AddressOf` <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>をコールバック メソッドを渡すときに、演算子 Visual Basic では、適切なデリゲート コンス トラクターは、自動的に呼び出します。       コールバック メソッドに情報を渡す場合は、必要な情報を格納しているオブジェクトを作成しに渡すこと<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>ときにキューにタスクを実行します</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>。 コールバック メソッドが実行されるたびに、`state`パラメーターには、このオブジェクトが含まれています。       詳細については、スレッド プールのスレッドを同期するためにコールバックを使用して、次を参照してください。 [、マネージ スレッド プール](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \n  \n The second example demonstrates how you can queue a task and pass information to it.  \n  \n **Example 1**  \n  \n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \n  \n **Example 2**  \n  \n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitCallback(object state);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
