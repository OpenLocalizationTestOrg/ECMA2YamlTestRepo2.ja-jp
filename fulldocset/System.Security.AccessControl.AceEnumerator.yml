### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.AceEnumerator
  id: AceEnumerator
  children:
  - System.Security.AccessControl.AceEnumerator.Current
  - System.Security.AccessControl.AceEnumerator.MoveNext
  - System.Security.AccessControl.AceEnumerator.Reset
  - System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: AceEnumerator
  nameWithType: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
  type: Class
  summary: "アクセス制御リスト (ACL) でアクセス制御エントリ (Ace) を反復処理する機能を提供します。"
  syntax:
    content: 'public sealed class AceEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Current
  id: Current
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "内の現在の要素を取得、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>コレクション。 このプロパティは、オブジェクトの種類に適したバージョンを取得します。"
  syntax:
    content: public System.Security.AccessControl.GenericAce Current { get; }
    return:
      type: System.Security.AccessControl.GenericAce
      description: "現在の要素、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>コレクション。"
  overload: System.Security.AccessControl.AceEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "列挙の次の要素を<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>コレクション。"
  remarks: "列挙子を作成した後、または呼び出しの後に、<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>メソッド、列挙子がコレクションの最初の要素の前に配置されているし、MoveNext メソッドの最初の呼び出しが、列挙子をコレクションの最初の要素の上に移動します</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>。       コレクションの末尾が渡されると、MoveNext を後続の呼び出しを返す`false`まで<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>と呼びます</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>。       コレクションが変更されない限り、列挙子は有効です。 コレクション要素を削除または追加、変更などの変更が加えられた場合、列挙子は回復不可能なり、次を MoveNext または<xref:System.Security.AccessControl.AceEnumerator.Reset%2A><xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>がスローされます。</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>列挙子が次の要素に正常に進んだ場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>列挙子がコレクションの末尾を越えた場合。"
  overload: System.Security.AccessControl.AceEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コレクションは、列挙子が作成された後に変更されました。"
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Reset
  id: Reset
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "列挙子を初期位置、つまり最初の要素の前に設定、 <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>コレクション。"
  remarks: "コレクションが変更されない限り、列挙子は有効です。 など、追加すると、変更、または削除、要素は、コレクションに加えられた、列挙子は回復不可能と、次への呼び出し、<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>メソッドまたは Reset メソッドをスロー、 <xref:System.InvalidOperationException></xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.AccessControl.AceEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コレクションは、列挙子が作成された後に変更されました。"
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "コレクション内の現在の要素を取得します。"
  remarks: "列挙子を作成した後、または呼び出しの後に、<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>メソッドを呼び出す必要があります、 <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>IEnumerator.Current; の値を読み取る前に、コレクションの最初の要素に列挙子を進める方法それ以外の場合、IEnumerator.Current は定義されていません</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A></xref:System.Security.AccessControl.AceEnumerator.Reset%2A>。       IEnumerator.Current もは例外をスロー、最後の呼び出し<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>返される`false`コレクションの末尾を示します</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>。       IEnumerator.Current は、列挙子の位置を移動していないと、IEnumerator.Current を連続して呼び出すされるまで、同じオブジェクトが返さ<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>または<xref:System.Security.AccessControl.AceEnumerator.Reset%2A>と呼びます</xref:System.Security.AccessControl.AceEnumerator.Reset%2A></xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>。       コレクションが変更されない限り、列挙子は有効です。 コレクション要素を削除または追加、変更などの変更が加えられた場合、列挙子は回復不可能ですが、なり、次を<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A><xref:System.Security.AccessControl.AceEnumerator.Reset%2A><xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>をスロー</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>または</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> 間で、コレクションが変更された場合<xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>IEnumerator.Current、IEnumerator.Current 要素を返しますに設定されている場合でも、列挙子が既に無効になったとします</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>。"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "コレクション内の現在の要素を返します。"
  overload: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "コレクションは、列挙子が作成された後に変更されました。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.AccessControl.AceEnumerator.Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.AceEnumerator.Reset
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.MoveNext*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: AceEnumerator.MoveNext
- uid: System.Security.AccessControl.AceEnumerator.Reset*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset
  nameWithType: AceEnumerator.Reset
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
