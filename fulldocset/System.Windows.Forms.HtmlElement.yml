### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.HtmlElement
  id: HtmlElement
  children:
  - System.Windows.Forms.HtmlElement.All
  - System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.CanHaveChildren
  - System.Windows.Forms.HtmlElement.Children
  - System.Windows.Forms.HtmlElement.Click
  - System.Windows.Forms.HtmlElement.ClientRectangle
  - System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.Document
  - System.Windows.Forms.HtmlElement.DomElement
  - System.Windows.Forms.HtmlElement.DoubleClick
  - System.Windows.Forms.HtmlElement.Drag
  - System.Windows.Forms.HtmlElement.DragEnd
  - System.Windows.Forms.HtmlElement.DragLeave
  - System.Windows.Forms.HtmlElement.DragOver
  - System.Windows.Forms.HtmlElement.Enabled
  - System.Windows.Forms.HtmlElement.Equals(System.Object)
  - System.Windows.Forms.HtmlElement.FirstChild
  - System.Windows.Forms.HtmlElement.Focus
  - System.Windows.Forms.HtmlElement.Focusing
  - System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  - System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  - System.Windows.Forms.HtmlElement.GetHashCode
  - System.Windows.Forms.HtmlElement.GotFocus
  - System.Windows.Forms.HtmlElement.Id
  - System.Windows.Forms.HtmlElement.InnerHtml
  - System.Windows.Forms.HtmlElement.InnerText
  - System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  - System.Windows.Forms.HtmlElement.KeyDown
  - System.Windows.Forms.HtmlElement.KeyPress
  - System.Windows.Forms.HtmlElement.KeyUp
  - System.Windows.Forms.HtmlElement.LosingFocus
  - System.Windows.Forms.HtmlElement.LostFocus
  - System.Windows.Forms.HtmlElement.MouseDown
  - System.Windows.Forms.HtmlElement.MouseEnter
  - System.Windows.Forms.HtmlElement.MouseLeave
  - System.Windows.Forms.HtmlElement.MouseMove
  - System.Windows.Forms.HtmlElement.MouseOver
  - System.Windows.Forms.HtmlElement.MouseUp
  - System.Windows.Forms.HtmlElement.Name
  - System.Windows.Forms.HtmlElement.NextSibling
  - System.Windows.Forms.HtmlElement.OffsetParent
  - System.Windows.Forms.HtmlElement.OffsetRectangle
  - System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.OuterHtml
  - System.Windows.Forms.HtmlElement.OuterText
  - System.Windows.Forms.HtmlElement.Parent
  - System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  - System.Windows.Forms.HtmlElement.RemoveFocus
  - System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  - System.Windows.Forms.HtmlElement.ScrollLeft
  - System.Windows.Forms.HtmlElement.ScrollRectangle
  - System.Windows.Forms.HtmlElement.ScrollTop
  - System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  - System.Windows.Forms.HtmlElement.Style
  - System.Windows.Forms.HtmlElement.TabIndex
  - System.Windows.Forms.HtmlElement.TagName
  langs:
  - csharp
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
  type: Class
  summary: "Web ページ内の HTML 要素を表します。"
  remarks: "HtmlElement では、HTML ドキュメント内の要素の可能な型をなどを表す`BODY`、 `TABLE`、および`FORM`、その他。 クラスは、すべての要素を検索する最も一般的なプロパティを公開します。       ほとんどの要素を持つことができます*子要素*: その下に配置されているその他の HTML 要素です。 使用して、<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>プロパティを指定された要素がある子かどうかをテストして、<xref:System.Windows.Forms.HtmlElement.Children%2A>それらを反復するコレクション</xref:System.Windows.Forms.HtmlElement.Children%2A></xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>。 <xref:System.Windows.Forms.HtmlElement.Parent%2A>プロパティは、現在の要素が入れ子になった HtmlElement を返します</xref:System.Windows.Forms.HtmlElement.Parent%2A>。       多くの場合、属性、プロパティ、およびは直接によって公開されていない HtmlElement などを基になる要素のメソッドへのアクセスを必要な`SRC`属性を`IMG`要素または`Submit`メソッドを`FORM`です。 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>と<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>を取得し、すべての属性またはの特定の要素のプロパティを変更するメソッドを使用するときに<xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>管理対象のドキュメント オブジェクト モデル (DOM) で公開されていないすべてのメソッドへのアクセスを提供します</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A></xref:System.Windows.Forms.HtmlElement.SetAttribute%2A></xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>。 場合は、アプリケーションはアンマネージ コードのアクセス許可が、アクセスすることも持つ非公開のプロパティおよびメソッド、<xref:System.Windows.Forms.HtmlElement.DomElement%2A>属性</xref:System.Windows.Forms.HtmlElement.DomElement%2A>。       使用して、<xref:System.Windows.Forms.HtmlElement.TagName%2A>要素が特定の種類があるかどうかをテストするプロパティ</xref:System.Windows.Forms.HtmlElement.TagName%2A>。       任意の HTML ドキュメントは、実行時に変更できます。 持つ新しい HtmlElement オブジェクトを作成することができます、<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>メソッドの<xref:System.Windows.Forms.HtmlDocument>、要素を使用して別に追加し、<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>または<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>メソッド</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A></xref:System.Windows.Forms.HtmlElement.AppendChild%2A></xref:System.Windows.Forms.HtmlDocument></xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>。 また要素として HTML タグを作成し、既存の要素に割り当てることができます<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>プロパティ</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>。"
  example:
  - "The following code example shows how to examine an arbitrary HTML document and derive a string describing the HTML elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public sealed class HtmlElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.All
  id: All
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得、 <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref>の現在の要素の下にあるすべての要素。"
  remarks: "現在の要素とその直接の親を持つ要素のみにアクセスするには、使用、<xref:System.Windows.Forms.HtmlElement.Children%2A>コレクション代わりにします</xref:System.Windows.Forms.HtmlElement.Children%2A>。       このコレクション内の要素はないソースの順序で返さとは限りません。"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection All { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "現在の要素の直接または間接の子であるすべての要素のコレクション。 現在の要素がある場合、 `TABLE`、たとえば、すべて返されますすべて`TH`、`TR`と`TD`などその他の要素を他のテーブル内の要素`DIV`と`SPAN`セル内に含まれる要素です。"
  overload: System.Windows.Forms.HtmlElement.All*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  id: AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "別の要素のサブツリーに要素を追加します。"
  remarks: "HTML ドキュメント オブジェクト モデル (DOM) では、さまざまな方法で HTML ファイルの実行時の内容を変更することができます。 AppendChild を使用して、既存のドキュメントに新しい要素を追加したり、ページの要素を移動します。       要素は既に親されて、別の要素に要素を追加することは自動的に削除その要素以前の親から。       実行時にドキュメントに加えられた追加 AppendChild を使用して保持されないを呼び出すとき、<xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>メソッドを<xref:System.Windows.Forms.WebBrowser>コントロール</xref:System.Windows.Forms.WebBrowser></xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>。"
  example:
  - "The following code example creates a new hyperlink using the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method and adds it to end of a page using `AppendChild` on the `BODY` element. The example requires that your application contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>ツリーで、この位置に追加します。"
    return:
      type: System.Windows.Forms.HtmlElement
      description: "ツリーに追加された後の要素。"
  overload: System.Windows.Forms.HtmlElement.AppendChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  id: AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "HTML ドキュメント オブジェクト モデル (DOM) で指定したイベントのイベント ハンドラーを追加します。"
  remarks: "管理対象のドキュメント オブジェクト モデル (DOM) は、イベントの選択数のみを公開します。 非公開のイベントのほとんどが特定の種類の要素の定義のみなど、`submit`でのみ有効であるイベント`FORM`要素。 AttachEventHandler を使用して、これらの非公開イベントにイベント ハンドラーを追加します。       ドキュメントの読み込みが完了するまで、ドキュメントまたはそのオブジェクトのいずれかのイベントをアタッチする必要がありますできません。 できるだけ早くこのメソッドを呼び出す必要がありますが、<xref:System.Windows.Forms.WebBrowser.DocumentCompleted>のイベント、<xref:System.Windows.Forms.WebBrowser>コントロール</xref:System.Windows.Forms.WebBrowser></xref:System.Windows.Forms.WebBrowser.DocumentCompleted>。       使用可能なアンマネージ イベントの詳細については、次を参照してください。 [、管理されている HTML ドキュメント オブジェクト モデルでのへのアクセスの非公開メンバー](~/add/includes/ajax-current-ext-md.md)と IHTMLElement インターフェイス: [IHTMLElement](http://go.microsoft.com/fwlink/?LinkId=104876)、 [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877)、 [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878)、 [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879)です。"
  syntax:
    content: public void AttachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "処理するイベントの名前。"
    - id: eventHandler
      type: System.EventHandler
      description: "イベントを処理するマネージ コード。"
  overload: System.Windows.Forms.HtmlElement.AttachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  id: CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "この要素が子要素を持つかどうかを示す値を取得します。"
  remarks: "一部の要素など`IMG`と`SCRIPT`子を持つことはできません。 呼び出す前に、このプロパティを使用して<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>または<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>で任意の要素</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A></xref:System.Windows.Forms.HtmlElement.AppendChild%2A>。"
  example:
  - "The following code example handles the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>. If an element was not previous selected using a mouse click, the code assigns the element to a private class variable named `MoveElement`. If an element was selected, the code attempts to append it to the element that was just clicked. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have already added an event handler for the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#2)]\n [!code-cs[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#2)]"
  syntax:
    content: public bool CanHaveChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要素が子要素を持つ場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.HtmlElement.CanHaveChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Children
  id: Children
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得、 <xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref>すべての子の現在の要素。"
  remarks: "下にある場合は、他の HTML 要素の HTML ファイル内で要素の多くができます。 子コレクションでは、ドキュメントのツリー構造を探索するための簡単なメカニズムを提供します。       子は、その直接の親が、現在の要素では要素のみを公開します。 ある場合、<xref:System.Windows.Forms.HtmlElement>の`TABLE`要素、子が提供するすべての`TR`(行) の要素の内側、 `TABLE`</xref:System.Windows.Forms.HtmlElement> 。 取得する、 `TD` (セル) 要素の内側に含まれる、`TR`ごとに、いずれかの子コレクションを使用する必要は要素、`TR`要素、または使用<xref:System.Windows.Forms.HtmlElement.All%2A><xref:System.Windows.Forms.HtmlElement></xref:System.Windows.Forms.HtmlElement>コレクション</xref:System.Windows.Forms.HtmlElement.All%2A>。       このコレクション内の要素は、ソースの順序である保証はありません。       場合<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>は`false`、`Children`は常に空になります</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>。"
  example:
  - "The following code example examines an arbitrary HTML document and derive a string describing the elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. It does this by searching the `Children` collection of all elements recursively, starting with the HTML element at the top of the document. This code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Children { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "すべてのコレクション<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>を親として現在の要素を持つオブジェクト。"
  overload: System.Windows.Forms.HtmlElement.Children*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Click
  id: Click
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素をマウスの左ボタンで、ユーザーがクリックしたときに発生します。"
  remarks: "設定して、要素の Click イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素の Click イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       いない現在入力フォーカスを要素に、ユーザーがクリックすると後の Click イベントが発生、<xref:System.Windows.Forms.HtmlElement.Focusing>イベント、その前に、<xref:System.Windows.Forms.HtmlElement.LostFocus>要素のイベントを</xref:System.Windows.Forms.HtmlElement.LostFocus></xref:System.Windows.Forms.HtmlElement.Focusing>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Click event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Click event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#432](~/add/codesnippet/csharp/e-system.windows.forms.h_5_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#432](~/add/codesnippet/visualbasic/e-system.windows.forms.h_5_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Click;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  id: ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "HTML ドキュメント内の要素のクライアント領域の境界を取得します。"
  remarks: "簡略では、明示的な高さと幅を割り当てられている要素または絶対位置を使用する要素だけの位置データを返します。 ドキュメントに、位置スタイルが設定されている場合の絶対位置が`absolute`、することできますに配置する HTML ページ上の任意の座標の後にします。"
  example:
  - "Assume you have loaded the following HTML page into a hosted instance of the <xref:System.Windows.Forms.WebBrowser> control.  \n  \n```  \n<HTML>  \n  \n    <BODY>  \n  \n        <DIV id=\"div1\" style=\"position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;\">  \n            Edit this text.  \n        </DIV>  \n  \n    </BODY>  \n  \n</HTML>  \n```  \n  \n The following code example demonstrates retrieving this element and expanding its dimensions if the client area is less than 400 pixels wide by 50 pixels high, and also sets the `DIV` to the `contentEditable` state so that the user can input text.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#3)]\n [!code-cs[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#3)]"
  syntax:
    content: public System.Drawing.Rectangle ClientRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "任意の領域で、罫線およびスクロール バーがマイナス、要素によって占有されているクライアント領域。 位置と含めた要素の寸法を取得するには使用<xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>代わりにします</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>。"
  overload: System.Windows.Forms.HtmlElement.ClientRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  id: DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "HTML ドキュメント オブジェクト モデル (DOM) で指定したイベントからイベント ハンドラーを削除します。"
  syntax:
    content: public void DetachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "処理するイベントの名前。"
    - id: eventHandler
      type: System.EventHandler
      description: "イベントを処理するマネージ コード。"
  overload: System.Windows.Forms.HtmlElement.DetachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Document
  id: Document
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得、 <xref href=&quot;System.Windows.Forms.HtmlDocument&quot;> </xref>この要素が属しています。"
  remarks: "一部の HTML ページを使用してフレームをホストできる、`FRAMESET`タグ。 この場合、各`FRAME`要素<xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument>の独自のインスタンスには このプロパティは、要素への参照をイベント ハンドラーから受信したときに、最も役に立つ、 <xref:System.Windows.Forms.HtmlElementEventArgs>、要素が含まれているドキュメントに対して何らかのアクションを実行する必要があります</xref:System.Windows.Forms.HtmlElementEventArgs>。"
  syntax:
    content: public System.Windows.Forms.HtmlDocument Document { get; }
    return:
      type: System.Windows.Forms.HtmlDocument
      description: "この要素の親ドキュメント。"
  overload: System.Windows.Forms.HtmlElement.Document*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DomElement
  id: DomElement
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "この要素のアンマネージ インターフェイス ポインターを取得します。"
  remarks: "<xref:System.Windows.Forms.HtmlElement>ラッパーの Internet Explorer ドキュメント オブジェクト モデル (DOM)、コンポーネント オブジェクト モデル (COM) を使用して記述されたです。</xref:System.Windows.Forms.HtmlElement> など、非公開のプロパティまたはメソッドに、基になる COM インターフェイスにアクセスする必要がある場合`IHTMLElement`、それらのクエリには、このオブジェクトを使用することができます。       アンマネージ インターフェイスを使用するのには、アプリケーションに MSHTML ライブラリ (mshtml.dll) をインポートする必要があります。 ただし、実行することも公開されていないプロパティとメソッドを使用して、`Invoke`メソッドです。"
  example:
  - "The following code example uses unmanaged interfaces to take the currently selected text and convert it into a hyperlink, with the URL chosen by the user. This code was written under the assumption that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have added the unmanaged MSHTML library as a reference to your project.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#4)]\n [!code-cs[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#4)]"
  syntax:
    content: public object DomElement { get; }
    return:
      type: System.Object
      description: "COM`IUnknown`など、要素は、HTML 要素のいずれかにキャストできますへのポインターがインタ フェース`IHTMLElement`です。"
  overload: System.Windows.Forms.HtmlElement.DomElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  id: DoubleClick
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがクリックすると、マウスの左ボタン要素上で&2; 回すばやく連続的に発生します。"
  remarks: "ダブルクリックは、ユーザーのオペレーティング システムのマウス設定によって決まります。 ユーザーは、2 回のクリックではなくダブルクリックと見なされるマウス ボタンのクリックの間隔を設定できます。       設定して要素を DoubleClick イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素を DoubleClick イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DoubleClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#433](~/add/codesnippet/csharp/e-system.windows.forms.h_26_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#433](~/add/codesnippet/visualbasic/e-system.windows.forms.h_26_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Drag
  id: Drag
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーは、さまざまな場所にテキストをドラッグしたときに発生します。"
  remarks: "テキストが次の場所にドラッグされたときに、このイベントが発生する: - 内または HTML ページでホストされている間、<xref:System.Windows.Forms.WebBrowser>コントロールまたは Windows に Internet Explorer の別のアプリケーションのデスクトップを設定して要素をドラッグ イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A></xref:System.Windows.Forms.WebBrowser>。       その要素の親要素とも要素をドラッグ イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Drag event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Drag event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#434](~/add/codesnippet/csharp/e-system.windows.forms.h_11_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#434](~/add/codesnippet/visualbasic/e-system.windows.forms.h_11_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Drag;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragEnd
  id: DragEnd
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがドラッグ操作を終了したときに発生します。"
  remarks: "設定して要素を DragEnd イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素に DragEnd イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragEnd event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragEnd event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#435](~/add/codesnippet/csharp/e-system.windows.forms.h_35_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#435](~/add/codesnippet/visualbasic/e-system.windows.forms.h_35_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragEnd;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragLeave
  id: DragLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがこの要素上で項目のドラッグ不要になったときに発生します。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#436](~/add/codesnippet/csharp/e-system.windows.forms.h_21_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#436](~/add/codesnippet/visualbasic/e-system.windows.forms.h_21_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragOver
  id: DragOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーが要素上でテキストをドラッグしたときに発生します。"
  remarks: "設定して要素にドラッグされたイベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素にドラッグされたイベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#437](~/add/codesnippet/csharp/e-system.windows.forms.h_31_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#437](~/add/codesnippet/visualbasic/e-system.windows.forms.h_31_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Enabled
  id: Enabled
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはユーザーがこの要素にデータを入力できるかどうかを設定します。"
  remarks: "`FORM`などのテキスト ボックス、ラジオ ボタン、有効要素`false`ユーザーがフォームのフィールドを使用できなくなります。 他の要素など`DIV`または`SPAN`、有効`false`灰色表示にすると、要素内のすべてのテキストになります。 ただし、テキストがまだ選択可能です。 選択を解除する、非公開のイベント ハンドラーを追加`onselectstart`イベントを使用して、<xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>メソッド</xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>。"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要素がユーザーの入力を受け付ける場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.HtmlElement.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定したオブジェクトが現在の要素と等しいかどうか。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "等しいかどうかをテストするオブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>obj</code> is an <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.FirstChild
  id: FirstChild
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ドキュメント ツリーにおいてこの要素の下の次の要素を取得します。"
  remarks: "FirstChild を使用すると組み合わせて<xref:System.Windows.Forms.HtmlElement.NextSibling%2A>を HTML ドキュメントに、ドキュメント ツリーをウォークします</xref:System.Windows.Forms.HtmlElement.NextSibling%2A>。"
  syntax:
    content: public System.Windows.Forms.HtmlElement FirstChild { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>ソースの順序で、現在の要素の下にある最初の要素を表すです。"
  overload: System.Windows.Forms.HtmlElement.FirstChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focus
  id: Focus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "現在の要素には、ユーザーの入力フォーカスを設定します。"
  remarks: "要素にフォーカスを設定とその要素にフォーカスが移動の両方のアクティブな要素になりますフォーカスを持つ要素が<xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A><xref:System.Windows.Forms.HtmlDocument>。</xref:System.Windows.Forms.HtmlDocument>プロパティ</xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>によって返されるなど、       フォーカスが呼び出された後に、ユーザーが入力した任意のキー ストロークは、その要素に送信されます。"
  syntax:
    content: public void Focus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focusing
  id: Focusing
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素が初めてユーザーの入力フォーカスを得たときに発生します。"
  remarks: "タスク バーまたは alt キーを押しながら TAB キーを使用して別のアプリケーションに切り替え、ユーザーは、Focusing を受け取る前にフォーカスがあった要素および<xref:System.Windows.Forms.HtmlElement.GotFocus>イベント再度ときにユーザーを切り替える、アプリケーションに戻す</xref:System.Windows.Forms.HtmlElement.GotFocus>。       このイベントの既定の動作を取り消すことはできません。 フォーカスを要素から削除するには、呼び出す<xref:System.Windows.Forms.HtmlElement.Focus%2A>内から別の要素で、<xref:System.Windows.Forms.HtmlElement.GotFocus>イベント</xref:System.Windows.Forms.HtmlElement.GotFocus></xref:System.Windows.Forms.HtmlElement.Focus%2A>。       その要素の親とも要素に Focusing イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Focusing event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Focusing event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#438](~/add/codesnippet/csharp/e-system.windows.forms.h_10_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#438](~/add/codesnippet/visualbasic/e-system.windows.forms.h_10_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Focusing;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素の名前付き属性の値を取得します。"
  remarks: "HTML 内の属性は、その要素のいずれかの有効な名前/値ペアです。 <xref:System.Windows.Forms.HtmlElement>要素の特定の種類にのみ適用されるものは除外され、すべての要素に共通している属性のみを公開します。`SRC`の定義済み属性は、`IMG`などのタグのではなく、`DIV`タグ。</xref:System.Windows.Forms.HtmlElement> GetAttribute を使用し、<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>管理対象のドキュメント オブジェクト モデル (DOM) で公開されていない属性を操作する</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>。       GetAttribute と<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>小文字は区別されません</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>。"
  example:
  - "The following code example retrieves all of the `META` tags within an HTML document, using GetAttribute to find the `META` tag with the name `Description`. The example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/visualbasic/HtmlDocumentProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/csharp/HtmlDocumentProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public string GetAttribute (string attributeName);
    parameters:
    - id: attributeName
      type: System.String
      description: "属性の名前です。 この引数は区別されません。"
    return:
      type: System.String
      description: "この要素、属性の値として、<xref:System.String>値</xref:System.String>。 この要素で指定した属性が存在しない場合は、空の文字列を返します。"
  overload: System.Windows.Forms.HtmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定した html 形式で表される要素のコレクションを取得して`HTML`タグ。"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);
    parameters:
    - id: tagName
      type: System.String
      description: "タグの名前が<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>オブジェクトを取得します。"
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "<xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref>を含むすべての要素が`HTML`タグ名と等しい<code> tagName</code>です。"
  overload: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  id: GetHashCode
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "特定の種類のハッシュ関数として機能します。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在<xref:System.Object>。</xref:System.Object>のハッシュ コード"
  overload: System.Windows.Forms.HtmlElement.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GotFocus
  id: GotFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素がユーザーの入力フォーカスを得たときに発生します。"
  remarks: "このイベントの既定の動作をキャンセルも、バブルを防止します。 フォーカスを要素から削除するには、呼び出す<xref:System.Windows.Forms.HtmlElement.Focus%2A>から GotFocus イベント内の異なる要素上です</xref:System.Windows.Forms.HtmlElement.Focus%2A>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "Save the following HTML code into a file, and load the file into a <xref:System.Windows.Forms.WebBrowser> control in a Windows Forms project.  \n  \n```  \n<HTML>  \n    <BODY>  \n        <FORM name=\"form1\">  \n            <INPUT type=\"text\" size=20 name=\"text1\">  \n            <INPUT type=\"text\" size=20 name=\"text2\">  \n            <INPUT type=\"text\" size=20 name=\"text3\">  \n        </FORM>  \n    </BODY>  \n</HTML>  \n```  \n  \n The following code example prevents the next `INPUT` element in the tab order from receiving user input focus if the previous element contains less than five characters. The example requires that the previously mentioned HTML file is loaded into an instance of the <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#15)]\n [!code-cs[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#15)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler GotFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Id
  id: Id
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または設定を要素を識別するラベル。"
  remarks: "Id は一意である必要があります。2 つの要素の同じドキュメント内で同じ Id を持つことはできません。 使用して、<xref:System.Windows.Forms.HtmlElement.Name%2A>論理的に関連する要素のグループに同じ識別子を指定するプロパティ</xref:System.Windows.Forms.HtmlElement.Name%2A>。"
  syntax:
    content: public string Id { get; set; }
    return:
      type: System.String
      description: "要素の一意の識別子。"
  overload: System.Windows.Forms.HtmlElement.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  id: InnerHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはこの要素の下位にある HTML マークアップを設定します。"
  remarks: "いくつかの方法など、既存の HTML ページに新しい要素を追加する、<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>と<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>メソッド</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A></xref:System.Windows.Forms.HtmlElement.AppendChild%2A>。 InnerHtml を使用することは、新しい要素で多くの属性またはスタイルを設定する必要があるときに、新しいコンテンツを追加する最も簡単な方法では多くの場合です。       InnerHtml とは異なります<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>を呼び出している InnerHtml には、オブジェクトを表す HTML に含めないことで</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>。 参照してください<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>これら&2; つのプロパティの違いの詳細についてはします</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>。       InnerHtml を設定すると、要素に追加されるすべての子が破棄されます。 DOM から要素を取得して新しい HTML を親の InnerHtml プロパティに割り当てる場合その要素への参照は役に立たない、されプロパティとメソッドを呼び出すときは、その動作は未定義です。       一部の要素の InnerHtml の設定、有効な操作ではありません。 複数の HTML タグなし終了タグを持つ、ように、`IMG`タグ、およびそのため、入れ子になった要素を含めることはできません。 などのいくつかのタグ、`SCRIPT`タグ、テキスト コンテンツ; InnerHtml の設定エラーが発生のみを含めることができます。 両方の種類、タグの<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>が返される`false`</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>。 ただし、設定することもできません InnerHtml で`TABLE`と`TR`要素は、これらの要素への不正な HTML の割り当てとは、ドキュメントのレンダリングを壊れる可能性があります。 使用して<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>または`insertRow`と`insertCell`アンマネージ メソッド`IHTMLTable`インターフェイスを追加する行や、行のセル、 `TABLE`</xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 。       要素といない HTML マークアップにテキストを割り当てる場合にのみ必要がある場合、<xref:System.Windows.Forms.HtmlElement.InnerText%2A>プロパティ代わりにします</xref:System.Windows.Forms.HtmlElement.InnerText%2A>。       InnerHtml に値を割り当てると、テキスト値を使用して割り当てられていた<xref:System.Windows.Forms.HtmlElement.InnerText%2A>。</xref:System.Windows.Forms.HtmlElement.InnerText%2A>が破棄されます。"
  syntax:
    content: public string InnerHtml { get; set; }
    return:
      type: System.String
      description: "現在の要素の子要素を定義する HTML マークアップ。"
  overload: System.Windows.Forms.HtmlElement.InnerHtml*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "この要素の子要素を作成することはできません。"
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerText
  id: InnerText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または要素に割り当てられたテキストを設定します。"
  remarks: "InnerText を持つ要素に HTML を割り当てるしようとする場合は、テキスト ファイル内で HTML を表示していた場合と同様、ドキュメント内でリテラルとして HTML コードが表示されます。 HTML 要素を使用して、割り当てた場合、<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>プロパティ、InnerText を返しますのすべてのテキストを使用して HTML マークアップを削除します</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>。       InnerText に値を代入すると、要素に属しているすべての子要素が破棄されます。"
  example:
  - "The following code creates a new hyperlink using <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, and assigns text to the link using the InnerText property.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public string InnerText { get; set; }
    return:
      type: System.String
      description: "すべての HTML マークアップの存在しない要素のテキスト。 要素に子要素が含まれている場合は、それらの子要素のテキストのみが保持されます。"
  overload: System.Windows.Forms.HtmlElement.InnerText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "指定した要素にテキストを含めることはできません (たとえば、`IMG`要素)。"
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  id: InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ドキュメント オブジェクト モデル (DOM) に新しい要素を挿入します。"
  remarks: "後までは、このメソッドを呼び出す必要はありません、<xref:System.Windows.Forms.WebBrowser.DocumentCompleted>でイベントを<xref:System.Windows.Forms.WebBrowser>コントロールが発生しました</xref:System.Windows.Forms.WebBrowser></xref:System.Windows.Forms.WebBrowser.DocumentCompleted>。 その前にこのメソッドを呼び出すとすると、ドキュメントの読み込みが終了しないに、例外が発生することができます。       値かどうか<xref:System.Windows.Forms.HtmlElementInsertionOrientation>が有効では、要素の型によって異なります</xref:System.Windows.Forms.HtmlElementInsertionOrientation>。 たとえば、<xref:System.Windows.Forms.HtmlElementInsertionOrientation>場合は、要素が有効では、`DIV`がない場合は、`SCRIPT`または`IMG`要素の子要素を含めることができます</xref:System.Windows.Forms.HtmlElementInsertionOrientation>。"
  example:
  - "The following code example inserts a `DIV` element into the top of every page that users view outside of the ADatum.com server. The example requires that your form contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`. Your sample must also import the namespace <xref:System.Text.RegularExpressions>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#9)]\n [!code-cs[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#9)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: orient
      type: System.Windows.Forms.HtmlElementInsertionOrientation
      description: "現在の要素に関連して、この要素を挿入する位置です。"
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "挿入する新しい要素。"
    return:
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>挿入されました。 挿入が失敗したかどうか、これが返されます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  id: InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "この要素の基になる DOM 要素に対して非公開メソッドを実行します。"
  remarks: "このメソッドは、メソッドがない対応するマネージ コードでドキュメント オブジェクト モデル (DOM) からの呼び出しに使用できます。 InvokeMember のこのバージョンを使用して、引数を受け取らない非公開メソッドを実行します。 例については、 <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>。</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>を参照してください。"
  syntax:
    content: public object InvokeMember (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "プロパティまたは呼び出すメソッドの名前。"
    return:
      type: System.Object
      description: "このメソッドによって返される要素が<xref:System.Object>。</xref:System.Object>として表されます この場合<xref:System.Object>の参照を使用して別の HTML 要素には、アンマネージ MSHTML ライブラリ プロジェクトに追加することができますにキャストする適切なアンマネージ インターフェイス</xref:System.Object>。"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  id: InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "現在の HTML ページで、スクリプト言語によって定義された関数を実行します。"
  remarks: "このメソッドは、メソッドがない対応するマネージ コードでドキュメント オブジェクト モデル (DOM) からの呼び出しに使用できます。 InvokeMember に指定されたすべての引数は Win32 に変換されます`VARIANT`データ型、名前付きスクリプト関数に渡される前にします。"
  example:
  - "The following code example gets a `TABLE` called `dataTable` and uses the unexposed `moveRow` method to move a row from the end of the table to the beginning.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#11)]\n [!code-cs[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#11)]"
  syntax:
    content: public object InvokeMember (string methodName, object[] parameter);
    parameters:
    - id: methodName
      type: System.String
      description: "プロパティまたは呼び出すメソッドの名前。"
    - id: parameter
      type: System.Object[]
      description: "渡すパラメーターの一覧。"
    return:
      type: System.Object
      description: "<xref:System.Object>。</xref:System.Object>として表される、関数によって返される要素 この場合<xref:System.Object>の参照を使用して別の HTML 要素には、アンマネージ MSHTML ライブラリ プロジェクトに追加することができますにキャストする適切なアンマネージ インターフェイス</xref:System.Object>。"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyDown
  id: KeyDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがキーボードのキーを押したときに発生します。"
  remarks: "KeyDown が<xref:System.Windows.Forms.HtmlElement.KeyPress><xref:System.Windows.Forms.HtmlElement.KeyUp>。</xref:System.Windows.Forms.HtmlElement.KeyUp>の前に発生でになり、</xref:System.Windows.Forms.HtmlElement.KeyPress>前に発生します。       設定して、要素の KeyDown イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素の KeyDown イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#442](~/add/codesnippet/csharp/e-system.windows.forms.h_1_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#442](~/add/codesnippet/visualbasic/e-system.windows.forms.h_1_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyPress
  id: KeyPress
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがキーボードのキーを押して離したときに発生します。"
  remarks: "Keypress イベントとそれに続く<xref:System.Windows.Forms.HtmlElement.KeyDown><xref:System.Windows.Forms.HtmlElement.KeyUp>。</xref:System.Windows.Forms.HtmlElement.KeyUp>前に</xref:System.Windows.Forms.HtmlElement.KeyDown>       設定して、要素の KeyPress イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素の KeyPress イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyPress event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyPress event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#443](~/add/codesnippet/csharp/e-system.windows.forms.h_16_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#443](~/add/codesnippet/visualbasic/e-system.windows.forms.h_16_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyPress;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyUp
  id: KeyUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがキーボードのキーを離したときに発生します。"
  remarks: "KeyUp とそれに続く<xref:System.Windows.Forms.HtmlElement.KeyPress><xref:System.Windows.Forms.HtmlElement.KeyDown>。</xref:System.Windows.Forms.HtmlElement.KeyDown>後に発生する、</xref:System.Windows.Forms.HtmlElement.KeyPress>       このイベントを取り消すことはできません。       その要素の親要素とも要素の KeyUp イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#444](~/add/codesnippet/csharp/e-system.windows.forms.h_3_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#444](~/add/codesnippet/visualbasic/e-system.windows.forms.h_3_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  id: LosingFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素がユーザーの入力フォーカスを失うと発生します。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LosingFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LosingFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#440](~/add/codesnippet/csharp/e-system.windows.forms.h_12_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#440](~/add/codesnippet/visualbasic/e-system.windows.forms.h_12_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LostFocus
  id: LostFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素がユーザーの入力フォーカスを失ったときに発生します。"
  remarks: "要素は LostFocus は、指定されるまで、フォーカスもう一度、ページを選択すると、ユーザーまたはアプリケーションの呼び出し元のいずれかが発生した後、キー ストローク イベントを受信しなく、<xref:System.Windows.Forms.HtmlElement.Focus%2A>その要素のメソッド</xref:System.Windows.Forms.HtmlElement.Focus%2A>。       このイベントを取り消すことはできません。       その要素の親とも要素を LostFocus イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LostFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LostFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#441](~/add/codesnippet/csharp/e-system.windows.forms.h_0_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#441](~/add/codesnippet/visualbasic/e-system.windows.forms.h_0_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LostFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseDown
  id: MouseDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがマウス ボタンを押したときに発生します。"
  remarks: "設定して、要素の MouseDown イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素の MouseDown イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#446](~/add/codesnippet/csharp/e-system.windows.forms.h_32_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#446](~/add/codesnippet/visualbasic/e-system.windows.forms.h_32_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーが、現在の要素上最初、マウス カーソルを移動したときに発生します。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseEnter event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseEnter event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#449](~/add/codesnippet/csharp/e-system.windows.forms.h_28_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#449](~/add/codesnippet/visualbasic/e-system.windows.forms.h_28_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "現在の要素からマウス カーソルを動かしたときに発生します。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#450](~/add/codesnippet/csharp/e-system.windows.forms.h_33_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#450](~/add/codesnippet/visualbasic/e-system.windows.forms.h_33_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseMove
  id: MouseMove
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素にマウス カーソルを動かしたときに発生します。"
  remarks: "このイベントを取り消すことはできません。       その要素の親要素とも要素の MouseMove イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseMove event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#445](~/add/codesnippet/csharp/e-system.windows.forms.h_15_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#445](~/add/codesnippet/visualbasic/e-system.windows.forms.h_15_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseMove;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseOver
  id: MouseOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "マウス カーソルが要素の境界に入ったときに発生します。"
  remarks: "設定して、要素の MouseOver イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素の MouseOver イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#447](~/add/codesnippet/csharp/e-system.windows.forms.h_29_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#447](~/add/codesnippet/visualbasic/e-system.windows.forms.h_29_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseUp
  id: MouseUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ユーザーがマウス ボタンを離したときに発生します。"
  remarks: "設定して、要素の MouseUp イベントの既定のアクションを取り消すことができます、<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>。       その要素の親要素とも要素の MouseUp イベントが発生、<xref:System.Windows.Forms.HtmlDocument>設定していない場合それ自体には、クラス、<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>のプロパティ、<xref:System.Windows.Forms.HtmlElementEventArgs>クラスを`true`</xref:System.Windows.Forms.HtmlElementEventArgs></xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A></xref:System.Windows.Forms.HtmlDocument>。       バブルのイベントとイベントの既定の操作をキャンセルの取り消しの違いの詳細については、次を参照してください。 [DHTML オブジェクト モデルについて](http://msdn.microsoft.com/library/ms533022.aspx)です。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#448](~/add/codesnippet/csharp/e-system.windows.forms.h_17_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#448](~/add/codesnippet/visualbasic/e-system.windows.forms.h_17_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Name
  id: Name
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または要素の名前を設定します。"
  remarks: "Name プロパティを使用して、 <xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A> <xref:System.Windows.Forms.HtmlElement.All%2A> <xref:System.Windows.Forms.HtmlDocument>。</xref:System.Windows.Forms.HtmlDocument>のプロパティ</xref:System.Windows.Forms.HtmlElement.All%2A>のメソッド</xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>を使用してドキュメントから要素を取得するには       適用すると`INPUT`要素、名前変数名を定義する要素のデータにそのフォームがサーバーに送信されるときにします。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>要素の名前を表すします</xref:System.String>。"
  overload: System.Windows.Forms.HtmlElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.NextSibling
  id: NextSibling
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "ドキュメント ツリーにおいてこの要素と同じレベルには、次の要素を取得します。"
  remarks: "組み合わせて使用 NextSibling<xref:System.Windows.Forms.HtmlElement.FirstChild%2A>を HTML 要素、ドキュメント ツリーをウォークします</xref:System.Windows.Forms.HtmlElement.FirstChild%2A>。"
  syntax:
    content: public System.Windows.Forms.HtmlElement NextSibling { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>の現在の要素の右側にある要素を表すです。"
  overload: System.Windows.Forms.HtmlElement.NextSibling*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  id: OffsetParent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "元の要素を取得<xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>計算されます</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>。"
  remarks: "要素は、3 つの方法のいずれかで HTML ページに配置されていることができます。 既定のフローは次の位置です。相対位置で親; に対して、固定量でオフセットが、要素絶対位置とする要素が指定された固定のドキュメントの左上隅に対する相対位置を調整します。       ドキュメントの要素は、相対位置または絶対位置を使用して、ときに行うこともできます`OffsetParent`クライアント領域内の要素の座標位置を計算します。       要素の詳細については、HTML での配置を参照してください[要素の配置に関する](http://msdn.microsoft.com/library/ms533005.aspx)です。"
  example:
  - "The following code example shows how OffsetParent and <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement OffsetParent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "オフセットの計算元となる要素。       要素の親、または要素の階層内の別の要素は、相対位置または絶対位置を使用している場合<xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;></xref>の現在の要素が入れ子になった最初の比較的または絶対位置の要素になります。 現在の要素の上位要素なしは絶対的または相対的にある場合、 <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;> </xref>なります、`BODY`ドキュメントのタグ。"
  overload: System.Windows.Forms.HtmlElement.OffsetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  id: OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "親を基準として要素の位置を取得します。"
  remarks: "要素は、3 つの方法のいずれかで HTML ページに配置されていることができます:-既定のフローを配置します。      相対位置では、その親の基準とした、固定量でオフセットが、要素でします。      絶対位置を要素が指定された固定のドキュメントの左上隅に対する相対位置を調整します。       要素の詳細については、HTML での配置を参照してください[要素の配置に関する](http://msdn.microsoft.com/library/ms533005.aspx)です。"
  example:
  - "The following code example shows how <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> and OffsetRectangle differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Drawing.Rectangle OffsetRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "要素、およびその幅と高さ、その親との関連の x 座標と y 座標位置。       要素の親は比較的または絶対位置を OffsetRectangle は親要素のオフセットを返します。 要素自体は比較的にある場合、親に関して、OffsetRectangle はその親からのオフセットを返します。"
  overload: System.Windows.Forms.HtmlElement.OffsetRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "2 つの要素が等しいかどうかを比較します。"
  remarks: "等値演算子のテスト、`IUnknown`基になるに指定されたによってラップされた COM オブジェクトのポインター<xref:System.Windows.Forms.HtmlElement>クラス</xref:System.Windows.Forms.HtmlElement>。"
  syntax:
    content: public static bool op_Equality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "最初の<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>です。"
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "2 番目<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>両方のパラメーターが場合<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、または両方の要素がある同一の基になる COM インターフェイスです。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.HtmlElement.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "比較する&2; つ<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>の非等値オブジェクトです。"
  syntax:
    content: public static bool op_Inequality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "最初の<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>です。"
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "2 番目<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>1 つだけの要素は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、2 つのオブジェクトが等しくない。 それ以外の場合、または<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Forms.HtmlElement.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  id: OuterHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または現在の要素の HTML コードを設定します。"
  remarks: "<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>には、現在の要素の周囲のタグを除く、現在の要素に含まれるすべての HTML を返しますが、一方 OuterHtml には、現在の要素のタグとタグを含む、たとえば HTML: `<HTML>` `<BODY>` `<DIV id=&quot;div1&quot;>` `Hello` `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>` `</DIV>` `</BODY>` `</HTML>` OuterHtml を呼び出すことで、この例では`div2`が返されます: `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>` <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>の呼び出しが返されます: `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` OuterHtml に新しい値を代入する場合、現在の要素の参照が無効になります名前が反映されません。でのみ割り当てられている HTML のプロパティと子のコンテンツ。                     </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>                                                                                                                        </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>"
  syntax:
    content: public string OuterHtml { get; set; }
    return:
      type: System.String
      description: "現在の要素とその子の HTML コード。"
  overload: System.Windows.Forms.HtmlElement.OuterHtml*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterText
  id: OuterText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または現在の要素のテキストを設定します。"
  remarks: "OuterText を持つ要素に HTML を割り当てようとする場合は、テキスト ファイル内で HTML を表示していた場合と同様、ドキュメント内でリテラルとして HTML コードが表示されます。 HTML 要素を使用して、割り当てた場合、<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>プロパティ、OuterText を返しますのすべてのテキストを使用して HTML マークアップを削除します</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>。       OuterText に値を代入すると、要素に属しているすべての子要素が破棄されます。"
  syntax:
    content: public string OuterText { get; set; }
    return:
      type: System.String
      description: "現在の要素および要素の子のテキスト。"
  overload: System.Windows.Forms.HtmlElement.OuterText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "この要素外のテキストを設定することはできません。"
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Parent
  id: Parent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "現在の要素の親要素を取得します。"
  remarks: "親プロパティでは、要素のコンテキストの検出を使用します。 イベント ハンドラー内で最も役に立つよう<xref:System.Windows.Forms.HtmlElement.Click>、ドキュメントのオブジェクト階層の任意の場所の任意の要素が起動することができます</xref:System.Windows.Forms.HtmlElement.Click>。       HTML 要素 (HTML ドキュメントの上部) の親プロパティは、それ自体へポイントします。 ループ内親を呼び出した場合、ループのブレークの条件が、現在の要素の型との種類を比較することを確認、`Parent`プロパティ、またはそうしないと、コードが無限ループを実行できます。"
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the Parent property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement Parent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "HTML ドキュメントの階層で現在の要素の上位要素です。"
  overload: System.Windows.Forms.HtmlElement.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  id: RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "すべての登録済みのイベント ハンドラーを名前付きイベントが発生します。"
  remarks: "このメソッドは HTML ドキュメント オブジェクト モデル (DOM) のイベントにアクセスに使用されます。 直接呼び出し、 [IHTMLElement3::fireEvent](http://go.microsoft.com/fwlink/?LinkId=103189)メソッドです。 を通じて DOM を使用する方法についての詳細、<xref:System.Windows.Forms.HtmlElement>クラスを参照してください[、管理されている HTML ドキュメント オブジェクト モデルでのアクセスの非公開メンバー](~/add/includes/ajax-current-ext-md.md)</xref:System.Windows.Forms.HtmlElement> 。"
  syntax:
    content: public void RaiseEvent (string eventName);
    parameters:
    - id: eventName
      type: System.String
      description: "発生させるイベントの名前。"
  overload: System.Windows.Forms.HtmlElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  id: RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "その要素にフォーカスがある場合は、現在の要素からフォーカスを削除します。"
  remarks: "このメソッドの呼び出しを生成、<xref:System.Windows.Forms.HtmlElement.LostFocus>要素のイベント</xref:System.Windows.Forms.HtmlElement.LostFocus>。       このメソッドを使用して要素からフォーカスをオフにした場合は、タブ オーダーの次の要素ではない要素を含むドキュメントに付与されます。"
  syntax:
    content: public void RemoveFocus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.RemoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "この要素の上端または下端がドキュメントのウィンドウに位置合わせされるまで、この要素を含むドキュメントをスクロールします。"
  remarks: ''
  example:
  - "The following code example finds an element by name and scrolls through the page so that the top of the element is aligned with the top of the visible page.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#12)]\n [!code-cs[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#12)]"
  syntax:
    content: public void ScrollIntoView (bool alignWithTop);
    parameters:
    - id: alignWithTop
      type: System.Boolean
      description: "場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>オブジェクトの上部がウィンドウの上部に表示されます。 場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>オブジェクトの下部がウィンドウの下部に表示されます。"
  overload: System.Windows.Forms.HtmlElement.ScrollIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  id: ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または要素の端とその内容の左端との間の距離を設定します。"
  remarks: "スクロール領域の全サイズは<xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; で使用できます。`ScrollLeft`と<xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>はいない独立しているために、公開これらは、開発者が設定されるスクロール領域の&2; つのプロパティ</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A></xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>。"
  syntax:
    content: public int ScrollLeft { get; set; }
    return:
      type: System.Int32
      description: "(ピクセル単位)、要素の左端とその内容の左端の間の距離。"
  overload: System.Windows.Forms.HtmlElement.ScrollLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  id: ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素のスクロール可能な領域の寸法を取得します。"
  remarks: "要素に、要素のオーバーフロー スタイルのレンダリングのスクロール バーを禁止する場合を除きはそのコンテンツがその次元のサイズを超えた場合スクロール可能な領域があります。       スクロール領域のサイズを直接変更することはできませんが、スクロール領域の端と、要素の端の間の距離を変更することができます。 使用して、<xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>と<xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>これを実現するプロパティ</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A></xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>。"
  syntax:
    content: public System.Drawing.Rectangle ScrollRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "要素のスクロール可能な領域のサイズと座標位置。"
  overload: System.Windows.Forms.HtmlElement.ScrollRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  id: ScrollTop
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または要素の端とその内容の上端との間の距離を設定します。"
  remarks: "スクロール領域の全サイズは<xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>; で使用できます。<xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>と`ScrollTop`はいない独立しているために、公開これらは、開発者が設定されるスクロール領域の&2; つのプロパティ</xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A></xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>。"
  syntax:
    content: public int ScrollTop { get; set; }
    return:
      type: System.Int32
      description: "(ピクセル単位) の要素の上端とその内容の上端との間の距離。"
  overload: System.Windows.Forms.HtmlElement.ScrollTop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "要素の名前付き属性の値を設定します。"
  remarks: "HTML 内の属性は、その要素のいずれかの有効な名前と値ペアです。 <xref:System.Windows.Forms.HtmlElement>要素の特定の種類にのみ適用されるものは除外され、すべての要素に共通している属性のみを公開します。`SRC`の定義済み属性は、`IMG`などのタグのではなく、`DIV`タグ。</xref:System.Windows.Forms.HtmlElement> 使用して<xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>と管理対象のドキュメント オブジェクト モデル (DOM) で公開されていない属性を操作する SetAttribute</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 。       場合`attributeName`定義された属性ではない、要素に SetAttribute は定義に新しい属性として要素にします。       <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>および SetAttribute 小文字は区別されません。</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>       設定する、`class`属性を<xref:System.Windows.Forms.HtmlElement>、として属性を参照する必要があります`className`SetAttribute に最初の引数を指定するときに</xref:System.Windows.Forms.HtmlElement>"
  example:
  - "The following code example adds a new `IMG` element to the current document, using SetAttribute to set the `SRC` attribute for the image.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#13)]\n [!code-cs[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#13)]"
  syntax:
    content: public void SetAttribute (string attributeName, string value);
    parameters:
    - id: attributeName
      type: System.String
      description: "設定する属性の名前。"
    - id: value
      type: System.String
      description: "この属性の新しい値。"
  overload: System.Windows.Forms.HtmlElement.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Style
  id: Style
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得または現在の要素のスタイルのセミコロン区切りのリストを設定します。"
  remarks: "HTML ドキュメント オブジェクト モデル (DOM) を使ってスタイル World Wide Web コンソーシアムをカスケード スタイル シートの仕様で定義されている要素の表示を制御します。 スタイル プロパティのスタイルがコロンで区切られた名前と値のペアで、次のように、セミコロンで区切られた各ペアの形式を取る:`style-name1:value1;...;[style-nameN:valueN;]`のフォントを設定する、 `DIV` 14 ポイント Times New roman bold 要素、たとえば、割り当てると、次の文字列: `font-face:Times New Roman;font-size:14px;font-weight:bold;` HTML DOM 内のすべての利用可能なスタイルの一覧については、次を参照してください。[スタイル属性](http://msdn.microsoft.com/library/ms534651.aspx)です。"
  syntax:
    content: public string Style { get; set; }
    return:
      type: System.String
      description: "すべての要素のスタイルから成る文字列"
  overload: System.Windows.Forms.HtmlElement.Style*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TabIndex
  id: TabIndex
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "取得またはタブ オーダーでこの要素の位置を設定します。"
  remarks: "Tabindex プロパティは、HTML ドキュメント内のどの要素は、ユーザーが TAB キーを押すとフォーカス次を決定します。 タブ オーダーに含まれる唯一の要素は、既定では、 `INPUT` 、要素、`SELECT`制御、および任意の要素が`contentEditable`プロパティに設定されている`true`です。 タブ オーダー内など任意の HTML 要素を含めることができます、 `DIV`、明示的な TabIndex を割り当てることによりします。       -32767 から 32767 までの TabIndex 範囲の有効な値です。"
  syntax:
    content: public short TabIndex { get; set; }
    return:
      type: System.Int16
      description: "タブ オーダー内の要素の数値インデックス。"
  overload: System.Windows.Forms.HtmlElement.TabIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TagName
  id: TagName
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "HTML タグの名前を取得します。"
  remarks: "HTML ドキュメント オブジェクト モデル内の要素は、属性、プロパティ、およびそれらの要素に固有のメソッドがあります。など、`HREF`属性を`A`要素、または`Submit`メソッド`FORM`です。 可能性のある任意の型の要素があるし、型固有の操作を実行する必要がある場合は、タグ名を使用します。"
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the `TagName` property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public string TagName { get; }
    return:
      type: System.String
      description: "HTML マークアップを使用してこの要素を作成するために使用する名前です。"
  overload: System.Windows.Forms.HtmlElement.TagName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Windows.Forms.HtmlElement.All
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
- uid: System.Windows.Forms.HtmlElementCollection
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementCollection
  nameWithType: HtmlElementCollection
  fullName: System.Windows.Forms.HtmlElementCollection
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
- uid: System.Windows.Forms.HtmlElement
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.HtmlElement.Children
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.Click
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
- uid: System.Windows.Forms.HtmlElementEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementEventHandler
  nameWithType: HtmlElementEventHandler
  fullName: System.Windows.Forms.HtmlElementEventHandler
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
- uid: System.Windows.Forms.HtmlElement.Document
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
- uid: System.Windows.Forms.HtmlDocument
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: System.Windows.Forms.HtmlDocument
- uid: System.Windows.Forms.HtmlElement.DomElement
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
- uid: System.Windows.Forms.HtmlElement.Drag
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
- uid: System.Windows.Forms.HtmlElement.DragEnd
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
- uid: System.Windows.Forms.HtmlElement.DragLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
- uid: System.Windows.Forms.HtmlElement.DragOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
- uid: System.Windows.Forms.HtmlElement.Enabled
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
- uid: System.Windows.Forms.HtmlElement.FirstChild
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
- uid: System.Windows.Forms.HtmlElement.Focusing
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.HtmlElement.GotFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
- uid: System.Windows.Forms.HtmlElement.Id
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
- uid: System.Windows.Forms.HtmlElementInsertionOrientation
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementInsertionOrientation
  nameWithType: HtmlElementInsertionOrientation
  fullName: System.Windows.Forms.HtmlElementInsertionOrientation
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.HtmlElement.KeyDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
- uid: System.Windows.Forms.HtmlElement.KeyPress
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
- uid: System.Windows.Forms.HtmlElement.KeyUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
- uid: System.Windows.Forms.HtmlElement.LostFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
- uid: System.Windows.Forms.HtmlElement.MouseDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
- uid: System.Windows.Forms.HtmlElement.MouseMove
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
- uid: System.Windows.Forms.HtmlElement.MouseOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
- uid: System.Windows.Forms.HtmlElement.MouseUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
- uid: System.Windows.Forms.HtmlElement.Name
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
- uid: System.Windows.Forms.HtmlElement.Style
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Windows.Forms.HtmlElement.TagName
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
- uid: System.Windows.Forms.HtmlElement.All*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
- uid: System.Windows.Forms.HtmlElement.AppendChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild
  nameWithType: HtmlElement.AppendChild
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler
  nameWithType: HtmlElement.AttachEventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
- uid: System.Windows.Forms.HtmlElement.Children*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.ClientRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler
  nameWithType: HtmlElement.DetachEventHandler
- uid: System.Windows.Forms.HtmlElement.Document*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
- uid: System.Windows.Forms.HtmlElement.DomElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.Enabled*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals
  nameWithType: HtmlElement.Equals
- uid: System.Windows.Forms.HtmlElement.FirstChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus
  nameWithType: HtmlElement.Focus
- uid: System.Windows.Forms.HtmlElement.GetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute
  nameWithType: HtmlElement.GetAttribute
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName
  nameWithType: HtmlElement.GetElementsByTagName
- uid: System.Windows.Forms.HtmlElement.GetHashCode*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode
  nameWithType: HtmlElement.GetHashCode
- uid: System.Windows.Forms.HtmlElement.Id*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement
  nameWithType: HtmlElement.InsertAdjacentElement
- uid: System.Windows.Forms.HtmlElement.InvokeMember*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember
  nameWithType: HtmlElement.InvokeMember
- uid: System.Windows.Forms.HtmlElement.Name*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality
  nameWithType: HtmlElement.op_Equality
- uid: System.Windows.Forms.HtmlElement.op_Inequality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality
  nameWithType: HtmlElement.op_Inequality
- uid: System.Windows.Forms.HtmlElement.OuterHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent
  nameWithType: HtmlElement.RaiseEvent
- uid: System.Windows.Forms.HtmlElement.RemoveFocus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus
  nameWithType: HtmlElement.RemoveFocus
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView
  nameWithType: HtmlElement.ScrollIntoView
- uid: System.Windows.Forms.HtmlElement.ScrollLeft*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute
  nameWithType: HtmlElement.SetAttribute
- uid: System.Windows.Forms.HtmlElement.Style*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
- uid: System.Windows.Forms.HtmlElement.TagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
