### YamlMime:ManagedReference
items:
- uid: System.Messaging.XmlMessageFormatter
  id: XmlMessageFormatter
  children:
  - System.Messaging.XmlMessageFormatter.#ctor
  - System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  - System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  - System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.Clone
  - System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.TargetTypeNames
  - System.Messaging.XmlMessageFormatter.TargetTypes
  - System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter
  fullName: System.Messaging.XmlMessageFormatter
  type: Class
  summary: "および XSD スキーマ定義に基づいた XML 形式を使用して、メッセージの本文からオブジェクトを逆シリアル化します。"
  remarks: "このが既定のフォーマッタのインスタンス<xref:System.Messaging.MessageQueue>をキューに書き込まれたメッセージをシリアル化を使用します</xref:System.Messaging.MessageQueue>。 <xref:System.Messaging.MessageQueue>このインスタンスが作成され、 <xref:System.Messaging.MessageQueue>。</xref:System.Messaging.MessageQueue>に関連付けられている</xref:System.Messaging.MessageQueue>のインスタンスを作成する場合 コードで作成し、 <xref:System.Messaging.MessageQueue.Formatter%2A>、 <xref:System.Messaging.MessageQueue>。</xref:System.Messaging.MessageQueue>プロパティ</xref:System.Messaging.MessageQueue.Formatter%2A>に割り当てることによって、別のフォーマッタを指定できます。       キューの既定のインスタンスは、キューへの書き込みに使用できますが、いずれかに設定するまで、キューからの読み取りに使用することはできません、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>フォーマッタのプロパティ</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>。 既定のフォーマッタ インスタンスに、これらの値の一方または両方を設定することができますか、または、フォーマッタの新しいインスタンスを作成して、適切なに引数として渡すことによって、値が自動的に設定<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクター</xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 。       指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。 これにより、フォーマッタがメッセージ本文を解釈できます。       メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。 使用して、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る</xref:System.Messaging.MessageQueue.Receive%2A>、メッセージを読み取るときに       2 つのプロパティの&1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、結合されたセット&2; つのプロパティからです。 使用するプロパティの意思決定は、アプリケーションに固有です。 メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。       このは、疎結合された XML ベースのメッセージングの重要なコンポーネントです。 XSD.exe ユーティリティを使用して、アプリケーションによって使用されるクラスをシリアル化する、ユーティリティを使用する場合など、XML スキーマを生成する XML 形式を使用します。 クラスには、既定のコンス トラクターが必要です。       形式が使用されるもう一度逆のプロセスで、ユーティリティは、スキーマに基づくクラスを生成するときに配布する、クラスのデータを記述します。 このユーティリティを生成する XML スキーマの使用では、クラスの実装が変更された後、クラスを再コンパイルするたびに、.dll ファイルを回避することができます。 クライアントまたはサーバーで、スキーマが変更されない限り、いずれかの側には、その他の変更は影響しません、他の。"
  example:
  - "The following code example includes three pieces of code: a server component, an order class, and client code. The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages. The schema is an XML formatted file that describes the \"shape\" of the class. This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.  \n  \n The following code example represents a server component that receives orders through a message queue. The body of the message should be an order object whose schema matches the Order.cs class below. The server process or application deserializes the order.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#1](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_1.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#1](~/add/codesnippet/cpp/t-system.messaging.xmlme_1.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#1](~/add/codesnippet/csharp/t-system.messaging.xmlme_1.cs)]  \n  \n The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#2](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_2.vb)]\n [!code-cs[Classic XmlMessageFormatter Example#2](~/add/codesnippet/csharp/t-system.messaging.xmlme_2.cs)]\n [!code-cpp[Classic XmlMessageFormatter Example#2](~/add/codesnippet/cpp/t-system.messaging.xmlme_2.cpp)]  \n  \n Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body. The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body. The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.  \n  \n When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema. It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class). This new order class is used to serialize the order into the message body.  \n  \n The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue. The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility. An order is sent to the Orders queue on the local computer.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#3](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_3.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#3](~/add/codesnippet/cpp/t-system.messaging.xmlme_3.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#3](~/add/codesnippet/csharp/t-system.messaging.xmlme_3.cs)]  \n  \n After the schema is generated from the order class on the server, you can modify the class. Unless the schema changes, you do not need to redistribute the schema. After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified. The two classes have become loosely coupled."
  syntax:
    content: 'public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>ターゲットせず、クラス型のセット。"
  remarks: "このコンス トラクターのオーバー ロードが最もよく使用、キューに書き込む際にように対象の種類の書き込み時に必要ありません。       インスタンスを使用してキューからメッセージの読み取りに<xref:System.Messaging.XmlMessageFormatter>をこのコンス トラクターを使用して作成する必要があります設定、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>フォーマッタを逆シリアル化しようとするどのような種類を認識するためのプロパティ</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A></xref:System.Messaging.XmlMessageFormatter>。       新規に作成するときに<xref:System.Messaging.MessageQueue>、既定の<xref:System.Messaging.XmlMessageFormatter>ターゲットの種類が設定されていないインスタンスを作成します</xref:System.Messaging.XmlMessageFormatter></xref:System.Messaging.MessageQueue>。 同様に、フォーマッタをこのコンス トラクターを使用して作成すると、キューから読みたい場合、対象の種類は、フォーマッタ インスタンスを設定する必要があります。"
  syntax:
    content: public XmlMessageFormatter ();
    parameters: []
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>クラス、(完全修飾) の文字列値の配列として渡されるターゲット型を設定します。"
  remarks: "対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。 作成する場合、対象の種類を指定する必要はありません。       このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>プロパティによって渡された配列の値を`targetTypeNames`パラメーター</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 。 により、このプロパティの設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>のオブジェクトを含むメッセージを読み取るインスタンスの種類を指定します</xref:System.Messaging.XmlMessageFormatter></xref:System.Messaging.MessageQueue>。       両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。 これにより、フォーマッタがメッセージ本文を解釈できます。       メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。 使用して、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る</xref:System.Messaging.MessageQueue.Receive%2A>、メッセージを読み取るときに       2 つのプロパティの&1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、結合されたセット&2; つのプロパティからです。 どちらかを使用する&1; つはアプリケーションに固有です。 メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は、読み取り時に例外がスローされます。"
  example:
  - >-
    [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.xmlme_1.cpp)]
     [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.xmlme_1.cs)]
     [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.xmlme_1.vb)]
  syntax:
    content: public XmlMessageFormatter (string[] targetTypeNames);
    parameters:
    - id: targetTypeNames
      type: System.String[]
      description: "型の配列<xref:System.String>されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します</xref:System.String>。 これらの値は、たとえば、「MyNamespace.MyOrders、MyOrdersAssemblyName」完全修飾する必要があります。"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  id: '#ctor(System.Type[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>クラス、オブジェクトの種類の配列として渡されるターゲット型を設定します。"
  remarks: "対象の型パラメーターを持つコンス トラクターは、キューから読み取るときに最も頻繁に使用します。 作成する場合、対象の種類を指定する必要はありません。       このオーバー ロード、<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>コンス トラクターのセット、<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティによって渡された配列の値を`targetTypes`パラメーター</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 。 このプロパティを使用して設定、<xref:System.Messaging.MessageQueue>これを使用して<xref:System.Messaging.XmlMessageFormatter>インスタンスを指定した型のオブジェクトを含むメッセージを読み取る</xref:System.Messaging.XmlMessageFormatter></xref:System.Messaging.MessageQueue>。       両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。 これにより、フォーマッタがメッセージ本文を解釈できます。       メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。 使用して、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る</xref:System.Messaging.MessageQueue.Receive%2A>、メッセージを読み取るときに       2 つのプロパティの&1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、結合されたセット&2; つのプロパティからです。 どちらかを使用する&1; つはアプリケーションに固有です。 メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合は、読み取り時に例外がスローされます。       指定するときに<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>なく<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時に種類の存在をチェックします</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>すべてのエントリの完全修飾アセンブリ名を指定する必要があります。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。       使用する場合<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>、各オブジェクトを追加することができます (たとえば、 `MyClass`) を次の c# コードに示す方法の一覧にします</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>。      ```   TargetTypes = new Type[]{typeof(MyClass)}   ```"
  syntax:
    content: public XmlMessageFormatter (Type[] targetTypes);
    parameters:
    - id: targetTypes
      type: System.Type[]
      description: "型の配列<xref:System.Type>されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します</xref:System.Type>。"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypes</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "フォーマッタがメッセージを逆シリアル化できるかどうかを判断します。"
  remarks: "CanRead が呼び出されたときに、フォーマッタは、メッセージの内容が、逆シリアル化できるものではかどうかを決定しようとします。 フォーマッタのみ逆シリアル化できる、メッセージ、メッセージ本文内の型によって表される配列内の種類のいずれかと同じスキーマがある場合、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。 CanRead 返します`false`次の&2; つの状況で:-メッセージにフォーマットされていない<xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>      の上記のいずれかの間でメッセージ本文のスキーマが、<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティ</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはどのような種類のオブジェクトができる必要がありますを逆シリアル化フォーマッタを伝えます</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。 CanRead が返す任意の型リストが見つからないか、まだがメッセージ内で見つかった場合は、`false`です。"
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>を検査します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>XML フォーマッタがメッセージを逆シリアル化できる場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Messaging.XmlMessageFormatter.CanRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "どちらも、 <> </> *> も<> *> プロパティが設定されています。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "インスタンスを作成、 <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>クラスが読み取り/書き込みプロパティ (ターゲットの種類のセット) は、現在と同じ<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>インスタンス。"
  remarks: "このメソッドはフォーマッタのコピーを作成し、この値に、すべてのプロパティを初期化<xref:System.Messaging.XmlMessageFormatter>オブジェクト</xref:System.Messaging.XmlMessageFormatter>。"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "オブジェクトのプロパティがこのと同じ<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>インスタンスはメタデータを持つができるフォーマッタ クラスのインスタンスを指定されていません。"
  overload: System.Messaging.XmlMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "指定されたメッセージの内容を読み取り、逆シリアル化されたメッセージを含むオブジェクトを作成します。"
  remarks: "両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。 メッセージを逆シリアル化前に、これらのプロパティのいずれかを設定する必要があります。       メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。 使用して、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る</xref:System.Messaging.MessageQueue.Receive%2A>、メッセージを読み取るときに       対象の種類をキューに書き込むために指定する必要はありません。"
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>、XML 形式で、逆シリアル化します。"
    return:
      type: System.Object
      description: "逆シリアル化されたメッセージ。"
  overload: System.Messaging.XmlMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "どちらも、 <> </> *> も<> *> プロパティが設定されています。       - または - メッセージの本文にシリアル化されたインスタンスが内の型によって表されているスキーマのいずれかに準拠していない、 <> </> *> と<> *> プロパティです。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  id: TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "指定されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します。"
  remarks: "両方の TargetTypeNames と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティがメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマをフォーマッタに伝えます</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>。 これにより、フォーマッタがメッセージ本文を解釈できます。       メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。 使用して、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る</xref:System.Messaging.MessageQueue.Receive%2A>、メッセージを読み取るときに       2 つのプロパティの&1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、結合されたセット&2; つのプロパティからです。 使用するプロパティの意思決定は、アプリケーションに固有です。 メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。       TargetTypeNames、アセンブリ名を指定する完全修飾であるすべてのエントリが必要です。 さらに、複数の同時実行バージョンを使用するときに、バージョン番号必要がありますも追加されますターゲットの型名にします。       対象の種類は、キューから読み取るときに必要なです。 TargetTypeNames と<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはキューへの書き込みに設定する必要はありません</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>。"
  syntax:
    content: public string[] TargetTypeNames { get; set; }
    return:
      type: System.String[]
      description: "型の配列<xref:System.String>、メッセージを読み取るときに、メッセージ本文から逆シリアル化するオブジェクトの種類を指定します</xref:System.String>。"
  overload: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "TargetTypeNames プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  id: TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "指定されたメッセージからフォーマッタによって逆シリアル化される型のセットを指定します。"
  remarks: "両方の<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>TargetTypes プロパティは、フォーマッタのメッセージを逆シリアル化とを照合するようにするには、どのようなスキーマを伝えてください</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。 これにより、フォーマッタがメッセージ本文を解釈できます。       メッセージの本文にシリアル化されたインスタンスは、配列型で表されているスキーマのいずれかで従う必要があります。 使用して、<xref:System.Messaging.MessageQueue.Receive%2A>メソッド、メソッドが識別されるスキーマに対応する型のオブジェクトを作成しそれをメッセージ本文を読み取る</xref:System.Messaging.MessageQueue.Receive%2A>、メッセージを読み取るときに       2 つのプロパティの&1; つのみが、キューから読み取るときに設定する必要がありますが、両方を設定することができます。 型のセットは、結合されたセット&2; つのプロパティからです。 使用するプロパティの意思決定は、アプリケーションに固有です。 メッセージ本文のスキーマと一致しません、これらのプロパティの配列の型のいずれかの型が含まれている場合、メッセージが読み取られるときに例外がスローされます。       対象の種類は、キューから読み取るときに必要なです。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、TargetTypes プロパティはキューへの書き込みに設定する必要はありません</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。       TargetTypes を指定する場合ではなくより<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>、読み取り時間、エラー発生の可能性を減らすことではなく、コンパイル時での種類の存在をチェックします</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。       TargetTypes を使用する場合は、各オブジェクトを追加することができます (たとえば、 `MyClass`) c# コードに示す方法の一覧に`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`です。"
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.xmlme_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.xmlme_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.xmlme_1.vb)]"
  syntax:
    content: public Type[] TargetTypes { get; set; }
    return:
      type: System.Type[]
      description: "型の配列<xref:System.Type>、メッセージを読み取るときに、メッセージ本文から逆シリアル化するオブジェクトの種類を指定します</xref:System.Type>。"
  overload: System.Messaging.XmlMessageFormatter.TargetTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "TargetTypes プロパティは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "メッセージの本文にオブジェクトをシリアル化します。"
  remarks: "対象の種類を指定して、キューへの書き込みを読み取るときにあることが必要とする必要はありません。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>または<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>プロパティはメッセージを逆シリアル化時にのみ、フォーマッタで使用します</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A></xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>。       <xref:System.Messaging.XmlMessageFormatter>では、使用、<xref:System.Xml.Serialization.XmlSerializer>クラスは、シリアル化可能なを定義します</xref:System.Xml.Serialization.XmlSerializer></xref:System.Messaging.XmlMessageFormatter>。 のみのパブリック フィールドおよびパブリック プロパティをシリアル化できます。 構造体、配列、および構造体の配列を含む構造体は、SOAP プロトコルでエンコードされたスタイルを使用しない限り、すべてシリアル化可能なされます。"
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>が<xref:System.Messaging.Message.Body*>プロパティがシリアル化されたオブジェクトが格納されます</xref:System.Messaging.Message.Body*>。"
    - id: obj
      type: System.Object
      description: "<xref:System.Object>メッセージの本文にシリアル化します</xref:System.Object>。"
  overload: System.Messaging.XmlMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>obj</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.XmlMessageFormatter.#ctor
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.XmlMessageFormatter.Clone
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
- uid: System.Messaging.XmlMessageFormatter.#ctor*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter.XmlMessageFormatter
- uid: System.Messaging.XmlMessageFormatter.CanRead*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: XmlMessageFormatter.CanRead
- uid: System.Messaging.XmlMessageFormatter.Clone*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: XmlMessageFormatter.Clone
- uid: System.Messaging.XmlMessageFormatter.Read*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read
  nameWithType: XmlMessageFormatter.Read
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write
  nameWithType: XmlMessageFormatter.Write
