### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform
  id: XmlLicenseTransform
  children:
  - System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor
  - System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  - System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml
  - System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput
  - System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(System.Type)
  - System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  - System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(System.Xml.XmlNodeList)
  - System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(System.Object)
  - System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  langs:
  - csharp
  name: XmlLicenseTransform
  nameWithType: XmlLicenseTransform
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform
  type: Class
  summary: "署名の XrML ライセンスに正規化するためのライセンス変換アルゴリズムを表します。"
  remarks: "XmlLicenseTransform クラスは、MPEG 権利の拡張機能の言語 (MPEG REL) で定義されているライセンス変換アルゴリズムを表します。       XmlLicenseTransform クラスを使用すると、署名の XrML ライセンスに変換します。       によって定義は、Uniform Resource Identifier () XmlLicenseTransform クラスについて説明する、<xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>フィールド</xref:System.Security.Cryptography.Xml.SignedXml.XmlLicenseTransformUrl>。"
  example:
  - "The following code example shows how to validate an XML digital signature using the <xref:System.Security.Cryptography.Xml.IRelDecryptor> interface and the XmlLicenseTransform class.  \n  \n [!code-cs[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/csharp/t-system.security.crypto_114_1.cs)]\n [!code-cpp[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/cpp/t-system.security.crypto_114_1.cpp)]\n [!code-vb[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/visualbasic/t-system.security.crypto_114_1.vb)]"
  syntax:
    content: 'public class XmlLicenseTransform : System.Security.Cryptography.Xml.Transform'
  inheritance:
  - System.Object
  - System.Security.Cryptography.Xml.Transform
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.Xml.Transform.Algorithm
  - System.Security.Cryptography.Xml.Transform.Context
  - System.Security.Cryptography.Xml.Transform.GetDigestedOutput(System.Security.Cryptography.HashAlgorithm)
  - System.Security.Cryptography.Xml.Transform.GetXml
  - System.Security.Cryptography.Xml.Transform.PropagatedNamespaces
  - System.Security.Cryptography.Xml.Transform.Resolver
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: XmlLicenseTransform()
  nameWithType: XmlLicenseTransform.XmlLicenseTransform()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.XmlLicenseTransform()
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref>クラスです。"
  syntax:
    content: public XmlLicenseTransform ();
    parameters: []
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  id: Decryptor
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: Decryptor
  nameWithType: XmlLicenseTransform.Decryptor
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "取得または設定の現在の復号化<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Security.Cryptography.Xml.XmlLicenseTransform>オブジェクトが使用する<xref:System.Security.Cryptography.Xml.IRelDecryptor>復号化するインターフェイス`<encryptedGrant>`現在からの要素`<license>`要素</xref:System.Security.Cryptography.Xml.IRelDecryptor></xref:System.Security.Cryptography.Xml.XmlLicenseTransform>。"
  example:
  - "The following code example shows how to validate an XML digital signature using the <xref:System.Security.Cryptography.Xml.IRelDecryptor> interface and the <xref:System.Security.Cryptography.Xml.XmlLicenseTransform> class.  \n  \n [!code-cs[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/csharp/p-system.security.crypto_17_1.cs)]\n [!code-cpp[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/cpp/p-system.security.crypto_17_1.cpp)]\n [!code-vb[Cryptography.XML.XmlLicenseTransform#2](~/add/codesnippet/visualbasic/p-system.security.crypto_17_1.vb)]"
  syntax:
    content: public System.Security.Cryptography.Xml.IRelDecryptor Decryptor { get; set; }
    return:
      type: System.Security.Cryptography.Xml.IRelDecryptor
      description: "現在の復号化<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml
  id: GetInnerXml
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: GetInnerXml()
  nameWithType: XmlLicenseTransform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "パラメーターの XML 表現を返します、 <xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref>オブジェクトは、XMLDSIG のサブ要素として含まれるに適した<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;></xref>要素。"
  syntax:
    content: protected override System.Xml.XmlNodeList GetInnerXml ();
    parameters: []
    return:
      type: System.Xml.XmlNodeList
      description: "現在の記述に必要な変換に固有のコンテンツを表す XML ノードの一覧<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref> 、XMLDSIG 内のオブジェクト<xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;></xref>要素。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput
  id: GetOutput
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: GetOutput()
  nameWithType: XmlLicenseTransform.GetOutput()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "出力が返されます、 <xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref>オブジェクト。"
  remarks: "返されるオブジェクトの種類は<xref:System.Xml.XmlDocument>。</xref:System.Xml.XmlDocument>をする必要があります。"
  syntax:
    content: public override object GetOutput ();
    parameters: []
    return:
      type: System.Object
      description: "出力、 <xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(System.Type)
  id: GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: GetOutput(Type)
  nameWithType: XmlLicenseTransform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(Type)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "出力が返されます、 <xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref>オブジェクト。"
  syntax:
    content: public override object GetOutput (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "返される出力の型。 <xref href=&quot;System.Xml.XmlDocument&quot;></xref>このパラメーターの唯一の有効な型です。"
    return:
      type: System.Object
      description: "出力、 <xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> type </code>パラメーターではありません、 <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>オブジェクト。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  id: InputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: InputTypes
  nameWithType: XmlLicenseTransform.InputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "有効な入力値をされている型の配列を取得、 <xref:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト</xref:System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*>。"
  remarks: "<xref:System.Security.Cryptography.Xml.XmlLicenseTransform>クラスは<xref:System.Xml.XmlDocument>。</xref:System.Xml.XmlDocument></xref:System.Security.Cryptography.Xml.XmlLicenseTransform>する唯一の有効な入力の型"
  syntax:
    content: public override Type[] InputTypes { get; }
    return:
      type: System.Type[]
      description: "有効な入力値には、型の配列、 <> </> *>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクトです。 これらの種類のいずれかのオブジェクトのみを渡すことができます、 <> </> *>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(System.Xml.XmlNodeList)
  id: LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: LoadInnerXml(XmlNodeList)
  nameWithType: XmlLicenseTransform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(XmlNodeList)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "解析して、指定した<xref href=&quot;System.Xml.XmlNodeList&quot;></xref>オブジェクトの変換に固有のコンテンツとして、 <xref uid=&quot;langword_csharp_&lt;Transform&gt;&quot; name=&quot;&lt;Transform&gt;&quot; href=&quot;&quot;> </xref>要素です。 このため、メソッドがサポートされていません、 <xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;> </xref>オブジェクトは内部の XML 要素を持たない。"
  syntax:
    content: public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);
    parameters:
    - id: nodeList
      type: System.Xml.XmlNodeList
      description: "<xref href=&quot;System.Xml.XmlNodeList&quot;> </xref>に現在読み込むトランス フォームをカプセル化するオブジェクト<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(System.Object)
  id: LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: LoadInput(Object)
  nameWithType: XmlLicenseTransform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(Object)
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在、指定された入力に読み込みます<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト。"
  syntax:
    content: public override void LoadInput (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "現在読み込む入力<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト。 入力オブジェクトの型でなければなりません<xref href=&quot;System.Xml.XmlDocument&quot;></xref>です。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "この変換を呼び出す前に、コンテキストは設定されませんでした。       - または -、 <xref uid=&quot;langword_csharp_&lt;issuer&gt;&quot; name=&quot;&lt;issuer&gt;&quot; href=&quot;&quot;> </xref>要素が、この変換を呼び出す前に設定されていません。       - または -、 <xref uid=&quot;langword_csharp_&lt;license&gt;&quot; name=&quot;&lt;license&gt;&quot; href=&quot;&quot;> </xref>要素が、この変換を呼び出す前に設定されていません。       - または -、<xref:System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*>この変換を呼び出す前に、プロパティは設定されませんでした</xref:System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*>。"
  platform:
  - net462
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  id: OutputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  langs:
  - csharp
  name: OutputTypes
  nameWithType: XmlLicenseTransform.OutputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography.Xml
  summary: "現在の OutputTypes メソッドからの有効な出力をされている型の配列を取得<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト。"
  remarks: "<xref:System.Security.Cryptography.Xml.XmlLicenseTransform>クラスは<xref:System.Xml.XmlDocument>。</xref:System.Xml.XmlDocument></xref:System.Security.Cryptography.Xml.XmlLicenseTransform>する唯一の有効な出力の種類"
  syntax:
    content: public override Type[] OutputTypes { get; }
    return:
      type: System.Type[]
      description: "現在の有効な出力型の配列<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト以外のオブジェクトのみを次のいずれかの型はから返されます、 <xref:System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*>、現在のメソッド<xref href=&quot;System.Security.Cryptography.Xml.XmlLicenseTransform&quot;></xref>オブジェクト</xref:System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*>。"
  overload: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.Xml.Transform
  isExternal: false
  name: System.Security.Cryptography.Xml.Transform
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: XmlLicenseTransform()
  nameWithType: XmlLicenseTransform.XmlLicenseTransform()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.XmlLicenseTransform()
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: Decryptor
  nameWithType: XmlLicenseTransform.Decryptor
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor
- uid: System.Security.Cryptography.Xml.IRelDecryptor
  parent: System.Security.Cryptography.Xml
  isExternal: false
  name: IRelDecryptor
  nameWithType: IRelDecryptor
  fullName: System.Security.Cryptography.Xml.IRelDecryptor
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetInnerXml()
  nameWithType: XmlLicenseTransform.GetInnerXml()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml()
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetOutput()
  nameWithType: XmlLicenseTransform.GetOutput()
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(System.Type)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetOutput(Type)
  nameWithType: XmlLicenseTransform.GetOutput(Type)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: InputTypes
  nameWithType: XmlLicenseTransform.InputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(System.Xml.XmlNodeList)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInnerXml(XmlNodeList)
  nameWithType: XmlLicenseTransform.LoadInnerXml(XmlNodeList)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml(XmlNodeList)
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(System.Object)
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInput(Object)
  nameWithType: XmlLicenseTransform.LoadInput(Object)
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput(Object)
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: OutputTypes
  nameWithType: XmlLicenseTransform.OutputTypes
  fullName: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.#ctor*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: XmlLicenseTransform
  nameWithType: XmlLicenseTransform.XmlLicenseTransform
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.Decryptor*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: Decryptor
  nameWithType: XmlLicenseTransform.Decryptor
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetInnerXml*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetInnerXml
  nameWithType: XmlLicenseTransform.GetInnerXml
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.GetOutput*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: GetOutput
  nameWithType: XmlLicenseTransform.GetOutput
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.InputTypes*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: InputTypes
  nameWithType: XmlLicenseTransform.InputTypes
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInnerXml*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInnerXml
  nameWithType: XmlLicenseTransform.LoadInnerXml
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.LoadInput*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: LoadInput
  nameWithType: XmlLicenseTransform.LoadInput
- uid: System.Security.Cryptography.Xml.XmlLicenseTransform.OutputTypes*
  parent: System.Security.Cryptography.Xml.XmlLicenseTransform
  isExternal: false
  name: OutputTypes
  nameWithType: XmlLicenseTransform.OutputTypes
