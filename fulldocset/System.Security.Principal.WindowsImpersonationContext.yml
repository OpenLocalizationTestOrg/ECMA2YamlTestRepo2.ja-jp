### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsImpersonationContext
  id: WindowsImpersonationContext
  children:
  - System.Security.Principal.WindowsImpersonationContext.Dispose
  - System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  - System.Security.Principal.WindowsImpersonationContext.Undo
  langs:
  - csharp
  name: WindowsImpersonationContext
  nameWithType: WindowsImpersonationContext
  fullName: System.Security.Principal.WindowsImpersonationContext
  type: Class
  summary: "権限借用の操作の前に Windows ユーザーを表します。"
  remarks: "このクラスは、ユーザーが別のユーザーを偽装後に、ユーザーの id を元に戻します。      > [!IMPORTANT] > この型は、<xref:System.IDisposable>インターフェイス</xref:System.IDisposable>。 型を使用してが完了したらを直接的または間接的にその破棄する必要があります。 型の直接 dispose を呼び出す、<xref:System.IDisposable.Dispose%2A>メソッドで、 `try` / `catch`ブロック</xref:System.IDisposable.Dispose%2A>。 など、使用言語構成要素に直接ことのない dispose `using` (C# の場合) または`Using`(Visual Basic で)。 詳細についてを参照してください&quot;を使用して、オブジェクトを実装する IDisposable&quot;、<xref:System.IDisposable>インターフェイスに関するトピック</xref:System.IDisposable>。"
  example:
  - "The following example demonstrates how to impersonate a user and then revert to the original identity.  \n  \n [!code-cpp[WindowsIdentity Impersonation#1](~/add/codesnippet/cpp/t-system.security.princi_4_1.cpp)]\n [!code-cs[WindowsIdentity Impersonation#1](~/add/codesnippet/csharp/t-system.security.princi_4_1.cs)]\n [!code-vb[WindowsIdentity Impersonation#1](~/add/codesnippet/visualbasic/t-system.security.princi_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsImpersonationContext : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: WindowsImpersonationContext.Dispose()
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;></xref>です。"
  remarks: "<xref:System.Security.Principal.WindowsImpersonationContext>。</xref:System.Security.Principal.WindowsImpersonationContext>の使用が終了したときに、Dispose を呼び出す Dispose メソッドは、<xref:System.Security.Principal.WindowsImpersonationContext>使用不可の状態</xref:System.Security.Principal.WindowsImpersonationContext>。 Dispose を呼び出した後は、すべての参照を解放する必要があります、<xref:System.Security.Principal.WindowsImpersonationContext>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.Principal.WindowsImpersonationContext>占有されていた</xref:System.Security.Principal.WindowsImpersonationContext></xref:System.Security.Principal.WindowsImpersonationContext>。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。       **注:** <xref:System.Security.Principal.WindowsImpersonationContext></xref:System.Security.Principal.WindowsImpersonationContext>の最後の参照を解放する前に常に呼び出しが破棄。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Security.Principal.WindowsImpersonationContext>オブジェクトの**Finalize**メソッド</xref:System.Security.Principal.WindowsImpersonationContext>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Principal.WindowsImpersonationContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: WindowsImpersonationContext.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A>。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.Principal.WindowsImpersonationContext>参照。</xref:System.Security.Principal.WindowsImpersonationContext> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.Principal.WindowsImpersonationContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsImpersonationContext.Undo
  id: Undo
  parent: System.Security.Principal.WindowsImpersonationContext
  langs:
  - csharp
  name: Undo()
  nameWithType: WindowsImpersonationContext.Undo()
  fullName: System.Security.Principal.WindowsImpersonationContext.Undo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "このオブジェクトによって表される、Windows ユーザーに、ユーザー コンテキストを元に戻します。"
  remarks: ''
  example:
  - "The following example shows how to impersonate a Windows identity using a specified user token.  \n  \n [!code-cpp[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/cpp/m-system.security.princi_8_1.cpp)]\n [!code-cs[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/csharp/m-system.security.princi_8_1.cs)]\n [!code-vb[Classic WindowsImpersonationContext.Undo Example#1](~/add/codesnippet/visualbasic/m-system.security.princi_8_1.vb)]"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Security.Principal.WindowsImpersonationContext.Undo*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "このメソッドを使用して目的を問わず以外の値を自己の身元を元に戻すしようとしました。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose()
  nameWithType: WindowsImpersonationContext.Dispose()
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose()
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: WindowsImpersonationContext.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsImpersonationContext.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.WindowsImpersonationContext.Undo
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Undo()
  nameWithType: WindowsImpersonationContext.Undo()
  fullName: System.Security.Principal.WindowsImpersonationContext.Undo()
- uid: System.Security.Principal.WindowsImpersonationContext.Dispose*
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Dispose
  nameWithType: WindowsImpersonationContext.Dispose
- uid: System.Security.Principal.WindowsImpersonationContext.Undo*
  parent: System.Security.Principal.WindowsImpersonationContext
  isExternal: false
  name: Undo
  nameWithType: WindowsImpersonationContext.Undo
