### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener
  id: FileLogTraceListener
  children:
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener
  type: Class
  summary: "ログ出力をファイルに指示する単純なリスナーを提供します。"
  remarks: "FileLogTraceListener クラスでは、必要に応じて、毎日ごとまたはアプリケーションごとに、ログ ファイルをアーカイブする自動メンテナンス機能を提供します。 この自動アーカイブ機能により、開発者および管理者の保守作業の負担を軽減できます。       FileLogTraceListener のインスタンスを追加することができます、<xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>または<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>をテキスト ファイルにログ記録からの出力にリダイレクトするコレクション</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName></xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>。 このクラスのインスタンスを追加することも`My.Application.Log`または`My.Log`(用 Web アプリケーション) で[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]アプリケーションです。 詳細については、次を参照してください。[チュートリアル: 変更場所 My.Application.Log 書き込みます情報](~/add/includes/ajax-current-ext-md.md)`.`このクラスの主な機能: 1。  *アーカイブ機能*します。 このクラスで生成されるログ ファイルは、基本名と、ログの連続するバージョンのログ ファイルを区別するための番号と共に、日付に従ってという名前です。 新しいログ ファイルは、必要に応じてごとに作成されます。           ファイル名の明示的な形式は`baseName`[-`dateStamp`] [-`version`] .log、場所: -`baseName`要素は、基本的なログ名で指定された、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>。          -`dateStamp`ときに表示され、一部が、形式&quot;YYYY MM DD&quot;、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>または<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption><xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>          -同じ&2; つ以上のログ ファイルが必要な場合`baseName`と`dateStamp`、`version`パート、正`Integer`ファイル名に追加されます。      2.  *複数のクラス インスタンス*です。 FileLogTraceListener クラスのインスタンスが使用されているファイルに書き込む場合:-クラスは、同じプロセスで FileLogTraceListener クラスの別のインスタンスによって使用されている場合にファイルを共有します。          -クラスは、ファイルが別のプロセスによって使用されている場合は、[次へ] の使用可能な名前を使用して、新しいログ ファイルを作成します。      3.  *スレッド セーフ*です。 FileLogTraceListener クラスは、スレッド セーフです。 これにより、安全なメッセージ ログに書き込む、複数のスレッドからロックを使用せずにできます。       **ログ ファイルの場所**-<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>プロパティが受け取る、<xref:Microsoft.VisualBasic.Logging.LogFileLocation>にログ ファイルを書き込むための一般的なディレクトリのいずれかを指定する列挙体です</xref:Microsoft.VisualBasic.Logging.LogFileLocation></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>。      -ログに書き込まれる別の場所に、設定、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>プロパティをその場所</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>。       **ログ ファイル名**-でログ ファイルの基本名が指定された、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>。      -現在のログ ファイル名を読み取ることができます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。 これについては、ファイル システムにその他のいくつかのプロパティと、ログの現在の状態から派生します。       **ログのメンテナンス**-新しいログ ファイルを作成するための最低限の頻度によって決まります、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>。 値が<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>または<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>、日または週ごとに少なくとも&1; 回、新しいログ ファイルが作成され、日付スタンプに組み込まれます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A></xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption></xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>。      -の最大サイズ (バイト単位)、ログ ファイルがによって決まりますが、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>。 ログに書き込まれた追加のメッセージは破棄され、に応じてログ ファイルのサイズがこのサイズを超える場合、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>プロパティ、例外がスローされます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>。      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>プロパティは、どの程度空き容量 (バイト単位) を使用する必要がありますを決定します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>。 これにより、FileLogTraceListener クラスはすべての利用可能なディスク領域を使用しないことを確認してください。 使用して、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>があるときにログの動作を指定するプロパティに書き込むより小さい<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>バイトの空き領域</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>。       **ログ ファイルの出力設定**-<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>かどうか、基になるストリームをフラッシュする自動的にそれぞれの書き込み後に、ログ ファイルにプロパティを指定します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>。      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>プロパティでは、許可された場合、メッセージを現在のログ ファイルに追加したり、新しいログ ファイルに書き込むかどうかを指定します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>。      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>プロパティ ログ メッセージ内のフィールドの区切り記号として使用する文字列を指定します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>プロパティは、新しいログ ファイルを作成するときに使用するエンコーディングを指定します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>。       **ログ ファイルの出力**-<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>と<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>メソッドは、ログ ファイルにメッセージを書き込みます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>。 これらのメソッドを確認して、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>と共に、新しいログを作成するかどうかを判断する同じ基本名を持つ既存のログのプロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>。      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>メソッドは、ログ ファイルに出力バッファーに現在あるメッセージをフラッシュします</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>。      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>メソッドは、他のプロセスで使用できるように、ログ ファイルを閉じます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>。       **出力を有効にする**トレースまたはトレース リスナーを使用してデバッグを有効にする必要があります。 次の構文は、コンパイラに固有です。 C# 以外のコンパイラを使用する場合または[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]コンパイラのドキュメントを参照してください。      -C# でのデバッグを有効にするには、`/d:DEBUG`するを追加したり、コードをコンパイルするときに、コンパイラのコマンドラインにフラグ`#define DEBUG`ファイルの先頭にします。 [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]、追加、`/d:DEBUG=True`フラグをコンパイラ コマンドライン。      -C# でのトレースを有効にするには、`/d:TRACE`フラグを追加したり、コードをコンパイルすると、コンパイラのコマンドライン`#define TRACE`ファイルの先頭にします。 [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]、追加、`/d:TRACE=True`フラグをコンパイラ コマンドライン。       リスナーのレベルを設定するには、アプリケーションの構成ファイルを編集します。 このファイル内でことができます、リスナーを追加、その型およびパラメーターの設定、リスナーの削除またはオフにするアプリケーションで設定したすべてのリスナーです。 構成ファイルは、次の例のようにフォーマットされている必要があります。       この例を実行するには、完全修飾アセンブリ名を指定する必要があります。 アセンブリの完全修飾名を取得する方法については、次を参照してください。[アセンブリ名](~/add/includes/ajax-current-ext-md.md)です。      ```   <configuration>       <system.diagnostics>           <sharedListeners>               <add name=&quot;FileLog&quot;                   type=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener,                          Microsoft.VisualBasic, Version=8.0.0.0,                          Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,                          processorArchitecture=MSIL&quot;                    initializeData=&quot;FileLogWriter&quot;/>           </sharedListeners>       </system.diagnostics>   </configuration>   ```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public class FileLogTraceListener : System.Diagnostics.TraceListener
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FileLogTraceListener()
  nameWithType: FileLogTraceListener.FileLogTraceListener()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref>既定の名前を持つクラス。"
  remarks: "このメソッドのインスタンス名を設定、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>FileLogTraceListener するクラス</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。       使って、インスタンス名にアクセスすることができます、<xref:System.Diagnostics.TraceListener.Name%2A>プロパティ</xref:System.Diagnostics.TraceListener.Name%2A>。"
  syntax:
    content: public FileLogTraceListener ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FileLogTraceListener(String)
  nameWithType: FileLogTraceListener.FileLogTraceListener(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;> </xref>指定された名前を持つクラス。"
  remarks: "このメソッドのインスタンス名を設定、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>クラスを`name`</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。       考えるインスタンス名にアクセスすることができます、<xref:System.Diagnostics.TraceListener.Name%2A>プロパティ</xref:System.Diagnostics.TraceListener.Name%2A>。"
  syntax:
    content: public FileLogTraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. インスタンスのオブジェクトの名前。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  id: Append
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Append
  nameWithType: FileLogTraceListener.Append
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "現在のファイルに出力を追加または新しいファイルに書き込むかどうかを判断します。"
  remarks: "追加プロパティが`False`、新しいファイルに出力が書き込まれます。 このプロパティが`True`、しない限り、現在のファイルに出力が追加されます:-出力ファイルが別のプロセスによってロックされています。 このような状況に組み込まれているバージョン番号を持つ、新しいログ ファイルを作成、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。      -現在のファイル サイズがどのようなより大きい、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>プロパティを使用します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>。 この場合、追加のメッセージは破棄され、に応じて、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>プロパティ、例外がスローされます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>。      -既存のファイル名がで指定されたログの作成のスケジュールに従って期限切れ、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>。 このような状況で、新しいログ ファイルが作成され、日付スタンプに組み込まれます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。"
  syntax:
    content: public bool Append { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>、で<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> 、出力が、現在のファイルに追加されることを示すと<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>新しいファイルに出力を書き込むことを示すです。 このプロパティは、の既定の設定<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  id: AutoFlush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "ログ ファイルのストリームへの書き込みが、バッファーをフラッシュするかどうかを示します。"
  remarks: "`False` AutoFlush プロパティを提供、ほとんどのアプリケーションのパフォーマンスが最適に設定すると、ログ ファイルに同時に複数のメッセージを記述する方が効率的になっているためです。 使用することができます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>ログ ファイルに現在あるメッセージをフラッシュするメソッドのバッファーを出力します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>。 使用することも、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>メソッドで、暗黙的に、ログ ファイルを閉じる前に、ストリームをフラッシュします</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>。"
  syntax:
    content: public bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>、で<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> ; すべての書き込み後にストリームがフラッシュされることを示すそれ以外の場合、ログ エントリがバッファーされより効率的に書き込まれます。 このプロパティは、の既定の設定<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  id: BaseFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得またはログ ファイルの完全名の作成に使用されるログ ファイルのベース名を設定します。"
  remarks: "The BaseFileName property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to.  \n  \n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the BaseFileName property.  \n  \n-   The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is set to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."
  syntax:
    content: public string BaseFileName { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. ログ ファイルの基本名です。 既定では、アプリケーションの製品名です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  id: Close
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: FileLogTraceListener.Close()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "現在のログ ファイルの基になるストリームを閉じ、現在のストリームに関連付けられているすべてのリソースを解放します。"
  remarks: "Close メソッドを明示的に呼び出す必要はありません、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>クラスは、基になるストリームを管理します</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  id: CustomLocation
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得またはログ ファイルのディレクトリを設定するときに、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*>プロパティに設定されている<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;> </xref></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*> 。"
  remarks: "また、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> <xref:Microsoft.VisualBasic.Logging.LogFileLocation>。</xref:Microsoft.VisualBasic.Logging.LogFileLocation>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>を設定 CustomLocation プロパティが設定されている場合       ディレクトリを解決できない場合、CustomLocation プロパティは例外をスローします。"
  syntax:
    content: public string CustomLocation { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>、これは、ログ ファイル ディレクトリの名前。 このプロパティの既定の設定は、アプリケーション データ用のユーザーのディレクトリです。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  id: Delimiter
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得またはログ メッセージ内のフィールドを区切るために使用する区切り記号を設定します。"
  remarks: "区切り記号プロパティでは、既定の区切り記号を変更することができます。"
  syntax:
    content: public string Delimiter { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>、これは、ログ メッセージのフィールドの区切り記号。 このプロパティの既定の設定は、タブ文字です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  id: DiskSpaceExhaustedBehavior
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "ログ ファイルに書き込むときの対処方法を決定し、小さいディスクの空き領域が使用可能なで指定されて、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*>。"
  remarks: "DiskSpaceExhaustedBehavior プロパティに設定するときに<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>、十分な予約済みのディスク領域がない場合、サイレント モードで、ログ メッセージは破棄されます</xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>。 これは、既定の動作であり、ディスクが十分な空き領域を取得する場合に失敗したことによる単純なアプリケーションが妨げられるため。       堅牢なアプリケーションでは、DiskSpaceExhaustedBehavior プロパティに設定できます<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>、し、追加`Try...Catch`ログに書き込みを行うすべてのコード ブロック</xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>"
  syntax:
    content: public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&quot;></xref>. ファイルし、小さいディスクの空き領域が使用可能なで指定されて、ログに書き込むしようとするときの対処方法を決定、 <> </> *> プロパティ、またはログ ファイルのサイズがどのようなより大きい場合、 <> </> *> プロパティを使用します。 既定値は<xref href=&quot;Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileLogTraceListener.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "基になるストリームを閉じ、オプションでマネージ リソースも解放します。"
  remarks: "ときに、`disposing`パラメーターは`True`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>参照。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 。 このメソッドを呼び出して、`Dispose`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージの両方のリソースを解放します。<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  id: Encoding
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得または新しいログ ファイルを作成するときに使用するエンコーディングを設定します。"
  remarks: "既存のログ ファイルにテキストを追加するときに Encoding プロパティで指定するエンコードの代わりにそのファイルのエンコーディングを使用します。"
  syntax:
    content: public System.Text.Encoding Encoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>、新しいログ ファイル作成するときに使用するエンコードされます。</xref:System.Text.Encoding> このプロパティの既定値は<xref:System.Text.UTF8Encoding>。</xref:System.Text.UTF8Encoding>"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  id: Flush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: FileLogTraceListener.Flush()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "現在のログ ファイルに書き込む基になるストリームをフラッシュします。"
  remarks: "現在のログ ファイルにバッファリングされているすべてのデータを書き込むには Flush メソッドを使用します。"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  id: FullLogFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "現在のログ ファイルの完全名を取得します。"
  remarks: "The FullLogFileName property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log-file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where:  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \n  \n-   The `dateStamp` part has the format YYYY-MM-DD, and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."
  syntax:
    content: public string FullLogFileName { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>、名前は、現在のログ ファイルの完全名。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: FileLogTraceListener.GetSupportedAttributes()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "トレース リスナーによってサポートされるカスタムの XML 構成属性を取得します。"
  remarks: "<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener><xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>クラス</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>のインスタンスの動作を制御するための XML 構成ファイルで使用できます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>のカスタム属性 他の属性を使用して、構成例外が発生します。"
  syntax:
    content: protected override string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>このリスナーによって認識される XML 構成属性を含む配列です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  id: IncludeHostName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "出力のログ記録のマシンのホスト名を含める必要があるかどうかを示します。"
  remarks: "動作を構成するプロパティを使用して、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>と<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>メソッド</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>。"
  syntax:
    content: public bool IncludeHostName { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 使用して<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>ホストの識別子が含まれる場合はそれ以外の場合使用<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  id: Location
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Location
  nameWithType: FileLogTraceListener.Location
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得またはログ ファイルの場所を設定します。"
  remarks: "Use the Location property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values.  \n  \n|**Location value**|**Path**|  \n|------------------------|--------------|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data that is shared among all users, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\All Users\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the executable file that started the application.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data of a user, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\\\`username`\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path of the current system's temporary folder.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user.|"
  syntax:
    content: public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.LogFileLocation
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;></xref>、これは、ログ ファイルの場所。 既定値は<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  id: LogFileCreationSchedule
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "ログ ファイルの名前に含める日付を決定します。"
  remarks: "1 つの割り当て、 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>LogFileCreationSchedule プロパティの ログ ファイルの名前を含める日付を指定する列挙値</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>。       日付の形式は、YYYY-MM-DD です。 ログ ファイル名の形式の詳細については、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>を参照してください。      |**LogFileCreationSchedule 値**|**、ログ ファイル名に日付**|  |---------------------------------------|-----------------------------------|  |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|ログ ファイル名に、現在の日付を含めます |。  |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|ログ ファイル名に日付を含めないでください |。  |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|ログ ファイル名に、現在の週の最初の日を含めます</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption></xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption></xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>。<br /><br /> 週開始日は土曜日です |。"
  syntax:
    content: public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&quot;></xref>. これは、ログ ファイル名に追加する日付を示します。 既定値は<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&quot;></xref>です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  id: MaxFileSize
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得またはログ ファイルの最大許容サイズをバイト単位で設定します。"
  remarks: "あるログ ファイルは大きくなりすぎないかどうかを確認するには、このプロパティを使用します。       場合は、ログ ファイルのサイズ (バイト単位) が、このプロパティの値よりも大きい場合、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>の値に応じて、メッセージは破棄され、障害がサイレント モードまたは例外をログにメッセージを書き込むクラス試行がスローされます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。 それ以外の場合、メッセージを記述、ログに空きディスク領域 (バイト単位) の量が<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>より小さい場合"
  syntax:
    content: public long MaxFileSize { get; set; }
    return:
      type: System.Int64
      description: "<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. これは、ログのファイルの最大許容サイズ、(バイト単位) です。 既定値は、5000000 です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "このプロパティに設定すると、値 1000 より小さい。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  id: ReserveDiskSpace
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "取得または設定、空きディスク領域の量 (バイト単位) で必要なメッセージをログ ファイルに書き込む前にします。"
  remarks: "あるログ ファイルに完全に収まらないディスクかどうかを確認するには、このプロパティを使用します。       空きディスク容量 (バイト単位) の領域の場合は、このプロパティの値よりも小さい、ときに、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>の値に応じて、メッセージは破棄され、障害がサイレント モードまたは例外をログにメッセージを書き込むクラス試行がスローされます、<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>プロパティ</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>。 それ以外の場合、メッセージがログに書き込まれます、ログ ファイル サイズ (バイト単位) が<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>より大きい場合"
  syntax:
    content: public long ReserveDiskSpace { get; set; }
    return:
      type: System.Int64
      description: "<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. これは、必要な空きディスク領域の量です。 既定値は 10000000 です。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "このプロパティを 0 より小さい値に設定するとします。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "トレース情報、データ オブジェクト、およびイベント情報を出力ファイルまたはストリームに書き込みます。"
  remarks: "このメソッド: 1。  出力のデータとコンテキスト情報を書式設定します。      2.  必要な場合は、新しいログ ファイルを作成します。      3.  ログ ファイルに情報を書き込みます。       新しいログ ファイルを作成する方法の詳細については、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>を参照してください。       次の表では、出力フィールドを出現順に一覧表示します。 フィールドは文字列で区切られますを<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>プロパティを指定すると、および行終端記号が続きます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。      |**フィールド**|**条件を出力**|**説明**|  |---------------|--------------------------|---------------------|  |`source`|常に |値`name`|。  |`severity`|常に |列挙値の名前`eventType`|。  |`id`|常に |文字列形式を`id`|。  |`message`|常に |文字列形式を`data`|。  |`callStack`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.Callstack%2A>プロパティ`eventCache`|。  |`CorrelationID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`DateTime`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.DateTime%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.DateTime%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.Callstack%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ProcessID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.ProcessId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ThreadID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`Timestamp`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.Timestamp%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>プロパティが`True`|。コンピューターの名前です |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 。"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "このメソッドを呼び出したトレース ソースの名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: data
      type: System.Object
      description: "出力するトレース データ。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "トレース情報、データ オブジェクト、およびイベント情報を出力ファイルまたはストリームの配列に書き込みます。"
  remarks: "このメソッド: 1。  2 の出力のデータとコンテキスト情報を書式設定します。  新しいログ ファイルを必要に応じて、3。  ログ ファイルに情報を書き込みます。       新しいログ ファイルを作成する方法の詳細については、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>を参照してください。       次の表では、出力フィールドを出現順に一覧表示します。 フィールドは文字列で区切られますを<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>プロパティを指定すると、および行終端記号が続きます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。      |**フィールド**|**条件を出力**|**説明**|  |---------------|--------------------------|---------------------|  |`source`|常に |値`name`|。  |`severity`|常に |列挙値の名前`eventType`|。  |`id`|常に |文字列形式を`id`|。  |`message`|常に |内の各要素の文字列形式から成る文字列`data`<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>区切って各 |。  |`callStack`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.Callstack%2A>プロパティ`eventCache`|。  |`CorrelationID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`DateTime`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.DateTime%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.DateTime%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.Callstack%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ProcessID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.ProcessId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ThreadID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`Timestamp`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.Timestamp%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>プロパティが`True`|。コンピューターの名前です |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 。"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "このメソッドを呼び出したトレース ソースの名前。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: data
      type: System.Object[]
      description: "データとして出力するオブジェクトの配列。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "トレース情報、メッセージ、およびイベント情報を出力ファイルまたはストリームに書き込みます。"
  remarks: "このメソッド: 1。  出力のデータとコンテキスト情報を書式設定します。      2.  必要な場合は、新しいログ ファイルを作成します。      3.  ログ ファイルに情報を書き込みます。       新しいログ ファイルを作成する方法の詳細については、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>を参照してください。       次の表は、表示される順序で出力フィールドを一覧表示します。 フィールドは文字列で区切られますを<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>プロパティを指定すると、および行終端記号が続きます</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。      |**フィールド**|**条件を出力**|**説明**|  |---------------|--------------------------|---------------------|  |`source`|常にします |。値`name`|。  |`severity`|常にします |。列挙値の名前`eventType`|。  |`id`|常にします |。文字列形式を`id`|。  |`message`|常にします |。値`message`|。  |`callStack`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.Callstack%2A>プロパティ`eventCache`|。  |`CorrelationID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`DateTime`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.DateTime%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.DateTime%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.Callstack%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ProcessID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.ProcessId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ThreadID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`Timestamp`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.Timestamp%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>プロパティが`True`|。コンピューターの名前です |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 。"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "このメソッドを呼び出したトレース ソースの名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "トレース情報、書式付き配列、オブジェクト、およびイベント情報を出力ファイルまたはストリームに書き込みます。"
  remarks: "このメソッド: 1。  出力のデータとコンテキスト情報を書式設定します。      2.  新しい新しいログ ファイルでは、必要に応じて作成します。      3.  ログ ファイルに情報を書き込みます。       新しいログ ファイルを作成する方法の詳細については、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>を参照してください。       次の表は、表示される順序で出力フィールドを一覧表示します。 フィールドは文字列で区切られますを<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>プロパティを指定し、続けて行終端記号</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。      |**フィールド**|**条件を出力**|**説明**|  |---------------|--------------------------|---------------------|  |`source`|常に |値`name`|。  |`severity`|常に |列挙値の名前`eventType`|。  |`id`|常に |文字列形式を`id`|。  |`message`|常に |内のデータ`args`でフォーマットされている、`format`文字列および文字列変換にインバリアント カルチャを使用します |。  |`callStack`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.Callstack%2A>プロパティ`eventCache`|。  |`CorrelationID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`DateTime`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.DateTime%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.DateTime%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.Callstack%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ProcessID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.ProcessId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`ThreadID`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>プロパティ`eventCache`|。  |`Timestamp`|<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>プロパティで<xref:System.Diagnostics.TraceOptions>フラグを設定するとします |。文字列形式を、<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>プロパティ`eventCache`</xref:System.Diagnostics.TraceEventCache.Timestamp%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A></xref:System.Diagnostics.TraceEventCache.ThreadId%2A></xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>。 インバリアント カルチャが文字列の変換を使用します |。  |`HostName`|<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>プロパティが`True`|。コンピューターの名前です |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 。"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>プロセス ID、スレッド ID、およびスタック トレース情報を含む現在のオブジェクト。"
    - id: source
      type: System.String
      description: "このメソッドを呼び出したトレース ソースの名前です。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "1 つ、 <xref href=&quot;System.Diagnostics.TraceEventType&quot;> </xref>列挙値。"
    - id: id
      type: System.Int32
      description: "イベントの数値識別子。"
    - id: format
      type: System.String
      description: "書式指定文字列内のオブジェクトに対応する、0 個以上の書式項目を含む、`args`配列。"
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>書式指定する&0; 個以上のオブジェクトを含む配列。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: FileLogTraceListener.Write(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "追加のコンテキスト情報がないまま、ディスクにもそのままメッセージを書き込みます。"
  remarks: "Write メソッドは、ログ ファイルは、追加のコンテキスト情報なしに、特定のメッセージを書き込みます。       いずれかを使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>、ログの出力にコンテキスト情報を含める方法です</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>。"
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 記述するカスタム メッセージです。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: FileLogTraceListener.WriteLine(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "現在の行終端記号、追加のコンテキスト情報なしの後に、ディスクにもそのままメッセージを書き込みます。"
  remarks: "WriteLine メソッドでは、ログ ファイルは、追加のコンテキスト情報なしに、特定のメッセージを書き込みます。       いずれかを使用して、 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>、ログの出力にコンテキスト情報を含める方法です</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>。"
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 記述するカスタム メッセージです。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener()
  nameWithType: FileLogTraceListener.FileLogTraceListener()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener(String)
  nameWithType: FileLogTraceListener.FileLogTraceListener(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Append
  nameWithType: FileLogTraceListener.Append
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: FileLogTraceListener.Close()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
- uid: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: DiskSpaceExhaustedOption
  nameWithType: DiskSpaceExhaustedOption
  fullName: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileLogTraceListener.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Flush()
  nameWithType: FileLogTraceListener.Flush()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: FileLogTraceListener.GetSupportedAttributes()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Location
  nameWithType: FileLogTraceListener.Location
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
- uid: Microsoft.VisualBasic.Logging.LogFileLocation
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: LogFileLocation
  nameWithType: LogFileLocation
  fullName: Microsoft.VisualBasic.Logging.LogFileLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
- uid: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: LogFileCreationScheduleOption
  nameWithType: LogFileCreationScheduleOption
  fullName: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: FileLogTraceListener.Write(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: FileLogTraceListener.WriteLine(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener.FileLogTraceListener
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Append
  nameWithType: FileLogTraceListener.Append
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Close
  nameWithType: FileLogTraceListener.Close
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: FileLogTraceListener.Dispose
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Flush
  nameWithType: FileLogTraceListener.Flush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: FileLogTraceListener.GetSupportedAttributes
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Location
  nameWithType: FileLogTraceListener.Location
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: FileLogTraceListener.TraceData
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: FileLogTraceListener.TraceEvent
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Write
  nameWithType: FileLogTraceListener.Write
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: FileLogTraceListener.WriteLine
