### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref>モジュールには、文字列操作を実行するために使用する手順が含まれています。"
  remarks: "このモジュールは、Visual Basic 言語キーワードおよび文字列操作のランタイム ライブラリ メンバーをサポートします。"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  remarks: "`Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。       `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。      > [!NOTE] >、`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。 場合`String`は、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>式、文字列の最初の文字のみが入力として使用されます。 場合`String`は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>文字が含まれていないか、<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  remarks: "`Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。       `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。      > [!NOTE] >、`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。 場合`String`は、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>式、文字列の最初の文字のみが入力として使用されます。 場合`String`は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>文字が含まれていないか、<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  remarks: "`Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。       `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。      > [!NOTE] >、`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。 場合`String`は、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>式、文字列の最初の文字のみが入力として使用されます。 場合`String`は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>文字が含まれていないか、<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  remarks: "`Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット (SBCS) の値の 255-32768 ~ 32767 の 2 バイト文字セット (DBCS) の値を指定できます。       `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。      > [!NOTE] >、`AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。 場合`String`は、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>式、文字列の最初の文字のみが入力として使用されます。 場合`String`は<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>文字が含まれていないか、<xref:System.ArgumentException>エラーが発生します</xref:System.ArgumentException>。"
    return:
      type: System.Int32
      description: "返します、 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>文字に対応する文字コードを表す値です。"
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定された文字コードに関連付けられている文字を返します。"
  remarks: "受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。 たとえば、-29183 は、 `Short` +36353 が、`Integer`です。 これには、Visual Basic 6.0 との互換性も容易になります。       `Chr`使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=fullName>セット (DBCS) の現在のスレッドが&1; バイト文字セット (SBCS) または&2; バイト文字を使用するかどうかを決定する名前空間</xref:System.Text?displayProperty=fullName></xref:System.Text.Encoding>。 その`CharCode`コードとして、適切な一連のポイントします。 範囲は 0 ~ 255 の SBCS 文字-32768 から 65535 までの DBCS 文字を指定できます。       返される値は、現在のスレッドに含まれているコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.TextInfo></xref:System.Globalization.TextInfo.ANSICodePage%2A>。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</xref:System.Globalization.TextInfo.ANSICodePage%2A>。       `ChrW`受け取る`CharCode`unicode コード ポイント。 範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。 -32768 ~-1 の値では、+32768 +65535 ~ の範囲内の値として扱われる同じです。       0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。      > [!NOTE] >、`ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`は現在サポートされていません。"
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>式を表す、 `code point`、または文字の文字コード。"
    return:
      type: System.Char
      description: "指定された文字コードに関連付けられている文字を返します。"
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定された文字コードに関連付けられている文字を返します。"
  remarks: "受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。 たとえば、-29183 は、 `Short` +36353 が、`Integer`です。 これには、Visual Basic 6.0 との互換性も容易になります。       `Chr`使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=fullName>セット (DBCS) の現在のスレッドが&1; バイト文字セット (SBCS) または&2; バイト文字を使用するかどうかを決定する名前空間</xref:System.Text?displayProperty=fullName></xref:System.Text.Encoding>。 その`CharCode`コードとして、適切な一連のポイントします。 範囲は 0 ~ 255 の SBCS 文字-32768 から 65535 までの DBCS 文字を指定できます。       返される値は、現在のスレッドに含まれているコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間</xref:System.Globalization></xref:System.Globalization.TextInfo></xref:System.Globalization.TextInfo.ANSICodePage%2A>。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`</xref:System.Globalization.TextInfo.ANSICodePage%2A>。       `ChrW`受け取る`CharCode`unicode コード ポイント。 範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。 -32768 ~-1 の値では、+32768 +65535 ~ の範囲内の値として扱われる同じです。       0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。      > [!NOTE] >、`ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`は現在サポートされていません。"
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>式を表す、 `code point`、または文字の文字コード。"
    return:
      type: System.Char
      description: "指定された文字コードに関連付けられている文字を返します。"
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "サブセットを含む&0; から始まる配列を返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>配列が指定されたフィルター条件に基づいています。"
  remarks: "場合の一致なし`Match`内で見つかった`Source`、`Filter`関数は、空の配列を返します。 エラーが発生`Source`に設定されている`Nothing`か、1 次元配列ではありません。       によって返される配列、`Filter`関数には、一致した項目のみの要素が含まれています。       `Compare`引数は、次の値を持つことができます。      |||  |-|-|  |定数 |説明 |  |`CompareMethod.Binary`|バイナリ比較を実行 |  |`CompareMethod.Text`|テキストの比較を実行 |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "必須。 検索する文字列の&1; 次元配列。"
    - id: Match
      type: System.String
      description: "必須。 検索する文字列。"
    - id: Include
      type: System.Boolean
      description: "任意。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>値を含めるか除外する部分文字列を返すかどうかを示す`Match`です。 場合`Include`は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>関数を格納する配列のサブセットを返します`Match`サブ文字列として。 場合`Include`は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>関数が含まれていない、配列のサブセットを返します`Match`サブ文字列として。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 使用する文字列比較の種類を表す数値を指定します。 値は、「設定」を参照してください。"
    return:
      type: System.String[]
      description: "サブセットを含む&0; から始まる配列を返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>配列が指定されたフィルター条件に基づいています。"
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>か、1 次元配列ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "サブセットを含む&0; から始まる配列を返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>配列が指定されたフィルター条件に基づいています。"
  remarks: "場合の一致なし`Match`内で見つかった`Source`、`Filter`関数は、空の配列を返します。 エラーが発生`Source`に設定されている`Nothing`か、1 次元配列ではありません。       によって返される配列、`Filter`関数には、一致した項目のみの要素が含まれています。       `Compare`引数は、次の値を持つことができます。      |||  |-|-|  |定数 |説明 |  |`CompareMethod.Binary`|バイナリ比較を実行 |  |`CompareMethod.Text`|テキストの比較を実行 |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "必須。 検索する文字列の&1; 次元配列。"
    - id: Match
      type: System.String
      description: "必須。 検索する文字列。"
    - id: Include
      type: System.Boolean
      description: "任意。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>値を含めるか除外する部分文字列を返すかどうかを示す`Match`です。 場合`Include`は<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>関数を格納する配列のサブセットを返します`Match`サブ文字列として。 場合`Include`は<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>関数が含まれていない、配列のサブセットを返します`Match`サブ文字列として。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 使用する文字列比較の種類を表す数値を指定します。 値は、「設定」を参照してください。"
    return:
      type: System.String[]
      description: "サブセットを含む&0; から始まる配列を返します、 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>配列が指定されたフィルター条件に基づいています。"
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>か、1 次元配列ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "形式で含まれる指示に従って書式設定文字列を返します<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "必須。 任意の有効な式。"
    - id: Style
      type: System.String
      description: "任意。 有効な名前付きまたはユーザー定義形式<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "形式で含まれる指示に従って書式設定文字列を返します<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "コントロール パネルの システムで定義されている通貨記号を使用して通貨値として書式設定式を返します。"
  remarks: "1 つまたは複数の省略可能な引数を省略すると、コンピューターの地域設定と一致する値が代わりに使用されます。       通貨値を基準として通貨記号の位置は、システムの地域設定によって決まります。      > [!NOTE] > すべての設定情報は、アプリケーションのロケールから取得します。 既定では、コントロール パネルで設定されているロケールとなります。 ただし、これによって変化する可能性プログラムから由来ゼロ以外、.NET Framework を使用して、`Number`タブです。       `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`の引数が小数点の左側の次の列挙値を取得します。      |||  |-|-|  |値 |説明 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.UseDefault`|コンピューターの地域設定 |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必須。 書式設定する式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "任意。 小数点の右側に表示される桁数を表す数値を指定します。 既定値は、-1 で、コンピューターの地域設定を使用することを示します。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>小数部の値に先行ゼロが表示されるかどうかを示す列挙体です。 値は、「解説」を参照してください。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>かっこで囲まれて負の値を配置するかどうかを示す列挙体です。 値は、「解説」を参照してください。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>コンピューターの地域設定で指定された区切り記号を使用して数値をグループ化するかどうかどうかを示す列挙体です。 値は、「解説」を参照してください。"
    return:
      type: System.String
      description: "コントロール パネルの システムで定義されている通貨記号を使用して通貨値として書式設定式を返します。"
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数の小数点より後の桁数は 99 より大きいです。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "型が数値ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "日付/時刻の値を表す文字列式を返します。"
  remarks: "`Date`データ型には常に日付と時刻の両方の情報が含まれています。 型変換のために、Visual Basic と 1/1/1 (1 月 1 日 1 年) を基準値の日、00時 00分: 00 (午前 0 時) に中立的な値であること。 書式を設定する場合、`Date`日付/時刻の文字列として値`FormatDateTime`結果の文字列に中立的な値は含まれません。 #1/1/0001 を変換する場合など、9時 30分: &#00; 結果の文字列を「9時 30分: 00」です。日付情報は表示されません。 ただし、日付情報は、元にまだ存在している`Date`値し、などの関数で回復できる`DatePart`です。      > [!NOTE] > を渡した場合、`Expression`引数として、`String`リテラル、`FormatDateTime`に従って解釈される、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>、アプリケーションの設定</xref:System.Globalization.CultureInfo.CurrentCulture%2A>。 ただし、として渡した場合、`Date`リテラル、形式 #mm/dd/yyyy # ため`FormatDateTime`常に、解釈、`Date`英語 (米国) カルチャに従ってリテラルです。 これは、必要なため、アプリケーションを開発しを使用してコード化された場合`Date`から&1; つのリテラルは、カルチャが、別のカルチャのプラットフォームで実行されます、`Date`リテラルが正しく解析するされない可能性があります。       `NamedFormat`引数は、次の設定。      |||  |-|-|  |定数 |説明 |  |`DateFormat.GeneralDate`|日付/時刻を表示します。 短い形式の日付として、日付部分を表示します。 時刻部分がある場合は、長い時間として表示します。 存在する場合、両方のパーツを表示します |。  |`DateFormat.LongDate`|コンピューターの地域設定で指定された長い日付形式を使用して日付を表示します |。  |`DateFormat.ShortDate`|コンピューターの地域設定で指定された短い日付形式を使用して日付を表示します |。  |`DateFormat.LongTime`|コンピューターの地域設定で指定された時刻の形式を使用して時刻を表示します |。  |`DateFormat.ShortTime`|24 時間形式 (hh:mm) を使用して時刻を表示します |。"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "必須。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>書式設定する式。"
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "任意。 日付/時刻書式を示す数値が使用されます。 省略した場合、 <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref>を使用します。"
    return:
      type: System.String
      description: "日付/時刻の値を表す文字列式を返します。"
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>設定が正しくありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "式を数値として書式設定を返します。"
  remarks: "1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。      > [!NOTE] > すべての設定情報は、アプリケーションのロケールから取得します。 既定では、コントロール パネルで設定されているロケールとなります。 ただし、その可能性があります変更プログラムで .NET Framework を使用しています。       `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数がある、次の設定。      |||  |-|-|  |定数 |説明 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.UseDefault`|コンピューターの地域設定 |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必須。 書式設定する式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "任意。 小数点の右側に表示される桁数を表す数値を指定します。 既定値は、-1 で、コンピューターの地域設定を使用することを示します。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>小数部の値の先頭に 0 が表示されるかどうかを示す定数です。 値は、「設定」を参照してください。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>かっこで囲まれて負の値を配置するかどうかを示す定数です。 値は、「設定」を参照してください。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>ロケール設定で指定された区切り記号を使用して数値をグループ化するかどうかどうかを示す定数です。 値は、「設定」を参照してください。"
    return:
      type: System.String
      description: "式を数値として書式設定を返します。"
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "型が数値ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "式を末尾に % 文字で (つまり、100 倍してパーセンテージとして書式設定を返します。"
  remarks: "1 つまたは複数の省略可能な引数を省略すると、省略された引数の値は、ロケール設定によって提供されます。      > [!NOTE] > すべての設定情報は、アプリケーションのロケールから取得します。 既定では、コントロール パネルで設定されているロケールとなります。 ただし、その可能性があります変更プログラムで .NET Framework を使用しています。       `IncludeLeadingDigit`、 `UseParensForNegativeNumbers`、および`GroupDigits`引数がある、次の設定。      |||  |-|-|  |定数 |説明 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.Default`|コンピューターの地域設定 |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必須。 書式設定する式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "任意。 小数点の右側の桁数を示す数値が表示されます。 既定値は、-1 で、ロケールの設定を使用することを示します。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>小数部の値に先行ゼロが表示されるかどうかを示す定数です。 値は、「設定」を参照してください。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>かっこで囲まれて負の値を配置するかどうかを示す定数です。 値は、「設定」を参照してください。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "任意。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>ロケール設定で指定された区切り記号を使用して数値をグループ化するかどうかどうかを示す定数です。 値は、「設定」を参照してください。"
    return:
      type: System.String
      description: "式を末尾に % 文字で (つまり、100 倍してパーセンテージとして書式設定を返します。"
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "型が数値ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返します、 <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref>指定された文字列で指定したインデックスからの文字を表す値です。"
  remarks: "場合`Index`が 1 より小さいか、または最後の文字のインデックスより大きくなって`str`、`ArgumentException`がスローされます。"
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    - id: Index
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 内の文字の (1 から始まる) インデックス`str`を指定します。"
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>指定された文字列で指定したインデックスからの文字を表す値です。"
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、 <code>Index</code> &lt; 1、または<code>Index</code>の最後の文字のインデックスよりも大きい<code>str</code>です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "別の&1; つの文字列の最初に見つかった位置の開始位置を示す整数を返します。"
  remarks: "通常、`InStr`文字列を解析するときに関数を使用します。      > [!NOTE] >、`InStrB`以前のバージョンの Visual Basic での関数が文字の位置ではなくバイト単位の数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`InStrB`は現在サポートされていません。       `Compare`引数の設定が: | | |  |-|-|-|  |定数 |値 |説明 |  |`Binary`|0|バイナリ比較を実行 |  |`Text`|1|テキストの比較を実行 |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>検索対象の式。"
    - id: String2
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式が検索されます。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 文字列比較の種類を指定します。 場合`Compare`を省略すると、 <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref>比較の種類を指定します。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> もし       </td><td> 戻り値       </td></tr><tr><td>           <code>String1</code>長さが&0; または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>長さが&0; または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 既定値は最初の文字位置、検索の開始位置。       </td></tr><tr><td>           <code>String2</code>見つかりません。       </td><td> 0       </td></tr><tr><td>           <code>String2</code>内で見つかった<code>String1</code></td><td> 一致の開始位置       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "別の&1; つの文字列の最初に見つかった位置の開始位置を示す整数を返します。"
  remarks: "通常、`InStr`文字列を解析するときに関数を使用します。      > [!NOTE] >、`InStrB`以前のバージョンの Visual Basic での関数が文字の位置ではなくバイト単位の数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`InStrB`は現在サポートされていません。       `Compare`引数の設定が: | | |  |-|-|-|  |定数 |値 |説明 |  |`Binary`|0|バイナリ比較を実行 |  |`Text`|1|テキストの比較を実行 |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "任意。 各検索の開始位置を設定する数値式です。 省略した場合、最初の文字位置から検索を開始します。 開始インデックスは 1 から始まります。"
    - id: String1
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>検索対象の式。"
    - id: String2
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式が検索されます。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 文字列比較の種類を指定します。 場合`Compare`を省略すると、 <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref>比較の種類を指定します。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> もし       </td><td> 戻り値       </td></tr><tr><td>           <code>String1</code>長さが&0; または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>長さが&0; または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>見つかりません。       </td><td> 0       </td></tr><tr><td>           <code>String2</code>内で見つかった<code>String1</code></td><td> 一致の開始位置       </td></tr><tr><td>           <code>Start</code>&gt;の長さ<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の右側から、別の&1; つの文字列の最初に見つかった位置の位置を返します。"
  remarks: "なおの構文、`InStrRev`関数の構文と同じではありません、`InStr`関数。       `Compare`引数は、次の値を持つことができます。      |||  |-|-|  |定数 |説明 |  |`Binary`|バイナリ比較を実行します |。  |`Text`|テキストの比較を実行します |。"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "必須。 検索対象文字列式です。"
    - id: StringMatch
      type: System.String
      description: "必須。 検索対象の文字列式です。"
    - id: Start
      type: System.Int32
      description: "任意。 数値式が&1; から始まる文字列の左端の開始点として、各検索の開始位置を設定します。 場合`Start`を省略した場合、-1 を使用する、つまり、最後の文字位置から検索を開始します。 検索は、右から左へ進みます。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 部分文字列を評価するときに使用する比較の種類を表す数値を指定します。 省略した場合、バイナリ比較を実行します。 値の設定を参照してください。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> もし       </td><td> 戻り値します。       </td></tr><tr><td>           <code>StringCheck</code>長さゼロです。       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>長さゼロです。       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>見つかりません。       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>内で見つかった<code>StringCheck</code></td><td> 最初の一致が見つかった文字列の右側から始まる位置。       </td></tr><tr><td>           <code>Start</code>長さより大きい<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "複数の配列に含まれる部分文字列を結合して作成される文字列を返します。"
  remarks: "間のパリティがある、`Join`と`Split`関数。 `Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。 `Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。 主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。"
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "必須。 結合する部分文字列を含む&1; 次元配列。"
    - id: Delimiter
      type: System.String
      description: "任意。 任意の文字列、返される文字列内の部分文字列を区切るために使用します。 省略した場合は、空白文字 (&quot;&quot;) を使用します。 場合`Delimiter`は長さ&0; の文字列 (&quot;&quot;) または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>リスト内のすべての項目が区切り文字なしで連結されます。"
    return:
      type: System.String
      description: "複数の配列に含まれる部分文字列を結合して作成される文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>1 次元です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "複数の配列に含まれる部分文字列を結合して作成される文字列を返します。"
  remarks: "間のパリティがある、`Join`と`Split`関数。 `Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。 `Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。 主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。"
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "必須。 結合する部分文字列を含む&1; 次元配列。"
    - id: Delimiter
      type: System.String
      description: "任意。 任意の文字列、返される文字列内の部分文字列を区切るために使用します。 省略した場合は、空白文字 (&quot;&quot;) を使用します。 場合`Delimiter`は長さ&0; の文字列 (&quot;&quot;) または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>リスト内のすべての項目が区切り文字なしで連結されます。"
    return:
      type: System.String
      description: "複数の配列に含まれる部分文字列を結合して作成される文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>1 次元です。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列または文字を小文字に変換して返します。"
  remarks: "大文字のみが変換を小文字です。すべての英小文字とアルファベット以外の文字は変更されません。       この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。      > [!IMPORTANT] > アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=fullName>メソッド、およびパス<xref:System.StringComparison>または<xref:System.StringComparison>の`comparisonType`引数</xref:System.StringComparison></xref:System.StringComparison></xref:System.String.Compare%2A?displayProperty=fullName>。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.Char
      description: "文字列または文字を小文字に変換して返します。"
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列または文字を小文字に変換して返します。"
  remarks: "大文字のみが変換を小文字です。すべての英小文字とアルファベット以外の文字は変更されません。       この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。      > [!IMPORTANT] > アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=fullName>メソッド、およびパス<xref:System.StringComparison>または<xref:System.StringComparison>の`comparisonType`引数</xref:System.StringComparison></xref:System.StringComparison></xref:System.String.Compare%2A?displayProperty=fullName>。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "文字列または文字を小文字に変換して返します。"
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定した文字列の左端の文字数を含む文字列を返します。"
  remarks: "内の文字の数を決定する`str`を使用して、`Len`関数。 Windows フォーム アプリケーションの場合、またはを持つ他のクラスで使用する場合、`Left`プロパティを持つ関数が完全修飾する必要があります`Microsoft.VisualBasic.Left`です。      > [!NOTE] >、`LeftB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LeftB`は現在サポートされていません。"
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>左端の文字が返される式です。"
    - id: Length
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 取得する文字の数を示す数値式です。 0 の場合、長さ 0 の文字列 (&quot;&quot;) が返されます。 大きいかの文字数に等しい場合`str`、文字列全体が返されます。"
    return:
      type: System.String
      description: "指定した文字列の左端の文字数を含む文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  remarks: "ユーザー定義型と`Object`、変数、`Len`関数を返します。 サイズは、ファイルに書き込ま、`FilePut`関数。 場合、`Object`が含まれています、`String`文字列の長さが返されます。 場合、`Object`他の任意の型が含まれていますがによってファイルに書き込まれるときは、オブジェクトのサイズが返されます、`FilePut`関数。       `VBFixedString`書き込まれるときに、(バイト単位)、文字列のサイズを指定するオブジェクトの文字列フィールドに属性を適用することができますをディスクにします。 `Len`関数は、`VBFixedString`属性が、使用可能な場合のサイズを決定する際に`Object`変数。      > [!NOTE] >、`Len`関数は、実際のユーザー定義データ型の可変長文字列が使用されるときに必要な記憶域バイト数を決定できない場合があります。      > [!NOTE] >、`LenB`以前のバージョンの Visual Basic での関数が文字ではなく文字列内のバイト数を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`LenB`は現在サポートされていません。      ## スマート デバイスの開発者向け注意事項、`Len`関数だけを受け入れる`String`と`Object`パラメーターとして変数です。 場合、`Object`が含まれています、`String`の長さが返されます、`String`です。 パラメーターが NULL の場合`Object`参照、0 が返されます。 場合、 `Object` 、他の種類を含む、例外がスローされます。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式または変数の名前。 場合`Expression`の種類は<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>関数を返します。 サイズをファイルに書き込むが、 <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref>関数。"
    return:
      type: System.Int32
      description: "文字列の文字数または標準変数の格納に必要なバイト数を含む整数を返します。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定された長さに調整された文字列を含む左揃えの文字列を返します。"
  remarks: "指定した文字列が指定された長さよりも長い場合は、返される文字列は指定の長さに短縮されます。 指定した文字列が指定された長さより短い場合は、スペースは、適切な長さを生成するために返される文字列の右端に追加されます。"
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。 文字列変数の名前です。"
    - id: Length
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 返される文字列の長さです。"
    return:
      type: System.String
      description: "指定された長さに調整された文字列を含む左揃えの文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "先頭のスペースなしで指定した文字列のコピーを含む文字列を返します (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、末尾のスペース (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)、なし先頭または末尾のスペース (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "先頭のスペースなしで指定した文字列のコピーを含む文字列を返します (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、末尾のスペース (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)、なし先頭または末尾のスペース (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列内の指定位置から始まるすべての文字を含む文字列を返します。"
  remarks: "内の文字の数を決定する`str`を使用して、`Len`関数。       Visual Basic には、`Mid`関数と`Mid`ステートメントです。 この要素はどちらも、文字列の文字の指定された数が、`Mid`関数の中に文字を返します、`Mid`文字をステートメントに置き換えます。 詳細については、次を参照してください。 [Mid ステートメント](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] >、`MidB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、すべての Visual Basic の文字列と`MidB`は現在サポートされていません。"
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式の文字が返されます。"
    - id: Start
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 返される文字の位置を開始しています。 場合`Start`内の文字数よりも大きい`str`、 <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref>関数は長さ&0; の文字列を返します (&quot;&quot;) です。 `Start`1 から始まります。"
    return:
      type: System.String
      description: "文字列の指定位置から始まるすべての文字で構成される文字列。"
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定した文字列の指定した位置から始まる文字数を表す文字列を返します。"
  remarks: "内の文字の数を決定する`str`を使用して、`Len`関数。       Visual Basic には、`Mid`関数と`Mid`ステートメントです。 この要素はどちらも、文字列の文字の指定された数が、`Mid`関数の中に文字を返します、`Mid`文字をステートメントに置き換えます。 詳細については、次を参照してください。 [Mid ステートメント](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] >、`MidB`以前のバージョンの Visual Basic での関数が文字ではなくバイト単位で文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、すべての Visual Basic の文字列と`MidB`は現在サポートされていません。"
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式の文字が返されます。"
    - id: Start
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 返される文字の位置を開始しています。 場合`Start`内の文字数よりも大きい`str`、 <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref>関数は長さ&0; の文字列を返します (&quot;&quot;) です。 `Start`1 つを基づいています。"
    - id: Length
      type: System.Int32
      description: "任意。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 取り出す文字数。 省略した場合、またはより少ない場合`Length`テキストの文字 (位置にある文字を含む`Start`)、文字列の末尾を開始位置からのすべての文字が返されます。"
    return:
      type: System.String
      description: "文字列の指定位置から始まる文字の指定された数で構成される文字列。"
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定された回数を文字列で、別の指定した部分文字列の置換が文字列を返します。"
  remarks: "戻り値、`Replace`関数は、指定した位置から始まる文字列`Start`の末尾で終了し、`Expression`で置き換えが行われた文字列で指定されたとおり、`Find`と`Replace`値。       `Compare`引数は、次の値を持つことができます。      |||  |-|-|  |定数 |説明 |  |`Binary`|バイナリ比較を実行 |  |`Text`|テキストの比較を実行 |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "必須。 文字列を置き換える部分文字列を含む式。"
    - id: Find
      type: System.String
      description: "必須。 検索対象文字列を指定します。"
    - id: Replacement
      type: System.String
      description: "必須。 置換する部分文字列。"
    - id: Start
      type: System.Int32
      description: "任意。 内の位置に`Expression`置換に使用される部分文字列を開始します。 戻り値<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>文字列で始まる`Start`、適宜置き換え、します。 省略した場合、1 が使用されます。"
    - id: Count
      type: System.Int32
      description: "任意。 置換を実行する部分文字列の数です。 省略した場合、既定値は、-1 で、「すべての可能な置換してください」"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 部分文字列を評価するときに使用する比較の種類を表す数値を指定します。 値の設定を参照してください。"
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>次の値を返します。       <table><tbody><tr><td> もし       </td><td> 置換を返します       </td></tr><tr><td><code>Find</code>長さ&0; の文字列または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> コピー<code>Expression</code></td></tr><tr><td><code>Replace</code>長さゼロです。       </td><td> コピー <code> Expression </code>ない文字列を含む<code>Find</code></td></tr><tr><td><code>Expression</code>長さ&0; の文字列または<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>、または<code> Start </code>がの長さより大きい<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>0 は、します。       </td><td> コピー<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定した文字列の右側にある文字数を含む文字列を返します。"
  remarks: "内の文字の数を決定する`str`を使用して、`Len`関数。 Windows フォーム、またはを持つ他のクラスで使用されている場合、`Right`プロパティを持つ関数が完全修飾する必要があります`Microsoft.VisualBasic.Strings.Right`です。      > [!NOTE] >、`RightB`以前のバージョンの Visual Basic での関数が文字ではなく、(バイト単位) の文字列を返します。 2 バイト文字セット (DBCS) のアプリケーションで文字列を変換するため、主に使用されます。 Unicode では、現在の Visual Basic の文字列をすべてと`RightB`は現在サポートされていません。"
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>右端の文字が返される式です。"
    - id: Length
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 取得する文字の数を示す数値式です。 0 の場合、長さ 0 の文字列 (&quot;&quot;) が返されます。 大きいかの文字数に等しい場合`str`、文字列全体が返されます。"
    return:
      type: System.String
      description: "指定した文字列の右側にある文字数を含む文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定された長さに調整された文字列を含む右揃えの文字列を返します。"
  remarks: "場合`Source`よりも長い`Length`、`RSet`のみ、左端の文字、最大の長さを配置`Source`、返される文字列にします。 指定した文字列が指定された長さより短い場合は、適切な長さを生成するために、文字列の左端にスペースが追加されます。 指定した文字列が指定された長さよりも長い場合は、指定された長さに部分は切り捨てられます。"
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。 文字列変数の名前です。"
    - id: Length
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 返される文字列の長さです。"
    return:
      type: System.String
      description: "指定された長さに調整された文字列を含む右揃えの文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "先頭のスペースなしで指定した文字列のコピーを含む文字列を返します (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、末尾のスペース (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)、なし先頭または末尾のスペース (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "先頭のスペースなしで指定した文字列のコピーを含む文字列を返します (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、末尾のスペース (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)、なし先頭または末尾のスペース (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定した数のスペースから成る文字列を返します。"
  remarks: "`Space`関数は出力を書式設定および固定長文字列内のデータをクリアするのに役立ちます。"
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 文字列で使用する空白文字の数。"
    return:
      type: System.String
      description: "指定した数のスペースから成る文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定した数の部分を含む、0 から始まる&1; 次元配列を返します。"
  remarks: "既定では、または`Limit`、-1、`Split`関数は、区切り記号文字列の出現個所をすべてで、入力文字列を分割し、配列内の各部分文字列を返します。 ときに、`Limit`パラメーターは、ゼロより大きく、`Split`関数が、最初は文字列を分割`Limit`-1 出現する、区切り記号の後の部分文字列の配列を返します。 たとえば、`Split(&quot;a:b:c&quot;, &quot;:&quot;)`配列を返します`{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`、中に`Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)`配列を返します`{&quot;a&quot;, &quot;b:c&quot;}`です。       ときに、`Split`関数には、行で、次の&2; つの区切り記号または先頭または文字列の末尾に区切り記号が検出すると、空の文字列を囲むとして解釈 (&quot;&quot;) です。 たとえば、 `Split(&quot;xx&quot;, &quot;x&quot;)`&3; つの空の文字列を含む配列を返します: 文字列と最初の&quot;x&quot;、&quot;x&quot;、文字列、2 つの間から&1; つの先頭つと最後の&quot;x&quot;と、文字列の末尾の&1; つです。       次の表に示す方法、省略可能な`Delimiter`、 `Limit`、および`Compare`パラメーターの動作を変更することができます、`Split`関数。      |||  |-|-|  |呼び出しの分割 |戻り値 |  |`Split(&quot;42, 12, 19&quot;)`|{「42」、「12」、「19」} |  |`Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`|{「42」、「12」、「19」} |  |`Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`|{「42」、「12, 19」} |  |`Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`|{「192」、「168」、「0」、「1」} |  |`Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`|{「Alice と Bob」} |  |`Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`|{&quot;Alice&quot;、&quot;Bob&quot;} |  |`Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`|{&quot;someone@example.com&quot;}|  |`Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`|{&quot;someone&quot;、&quot;example.com&quot;}|      `Compare`引数は、次の値を持つことができます。      ||||  |-|-|-|  |定数 |説明 |値 |  |`CompareMethod.Binary`|バイナリ比較を実行 |&0; |  |`CompareMethod.Text`|テキストの比較を実行 |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>部分文字列と区切り記号を含む式です。"
    - id: Delimiter
      type: System.String
      description: "任意。 任意の&1; 文字の部分文字列の境界を識別するために使用します。 場合`Delimiter`を省略すると、空白文字 (&quot;&quot;)、区切り記号と見なされます。"
    - id: Limit
      type: System.Int32
      description: "任意。 入力文字列の分割を部分文字列の最大数。 既定値の-1 を示すの出現個所をすべてに、入力文字列を分割する必要があります、`Delimiter`文字列。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 部分文字列を評価するときに使用する比較を表す数値を指定します。 値は、「設定」を参照してください。"
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>配列。 場合<code> Expression </code>は長さ&0; の文字列 (&quot;&quot;)、 <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref>長さ&0; の文字列を含む&1; つの要素の配列を返します。 場合<code> Delimiter </code>長さ&0; の文字列は、それが任意の場所にない場合または<code> Expression </code>、 <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref>全体を含む&1; つの要素の配列を返します<code> Expression </code>文字列。"
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "-1、0、または文字列の比較の結果に基づいて、1 を返します。"
  remarks: "文字列は、最初の文字で始まり、英数字の並べ替え値によって比較されます。 バイナリの比較、テキストの比較および並べ替え順序の詳細については、次を参照してください。 [Option Compare ステートメント](~/add/includes/ajax-current-ext-md.md)です。       `Compare`引数の設定が: | | |  |-|-|  |定数 |説明 |  |`Binary`|文字の内部バイナリ表現から派生した並べ替え順序に基づいて、バイナリ比較を実行します |。  |`Text`|システムのによって決まる、大文字と小文字のテキスト並べ替え順序に基づいて、文字列比較を行います`LocaleID`値です |。"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    - id: String2
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "任意。 文字列比較の種類を指定します。 場合`Compare`を省略すると、 <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref>比較の種類を指定します。"
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref>関数には、次の戻り値。       <table><tbody><tr><td> もし       </td><td> StrComp を返します。       </td></tr><tr><td><code>String1</code>個の並べ替え<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>等しい<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>後に<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>値が有効ではありません。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定に従って変換された文字列を返します。"
  remarks: "定数`VbStrConv.Wide`、 `VbStrConv.Narrow`、 `VbStrConv.SimplifiedChinese`、 `VbStrConv.TraditionalChinese`、`VbStrConv.Katakana`と`VbStrConv.Hiragana`ここでは適用されません、ロケールで使用する場合の実行時エラーが発生することができますが、常にではありません: 定数`VbStrConv.Katakana`と`VbStrConv.Hiragana`日本語言語パックがインストールされて、日本語以外のシステムで使用できます。 さらに、定数の使用`VbStrConv.Wide`と`VbStrConv.Narrow`インストール東アジア言語のすべてのシステムではサポートされています。       この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。      > [!IMPORTANT] > アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=fullName>メソッド、およびパス<xref:System.StringComparison>または<xref:System.StringComparison>の`comparisonType`引数</xref:System.StringComparison></xref:System.StringComparison></xref:System.String.Compare%2A?displayProperty=fullName>。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/add/includes/ajax-current-ext-md.md)です。       `Conversion`引数の設定が: | | |  |-|-|  |列挙体メンバー |説明 |  |`VbStrConv.None`|変換は行われません |  |`VbStrConv.LinguisticCasing`|ファイル システム (既定値) ではなく、大文字と小文字、言語の規則を使用します。 有効な`VbStrConv.UpperCase`と`VbStrConv.LowerCase`のみです |。  |`VbStrConv.UpperCase`|文字列を大文字に変換します |。  |`VbStrConv.LowerCase`|文字列を小文字に変換します |。  |`VbStrConv.ProperCase`|文字列内の各単語の最初の文字を大文字に変換します |。  |`VbStrConv.Wide` <sup>*</sup>|半角、全角文字 (全角) に文字列 (半角) の文字に変換します |。  |`VbStrConv.Narrow` <sup>*</sup>|(全角) 全角文字 (半角) の文字を文字列に変換します |。  |`VbStrConv.Katakana` <sup>**</sup>|文字列内のひらがなをカタカナに変換します |。  |`VbStrConv.Hiragana` <sup>**</sup>|文字列内のカタカナをひらがなに変換します |。  |`VbStrConv.SimplifiedChinese` <sup>*</sup>|簡体字中国語繁体字中国語文字に変換します |。  |`VbStrConv.TraditionalChinese` <sup>*</sup>|簡体字中国語の文字を繁体字中国語に変換します |。      <sup> * </sup>アジアのロケールに適用されます。     <sup>**</sup>Japan にのみ適用されます。      > [!NOTE] > これらの定数は、.NET Framework 共通言語ランタイムで指定します。 その結果、それらで指定できます任意の場所、実際の値の代わりに、コード。 ほとんどを組み合わせることができます (たとえば、 `UpperCase + Wide`)、相互に排他的な場合以外 (たとえば、 `VbStrConv.Wide + VbStrConv.Narrow`)。       適切な大文字と小文字の有効な単語の区切り文字を次に示します: Null (`Chr$(0)`)、水平タブ (`Chr$(9)`)、ライン フィード (`Chr$(10)`)、垂直タブ (`Chr$(11)`)、フォーム フィード (`Chr$(12)`)、キャリッジ リターン (`Chr$(13)`)、スペース (1 バイト文字セット) (`Chr$(32)`)。 指定できますが、完全または幅の半分領域の実際の値は、東アジア言語のカルチャの国または地域によって異なります。"
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "必須。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>変換する式。"
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "必須。 <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>メンバー。 実行する変換の種類を指定する列挙値。"
    - id: LocaleID
      type: System.Int32
      description: "任意。 <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref>システムと異なる場合は、値<xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;></xref>値。 (システム<xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;></xref>既定値です)。"
    return:
      type: System.String
      description: "指定に従って変換された文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "サポートされていない<code> LocaleID </code>、 <code> Conversion </code> &lt; 0 または&gt;2048、またはサポートされていない指定したロケールに対して変換します。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "繰り返されて指定された回数の文字列または指定した文字のオブジェクトを返します。"
  remarks: "この関数を返します、`String`の文字の繰り返しで構成します。 文字列を構成する文字が最初の文字、 `Character` 、引数とそれが重複して`Number`回数。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 返される文字列の長さ。"
    - id: Character
      type: System.Char
      description: "必須。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 式の最初の文字のみが使用されます。 文字が型の場合<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、いずれかを含めることは、 <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>値。"
    return:
      type: System.String
      description: "繰り返されて指定された回数の文字列または指定した文字のオブジェクトを返します。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>0 未満または<code>Character</code>型が無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "繰り返されて指定された回数の文字列または指定した文字のオブジェクトを返します。"
  remarks: "この関数を返します、`String`の文字の繰り返しで構成します。 文字列を構成する文字が最初の文字、 `Character` 、引数とそれが重複して`Number`回数。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 返される文字列の長さ。"
    - id: Character
      type: System.Object
      description: "必須。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 式の最初の文字のみが使用されます。 文字が型の場合<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、いずれかを含めることは、 <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>値。"
    return:
      type: System.Object
      description: "繰り返されて指定された回数の文字列または指定した文字のオブジェクトを返します。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>0 未満または<code>Character</code>型が無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "繰り返されて指定された回数の文字列または指定した文字のオブジェクトを返します。"
  remarks: "この関数を返します、`String`の文字の繰り返しで構成します。 文字列を構成する文字が最初の文字、 `Character` 、引数とそれが重複して`Number`回数。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必須。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>式。 返される文字列の長さ。"
    - id: Character
      type: System.String
      description: "必須。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 式の最初の文字のみが使用されます。 文字が型の場合<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、いずれかを含めることは、 <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref>または<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>値。"
    return:
      type: System.String
      description: "繰り返されて指定された回数の文字列または指定した文字のオブジェクトを返します。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>0 未満または<code>Character</code>型が無効です。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "指定した文字列の文字の並び順を逆にした文字列を返します。"
  remarks: "`StrReverse`関数と同じ文字を含む文字列を返します`Expression`、その逆の順序で。"
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "必須。 文字が元に戻すには文字列式です。 場合`Expression`は長さ&0; の文字列 (&quot;&quot;)、長さ&0; の文字列が返されます。"
    return:
      type: System.String
      description: "指定した文字列の文字の並び順を逆にした文字列を返します。"
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "先頭のスペースなしで指定した文字列のコピーを含む文字列を返します (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、末尾のスペース (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)、なし先頭または末尾のスペース (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`、 `RTrim`、および`Trim`関数は、文字列の末尾からスペースを削除します。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "先頭のスペースなしで指定した文字列のコピーを含む文字列を返します (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)、末尾のスペース (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)、なし先頭または末尾のスペース (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列または指定された文字列を大文字に変換する文字を返します。"
  remarks: "小文字のみが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。       この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。      > [!IMPORTANT] > アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=fullName>メソッド、およびパス<xref:System.StringComparison>または<xref:System.StringComparison>の`comparisonType`引数</xref:System.StringComparison></xref:System.StringComparison></xref:System.String.Compare%2A?displayProperty=fullName>。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.Char
      description: "文字列または指定された文字列を大文字に変換する文字を返します。"
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "文字列または指定された文字列を大文字に変換する文字を返します。"
  remarks: "小文字のみが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。       この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように文字列を操作するときに、アプリケーションのカルチャ情報を使用します。      > [!IMPORTANT] > アプリケーションが、比較演算子またはケース変更操作の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、<xref:System.String.Compare%2A?displayProperty=fullName>メソッド、およびパス<xref:System.StringComparison>または<xref:System.StringComparison>の`comparisonType`引数</xref:System.StringComparison></xref:System.StringComparison></xref:System.String.Compare%2A?displayProperty=fullName>。 詳細については、次を参照してください。[どのカルチャに影響を与える Visual Basic における文字列](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "必須。 任意の有効な<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>または<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>式。"
    return:
      type: System.String
      description: "文字列または指定された文字列を大文字に変換する文字を返します。"
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
