### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Trace
  id: Trace
  children:
  - System.Diagnostics.Trace.Assert(System.Boolean)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  - System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.AutoFlush
  - System.Diagnostics.Trace.Close
  - System.Diagnostics.Trace.CorrelationManager
  - System.Diagnostics.Trace.Fail(System.String)
  - System.Diagnostics.Trace.Fail(System.String,System.String)
  - System.Diagnostics.Trace.Flush
  - System.Diagnostics.Trace.Indent
  - System.Diagnostics.Trace.IndentLevel
  - System.Diagnostics.Trace.IndentSize
  - System.Diagnostics.Trace.Listeners
  - System.Diagnostics.Trace.Refresh
  - System.Diagnostics.Trace.TraceError(System.String)
  - System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceInformation(System.String)
  - System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  - System.Diagnostics.Trace.TraceWarning(System.String)
  - System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  - System.Diagnostics.Trace.Unindent
  - System.Diagnostics.Trace.UseGlobalLock
  - System.Diagnostics.Trace.Write(System.Object)
  - System.Diagnostics.Trace.Write(System.String)
  - System.Diagnostics.Trace.Write(System.Object,System.String)
  - System.Diagnostics.Trace.Write(System.String,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object)
  - System.Diagnostics.Trace.WriteLine(System.String)
  - System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  - System.Diagnostics.Trace.WriteLine(System.String,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  - System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  langs:
  - csharp
  name: Trace
  nameWithType: Trace
  fullName: System.Diagnostics.Trace
  type: Class
  summary: "メソッドのセットを提供するのに役立つプロパティが、コードの実行をトレースしたりします。 このクラスは継承できません。"
  remarks: "リリース ビルドをインストルメント化する Trace クラスのメソッドとプロパティを使用できます。 インストルメンテーションでは、実際の設定で実行されているアプリケーションのヘルスを監視することができます。 トレースを行う問題を特定し、実行中のシステムに影響を与えずに修正します。       このクラスを表示するメソッドを提供する、 <xref:System.Diagnostics.Trace.Assert%2A> ダイアログ ボックスとは、常にアサーションを出力する<xref:System.Diagnostics.Trace.Fail%2A>.</xref:System.Diagnostics.Trace.Fail%2A> </xref:System.Diagnostics.Trace.Assert%2A> このクラスは、次の種類の書き込みメソッドを提供します<xref:System.Diagnostics.Trace.Write%2A>、 <xref:System.Diagnostics.Trace.WriteLine%2A>、 <xref:System.Diagnostics.Trace.WriteIf%2A>、 <xref:System.Diagnostics.Trace.WriteLineIf%2A>。</xref:System.Diagnostics.Trace.WriteLineIf%2A> </xref:System.Diagnostics.Trace.WriteIf%2A> </xref:System.Diagnostics.Trace.WriteLine%2A> </xref:System.Diagnostics.Trace.Write%2A> 。       <xref:System.Diagnostics.BooleanSwitch>と<xref:System.Diagnostics.TraceSwitch>クラスがトレース出力を動的に制御する手段を提供します</xref:System.Diagnostics.TraceSwitch></xref:System.Diagnostics.BooleanSwitch>。 アプリケーションを再コンパイルしなくても、これらのスイッチの値を変更できます。 構成ファイルを使用して、スイッチを設定する方法については、次を参照してください、<xref:System.Diagnostics.Switch>クラスおよび[する方法: 作成、初期化とトレース スイッチを設定する](~/add/includes/ajax-current-ext-md.md)トピック。</xref:System.Diagnostics.Switch> 。       トレース出力のターゲットを追加してカスタマイズできます<xref:System.Diagnostics.TraceListener>インスタンスをまたはからインスタンスを削除するには、<xref:System.Diagnostics.Trace.Listeners%2A>コレクションです</xref:System.Diagnostics.Trace.Listeners%2A></xref:System.Diagnostics.TraceListener>。 <xref:System.Diagnostics.Trace.Listeners%2A>コレクションの両方によって共有は、<xref:System.Diagnostics.Debug>とトレースのクラスですどちらかのクラスをトレース リスナーを追加する、リスナーが両方に追加されます。</xref:System.Diagnostics.Debug> </xref:System.Diagnostics.Trace.Listeners%2A> 。 既定では、トレース出力は、<xref:System.Diagnostics.DefaultTraceListener>クラス</xref:System.Diagnostics.DefaultTraceListener>を使用します。      > [!NOTE] > トレース リスナーを追加する、<xref:System.Diagnostics.Trace.Listeners%2A>トレース リスナーによって使用されるリソースが利用できない場合、コレクションは、トレース中にスローされる例外を発生ことができます</xref:System.Diagnostics.Trace.Listeners%2A>。 条件とスローされる例外は、トレース リスナーに依存し、このトピックの内容を列挙できません。 トレースのメソッドへの呼び出しを配置することができます`try` / `catch`を検出し、トレース リスナーから任意の例外処理ブロック。      > [!NOTE] > 部分的に信頼されたコードにトレース リスナーを追加する場合、<xref:System.Security.SecurityException>例外ためトレース リスナーを追加するに必要があります<xref:System.Security.Permissions.SecurityPermissionFlag>権限</xref:System.Security.Permissions.SecurityPermissionFlag></xref:System.Security.SecurityException>。 Visual Studio でのサンド ボックス内で実行されている部分的に信頼されたコードをトレースするには、トレース リスナーを追加しないでください。 代わりに、トレースを表示および<xref:System.Diagnostics.Debug>件のメッセージ、**出力**ウィンドウ</xref:System.Diagnostics.Debug>。       Trace クラスを取得または設定のレベルのプロパティを提供する<xref:System.Diagnostics.Trace.Indent%2A>、 <xref:System.Diagnostics.Trace.IndentSize%2A>、するかどうかと<xref:System.Diagnostics.Trace.AutoFlush%2A>各書き込みの後にします</xref:System.Diagnostics.Trace.AutoFlush%2A></xref:System.Diagnostics.Trace.IndentSize%2A></xref:System.Diagnostics.Trace.Indent%2A>。       設定する、<xref:System.Diagnostics.Trace.AutoFlush%2A>と<xref:System.Diagnostics.Trace.IndentSize%2A>をトレースでは、アプリケーションの名前に対応する構成ファイルを編集することができます</xref:System.Diagnostics.Trace.IndentSize%2A></xref:System.Diagnostics.Trace.AutoFlush%2A>。 構成ファイルは次の例のように書式設定する必要があります: ```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ``` 、<xref:System.Diagnostics.ConditionalAttribute>トレースのメソッドに属性を適用します</xref:System.Diagnostics.ConditionalAttribute>。 サポートされるコンパイラ<xref:System.Diagnostics.ConditionalAttribute>&quot;TRACE&quot;が条件付きコンパイル シンボルとして定義されている限り、これらのメソッドへの呼び出しは無視されます</xref:System.Diagnostics.ConditionalAttribute>。 コンパイラのドキュメントを参照してくださいかどうか<xref:System.Diagnostics.ConditionalAttribute>はサポートされていると条件付きコンパイル シンボルを定義するための構文</xref:System.Diagnostics.ConditionalAttribute>。      > [!NOTE] > Visual Studio でプロジェクトで、既定では、デバッグ ビルドの&quot;DEBUG&quot;条件付きコンパイル シンボルが定義されているし、両方のデバッグし、リリース ビルドの場合&quot;TRACE&quot;シンボルを定義します。 この動作を無効にする方法については、Visual Studio のマニュアルを参照してください。       C# で&quot;TRACE&quot;条件付きコンパイル シンボルを定義するには、追加、 `/d:TRACE` 、コマンドラインを使用してコードをコンパイルするときに、コンパイラのコマンドラインにオプションまたは追加`#define TRACE`ファイルの先頭にします。 Visual basic では、追加、`/d:TRACE=True`コンパイラ コマンドラインにオプションまたは追加`#Const TRACE=True`ファイルにします。       <xref:System.Diagnostics.ConditionalAttribute>C コンパイラではサポートされていません。</xref:System.Diagnostics.ConditionalAttribute> 同等の機能を提供するには、トレース内の各メソッドを呼び出したを囲む必要があります、`#if defined(TRACE) ... #endif`を追加して、ブロック、`/DTRACE`コンパイラ コマンドラインにオプションまたは追加`#define TRACE`ファイルにします。"
  example:
  - "The following example uses Trace to indicate the beginning and the end of a program's execution. The example also uses the <xref:System.Diagnostics.Trace.Indent%2A?displayProperty=fullName> and <xref:System.Diagnostics.Trace.Unindent%2A?displayProperty=fullName> methods to distinguish the tracing output. For a more complete example of the use of Trace, see [How to: Add Trace Statements to Application Code](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cpp[Classic Trace Example#1](~/add/codesnippet/cpp/t-system.diagnostics.trace_1.cpp)]\n [!code-cs[Classic Trace Example#1](~/add/codesnippet/csharp/t-system.diagnostics.trace_1.cs)]\n [!code-vb[Classic Trace Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.trace_1.vb)]"
  syntax:
    content: public sealed class Trace
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  id: Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "条件をチェックします。条件が場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、コール スタックを示すメッセージ ボックスを表示します。"
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example creates an index for an array. Then some action is performed that sets the value of the index. Next the code calls Assert to verify the index value is valid. If it is not valid, the Assert outputs the call stack.  \n  \n [!code-cs[Classic Trace.Assert Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_23_1.cs)]\n [!code-cpp[Classic Trace.Assert Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_23_1.cpp)]\n [!code-vb[Classic Trace.Assert Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_23_1.vb)]"
  syntax:
    content: public static void Assert (bool condition);
    parameters:
    - id: condition
      type: System.Boolean
      description: "評価する条件式。 条件が場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>エラー メッセージが送信されず、およびメッセージ ボックスは表示されません。"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "条件をチェックします。条件が場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、指定したメッセージを出力し、コール スタックを示すメッセージ ボックスを表示します。"
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_20_1.cs)]\n [!code-cpp[Classic Trace.Assert1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_20_1.cpp)]\n [!code-vb[Classic Trace.Assert1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_20_1.vb)]"
  syntax:
    content: public static void Assert (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "評価する条件式。 条件が場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定したメッセージが送信されず、およびメッセージ ボックスは表示されません。"
    - id: message
      type: System.String
      description: "送信するメッセージ、<xref:System.Diagnostics.Trace.Listeners*>コレクションです</xref:System.Diagnostics.Trace.Listeners*>。"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  id: Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "条件をチェックします。条件が場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、2 つの指定したメッセージを出力し、コール スタックを示すメッセージ ボックスを表示します。"
  remarks: "Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=fullName> method if you want to do assertions in release builds. The <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=fullName> method works only in debug builds. For more information, see [Assertions in Managed Code](~/add/includes/ajax-current-ext-md.md).  \n  \n Typically, the Assert method is used to identify logic errors during program development. Assert evaluates the condition. If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Trace.Listeners%2A> collection. You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n When the application runs in user-interface mode, it displays a message box that shows the call stack with file and line numbers. The message box contains three buttons: **Abort**, **Retry**, and **Ignore**. Clicking the **Abort** button terminates the application. Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not. Clicking **Ignore** continues with the next instruction in the code.  \n  \n> [!NOTE]\n>  The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application. In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=fullName> property. The configuration file should be formatted as follows:  \n  \n```  \n<configuration>  \n  <system.diagnostics>  \n    <switches>  \n      <add name=\"mySwitch\" value=\"4\"/>  \n    </switches>  \n    <trace autoflush=\"false\" indentsize=\"4\"/>  \n    <assert assertuienabled=\"true\" logfilename=\".\\TraceLog.txt\"/>  \n  </system.diagnostics>  \n</configuration>  \n```"
  example:
  - "The following example checks to see that the `type` parameter is valid. If the `type` passed in is `null`, the <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.  \n  \n [!code-cs[Classic Trace.Assert2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_24_1.cs)]\n [!code-vb[Classic Trace.Assert2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_24_1.vb)]\n [!code-cpp[Classic Trace.Assert2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_24_1.cpp)]"
  syntax:
    content: public static void Assert (bool condition, string message, string detailMessage);
    parameters:
    - id: condition
      type: System.Boolean
      description: "評価する条件式。 条件が場合<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定したメッセージは送信されません、およびメッセージ ボックスは表示されません。"
    - id: message
      type: System.String
      description: "送信するメッセージ、<xref:System.Diagnostics.Trace.Listeners*>コレクションです</xref:System.Diagnostics.Trace.Listeners*>。"
    - id: detailMessage
      type: System.String
      description: "詳細なメッセージを送信する、<xref:System.Diagnostics.Trace.Listeners*>コレクションです</xref:System.Diagnostics.Trace.Listeners*>。"
  overload: System.Diagnostics.Trace.Assert*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.AutoFlush
  id: AutoFlush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または設定するかどうか<> *> で呼び出す必要があります、 <> </> *> すべての書き込み後にします。"
  remarks: "既定値は`false`します。       <xref:System.Diagnostics.Trace.Flush%2A>または<xref:System.Diagnostics.Trace.Close%2A>。</xref:System.Diagnostics.Trace.Close%2A></xref:System.Diagnostics.Trace.Flush%2A>を明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません。 バッファリング`true`に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します。 これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。 このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。       AutoFlush を設定して<xref:System.Diagnostics.Trace.IndentSize%2A>の<xref:System.Diagnostics.Trace>、アプリケーションの名前に対応する構成ファイルを編集することもできます</xref:System.Diagnostics.Trace></xref:System.Diagnostics.Trace.IndentSize%2A>。 構成ファイルは、次の例のようにフォーマットする必要があります。```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合<> *> で呼び出されると、 <> </> *>; すべての書き込み後にそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Diagnostics.Trace.AutoFlush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Close
  id: Close
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "出力バッファーをフラッシュしてから閉じます<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>"
  remarks: "このメソッドを使用して、出力するとき、ファイルなど、 <xref:System.Diagnostics.TextWriterTraceListener>。</xref:System.Diagnostics.TextWriterTraceListener>       明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません<xref:System.Diagnostics.Trace.Flush%2A>または Close</xref:System.Diagnostics.Trace.Flush%2A> 。 設定<xref:System.Diagnostics.Trace.AutoFlush%2A>に`true`に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します</xref:System.Diagnostics.Trace.AutoFlush%2A>。 これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。 このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_9_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_9_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_9_1.vb)]"
  syntax:
    content: public static void Close ();
    parameters: []
  overload: System.Diagnostics.Trace.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.CorrelationManager
  id: CorrelationManager
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "このトレースのスレッドの相関マネージャーを取得します。"
  remarks: "> [!NOTE]> これは、ほとんどのアプリケーションが何度で使用する必要がない高度なプロパティです。       <xref:System.Diagnostics.CorrelationManager>クラスはスレッド バインド コンテキストに論理操作の id を格納し、タグ ストアドの id を持つスレッドによって生成される各トレース イベントを自動的に使用されるメソッドを提供します</xref:System.Diagnostics.CorrelationManager>。"
  syntax:
    content: public static System.Diagnostics.CorrelationManager CorrelationManager { get; }
    return:
      type: System.Diagnostics.CorrelationManager
      description: "<xref href=&quot;System.Diagnostics.CorrelationManager&quot;> </xref>このトレースのスレッドに関連付けられているオブジェクト。"
  overload: System.Diagnostics.Trace.CorrelationManager*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String)
  id: Fail(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "指定されたエラー メッセージを出力します。"
  remarks: "The default behavior for the default trace listener is to output the `message` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the Fail method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_1.cs)]\n [!code-cpp[Classic Trace.Fail Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_1.cpp)]\n [!code-vb[Classic Trace.Fail Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_1.vb)]  \n  \n You can also use the Fail method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_1_2.cs)]\n [!code-cpp[Classic Trace.Fail Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_1_2.cpp)]\n [!code-vb[Classic Trace.Fail Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_1_2.vb)]"
  syntax:
    content: public static void Fail (string message);
    parameters:
    - id: message
      type: System.String
      description: "出力するメッセージ。"
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  id: Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "エラー メッセージ、および詳細なエラー メッセージを出力します。"
  remarks: "The default behavior is for the default trace listener to output the `message` parameter and the `detailedMessage` parameter to a message box when the application runs in user-interface mode, and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Trace.Listeners%2A> collection.  \n  \n> [!NOTE]\n>  The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>. If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed. The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [\\&lt;clear\\&gt;](../Topic/%3Cclear%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), the [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E%20Element%20for%20%3Clisteners%3E%20for%20%3Ctrace%3E.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).  \n  \n You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or by removing one from, the <xref:System.Diagnostics.Trace.Listeners%2A> collection."
  example:
  - "The following example uses the <xref:System.Diagnostics.Trace.Fail%2A> method to print a message during exception handling.  \n  \n [!code-cs[Classic Trace.Fail1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_1.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_1.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_1.vb)]  \n  \n You can also use the <xref:System.Diagnostics.Trace.Fail%2A> method in a switch statement.  \n  \n [!code-cs[Classic Trace.Fail1 Example#2](~/add/codesnippet/csharp/m-system.diagnostics.tra_13_2.cs)]\n [!code-cpp[Classic Trace.Fail1 Example#2](~/add/codesnippet/cpp/m-system.diagnostics.tra_13_2.cpp)]\n [!code-vb[Classic Trace.Fail1 Example#2](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_13_2.vb)]"
  syntax:
    content: public static void Fail (string message, string detailMessage);
    parameters:
    - id: message
      type: System.String
      description: "出力するメッセージ。"
    - id: detailMessage
      type: System.String
      description: "出力する詳細なメッセージ。"
  overload: System.Diagnostics.Trace.Fail*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Flush
  id: Flush
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "出力バッファーをフラッシュし、 <xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>に書き込まれるバッファー内のデータ"
  remarks: "フラッシュまたは<xref:System.Diagnostics.Trace.Close%2A>。</xref:System.Diagnostics.Trace.Close%2A>を明示的に呼び出す場合を除き、ストリームのフラッシュは、基になるエンコーダー フラッシュされません。 設定<xref:System.Diagnostics.Trace.AutoFlush%2A>に`true`に、ストリーム バッファーからデータがフラッシュされますが、エンコーダーの状態はフラッシュされないことを意味します</xref:System.Diagnostics.Trace.AutoFlush%2A>。 これにより、次の文字のブロックを正常にエンコードできるように (一部の文字) の状態を保持するエンコーダー。 このシナリオでは、UTF8、UTF7、特定の文字をエンコードするため、エンコーダーは、隣接する文字または文字列を受信した後に影響します。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`. `myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`. The example creates the file, stream and text writer, writes one line of text to the file, and then flushes and closes the output.  \n  \n [!code-cs[Classic Trace.Flush Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_17_1.cs)]\n [!code-cpp[Classic Trace.Flush Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_17_1.cpp)]\n [!code-vb[Classic Trace.Flush Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_17_1.vb)]"
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Diagnostics.Trace.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Indent
  id: Indent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "現在の増加<xref:System.Diagnostics.Trace.IndentLevel*>ずつ</xref:System.Diagnostics.Trace.IndentLevel*>。"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_6_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_6_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_6_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n```"
  syntax:
    content: public static void Indent ();
    parameters: []
  overload: System.Diagnostics.Trace.Indent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentLevel
  id: IndentLevel
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得またはインデント レベルを設定します。"
  remarks: "IndentLevel プロパティを表す回数を超えるサイズのインデント<xref:System.Diagnostics.Trace.IndentSize%2A>が適用されます</xref:System.Diagnostics.Trace.IndentSize%2A>。 このプロパティは、スレッド/あたりの要求ごとに格納されます。"
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_10_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_10_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_10_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static int IndentLevel { get; set; }
    return:
      type: System.Int32
      description: "インデント レベル。 既定値は&0; です。"
  overload: System.Diagnostics.Trace.IndentLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.IndentSize
  id: IndentSize
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得または空白の数を&1; つのインデントに設定します。"
  remarks: "A<xref:System.Diagnostics.TextWriterTraceListener>スペースとしてこの数値を解釈します</xref:System.Diagnostics.TextWriterTraceListener>。 <xref:System.Diagnostics.EventLogTraceListener>この値は無視されます</xref:System.Diagnostics.EventLogTraceListener>。       このプロパティは、スレッド/あたりの要求ごとに格納されます。       設定する、<xref:System.Diagnostics.Trace.AutoFlush%2A>およびの IndentSize <xref:System.Diagnostics.Trace>、アプリケーションの名前に対応する構成ファイルを編集することもできます</xref:System.Diagnostics.Trace></xref:System.Diagnostics.Trace.AutoFlush%2A>。 構成ファイルは、次の例のようにフォーマットする必要があります。```   <configuration>     <system.diagnostics>       <trace autoflush=&quot;false&quot; indentsize=&quot;3&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static int IndentSize { get; set; }
    return:
      type: System.Int32
      description: "1 つのインデントに含まれるスペースの数。 既定値は&4; です。"
  overload: System.Diagnostics.Trace.IndentSize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Listeners
  id: Listeners
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース出力を監視するリスナーのコレクションを取得します。"
  remarks: "リスナーは、トレース出力から、書式付き出力を生成します。 既定では、コレクションには、<xref:System.Diagnostics.DefaultTraceListener>クラス</xref:System.Diagnostics.DefaultTraceListener>のインスタンスが含まれます 既定のリスナーを削除する場合は、呼び出し、<xref:System.Diagnostics.TraceListenerCollection.Remove%2A>メソッド、 <xref:System.Diagnostics.DefaultTraceListener>.</xref:System.Diagnostics.DefaultTraceListener>のインスタンスを渡すと</xref:System.Diagnostics.TraceListenerCollection.Remove%2A> コンソール ウィンドウに出力をリダイレクトするには、<xref:System.Diagnostics.ConsoleTraceListener>クラス</xref:System.Diagnostics.ConsoleTraceListener>のインスタンスに追加します。      > [!NOTE] > 両方で、リスナーのコレクションを共有、<xref:System.Diagnostics.Debug>と<xref:System.Diagnostics.Trace>クラスですどちらかのクラスをトレース リスナーをリスナーに追加の両方を追加します。</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.ConsoleTraceListener> that outputs to the console screen. The code then adds the new listener to the Listeners.  \n  \n [!code-cs[Classic Trace.Listeners Example#1](~/add/codesnippet/csharp/p-system.diagnostics.tra_2_1.cs)]\n [!code-vb[Classic Trace.Listeners Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.tra_2_1.vb)]\n [!code-cpp[Classic Trace.Listeners Example#1](~/add/codesnippet/cpp/p-system.diagnostics.tra_2_1.cpp)]"
  syntax:
    content: public static System.Diagnostics.TraceListenerCollection Listeners { get; }
    return:
      type: System.Diagnostics.TraceListenerCollection
      description: "A <xref href=&quot;System.Diagnostics.TraceListenerCollection&quot;> </xref>型のコレクションを表す<xref href=&quot;System.Diagnostics.TraceListener&quot;></xref>トレース出力を監視します。"
  overload: System.Diagnostics.Trace.Listeners*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Refresh
  id: Refresh
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレースの構成データを更新します。"
  remarks: "アプリケーションが開始されたときに、トレースの構成データがキャプチャされます。 アプリケーションの開始後に、構成データを変更する場合は、トレースの構成データを更新する更新メソッドを呼び出します。"
  syntax:
    content: public static void Refresh ();
    parameters: []
  overload: System.Diagnostics.Trace.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String)
  id: TraceError(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "内のトレース リスナーにエラー メッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクション指定のメッセージを使用します</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "TraceError 呼び出し、`TraceEvent`各トレース リスナーと、トレース イベントの種類のメソッド<xref:System.Diagnostics.TraceEventType>、情報メッセージをメッセージの文字列として渡します</xref:System.Diagnostics.TraceEventType>。"
  syntax:
    content: public static void TraceError (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込む情報メッセージです。"
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  id: TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "内のトレース リスナーにエラー メッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>指定されたオブジェクトの配列を使用し、書式設定情報のコレクション</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "TraceError 呼び出し、`TraceEvent`トレース イベントの種類のトレース リスナーにメソッド<xref:System.Diagnostics.TraceEventType>、書式設定情報を含むオブジェクトの配列として、メッセージの内容を渡します</xref:System.Diagnostics.TraceEventType>。 参照してください、<xref:System.String.Format%2A>メソッドの詳細については、`format`と`args`パラメーター</xref:System.String.Format%2A> 。"
  syntax:
    content: public static void TraceError (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "書式指定文字列内のオブジェクトに対応する、0 個以上の書式項目を含む、`args`配列。"
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref>書式指定する&0; 個以上のオブジェクトを含む配列。"
  overload: System.Diagnostics.Trace.TraceError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  id: TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーに情報メッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクション指定のメッセージを使用します</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "TraceInformation 呼び出し、`TraceEvent`各トレース リスナーと、トレース イベントの種類のメソッド<xref:System.Diagnostics.TraceEventType>、情報メッセージをメッセージの文字列として渡します</xref:System.Diagnostics.TraceEventType>。"
  syntax:
    content: public static void TraceInformation (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込む情報メッセージです。"
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  id: TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーに情報メッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>指定されたオブジェクトの配列を使用し、書式設定情報のコレクション</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "TraceInformation 呼び出し、`TraceEvent`トレース イベントの種類のトレース リスナーにメソッド<xref:System.Diagnostics.TraceEventType>、書式設定情報を含むオブジェクトの配列として、メッセージの内容を渡します</xref:System.Diagnostics.TraceEventType>。 参照してください、<xref:System.String.Format%2A>メソッドの詳細については、`format`と`args`パラメーター</xref:System.String.Format%2A> 。"
  syntax:
    content: public static void TraceInformation (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "書式指定文字列内のオブジェクトに対応する、0 個以上の書式項目を含む、`args`配列。"
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref>書式指定する&0; 個以上のオブジェクトを含む配列。"
  overload: System.Diagnostics.Trace.TraceInformation*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  id: TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーに警告メッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクション指定のメッセージを使用します</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "TraceWarning 呼び出し、`TraceEvent`トレース イベントの種類には、各トレース リスナーにメソッド<xref:System.Diagnostics.TraceEventType>、情報メッセージをメッセージの文字列として渡します</xref:System.Diagnostics.TraceEventType>。"
  syntax:
    content: public static void TraceWarning (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込む情報メッセージです。"
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  id: TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーに警告メッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>指定されたオブジェクトの配列を使用し、書式設定情報のコレクション</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "TraceWarning 呼び出し、`TraceEvent`トレース イベントの種類のトレース リスナーにメソッド<xref:System.Diagnostics.TraceEventType>、書式設定情報を含むオブジェクトの配列として、メッセージの内容を渡します</xref:System.Diagnostics.TraceEventType>。 参照してください、<xref:System.String.Format%2A>メソッドの詳細については、`format`と`args`パラメーター</xref:System.String.Format%2A> 。"
  syntax:
    content: public static void TraceWarning (string format, object[] args);
    parameters:
    - id: format
      type: System.String
      description: "書式指定文字列内のオブジェクトに対応する、0 個以上の書式項目を含む、`args`配列。"
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_object&quot; name=&quot;object&quot; href=&quot;&quot;> </xref>書式指定する&0; 個以上のオブジェクトを含む配列。"
  overload: System.Diagnostics.Trace.TraceWarning*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Unindent
  id: Unindent
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "現在の減少<xref:System.Diagnostics.Trace.IndentLevel*>ずつ</xref:System.Diagnostics.Trace.IndentLevel*>。"
  remarks: ''
  example:
  - "The following example increments and decrements the indent level and emits tracing messages.  \n  \n [!code-cpp[Classic Trace.IndentLevel Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_14_1.cpp)]\n [!code-cs[Classic Trace.IndentLevel Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_14_1.cs)]\n [!code-vb[Classic Trace.IndentLevel Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_14_1.vb)]  \n  \n This example produces the following output:  \n  \n```  \n  \nList of errors:  \n     Error 1: File not found  \n     Error 2: Directory not found  \nEnd of list of errors  \n  \n```"
  syntax:
    content: public static void Unindent ();
    parameters: []
  overload: System.Diagnostics.Trace.Unindent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.UseGlobalLock
  id: UseGlobalLock
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "取得またはグローバル ロックを使用するかどうかを示す値を設定します。"
  remarks: "グローバル ロックは常に、トレース リスナーがスレッド セーフである、用意されましたの値に関係なくでない場合に使用します。 <xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>プロパティを使用して、リスナーがスレッド セーフであるかどうかを判断します</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>。 用意されましたの値が場合にのみ、グローバルのロックは使用されません`false`の値と<xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>は`true`</xref:System.Diagnostics.TraceListener.IsThreadSafe%2A>。 既定の動作では、グローバル ロックを使用します。       用意されましたを設定する<xref:System.Diagnostics.Trace>、アプリケーションの名前に対応する構成ファイルを編集することもできます</xref:System.Diagnostics.Trace>。 構成ファイルは、次の例のようにフォーマットする必要があります。```   <configuration>     <system.diagnostics>       <trace useGlobalLock=&quot;false&quot; />     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: public static bool UseGlobalLock { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>グローバル ロックが使用する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Diagnostics.Trace.UseGlobalLock*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object)
  id: Write(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "オブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクション。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。      > [!NOTE] > ASP.NET の Web ページに対応したトレース機能を提供します。 ASP.NET ページのトレース メッセージを書き込むには使用、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>。       既定では、ASP.NET Web ページで、ステートメントに関連付けられているコードで`Trace.Write(&quot;...&quot;)`への呼び出し、<xref:System.Web.TraceContext.Write%2A>のメソッド、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName></xref:System.Web.TraceContext.Write%2A>。 使用する、<xref:System.Diagnostics.Trace?displayProperty=fullName>クラス、Web ページにする必要があります、名前空間など、 `System.Diagnostics.Trace.Write(&quot;...&quot;)`</xref:System.Diagnostics.Trace?displayProperty=fullName> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the `value` parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_26_1.cpp)]\n [!code-vb[Classic Trace.Write1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_26_1.vb)]\n [!code-cs[Classic Trace.Write1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_26_1.cs)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前を持つは<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>送信</xref:System.Object>"
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "内のトレース リスナーにメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションです</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。      > [!NOTE] > ASP.NET の Web ページに対応したトレース機能を提供します。 ASP.NET ページのトレース メッセージを書き込むには使用、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>。       既定では、ASP.NET Web ページで、ステートメントに関連付けられているコードで`Trace.Write(&quot;...&quot;)`への呼び出し、<xref:System.Web.TraceContext.Write%2A>のメソッド、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName></xref:System.Web.TraceContext.Write%2A>。 使用する、<xref:System.Diagnostics.Trace?displayProperty=fullName>クラス、Web ページにする必要があります、名前空間など、 `System.Diagnostics.Trace.Write(&quot;...&quot;)`</xref:System.Diagnostics.Trace?displayProperty=fullName> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. A line terminator follows the second message.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_12_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_12_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_12_1.vb)]"
  syntax:
    content: public static void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  id: Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とオブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクション。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。      > [!NOTE] > ASP.NET の Web ページに対応したトレース機能を提供します。 ASP.NET ページのトレース メッセージを書き込むには使用、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>。       既定では、ASP.NET Web ページで、ステートメントに関連付けられているコードで`Trace.Write(&quot;...&quot;)`への呼び出し、<xref:System.Web.TraceContext.Write%2A>のメソッド、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName></xref:System.Web.TraceContext.Write%2A>。 使用する、<xref:System.Diagnostics.Trace?displayProperty=fullName>クラス、Web ページにする必要があります、名前空間など、 `System.Diagnostics.Trace.Write(&quot;...&quot;)`</xref:System.Diagnostics.Trace?displayProperty=fullName> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_16_1.cpp)]\n [!code-cs[Classic Trace.Write3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_16_1.cs)]\n [!code-vb[Classic Trace.Write3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_16_1.vb)]"
  syntax:
    content: public static void Write (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前は<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>に送信</xref:System.Object>"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーにカテゴリ名とメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションです</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。      > [!NOTE] > ASP.NET の Web ページに対応したトレース機能を提供します。 ASP.NET ページのトレース メッセージを書き込むには使用、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>。       既定では、ASP.NET Web ページで、ステートメントに関連付けられているコードで`Trace.Write(&quot;...&quot;)`への呼び出し、<xref:System.Web.TraceContext.Write%2A>のメソッド、<xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName>プロパティ</xref:System.Web.UI.Page.Trace%2A?displayProperty=fullName></xref:System.Web.TraceContext.Write%2A>。 使用する、<xref:System.Diagnostics.Trace?displayProperty=fullName>クラス、Web ページにする必要があります、名前空間など、 `System.Diagnostics.Trace.Write(&quot;...&quot;)`</xref:System.Diagnostics.Trace?displayProperty=fullName> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_4_1.cpp)]\n [!code-vb[Classic Trace.Write2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_4_1.vb)]\n [!code-cs[Classic Trace.Write2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_4_1.cs)]"
  syntax:
    content: public static void Write (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  id: WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "オブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_2_1.cpp)]\n [!code-vb[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_2_1.vb)]\n [!code-cs[Classic Trace.WriteIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_2_1.cs)]"
  syntax:
    content: public static void WriteIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前を持つは<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>送信</xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  id: WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "内のトレース リスナーにメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Diagnostics.Trace.Listeners*> 。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_10_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_10_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_10_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  id: WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とオブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_8_1.cs)]\n [!code-vb[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_8_1.vb)]\n [!code-cpp[Classic Trace.WriteIf3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_8_1.cpp)]"
  syntax:
    content: public static void WriteIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前を持つは<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>送信</xref:System.Object>"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  id: WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーにカテゴリ名とメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Diagnostics.Trace.Listeners*> 。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.Write%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.Write%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_7_1.cs)]\n [!code-cpp[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_7_1.cpp)]\n [!code-vb[Classic Trace.WriteIf2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_7_1.vb)]"
  syntax:
    content: public static void WriteIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.WriteIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "オブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクション。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_18_1.cpp)]\n [!code-cs[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_18_1.cs)]\n [!code-vb[Classic Trace.WriteLine1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_18_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前を持つは<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>送信</xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "内のトレース リスナーにメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションです</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.Write Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_3_1.cpp)]\n [!code-cs[Classic Trace.Write Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_3_1.cs)]\n [!code-vb[Classic Trace.Write Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_3_1.vb)]"
  syntax:
    content: public static void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  id: WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とオブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクション。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_19_1.cpp)]\n [!code-vb[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_19_1.vb)]\n [!code-cs[Classic Trace.WriteLine3 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_19_1.cs)]"
  syntax:
    content: public static void WriteLine (object value, string category);
    parameters:
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前を持つは<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>送信</xref:System.Object>"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  id: WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーにカテゴリ名とメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションです</xref:System.Diagnostics.Trace.Listeners*>。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_25_1.cpp)]\n [!code-vb[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_25_1.vb)]\n [!code-cs[Classic Trace.WriteLine2 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_25_1.cs)]"
  syntax:
    content: public static void WriteLine (string message, string category);
    parameters:
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.WriteLine*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  id: WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "オブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cpp[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_5_1.cpp)]\n [!code-vb[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_5_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf1 Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_5_1.cs)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前を持つは<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>送信</xref:System.Object>"
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  id: WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "内のトレース リスナーにメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Diagnostics.Trace.Listeners*> 。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteIf Example#1](~/add/codesnippet/csharp/m-system.diagnostics.tra_11_1.cs)]\n [!code-cpp[Classic Trace.WriteIf Example#1](~/add/codesnippet/cpp/m-system.diagnostics.tra_11_1.cpp)]\n [!code-vb[Classic Trace.WriteIf Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.tra_11_1.vb)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  id: WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "カテゴリ名とオブジェクトの値を書き込みます<> *> メソッド内のトレース リスナーを<> *> コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-cs[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/csharp/96a954ed-2f0b-4ec7-91f9-_1.cs)]\n [!code-vb[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/visualbasic/96a954ed-2f0b-4ec7-91f9-_1.vb)]\n [!code-cpp[Classic Trace.WriteLineIf3 Example#1](~/add/codesnippet/cpp/96a954ed-2f0b-4ec7-91f9-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, object value, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: value
      type: System.Object
      description: "の<xref:System.Object>名前を持つは<xref:System.Diagnostics.Trace.Listeners*>。</xref:System.Diagnostics.Trace.Listeners*>送信</xref:System.Object>"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  id: WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  langs:
  - csharp
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "トレース リスナーにカテゴリ名とメッセージを書き込みます、<xref:System.Diagnostics.Trace.Listeners*>コレクションの場合は、条件が<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref></xref:System.Diagnostics.Trace.Listeners*> 。"
  remarks: "既定では、出力は、 <xref:System.Diagnostics.DefaultTraceListener>。</xref:System.Diagnostics.DefaultTraceListener>のインスタンスに       `category`パラメーターは、出力メッセージをグループ化を使用することができます。       このメソッドは、<xref:System.Diagnostics.TraceListener.WriteLine%2A>トレース リスナー</xref:System.Diagnostics.TraceListener.WriteLine%2A> 。"
  example:
  - "The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`. This switch is set outside the code sample.  \n  \n If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Trace.Listeners%2A>. For information on adding a listener to the <xref:System.Diagnostics.Trace.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.  \n  \n Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message. The second message is followed by a line terminator.  \n  \n [!code-vb[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/visualbasic/7f54460b-5f74-4be1-a3dd-_1.vb)]\n [!code-cs[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/csharp/7f54460b-5f74-4be1-a3dd-_1.cs)]\n [!code-cpp[Classic Trace.WriteLineIf2 Example#1](~/add/codesnippet/cpp/7f54460b-5f74-4be1-a3dd-_1.cpp)]"
  syntax:
    content: public static void WriteLineIf (bool condition, string message, string category);
    parameters:
    - id: condition
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>書き込まれるメッセージがそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    - id: message
      type: System.String
      description: "書き込むメッセージ。"
    - id: category
      type: System.String
      description: "出力を編成するために使用するカテゴリ名。"
  overload: System.Diagnostics.Trace.WriteLineIf*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Trace.Assert(System.Boolean)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean)
  nameWithType: Trace.Assert(Boolean)
  fullName: System.Diagnostics.Trace.Assert(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String)
  nameWithType: Trace.Assert(Boolean,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert(Boolean,String,String)
  nameWithType: Trace.Assert(Boolean,String,String)
  fullName: System.Diagnostics.Trace.Assert(Boolean,String,String)
- uid: System.Diagnostics.Trace.AutoFlush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
  fullName: System.Diagnostics.Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close()
  nameWithType: Trace.Close()
  fullName: System.Diagnostics.Trace.Close()
- uid: System.Diagnostics.Trace.CorrelationManager
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
  fullName: System.Diagnostics.Trace.CorrelationManager
- uid: System.Diagnostics.CorrelationManager
  parent: System.Diagnostics
  isExternal: false
  name: CorrelationManager
  nameWithType: CorrelationManager
  fullName: System.Diagnostics.CorrelationManager
- uid: System.Diagnostics.Trace.Fail(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String)
  nameWithType: Trace.Fail(String)
  fullName: System.Diagnostics.Trace.Fail(String)
- uid: System.Diagnostics.Trace.Fail(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail(String,String)
  nameWithType: Trace.Fail(String,String)
  fullName: System.Diagnostics.Trace.Fail(String,String)
- uid: System.Diagnostics.Trace.Flush
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush()
  nameWithType: Trace.Flush()
  fullName: System.Diagnostics.Trace.Flush()
- uid: System.Diagnostics.Trace.Indent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent()
  nameWithType: Trace.Indent()
  fullName: System.Diagnostics.Trace.Indent()
- uid: System.Diagnostics.Trace.IndentLevel
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
  fullName: System.Diagnostics.Trace.IndentLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Trace.IndentSize
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
  fullName: System.Diagnostics.Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
  fullName: System.Diagnostics.Trace.Listeners
- uid: System.Diagnostics.TraceListenerCollection
  parent: System.Diagnostics
  isExternal: false
  name: TraceListenerCollection
  nameWithType: TraceListenerCollection
  fullName: System.Diagnostics.TraceListenerCollection
- uid: System.Diagnostics.Trace.Refresh
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh()
  nameWithType: Trace.Refresh()
  fullName: System.Diagnostics.Trace.Refresh()
- uid: System.Diagnostics.Trace.TraceError(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String)
  nameWithType: Trace.TraceError(String)
  fullName: System.Diagnostics.Trace.TraceError(String)
- uid: System.Diagnostics.Trace.TraceError(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError(String,Object[])
  nameWithType: Trace.TraceError(String,Object[])
  fullName: System.Diagnostics.Trace.TraceError(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Trace.TraceInformation(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String)
  nameWithType: Trace.TraceInformation(String)
  fullName: System.Diagnostics.Trace.TraceInformation(String)
- uid: System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation(String,Object[])
  nameWithType: Trace.TraceInformation(String,Object[])
  fullName: System.Diagnostics.Trace.TraceInformation(String,Object[])
- uid: System.Diagnostics.Trace.TraceWarning(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String)
  nameWithType: Trace.TraceWarning(String)
  fullName: System.Diagnostics.Trace.TraceWarning(String)
- uid: System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning(String,Object[])
  nameWithType: Trace.TraceWarning(String,Object[])
  fullName: System.Diagnostics.Trace.TraceWarning(String,Object[])
- uid: System.Diagnostics.Trace.Unindent
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent()
  nameWithType: Trace.Unindent()
  fullName: System.Diagnostics.Trace.Unindent()
- uid: System.Diagnostics.Trace.UseGlobalLock
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
  fullName: System.Diagnostics.Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object)
  nameWithType: Trace.Write(Object)
  fullName: System.Diagnostics.Trace.Write(Object)
- uid: System.Diagnostics.Trace.Write(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String)
  nameWithType: Trace.Write(String)
  fullName: System.Diagnostics.Trace.Write(String)
- uid: System.Diagnostics.Trace.Write(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(Object,String)
  nameWithType: Trace.Write(Object,String)
  fullName: System.Diagnostics.Trace.Write(Object,String)
- uid: System.Diagnostics.Trace.Write(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write(String,String)
  nameWithType: Trace.Write(String,String)
  fullName: System.Diagnostics.Trace.Write(String,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object)
  nameWithType: Trace.WriteIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String)
  nameWithType: Trace.WriteIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,Object,String)
  nameWithType: Trace.WriteIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf(Boolean,String,String)
  nameWithType: Trace.WriteIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Trace.WriteLine(Object)
  fullName: System.Diagnostics.Trace.WriteLine(Object)
- uid: System.Diagnostics.Trace.WriteLine(System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String)
  nameWithType: Trace.WriteLine(String)
  fullName: System.Diagnostics.Trace.WriteLine(String)
- uid: System.Diagnostics.Trace.WriteLine(System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(Object,String)
  nameWithType: Trace.WriteLine(Object,String)
  fullName: System.Diagnostics.Trace.WriteLine(Object,String)
- uid: System.Diagnostics.Trace.WriteLine(System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine(String,String)
  nameWithType: Trace.WriteLine(String,String)
  fullName: System.Diagnostics.Trace.WriteLine(String,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object)
  nameWithType: Trace.WriteLineIf(Boolean,Object)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String)
  nameWithType: Trace.WriteLineIf(Boolean,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,Object,String)
  nameWithType: Trace.WriteLineIf(Boolean,Object,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,Object,String)
- uid: System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf(Boolean,String,String)
  nameWithType: Trace.WriteLineIf(Boolean,String,String)
  fullName: System.Diagnostics.Trace.WriteLineIf(Boolean,String,String)
- uid: System.Diagnostics.Trace.Assert*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Assert
  nameWithType: Trace.Assert
- uid: System.Diagnostics.Trace.AutoFlush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: AutoFlush
  nameWithType: Trace.AutoFlush
- uid: System.Diagnostics.Trace.Close*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Close
  nameWithType: Trace.Close
- uid: System.Diagnostics.Trace.CorrelationManager*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: CorrelationManager
  nameWithType: Trace.CorrelationManager
- uid: System.Diagnostics.Trace.Fail*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Fail
  nameWithType: Trace.Fail
- uid: System.Diagnostics.Trace.Flush*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Flush
  nameWithType: Trace.Flush
- uid: System.Diagnostics.Trace.Indent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Indent
  nameWithType: Trace.Indent
- uid: System.Diagnostics.Trace.IndentLevel*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentLevel
  nameWithType: Trace.IndentLevel
- uid: System.Diagnostics.Trace.IndentSize*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: IndentSize
  nameWithType: Trace.IndentSize
- uid: System.Diagnostics.Trace.Listeners*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Listeners
  nameWithType: Trace.Listeners
- uid: System.Diagnostics.Trace.Refresh*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Refresh
  nameWithType: Trace.Refresh
- uid: System.Diagnostics.Trace.TraceError*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceError
  nameWithType: Trace.TraceError
- uid: System.Diagnostics.Trace.TraceInformation*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceInformation
  nameWithType: Trace.TraceInformation
- uid: System.Diagnostics.Trace.TraceWarning*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: TraceWarning
  nameWithType: Trace.TraceWarning
- uid: System.Diagnostics.Trace.Unindent*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Unindent
  nameWithType: Trace.Unindent
- uid: System.Diagnostics.Trace.UseGlobalLock*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: UseGlobalLock
  nameWithType: Trace.UseGlobalLock
- uid: System.Diagnostics.Trace.Write*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: Write
  nameWithType: Trace.Write
- uid: System.Diagnostics.Trace.WriteIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteIf
  nameWithType: Trace.WriteIf
- uid: System.Diagnostics.Trace.WriteLine*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLine
  nameWithType: Trace.WriteLine
- uid: System.Diagnostics.Trace.WriteLineIf*
  parent: System.Diagnostics.Trace
  isExternal: false
  name: WriteLineIf
  nameWithType: Trace.WriteLineIf
