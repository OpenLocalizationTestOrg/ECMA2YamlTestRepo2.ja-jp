### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.WebClientAsyncResult
  id: WebClientAsyncResult
  children:
  - System.Web.Services.Protocols.WebClientAsyncResult.Abort
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  - System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  - System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  langs:
  - csharp
  name: WebClientAsyncResult
  nameWithType: WebClientAsyncResult
  fullName: System.Web.Services.Protocols.WebClientAsyncResult
  type: Class
  summary: "実装を提供<xref:System.IAsyncResult>非同期メソッドの標準パターンを実装する XML Web サービス プロキシで使用するためです</xref:System.IAsyncResult>。"
  remarks: "When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the WebClientAsyncResult is returned. Following the standard asynchronous design pattern, that instance of WebClientAsyncResult must later be passed to `EndMyMethodName` to complete the asynchronous method call.  \n  \n For details on calling XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  syntax:
    content: 'public class WebClientAsyncResult : IAsyncResult'
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  id: Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "非同期の XML Web サービス要求を取り消します。"
  remarks: ''
  example:
  - The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=fullName> method. If the corresponding `End` method is subsequently called after the Abort method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus>.
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  id: AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "最後のパラメーターで指定されたオブジェクトを取得、 <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref>メソッドの非同期呼び出しです。"
  syntax:
    content: public object AsyncState { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>最後のパラメーターで提供される、 <xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;> </xref>メソッドの呼び出し</xref:System.Object>。"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取得、<xref:System.Threading.WaitHandle>非同期操作が完了するまで待機するために使用されます</xref:System.Threading.WaitHandle>。"
  remarks: "<xref:System.Threading.WaitHandle>実行に使用できる、 <xref:System.Threading.WaitHandle.WaitOne%2A>、 <xref:System.Threading.WaitHandle.WaitAny%2A>、または<xref:System.Threading.WaitHandle.WaitAll%2A>非同期呼び出しが完了するまで待機する</xref:System.Threading.WaitHandle.WaitAll%2A></xref:System.Threading.WaitHandle.WaitAny%2A></xref:System.Threading.WaitHandle.WaitOne%2A></xref:System.Threading.WaitHandle>。       詳細については、 <xref:System.IAsyncResult.AsyncWaitHandle%2A>。</xref:System.IAsyncResult.AsyncWaitHandle%2A>を参照してください。"
  syntax:
    content: public System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A<xref:System.Threading.WaitHandle>非同期操作が完了するまで待機するために使用されます</xref:System.Threading.WaitHandle>。"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "Begin 呼び出しが同期的に完了したかどうかを示す値を取得します。"
  remarks: "CompletedSynchronously に設定されている場合`true`内で、 <xref:System.AsyncCallback>、デリゲートは、スレッドをという名前の可能性の高い<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>は、現在のスレッド</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A></xref:System.AsyncCallback>。 ここでは、別の非同期 Begin コールバック メソッドからを呼び出す、ため、スタックを無制限に拡張を引き起こす可能性がバインドされている場合、呼び出しが同期をとって実行を続行する方法について注意する必要があります。 代わりに、コールバック メソッドの外側、元の呼び出しサイトでは、呼び出しを完了する必要があります。"
  syntax:
    content: public bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Begin 呼び出しが同期的に完了した場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  id: IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "非同期の XML Web サービス要求が完了したかどうかを示す値を取得します。"
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>非同期の XML Web サービス要求が完了している場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort
  nameWithType: WebClientAsyncResult.Abort
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
