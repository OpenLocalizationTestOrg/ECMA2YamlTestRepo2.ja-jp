### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherObject
  id: DispatcherObject
  children:
  - System.Windows.Threading.DispatcherObject.#ctor
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  langs:
  - csharp
  name: DispatcherObject
  nameWithType: DispatcherObject
  fullName: System.Windows.Threading.DispatcherObject
  type: Class
  summary: "関連付けられているオブジェクトを表す、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>です。"
  remarks: "スレッドのみを<xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>が作成されたは、DispatcherObject に直接アクセスします</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>。  DispatcherObject 上に作成されたスレッド以外のスレッドから、DispatcherObject にアクセスするには、呼び出す<xref:System.Windows.Threading.Dispatcher.Invoke%2A>または<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上、 <xref:System.Windows.Threading.Dispatcher>、DispatcherObject に関連付けられている</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>。       スレッド セーフを適用する必要がある DispatcherObject のサブクラスを行うには呼び出す<xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>ですべてのパブリック メソッド</xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>。  これにより、呼び出し元のスレッドはスレッド上に作成された、DispatcherObject です。       DispatcherObject とは別にインスタンスを作成できません。つまり、すべてのコンス トラクターは保護されます。       DispatcherObject から派生したオブジェクトには、スレッド アフィニティがあります。       派生したオブジェクト<xref:System.Windows.Freezable>はフリー スレッドが固定されている場合</xref:System.Windows.Freezable>。  詳細については、次を参照してください。、 [Freezable オブジェクトの概要](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public abstract class DispatcherObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>クラスです。"
  syntax:
    content: protected DispatcherObject ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "呼び出し元のスレッドがへのアクセスを持つかどうかを判断<xref href=&quot;System.Windows.Threading.DispatcherObject&quot;></xref>です。"
  remarks: "スレッドでのみ、<xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>が作成された<xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>でアクセス</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       任意のスレッドがこの<xref:System.Windows.Threading.DispatcherObject>。</xref:System.Windows.Threading.DispatcherObject>へのアクセスを持っているかどうかが確認チェックできます。       CheckAccess の違いと<xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>CheckAccess が呼び出し元のスレッドがへのアクセスを持つかどうかを指定するブール値を返すことは、<xref:System.Windows.Threading.DispatcherObject>と<xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>呼び出し元のスレッドへのアクセスがない場合は、例外をスロー <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>       このメソッドを呼び出すを呼び出すことと同じです<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>、関連する<xref:System.Windows.Threading.Dispatcher>オブジェクト</xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>。"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>呼び出し元のスレッドがあるこのオブジェクトにアクセスできるを場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Windows.Threading.DispatcherObject.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "取得、 <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>この<xref href=&quot;System.Windows.Threading.DispatcherObject&quot;></xref>に関連付けられています。"
  remarks: "ディスパッチャーが作成されたスレッドのみがアクセス、<xref:System.Windows.Threading.DispatcherObject>直接</xref:System.Windows.Threading.DispatcherObject>。  アクセスする、<xref:System.Windows.Threading.DispatcherObject>スレッド以外のスレッドから、<xref:System.Windows.Threading.DispatcherObject>が作成された、呼び出す<xref:System.Windows.Threading.Dispatcher.Invoke%2A>と<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>上、 <xref:System.Windows.Threading.Dispatcher>、<xref:System.Windows.Threading.DispatcherObject>に関連付けられている</xref:System.Windows.Threading.DispatcherObject></xref:System.Windows.Threading.Dispatcher></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A></xref:System.Windows.Threading.DispatcherObject></xref:System.Windows.Threading.DispatcherObject>。"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "ディスパッチャー。"
  overload: System.Windows.Threading.DispatcherObject.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "呼び出し元のスレッドがへのアクセスを持つことを強制<xref href=&quot;System.Windows.Threading.DispatcherObject&quot;></xref>です。"
  remarks: "スレッドでのみ、<xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>が作成された<xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject>でアクセス</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       任意のスレッドがこの<xref:System.Windows.Threading.DispatcherObject>。</xref:System.Windows.Threading.DispatcherObject>へのアクセスを持っているかどうかが確認チェックできます。       違い<xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>VerifyAccess ということは<xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>呼び出し元のスレッドがへのアクセスを持つかどうかを指定するブール値を返します<xref:System.Windows.Threading.DispatcherObject>VerifyAccess が呼び出し元のスレッドへのアクセスがない場合、例外をスローおよび<xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "呼び出し元のスレッドでは、これにアクセスできない<xref href=&quot;System.Windows.Threading.DispatcherObject&quot;></xref>です。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.DispatcherObject.#ctor
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
- uid: System.Windows.Threading.DispatcherObject.#ctor*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject
  nameWithType: DispatcherObject.DispatcherObject
- uid: System.Windows.Threading.DispatcherObject.CheckAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess
  nameWithType: DispatcherObject.CheckAccess
- uid: System.Windows.Threading.DispatcherObject.Dispatcher*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess
  nameWithType: DispatcherObject.VerifyAccess
