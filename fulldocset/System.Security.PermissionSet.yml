### YamlMime:ManagedReference
items:
- uid: System.Security.PermissionSet
  id: PermissionSet
  children:
  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.Assert
  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  - System.Security.PermissionSet.Copy
  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  - System.Security.PermissionSet.Count
  - System.Security.PermissionSet.Demand
  - System.Security.PermissionSet.Deny
  - System.Security.PermissionSet.Equals(System.Object)
  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  - System.Security.PermissionSet.GetEnumerator
  - System.Security.PermissionSet.GetEnumeratorImpl
  - System.Security.PermissionSet.GetHashCode
  - System.Security.PermissionSet.GetPermission(System.Type)
  - System.Security.PermissionSet.GetPermissionImpl(System.Type)
  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsEmpty
  - System.Security.PermissionSet.IsReadOnly
  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsSynchronized
  - System.Security.PermissionSet.IsUnrestricted
  - System.Security.PermissionSet.PermitOnly
  - System.Security.PermissionSet.RemovePermission(System.Type)
  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  - System.Security.PermissionSet.RevertAssert
  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.SyncRoot
  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.PermissionSet.ToString
  - System.Security.PermissionSet.ToXml
  - System.Security.PermissionSet.Union(System.Security.PermissionSet)
  langs:
  - csharp
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
  type: Class
  summary: "さまざまな種類のアクセス許可を含めることができるコレクションを表します。"
  remarks: "PermissionSet を使用して、グループとしていくつかの異なるアクセス許可での操作を実行することができます。"
  example:
  - "The following code example demonstrates the use of the PermissionSet class and members.  \n  \n [!code-cs[System.Security.PermissionSet#1](~/add/codesnippet/csharp/t-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#1](~/add/codesnippet/visualbasic/t-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#1](~/add/codesnippet/cpp/t-system.security.permis_22_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Security.ISecurityEncodable
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 、指定したクラス<xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>です。"
  remarks: "`Unrestricted`状態により、実装するすべてのアクセス許可、<xref:System.Security.Permissions.IUnrestrictedPermission>インターフェイス、中に`None`アクセス許可は許可されません</xref:System.Security.Permissions.IUnrestrictedPermission>。       使用して<xref:System.Security.PermissionSet.AddPermission%2A>、空で<xref:System.Security.PermissionSet>セットを定義する、さらに詳しく</xref:System.Security.PermissionSet></xref:System.Security.PermissionSet.AddPermission%2A>。"
  example:
  - "The following code example shows the use of the PermissionSet constructor to create a permission set with a permission state of <xref:System.Security.Permissions.PermissionState>. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#2](~/add/codesnippet/csharp/d6be246c-3ec7-45d0-bd17-_1.cs)]\n [!code-vb[System.Security.PermissionSet#2](~/add/codesnippet/visualbasic/d6be246c-3ec7-45d0-bd17-_1.vb)]\n [!code-cpp[System.Security.PermissionSet#2](~/add/codesnippet/cpp/d6be246c-3ec7-45d0-bd17-_1.cpp)]"
  syntax:
    content: public PermissionSet (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "リソースへのアクセス許可セットのアクセスを指定する列挙値の&1; つ。"
  overload: System.Security.PermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>パラメーターが有効ではありません<xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  id: '#ctor(System.Security.PermissionSet)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>から取得した最初の値を持つクラス、 <code> permSet </code>パラメーター。"
  remarks: "<xref:System.Security.PermissionSet>指定した<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>に格納されているアクセス許可のコピーを含む</xref:System.Security.PermissionSet>新しい      > [!NOTE] > これに相当<xref:System.Security.PermissionSet.Copy%2A>ときに、`permSet`パラメーターではありません`null`</xref:System.Security.PermissionSet.Copy%2A>。"
  syntax:
    content: public PermissionSet (System.Security.PermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.PermissionSet
      description: "新しい値を取得するセット<xref href=&quot;System.Security.PermissionSet&quot;> </xref>、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> 、空を作成する<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  overload: System.Security.PermissionSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  id: AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指定した権限への追加、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "既に追加されたアクセス許可と同じ型のアクセス許可が存在するかどうか、 <xref:System.Security.PermissionSet>、新しいアクセス許可は、既存のアクセス許可オブジェクトと指定したアクセス許可オブジェクトの和集合</xref:System.Security.PermissionSet>。 たとえば、アクセス許可を実装する<xref:System.Security.Permissions.IUnrestrictedPermission>に追加、 <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>、結果の和集合は、元の`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the AddPermission method to add a permission to a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#3](~/add/codesnippet/csharp/m-system.security.permis_25_1.cs)]\n [!code-vb[System.Security.PermissionSet#3](~/add/codesnippet/visualbasic/m-system.security.permis_25_1.vb)]\n [!code-cpp[System.Security.PermissionSet#3](~/add/codesnippet/cpp/m-system.security.permis_25_1.cpp)]"
  syntax:
    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "追加する権限。"
    return:
      type: System.Security.IPermission
      description: "追加のアクセス許可と同じ型に既に存在するすべてのアクセス権の和集合、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  overload: System.Security.PermissionSet.AddPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メソッドを呼び出した、 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  id: AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指定した権限への追加、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "AddPermissionImpl メソッドは、実装では、<xref:System.Security.PermissionSet.AddPermission%2A>メソッド</xref:System.Security.PermissionSet.AddPermission%2A>。       既に追加されたアクセス許可と同じ型のアクセス許可が存在するかどうか、 <xref:System.Security.PermissionSet>、新しいアクセス許可は、既存のアクセス許可オブジェクトと指定したアクセス許可オブジェクトの和集合</xref:System.Security.PermissionSet>。 たとえば、アクセス許可を実装する<xref:System.Security.Permissions.IUnrestrictedPermission>に追加、 <xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>、結果の和集合は、元の`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "追加する権限。"
    return:
      type: System.Security.IPermission
      description: "追加のアクセス許可と同じ型に既に存在するすべてのアクセス権の和集合、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合<code> perm </code>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.PermissionSet.AddPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メソッドを呼び出した、 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Assert
  id: Assert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "呼び出し元のコードがスタック内の上位の呼び出し元がリソースにアクセスする権限が許可されていない場合でも、このメソッドを呼び出すコードを通じてアクセス許可要求によって保護されているリソースにアクセスできることを宣言します。 Assert を使用すると、セキュリティの脆弱性を作成できます。"
  remarks: "これは、1 つだけのアサートはフレームをアクティブにできるため、フレーム内で同時に複数のアクセス許可をアサートする唯一の方法です。 唯一の有効なアクセス許可が付与をアサートします。 呼び出す、<xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>または<xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName>active Assert をキャンセルするメソッド</xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName></xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>。      > [!CAUTION] > Assert メソッドの呼び出しには、呼び出しチェーン内のすべてのコードに対して、指定されたリソースにアクセスする権限を付与する必要がある要件が解除されます、ために開くことができるセキュリティの脆弱性を誤ってまたは不適切に使用する場合。 そのため、注意深く使用してください。"
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.PermissionSet.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.PermissionSet&quot;> </xref>アサートされるインスタンスがアサート側コードに付与されていません。       または、現在のフレームのアクティブなアサートが既に存在します。"
  platform:
  - net462
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  id: ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>から派生していないアクセス許可を含む<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>です。"
  remarks: ''
  example:
  - "The following code example shows the use of the ContainsNonCodeAccessPermissions method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#9](~/add/codesnippet/csharp/m-system.security.permis_8_1.cs)]\n [!code-vb[System.Security.PermissionSet#9](~/add/codesnippet/visualbasic/m-system.security.permis_8_1.vb)]\n [!code-cpp[System.Security.PermissionSet#9](~/add/codesnippet/cpp/m-system.security.permis_8_1.cpp)]"
  syntax:
    content: public bool ContainsNonCodeAccessPermissions ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>から派生していないアクセス許可を含む<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  id: ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "変換、エンコードされた<xref href=&quot;System.Security.PermissionSet&quot;></xref>別の XML エンコード形式を&1; つの XML エンコード形式からです。"
  remarks: "このメソッドを使用しないでください。"
  syntax:
    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);
    parameters:
    - id: inFormat
      type: System.String
      description: 'エンコード形式のいずれかを表す文字列: ASCII、Unicode、または Binary です。 使用可能な値は、&quot;XMLASCII&quot;または&quot;XML&quot;、&quot;XMLUNICODE&quot;、および&quot;BINARY&quot;です。'
    - id: inData
      type: System.Byte[]
      description: "XML でエンコードされたアクセス権を設定します。"
    - id: outFormat
      type: System.String
      description: 'エンコード形式のいずれかを表す文字列: ASCII、Unicode、または Binary です。 使用可能な値は、&quot;XMLASCII&quot;または&quot;XML&quot;、&quot;XMLUNICODE&quot;、および&quot;BINARY&quot;です。'
    return:
      type: System.Byte[]
      description: "指定した出力形式で設定された、暗号化された権限です。"
  overload: System.Security.PermissionSet.ConvertPermissionSet*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "すべての場合。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Copy
  id: Copy
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "コピーを作成、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "コピー、<xref:System.Security.PermissionSet>リソースに対して、元のオブジェクトと同じアクセス権を表します</xref:System.Security.PermissionSet>。 コピーに加えられた変更は、元の権限セットには影響しません。"
  example:
  - "The following code example shows the use of the Copy method to create a copy of a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#20](~/add/codesnippet/csharp/m-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#20](~/add/codesnippet/visualbasic/m-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#20](~/add/codesnippet/cpp/m-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual System.Security.PermissionSet Copy ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: "コピー、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  overload: System.Security.PermissionSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セットのアクセス許可オブジェクト<xref:System.Array>.</xref:System.Array>で指定された場所にコピーします。"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "コピー先ターゲット配列。"
    - id: index
      type: System.Int32
      description: "(0 ベース) のコピーを開始する配列内の開始位置。"
  overload: System.Security.PermissionSet.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> array </code>パラメーターが&1; つ以上のディメンションです。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> index </code>パラメーターが範囲外、 <code> array </code>パラメーター。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Count
  id: Count
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "権限セットに含まれるアクセス許可オブジェクトの数を取得します。"
  remarks: "`None`または`Unrestricted`状態の&0; が返されます。 実際のアクセス許可オブジェクトのインスタンスが使用されていないためです。"
  example:
  - "The following code example shows the use of the Count property to get the number of permission objects in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#5](~/add/codesnippet/csharp/p-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#5](~/add/codesnippet/visualbasic/p-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#5](~/add/codesnippet/cpp/p-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "含まれるアクセス許可オブジェクトの数、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  overload: System.Security.PermissionSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Demand
  id: Demand
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "強制的な<xref:System.Security.SecurityException>実行時に現在のインスタンスによって指定されたアクセス許可が呼び出し履歴内の上位にあるすべての呼び出し元に与えられていない場合</xref:System.Security.SecurityException>。"
  remarks: "要求を使用して、<xref:System.Security.PermissionSet>を&1; つの操作のセットのすべての呼び出し元のすべての権限があることを確認します</xref:System.Security.PermissionSet>。       このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始され、スタックの上位に進みます。 通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下にあるメソッドを呼び出すようにダウン、成長として表されます。 しかない場合、要求が成功した<xref:System.Security.SecurityException>がスローされます</xref:System.Security.SecurityException>。       場合、<xref:System.Security.PermissionSet>から継承しないそのアクセス許可を含む<xref:System.Security.CodeAccessPermission>、`Demand`これらのアクセス許可のメソッドとも呼びます</xref:System.Security.CodeAccessPermission></xref:System.Security.PermissionSet>。"
  example:
  - "The following code example shows the use of the Demand method to demand all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#4](~/add/codesnippet/csharp/m-system.security.permis_17_1.cs)]\n [!code-vb[System.Security.PermissionSet#4](~/add/codesnippet/visualbasic/m-system.security.permis_17_1.vb)]\n [!code-cpp[System.Security.PermissionSet#4](~/add/codesnippet/cpp/m-system.security.permis_17_1.cpp)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.PermissionSet.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "呼び出しチェーン内の呼び出し元には、要求されたアクセス許可がありません。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Deny
  id: Deny
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "<xref:System.Security.PermissionSet.Demand*>現在に含まれる型の権限との交差部分のあるアクセス許可の呼び出し元のコードをパススルーする<xref href=&quot;System.Security.PermissionSet&quot;></xref>が失敗します</xref:System.Security.PermissionSet.Demand*>。"
  remarks: "このメソッドは、コール スタックの上位の呼び出し元がそれらの呼び出し元にはそれにアクセスする権限が付与されている場合でもこのメソッドを呼び出すコードを保護されたリソースにアクセスすることを防ぎます。 通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下にあるメソッドを呼び出すようにダウン、成長として表されます。       Deny は、プログラマの責任の制限または拒否を拒否されたアクセス許可によって保護されているリソースにアクセスするために使用されているから呼び出されるメソッドを防ぐのに役立つので、偶発的なセキュリティの脆弱性を防ぐためです。 メソッドでアクセス許可、拒否を呼び出す場合と場合、 <xref:System.Security.PermissionSet.Demand%2A>Deny になったときにそのアクセス許可は、呼び出し履歴内の下位にある呼び出し元によって呼び出されるのセキュリティ チェックが失敗した</xref:System.Security.PermissionSet.Demand%2A>。       拒否するため、そのアクセス許可の確認要求が正常に完了できませんが許可されていないアクセス許可は無視されます。"
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.PermissionSet.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "前の呼び出しを拒否には既に現在のスタック フレームのアクセス許可を制限しています。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定するかどうか、指定した<xref href=&quot;System.Security.PermissionSet&quot;></xref>または<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>オブジェクトが現在<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "等しいかどうかは、アクセス許可で指定したセットに含まれているアクセス許可によって決まります`obj`です。 `obj`いずれかになります、<xref:System.Security.PermissionSet>オブジェクトまたは<xref:System.Security.NamedPermissionSet>オブジェクト</xref:System.Security.NamedPermissionSet></xref:System.Security.PermissionSet>。 場合`obj`は、 <xref:System.Security.NamedPermissionSet>、名前と説明は無視されます</xref:System.Security.NamedPermissionSet>。       詳細については、 <xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>.</xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>を参照してください。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "現在と比較するオブジェクト<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定したオブジェクトが現在に等しい場合<xref href=&quot;System.Security.PermissionSet&quot;></xref>オブジェクト。 それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.PermissionSet.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "XML エンコードから指定された状態で、セキュリティ オブジェクトを再構築します。"
  remarks: ''
  example:
  - "The following code example shows the use of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_21_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_21_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_21_1.cpp)]"
  syntax:
    content: public virtual void FromXml (System.Security.SecurityElement et);
    parameters:
    - id: et
      type: System.Security.SecurityElement
      description: "XML は、セキュリティ オブジェクトを再構築に使用するエンコーディングします。"
  overload: System.Security.PermissionSet.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>et</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> et </code>パラメーターが有効なアクセス許可要素ではありません。       - または -、 <code> et </code>パラメーターのバージョン番号はサポートされていません。"
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumerator
  id: GetEnumerator
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セットのアクセス許可の列挙子を返します。"
  remarks: "インデックスとして列挙子を使用して、セット内の個々 のアクセス許可オブジェクトにアクセスします。"
  example:
  - "The following code example shows the use of the GetEnumerator method to list all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#18](~/add/codesnippet/csharp/m-system.security.permis_5_1.cs)]\n [!code-vb[System.Security.PermissionSet#18](~/add/codesnippet/visualbasic/m-system.security.permis_5_1.vb)]\n [!code-cpp[System.Security.PermissionSet#18](~/add/codesnippet/cpp/m-system.security.permis_5_1.cpp)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "セットのアクセス許可の列挙子オブジェクト。"
  overload: System.Security.PermissionSet.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  id: GetEnumeratorImpl
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セットのアクセス許可の列挙子を返します。"
  remarks: "GetEnumeratorImpl メソッドは、実装では、<xref:System.Security.PermissionSet.GetEnumerator%2A>メソッド</xref:System.Security.PermissionSet.GetEnumerator%2A>。"
  syntax:
    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "セットのアクセス許可の列挙子オブジェクト。"
  overload: System.Security.PermissionSet.GetEnumeratorImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetHashCode
  id: GetHashCode
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "ハッシュ コードを取得、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>ハッシュ ハッシュ テーブルなどのアルゴリズムとデータ構造で使用するために適切なオブジェクトです。"
  remarks: "ハッシュ コードは、2 つの比較には使用できませんので、同じアクセス許可セットの&2; つのインスタンスのハッシュ コードが異なる、可能性があります<xref:System.Security.PermissionSet>オブジェクト</xref:System.Security.PermissionSet>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "現在のハッシュ コード<xref href=&quot;System.Security.PermissionSet&quot;></xref>オブジェクト。"
  overload: System.Security.PermissionSet.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  id: GetPermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セット内に存在する場合は、指定した型のアクセス許可オブジェクトを取得します。"
  remarks: "このメソッドを返します`null`の`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> `Unrestricted` <xref:System.Security.PermissionSet>実質的にすべてのアクセス許可を含む、実際のインスタンスを返す必要はありません</xref:System.Security.PermissionSet>。"
  syntax:
    content: public System.Security.IPermission GetPermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "必要なアクセス許可オブジェクトの型。"
    return:
      type: System.Security.IPermission
      description: "指定された型のアクセス許可オブジェクトのコピー、 <code> permClass </code>パラメーターに含まれている、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>が存在しない場合。"
  overload: System.Security.PermissionSet.GetPermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  id: GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セット内に存在する場合は、指定した型のアクセス許可オブジェクトを取得します。"
  remarks: "GetPermissionImpl メソッドは、実装では、<xref:System.Security.PermissionSet.GetPermission%2A>メソッド</xref:System.Security.PermissionSet.GetPermission%2A>。       このメソッドを返します`null`の`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> `Unrestricted` <xref:System.Security.PermissionSet>実質的にすべてのアクセス許可を含む、実際のインスタンスを返す必要はありません</xref:System.Security.PermissionSet>。"
  syntax:
    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "アクセス許可オブジェクトの型。"
    return:
      type: System.Security.IPermission
      description: "指定された型のアクセス許可オブジェクトのコピー、 <code> permClass </code>パラメーターに含まれている、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>、または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>が存在しない場合。"
  overload: System.Security.PermissionSet.GetPermissionImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  id: Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "作成してアクセス許可が現在の交差部分で設定されている返します<xref href=&quot;System.Security.PermissionSet&quot;></xref>と、指定した<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "2 つのアクセス許可セットの積集合は、一連の両方に共通する操作を説明するアクセス許可セットです。 具体的には、アクセス許可の両方に適合する要求設定もパスの交差する、最小限のアクセス許可を表します。       両方のセットに存在するためのアクセス許可の種類ごとに、これらのアクセス許可の&2; つのインスタンスと交差する、アクセス許可を使用して`Intersect`メソッドです結果として得られる<xref:System.Security.PermissionSet>。</xref:System.Security.PermissionSet>最終的なアクセス許可が含まれている。 2 つのセットの&1; つのみに存在するアクセス許可の種類は、結果セットから除外されます。"
  example:
  - "The following code example shows the use of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#12](~/add/codesnippet/csharp/m-system.security.permis_10_1.cs)]\n [!code-vb[System.Security.PermissionSet#12](~/add/codesnippet/visualbasic/m-system.security.permis_10_1.vb)]\n [!code-cpp[System.Security.PermissionSet#12](~/add/codesnippet/cpp/m-system.security.permis_10_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "アクセス許可セットの現在の交差する<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
    return:
      type: System.Security.PermissionSet
      description: "現在の積集合を表す新しいアクセス許可セット<xref href=&quot;System.Security.PermissionSet&quot;></xref>と指定したオブジェクト。 このオブジェクトは<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>積集合が空の場合。"
  overload: System.Security.PermissionSet.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsEmpty
  id: IsEmpty
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "示す値を取得するかどうか、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>が空です。"
  remarks: "A<xref:System.Security.PermissionSet>を空にしてこれらのアクセス許可が完全に制限される状態にある場合、まだアクセス許可のインスタンスを含めることができます</xref:System.Security.PermissionSet>。 アクセス許可が完全に制限された状態では場合、`IsSubsetOf`メソッドを返します`true`とき`null`をパラメーターとして渡されるです。"
  syntax:
    content: public bool IsEmpty ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>が空であるそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.PermissionSet.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsReadOnly
  id: IsReadOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "コレクションは読み取り専用であるかどうかを示す値を取得します。"
  remarks: "A<xref:System.Security.PermissionSet>ため、このプロパティは常に、読み取り専用であることはできません`false`</xref:System.Security.PermissionSet>。"
  example:
  - "The following code example shows the value returned by the IsReadOnly property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#7](~/add/codesnippet/csharp/p-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#7](~/add/codesnippet/visualbasic/p-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#7](~/add/codesnippet/cpp/p-system.security.permis_22_1.cpp)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  id: IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "決定するかどうか、現在<xref href=&quot;System.Security.PermissionSet&quot;></xref>の指定されたサブセットです<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "A<xref:System.Security.PermissionSet>ターゲットのサブセットである<xref:System.Security.PermissionSet>のかどうかは成功するすべての要求、<xref:System.Security.PermissionSet>ターゲットに対しても成功します</xref:System.Security.PermissionSet></xref:System.Security.PermissionSet></xref:System.Security.PermissionSet>。 つまり、ターゲット サブセットに含まれているアクセス許可を含む少なくともです。"
  example:
  - "The following code example shows the use of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#11](~/add/codesnippet/csharp/m-system.security.permis_12_1.cs)]\n [!code-vb[System.Security.PermissionSet#11](~/add/codesnippet/visualbasic/m-system.security.permis_12_1.vb)]\n [!code-cpp[System.Security.PermissionSet#11](~/add/codesnippet/cpp/m-system.security.permis_12_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.PermissionSet target);
    parameters:
    - id: target
      type: System.Security.PermissionSet
      description: "権限セットをサブセットの関係をテストします。 これはどちらかにする必要があります、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>または<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>です。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、現在<xref href=&quot;System.Security.PermissionSet&quot;></xref>のサブセットである、 <code> target </code>パラメーター、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.PermissionSet.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSynchronized
  id: IsSynchronized
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セーフのコレクションが確実にスレッドであるかどうかを示す値を取得します。"
  remarks: "<xref:System.Security.PermissionSet>自動的に処理しないスレッド セーフでは、このプロパティは常に`false`です。</xref:System.Security.PermissionSet>       このメソッドは<xref:System.Collections.ICollection>。</xref:System.Collections.ICollection>をサポートするために必要"
  example:
  - "The following code example shows the value returned by the IsSynchronized property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#6](~/add/codesnippet/csharp/p-system.security.permis_30_1.cs)]\n [!code-vb[System.Security.PermissionSet#6](~/add/codesnippet/visualbasic/p-system.security.permis_30_1.vb)]\n [!code-cpp[System.Security.PermissionSet#6](~/add/codesnippet/cpp/p-system.security.permis_30_1.cpp)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指定するかどうか、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>は<xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;></xref>です。"
  remarks: "`Unrestricted` <xref:System.Security.PermissionSet>効果的に実装するすべてのアクセス許可を含む、<xref:System.Security.Permissions.IUnrestrictedPermission>インターフェイス</xref:System.Security.Permissions.IUnrestrictedPermission></xref:System.Security.PermissionSet>。"
  example:
  - "The following code example shows the use of the IsUnrestricted method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#19](~/add/codesnippet/csharp/m-system.security.permis_1_1.cs)]\n [!code-vb[System.Security.PermissionSet#19](~/add/codesnippet/visualbasic/m-system.security.permis_1_1.vb)]\n [!code-cpp[System.Security.PermissionSet#19](~/add/codesnippet/cpp/m-system.security.permis_1_1.cpp)]"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <xref href=&quot;System.Security.PermissionSet&quot;></xref> is <xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.PermitOnly
  id: PermitOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "<xref:System.Security.PermissionSet.Demand*>任意の呼び出し元のコードをパススルーする<xref href=&quot;System.Security.PermissionSet&quot;></xref>が一部ではなく、現在の<xref href=&quot;System.Security.PermissionSet&quot;></xref>が失敗します</xref:System.Security.PermissionSet.Demand*>。"
  remarks: "PermitOnly と似ています<xref:System.Security.PermissionSet.Deny%2A>、それ以外の場合操作が成功すると失敗するスタック ウォークが発生する両方でその</xref:System.Security.PermissionSet.Deny%2A>。 その違いは<xref:System.Security.PermissionSet.Deny%2A>を指定するスタックを原因となるアクセス許可が失敗するため、説明は PermitOnly は失敗するスタック ウォークが発生しないのみのアクセス許可を指定します</xref:System.Security.PermissionSet.Deny%2A>。 このメソッドを呼び出して、指定されたリソースのみにアクセスするコードを使用できることを確認してください。       そのアクセス許可の確認要求が成功することはできませんので許可されていなかった権限 PermitOnly は無視されます。 ただし、コードのコール スタックを後で場合呼び出し<xref:System.Security.PermissionSet.Demand%2A>そのアクセス許可、<xref:System.Security.SecurityException>スタック ウォークが PermitOnly を呼び出すしようとしたコードに達した場合にスローされます</xref:System.Security.SecurityException></xref:System.Security.PermissionSet.Demand%2A>。 これは、そのアクセス許可に対して PermitOnly が呼び出されていなくても、PermitOnly を呼び出したコードに、アクセス許可が与えられていないためです。 通常、呼び出し履歴はコール スタックに呼び出し履歴の上位にあるメソッドが下にあるメソッドを呼び出すようにダウン、成長として表されます。"
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.PermissionSet.PermitOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  id: RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セットから特定の種類のアクセス許可を削除します。"
  remarks: "> [!IMPORTANT]> 無制限のアクセス許可セットからのアクセス許可を削除できません。 アクセス許可の設定は無制限のアクセス許可を削除しようとすると、例外はスローされません。       次の c# コードが削除しようとした場合、<xref:System.Security.Permissions.FileIOPermission>から、`FullTrust`アクセス許可設定しますが、アクセス許可は削除されません</xref:System.Security.Permissions.FileIOPermission>。      ```   PolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();   PermissionSet myPermSet = myPol.GetNamedPermissionSet(&quot;FullTrust&quot;);   myPermSet.RemovePermission(typeof(FileIOPermission));   ```"
  example:
  - "The following code example shows the use of the RemovePermission method to remove a <xref:System.Security.Permissions.FileIOPermission> from a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#15](~/add/codesnippet/csharp/m-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#15](~/add/codesnippet/visualbasic/m-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#15](~/add/codesnippet/cpp/m-system.security.permis_22_1.cpp)]"
  syntax:
    content: public System.Security.IPermission RemovePermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "削除するアクセス許可の種類。"
    return:
      type: System.Security.IPermission
      description: "アクセス許可は、セットから削除します。"
  overload: System.Security.PermissionSet.RemovePermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メソッドを呼び出した、 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  id: RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セットから特定の種類のアクセス許可を削除します。"
  remarks: "RemovePermissionImpl メソッドは、実装では、<xref:System.Security.PermissionSet.RemovePermission%2A>メソッド</xref:System.Security.PermissionSet.RemovePermission%2A>。      > [!IMPORTANT] > 無制限のアクセス許可セットからアクセス許可を削除することはできません。 アクセス許可の設定は無制限のアクセス許可を削除しようとすると、例外はスローされません。"
  syntax:
    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "削除するアクセス許可の種類。"
    return:
      type: System.Security.IPermission
      description: "アクセス許可は、セットから削除します。"
  overload: System.Security.PermissionSet.RemovePermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メソッドを呼び出した、 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.PermissionSet.RevertAssert
  id: RevertAssert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前のど<xref:System.Security.CodeAccessPermission.Assert*>、現在のフレームの削除して、有効で使用できなくします</xref:System.Security.CodeAccessPermission.Assert*>。"
  remarks: "ある場合ありません<xref:System.Security.CodeAccessPermission.Assert%2A>現在のフレーム、<xref:System.ExecutionEngineException>がスローされます</xref:System.ExecutionEngineException></xref:System.Security.CodeAccessPermission.Assert%2A>。"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.PermissionSet.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ない<xref:System.Security.CodeAccessPermission.Assert*>現在のフレーム</xref:System.Security.CodeAccessPermission.Assert*>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  id: SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "アクセス許可を設定、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>、同じ型の既存のアクセス許可を置換します。"
  remarks: "このメソッドから同じ型の既存のアクセス許可オブジェクトを削除、<xref:System.Security.PermissionSet>で置き換えて、`perm`パラメーター</xref:System.Security.PermissionSet> 。 アクセス許可を実装する場合<xref:System.Security.Permissions.IUnrestrictedPermission>に設定されている、<xref:System.Security.PermissionSet>つまり<xref:System.Security.Permissions.PermissionState>、結果として得られる<xref:System.Security.PermissionSet>が不要になった`Unrestricted`</xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState></xref:System.Security.PermissionSet></xref:System.Security.Permissions.IUnrestrictedPermission>。"
  example:
  - "The following code example shows the use of the SetPermission method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#16](~/add/codesnippet/csharp/m-system.security.permis_14_1.cs)]\n [!code-vb[System.Security.PermissionSet#16](~/add/codesnippet/visualbasic/m-system.security.permis_14_1.vb)]\n [!code-cpp[System.Security.PermissionSet#16](~/add/codesnippet/cpp/m-system.security.permis_14_1.cpp)]"
  syntax:
    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "設定する権限です。"
    return:
      type: System.Security.IPermission
      description: "セットのアクセス許可。"
  overload: System.Security.PermissionSet.SetPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メソッドを呼び出した、 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  id: SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "アクセス許可を設定、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref>、同じ型の既存のアクセス許可を置換します。"
  remarks: "SetPermissionImpl メソッドは、実装では、<xref:System.Security.PermissionSet.SetPermission%2A>メソッド</xref:System.Security.PermissionSet.SetPermission%2A>。       このメソッドから同じ型の既存のアクセス許可オブジェクトを削除、<xref:System.Security.PermissionSet>で置き換えて、`perm`パラメーター</xref:System.Security.PermissionSet> 。 アクセス許可を実装する場合<xref:System.Security.Permissions.IUnrestrictedPermission>に設定されている、<xref:System.Security.PermissionSet>つまり<xref:System.Security.Permissions.PermissionState>、結果として得られる<xref:System.Security.PermissionSet>が不要になった`Unrestricted`</xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState></xref:System.Security.PermissionSet></xref:System.Security.Permissions.IUnrestrictedPermission>。"
  syntax:
    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "設定する権限です。"
    return:
      type: System.Security.IPermission
      description: "セットのアクセス許可。"
  overload: System.Security.PermissionSet.SetPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "メソッドを呼び出した、 <xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;></xref>です。"
  platform:
  - net462
- uid: System.Security.PermissionSet.SyncRoot
  id: SyncRoot
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "現在のコレクションのルート オブジェクトを取得します。"
  remarks: "このメソッドは<xref:System.Collections.ICollection>。</xref:System.Collections.ICollection>をサポートするために必要"
  example:
  - "The following code example shows the use of SyncRoot property to get the root object of the current collection. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#8](~/add/codesnippet/csharp/p-system.security.permis_29_1.cs)]\n [!code-vb[System.Security.PermissionSet#8](~/add/codesnippet/visualbasic/p-system.security.permis_29_1.vb)]\n [!code-cpp[System.Security.PermissionSet#8](~/add/codesnippet/cpp/p-system.security.permis_29_1.cpp)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "現在のコレクションのルート オブジェクト。"
  overload: System.Security.PermissionSet.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "オブジェクト グラフ全体が逆シリアル化されたときに実行されます。"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "コールバックを開始したオブジェクト。 このパラメーターの機能は現在実装されていません。"
  overload: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToString
  id: ToString
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "文字列表現を返します、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "文字列表記が<xref:System.Security.PermissionSet>。</xref:System.Security.PermissionSet>の状態を表示するデバッグに役立ちます"
  example:
  - "The following code example shows the use of the ToString method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#10](~/add/codesnippet/csharp/m-system.security.permis_16_1.cs)]\n [!code-vb[System.Security.PermissionSet#10](~/add/codesnippet/visualbasic/m-system.security.permis_16_1.vb)]\n [!code-cpp[System.Security.PermissionSet#10](~/add/codesnippet/cpp/m-system.security.permis_16_1.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "形式、 <xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  overload: System.Security.PermissionSet.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToXml
  id: ToXml
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "セキュリティ オブジェクトと現在の状態の XML エンコードを作成します。"
  remarks: ''
  example:
  - "The following code example shows the use of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_2_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_2_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_2_1.cpp)]"
  syntax:
    content: public virtual System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "状態情報を含む、セキュリティ オブジェクトの XML エンコード。"
  overload: System.Security.PermissionSet.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  id: Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "作成、 <xref href=&quot;System.Security.PermissionSet&quot;> </xref> 、現在の和集合である<xref href=&quot;System.Security.PermissionSet&quot;></xref>と、指定した<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  remarks: "共用体への呼び出しの結果は<xref:System.Security.PermissionSet>、現在<xref:System.Security.PermissionSet>、指定した<xref:System.Security.PermissionSet>。</xref:System.Security.PermissionSet>によって表されるすべての操作だけでなく</xref:System.Security.PermissionSet>によって表されるすべての操作を表す</xref:System.Security.PermissionSet> 場合設定するか、 `Unrestricted`、共用体が`Unrestricted`もします。"
  example:
  - "The following code example shows the use of the Union method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#13](~/add/codesnippet/csharp/m-system.security.permis_26_1.cs)]\n [!code-vb[System.Security.PermissionSet#13](~/add/codesnippet/visualbasic/m-system.security.permis_26_1.vb)]\n [!code-cpp[System.Security.PermissionSet#13](~/add/codesnippet/cpp/m-system.security.permis_26_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "現在の和集合を形成するアクセス許可セット<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
    return:
      type: System.Security.PermissionSet
      description: "現在の和集合を表す新しいアクセス許可セット<xref href=&quot;System.Security.PermissionSet&quot;></xref>と、指定した<xref href=&quot;System.Security.PermissionSet&quot;></xref>です。"
  overload: System.Security.PermissionSet.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.Assert
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PermissionSet.Copy
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.PermissionSet.Count
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
- uid: System.Security.PermissionSet.Demand
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
- uid: System.Security.PermissionSet.Deny
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
- uid: System.Security.PermissionSet.Equals(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.PermissionSet.GetEnumerator
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
- uid: System.Security.PermissionSet.GetHashCode
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
- uid: System.Security.PermissionSet.IsEmpty
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
- uid: System.Security.PermissionSet.IsReadOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
- uid: System.Security.PermissionSet.IsSynchronized
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
- uid: System.Security.PermissionSet.PermitOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
- uid: System.Security.PermissionSet.RevertAssert
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.SyncRoot
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Security.PermissionSet.ToString
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
- uid: System.Security.PermissionSet.ToXml
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
- uid: System.Security.PermissionSet.#ctor*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet.PermissionSet
- uid: System.Security.PermissionSet.AddPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission
  nameWithType: PermissionSet.AddPermission
- uid: System.Security.PermissionSet.AddPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl
  nameWithType: PermissionSet.AddPermissionImpl
- uid: System.Security.PermissionSet.Assert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert
  nameWithType: PermissionSet.Assert
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions
- uid: System.Security.PermissionSet.ConvertPermissionSet*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet
  nameWithType: PermissionSet.ConvertPermissionSet
- uid: System.Security.PermissionSet.Copy*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy
  nameWithType: PermissionSet.Copy
- uid: System.Security.PermissionSet.CopyTo*
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo
  nameWithType: PermissionSet.CopyTo
- uid: System.Security.PermissionSet.Count*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
- uid: System.Security.PermissionSet.Demand*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand
  nameWithType: PermissionSet.Demand
- uid: System.Security.PermissionSet.Deny*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny
  nameWithType: PermissionSet.Deny
- uid: System.Security.PermissionSet.Equals*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals
  nameWithType: PermissionSet.Equals
- uid: System.Security.PermissionSet.FromXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml
  nameWithType: PermissionSet.FromXml
- uid: System.Security.PermissionSet.GetEnumerator*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator
  nameWithType: PermissionSet.GetEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl
  nameWithType: PermissionSet.GetEnumeratorImpl
- uid: System.Security.PermissionSet.GetHashCode*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode
  nameWithType: PermissionSet.GetHashCode
- uid: System.Security.PermissionSet.GetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission
  nameWithType: PermissionSet.GetPermission
- uid: System.Security.PermissionSet.GetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl
  nameWithType: PermissionSet.GetPermissionImpl
- uid: System.Security.PermissionSet.Intersect*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect
  nameWithType: PermissionSet.Intersect
- uid: System.Security.PermissionSet.IsEmpty*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty
  nameWithType: PermissionSet.IsEmpty
- uid: System.Security.PermissionSet.IsReadOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf
  nameWithType: PermissionSet.IsSubsetOf
- uid: System.Security.PermissionSet.IsSynchronized*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted
  nameWithType: PermissionSet.IsUnrestricted
- uid: System.Security.PermissionSet.PermitOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly
  nameWithType: PermissionSet.PermitOnly
- uid: System.Security.PermissionSet.RemovePermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission
  nameWithType: PermissionSet.RemovePermission
- uid: System.Security.PermissionSet.RemovePermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl
  nameWithType: PermissionSet.RemovePermissionImpl
- uid: System.Security.PermissionSet.RevertAssert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert
  nameWithType: PermissionSet.RevertAssert
- uid: System.Security.PermissionSet.SetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission
  nameWithType: PermissionSet.SetPermission
- uid: System.Security.PermissionSet.SetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl
  nameWithType: PermissionSet.SetPermissionImpl
- uid: System.Security.PermissionSet.SyncRoot*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.PermissionSet.ToString*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString
  nameWithType: PermissionSet.ToString
- uid: System.Security.PermissionSet.ToXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml
  nameWithType: PermissionSet.ToXml
- uid: System.Security.PermissionSet.Union*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union
  nameWithType: PermissionSet.Union
