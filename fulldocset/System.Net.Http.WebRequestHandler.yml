### YamlMime:ManagedReference
items:
- uid: System.Net.Http.WebRequestHandler
  id: WebRequestHandler
  children:
  - System.Net.Http.WebRequestHandler.#ctor
  - System.Net.Http.WebRequestHandler.AllowPipelining
  - System.Net.Http.WebRequestHandler.AuthenticationLevel
  - System.Net.Http.WebRequestHandler.CachePolicy
  - System.Net.Http.WebRequestHandler.ClientCertificates
  - System.Net.Http.WebRequestHandler.ContinueTimeout
  - System.Net.Http.WebRequestHandler.ImpersonationLevel
  - System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  - System.Net.Http.WebRequestHandler.ReadWriteTimeout
  - System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  - System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  langs:
  - csharp
  name: WebRequestHandler
  nameWithType: WebRequestHandler
  fullName: System.Net.Http.WebRequestHandler
  type: Class
  summary: "デスクトップに固有の機能は使用できない Windows ストア アプリまたはその他の環境を提供します。"
  remarks: "このクラスでは、トランスポート ハンドラーを使用して、<xref:System.Net.HttpWebRequest>インスタンスのサーバーに HTTP 要求を送信します</xref:System.Net.HttpWebRequest>。"
  syntax:
    content: 'public class WebRequestHandler : System.Net.Http.HttpClientHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.HttpClientHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpClientHandler.AllowAutoRedirect
  - System.Net.Http.HttpClientHandler.AutomaticDecompression
  - System.Net.Http.HttpClientHandler.ClientCertificateOptions
  - System.Net.Http.HttpClientHandler.CookieContainer
  - System.Net.Http.HttpClientHandler.Credentials
  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  - System.Net.Http.HttpClientHandler.PreAuthenticate
  - System.Net.Http.HttpClientHandler.Proxy
  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  - System.Net.Http.HttpClientHandler.SupportsProxy
  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  - System.Net.Http.HttpClientHandler.UseCookies
  - System.Net.Http.HttpClientHandler.UseDefaultCredentials
  - System.Net.Http.HttpClientHandler.UseProxy
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
  type: Constructor
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Net.Http.WebRequestHandler&quot;> </xref>クラスです。"
  syntax:
    content: public WebRequestHandler ();
    parameters: []
  overload: System.Net.Http.WebRequestHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  id: AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得またはインターネット リソースへの要求をパイプライン処理するかどうかを示す値を設定します。"
  remarks: "アプリケーションでは、AllowPipelining プロパティを使用して、パイプライン接続に対する設定を示します。 AllowPipelining が場合`true`アプリケーションがパイプライン接続をサポートしているサーバーにします。"
  syntax:
    content: public bool AllowPipelining { get; set; }
    return:
      type: System.Boolean
      description: "返します<xref:System.Boolean>。</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、要求パイプラインを設定する必要があります。それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Http.WebRequestHandler.AllowPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  id: AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または認証し、この要求に対して使用する偽装のレベルを示す値を設定します。"
  remarks: "クライアントとサーバーの両方は、相互認証では、自身の id を確立するために資格情報を提示します。 <xref:System.Net.Security.AuthenticationLevel>と<xref:System.Net.Security.AuthenticationLevel>は Kerberos 認証に関連する値</xref:System.Net.Security.AuthenticationLevel></xref:System.Net.Security.AuthenticationLevel>。 Kerberos 認証は、直接サポートすることができます。 または Negotiate セキュリティ プロトコルを使用して、実際のセキュリティ プロトコルを選択する場合に使用できます。 認証プロトコルの詳細については、次を参照してください。[インターネット認証](~/add/includes/ajax-current-ext-md.md)です。"
  syntax:
    content: public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }
    return:
      type: System.Net.Security.AuthenticationLevel
      description: "返します<xref:System.Net.Security.AuthenticationLevel>。</xref:System.Net.Security.AuthenticationLevel>       ビットごとの組み合わせ、<xref:System.Net.Security.AuthenticationLevel>値</xref:System.Net.Security.AuthenticationLevel>。  既定値は<xref:System.Net.Security.AuthenticationLevel>。</xref:System.Net.Security.AuthenticationLevel>"
  overload: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  id: CachePolicy
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または、この要求のキャッシュ ポリシーを設定します。"
  remarks: "現在のキャッシュ ポリシーが存在している、キャッシュ内で要求されたリソースの応答をキャッシュから取得できるかどうかを決定します。 通常キャッシュされた応答を使用すると、アプリケーションのパフォーマンスが向上がリスクがキャッシュ内の応答が、サーバー上の応答と一致しません。       Machine.config 構成ファイルまたは設定して既定のキャッシュ ポリシーを指定することができます、<xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>プロパティ</xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A>。       リソースの応答ストリームが取得され、ストリームの末尾に読み込まれる場合、リソースのコピーはキャッシュに追加だけです。 同じリソースに対して別の要求は、この要求のキャッシュ ポリシー レベルに応じて、キャッシュされたコピーを使用できます。"
  syntax:
    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }
    return:
      type: System.Net.Cache.RequestCachePolicy
      description: "Returns <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;></xref>.       A <xref href=&quot;System.Net.Cache.RequestCachePolicy&quot;> </xref>キャッシュ ポリシーを定義するオブジェクト。 既定値は<xref:System.Net.WebRequest.DefaultCachePolicy*>。</xref:System.Net.WebRequest.DefaultCachePolicy*>"
  overload: System.Net.Http.WebRequestHandler.CachePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  id: ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または、この要求に関連付けられているセキュリティ証明書のコレクションを設定します。"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "Returns <xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;></xref>.       この要求に関連付けられているセキュリティ証明書のコレクションです。"
  overload: System.Net.Http.WebRequestHandler.ClientCertificates*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  id: ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または設定、アプリケーションが 100 を待機時間をミリ秒単位でのデータをアップロードする前に、サーバーから続行します。"
  syntax:
    content: public TimeSpan ContinueTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "返します<xref:System.TimeSpan>。</xref:System.TimeSpan>       時間をミリ秒単位でのアプリケーションが待機する 100-データをアップロードする前に、サーバーから継続します。 既定値は、これを 350 ミリ秒です。"
  overload: System.Net.Http.WebRequestHandler.ContinueTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または現在の要求に対する偽装レベルを設定します。"
  remarks: "偽装レベルは、サーバーがクライアントの資格情報を使用する方法を決定します。"
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "返します<xref:System.Security.Principal.TokenImpersonationLevel>。</xref:System.Security.Principal.TokenImpersonationLevel>       要求に対する偽装レベル。 既定値は<xref:System.Security.Principal.TokenImpersonationLevel>。</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  id: MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または応答ヘッダーの許容最大長を設定します。"
  remarks: "応答ヘッダーの長さには、応答のステータス行と HTTP プロトコルの一部として受信されるすべての余分な制御文字が含まれています。 値の-1 の場合は、応答ヘッダーに制限は適用されません。値 0 は、すべての要求が失敗することを意味します。       値に既定値は MaxResponseHeadersLength プロパティが明示的に設定されていない場合、<xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>プロパティ</xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A>。       受信した応答ヘッダーの長さを超える MaxResponseHeadersLength プロパティの値と、応答にアクセスするときに、例外がスローされます。"
  syntax:
    content: public int MaxResponseHeadersLength { get; set; }
    return:
      type: System.Int32
      description: "返します<xref:System.Int32>。</xref:System.Int32>       応答ヘッダーのサイズ (1024 バイト) での長さ。"
  overload: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  id: ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得またはへの要求を記述またはサーバーからの応答を読み取るときに、タイムアウトをミリ秒単位で設定します。"
  syntax:
    content: public int ReadWriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "返します<xref:System.Int32>。</xref:System.Int32>       書き込みまたは読み取りがタイムアウトするまでのミリ秒数。 既定値は、300,000 ミリ秒 (5 分) です。"
  overload: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または設定をサーバー証明書を検証するコールバック メソッド。"
  remarks: "場合は、ServerCertificateValidationCallback `null`、標準のよく知られている証明書機関を使用してサーバー証明書が検証されます。"
  syntax:
    content: public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "Returns <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>.       サーバー証明書を検証するコールバック メソッド。"
  overload: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  id: UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  langs:
  - csharp
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  type: Property
  assemblies:
  - System.Net.Http.WebRequest
  namespace: System.Net.Http
  summary: "取得または高速 NTLM 認証された接続共有を許可するかどうかを示す値を設定します。"
  remarks: "このプロパティの既定値は`false`、それが原因で、現在の接続要求が完了した後、終了します。 アプリケーションを通過する認証シーケンスは新しい要求を発行するたびにします。このプロパティ設定されている場合`true`認証が行われた後、応答を取得するための接続が開いたままです。 このプロパティに設定があることを要求他の例では、`true`再認証なしで接続を使用することがあります。 つまり、ユーザー A の接続が認証されたユーザー B 可能性がありますを再利用 A の接続です。ユーザー B の要求がユーザー A の資格情報に基づく     > [!CAUTION] > ためをアプリケーションを認証なしの接続を使用することが、必要がないこと管理の脆弱性は、システムでこのプロパティに設定する場合、必ず`true`です。 アプリケーションは、複数のユーザーの要求を送信する場合 (複数のユーザー アカウントの権限を借用) し、依存するリソースを保護する認証にはこのプロパティを設定`true`以下に示すように接続グループを使用する場合を除き、します。       場合にこのメカニズムを有効化の検討することも、パフォーマンスの問題が発生し、アプリケーションが統合 Windows 認証を使用した Web サーバーで実行されています。       この設定を有効にするには、セキュリティ上のリスクにシステムが表示されます。 設定した場合、<xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>プロパティを`true`次の予防措置を考慮してください:-有効な接続の悪用を回避できるように、保護された環境でアプリケーションを実行します</xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A>。       バック エンド サーバーを制御する場合、別の方法として可能性がありますを考慮する認証の永続化を無効にすること。 これほど、パフォーマンスが向上ほうが安全です。 詳細については、MSDN ライブラリで AuthPersistence 検索[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)です。"
  syntax:
    content: public bool UnsafeAuthenticatedConnectionSharing { get; set; }
    return:
      type: System.Boolean
      description: "返します<xref:System.Boolean>。</xref:System.Boolean>       <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>開いている; 認証された接続を維持するにはそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Http.HttpClientHandler
  isExternal: false
  name: System.Net.Http.HttpClientHandler
- uid: System.Net.Http.WebRequestHandler.#ctor
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler()
  nameWithType: WebRequestHandler.WebRequestHandler()
  fullName: System.Net.Http.WebRequestHandler.WebRequestHandler()
- uid: System.Net.Http.WebRequestHandler.AllowPipelining
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
  fullName: System.Net.Http.WebRequestHandler.AllowPipelining
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
  fullName: System.Net.Http.WebRequestHandler.AuthenticationLevel
- uid: System.Net.Security.AuthenticationLevel
  parent: System.Net.Security
  isExternal: true
  name: AuthenticationLevel
  nameWithType: AuthenticationLevel
  fullName: System.Net.Security.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
  fullName: System.Net.Http.WebRequestHandler.CachePolicy
- uid: System.Net.Cache.RequestCachePolicy
  parent: System.Net.Cache
  isExternal: false
  name: RequestCachePolicy
  nameWithType: RequestCachePolicy
  fullName: System.Net.Cache.RequestCachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
  fullName: System.Net.Http.WebRequestHandler.ClientCertificates
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
  fullName: System.Net.Http.WebRequestHandler.ContinueTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
  fullName: System.Net.Http.WebRequestHandler.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
  fullName: System.Net.Http.WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
  fullName: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
  fullName: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing
- uid: System.Net.Http.WebRequestHandler.#ctor*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: WebRequestHandler
  nameWithType: WebRequestHandler.WebRequestHandler
- uid: System.Net.Http.WebRequestHandler.AllowPipelining*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AllowPipelining
  nameWithType: WebRequestHandler.AllowPipelining
- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: AuthenticationLevel
  nameWithType: WebRequestHandler.AuthenticationLevel
- uid: System.Net.Http.WebRequestHandler.CachePolicy*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: CachePolicy
  nameWithType: WebRequestHandler.CachePolicy
- uid: System.Net.Http.WebRequestHandler.ClientCertificates*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ClientCertificates
  nameWithType: WebRequestHandler.ClientCertificates
- uid: System.Net.Http.WebRequestHandler.ContinueTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ContinueTimeout
  nameWithType: WebRequestHandler.ContinueTimeout
- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WebRequestHandler.ImpersonationLevel
- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: MaxResponseHeadersLength
  nameWithType: WebRequestHandler.MaxResponseHeadersLength
- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ReadWriteTimeout
  nameWithType: WebRequestHandler.ReadWriteTimeout
- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: WebRequestHandler.ServerCertificateValidationCallback
- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*
  parent: System.Net.Http.WebRequestHandler
  isExternal: false
  name: UnsafeAuthenticatedConnectionSharing
  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing
