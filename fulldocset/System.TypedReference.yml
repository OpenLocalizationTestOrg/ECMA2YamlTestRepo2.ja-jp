### YamlMime:ManagedReference
items:
- uid: System.TypedReference
  id: TypedReference
  children:
  - System.TypedReference.Equals(System.Object)
  - System.TypedReference.GetHashCode
  - System.TypedReference.GetTargetType(System.TypedReference)
  - System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  - System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  - System.TypedReference.TargetTypeToken(System.TypedReference)
  - System.TypedReference.ToObject(System.TypedReference)
  langs:
  - csharp
  name: TypedReference
  nameWithType: TypedReference
  fullName: System.TypedReference
  type: Struct
  summary: "場所とその場所に格納される型のランタイム表現の両方、マネージ ポインターを格納するオブジェクトについて説明します。"
  remarks: "型指定された参照は、可変引数およびその他のサポートに使用の種類と値の組み合わせです。 `TypedReference`パラメーターおよびローカル変数を使用できる組み込みの値型です。       配列`TypedReference`オブジェクトを作成することはできません。 たとえば、次の呼び出しが無効: [!code-cs [System.TypedReference#1](~/add/codesnippet/csharp/t-system.typedreference_1.cs)][!code-cpp[System.TypedReference#1](~/add/codesnippet/cpp/t-system.typedreference_1.cpp)][!code-vb[System.TypedReference#1    ](~/add/codesnippet/visualbasic/t-system.typedreference_1.vb)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public struct TypedReference
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.TypedReference.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.TypedReference
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: TypedReference.Equals(Object)
  fullName: System.TypedReference.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "このオブジェクトは、指定したオブジェクトと等しいかどうかを確認します。"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "現在のオブジェクトを比較するオブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>このオブジェクトが指定したオブジェクトと等しい場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.TypedReference.Equals*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "このメソッドは実装されていません。"
  platform:
  - net462
- uid: System.TypedReference.GetHashCode
  id: GetHashCode
  parent: System.TypedReference
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TypedReference.GetHashCode()
  fullName: System.TypedReference.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "このオブジェクトのハッシュ コードを返します。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "このオブジェクトのハッシュ コード。"
  overload: System.TypedReference.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.GetTargetType(System.TypedReference)
  id: GetTargetType(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: GetTargetType(TypedReference)
  nameWithType: TypedReference.GetTargetType(TypedReference)
  fullName: System.TypedReference.GetTargetType(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定したターゲットの型を返します<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>です。"
  syntax:
    content: public static Type GetTargetType (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "対象の型が返される値。"
    return:
      type: System.Type
      description: "指定したターゲットの種類<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>です。"
  overload: System.TypedReference.GetTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  id: MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  parent: System.TypedReference
  langs:
  - csharp
  name: MakeTypedReference(Object,FieldInfo[])
  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])
  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "により、 <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>の指定したオブジェクトとフィールド記述の一覧によって識別されるフィールドです。"
  remarks: "MakeTypedReference メソッドによってターミナル フィールドに型指定された参照を返します場所、`target`パラメーターの最初の要素で記述されるフィールドが含まれる`flds`の最初の要素で記述されるフィールド`flds`の&2; 番目の要素で記述されるフィールドが含まれています`flds`ターミナル フィールドに到達するまでに、します。      > [!NOTE] > 以降で、 [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]、このメソッドは、呼び出し元が許可されている場合は、非パブリック メンバーをアクセスに使用できます<xref:System.Security.Permissions.ReflectionPermission>で、<xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>フラグし、非パブリック メンバーの許可セットが、呼び出し元に制限されている場合は、セット、またはそのサブセットを付与します</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName></xref:System.Security.Permissions.ReflectionPermission>。 (を参照してください[リフレクションに関するセキュリティの考慮事項](~/add/includes/ajax-current-ext-md.md))。  >> この機能を使用するにはでアプリケーションを対象、[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]またはそれ以降。"
  syntax:
    content: public static TypedReference MakeTypedReference (object target, System.Reflection.FieldInfo[] flds);
    parameters:
    - id: target
      type: System.Object
      description: "最初の要素で記述されるフィールドを格納しているオブジェクト`flds`です。"
    - id: flds
      type: System.Reflection.FieldInfo[]
      description: "各要素が続く要素で記述されるフィールドを格納するフィールドを記述するフィールド記述のリスト。 記述される各フィールドは、値型である必要があります。 フィールドの説明がある必要があります<xref uid=&quot;langword_csharp_RuntimeFieldInfo&quot; name=&quot;RuntimeFieldInfo&quot; href=&quot;&quot;></xref>型システムによって提供されたオブジェクト。"
    return:
      type: System.TypedReference
      description: "A <xref href=&quot;System.TypedReference&quot;> </xref>の最後の要素で記述されるフィールドの<code> flds</code>です。"
  overload: System.TypedReference.MakeTypedReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>or <code>flds</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - または - の要素<code>flds</code>は<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> flds </code>配列に要素がありません。       - または - の要素<code> flds </code>されませんが、 <xref uid=&quot;langword_csharp_RuntimeFieldInfo&quot; name=&quot;RuntimeFieldInfo&quot; href=&quot;&quot;> </xref>オブジェクト。       -or-       The <>*> or <>*> property of an element of <code>flds</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "パラメーター <code> target </code>の最初の要素で記述されるフィールドが含まれていない<code> flds </code>、または、要素の<code> flds </code>の続く要素で記述されるフィールドに含まれてないフィールドが記述されて<code> flds</code>です。       - または - の要素で記述されるフィールド<code> flds </code>値型ではありません。"
  platform:
  - net462
- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  id: SetTypedReference(System.TypedReference,System.Object)
  parent: System.TypedReference
  langs:
  - csharp
  name: SetTypedReference(TypedReference,Object)
  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)
  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定した値を変換、 <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>です。 このメソッドがサポートされていません。"
  remarks: "このメソッドは常にスロー <xref:System.NotSupportedException>。</xref:System.NotSupportedException>"
  syntax:
    content: public static void SetTypedReference (TypedReference target, object value);
    parameters:
    - id: target
      type: System.TypedReference
      description: "変換のターゲットです。"
    - id: value
      type: System.Object
      description: "変換する値。"
  overload: System.TypedReference.SetTypedReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "すべての場合。"
  platform:
  - net462
- uid: System.TypedReference.TargetTypeToken(System.TypedReference)
  id: TargetTypeToken(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: TargetTypeToken(TypedReference)
  nameWithType: TypedReference.TargetTypeToken(TypedReference)
  fullName: System.TypedReference.TargetTypeToken(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定された内部メタデータ型ハンドルを返します<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>です。"
  syntax:
    content: public static RuntimeTypeHandle TargetTypeToken (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>型ハンドルが要求されます。"
    return:
      type: System.RuntimeTypeHandle
      description: "指定された内部メタデータ型ハンドル<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>です。"
  overload: System.TypedReference.TargetTypeToken*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.ToObject(System.TypedReference)
  id: ToObject(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: ToObject(TypedReference)
  nameWithType: TypedReference.ToObject(TypedReference)
  fullName: System.TypedReference.ToObject(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定された変換<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>を<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>です。"
  remarks: "ボックス化操作があります。"
  syntax:
    content: public static object ToObject (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>変換します。"
    return:
      type: System.Object
      description: "<xref:System.Object>から変換された、 <xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref></xref:System.Object> 。"
  overload: System.TypedReference.ToObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingMemberException
  isExternal: true
  name: System.MissingMemberException
- uid: System.TypedReference.Equals(System.Object)
  parent: System.TypedReference
  isExternal: false
  name: Equals(Object)
  nameWithType: TypedReference.Equals(Object)
  fullName: System.TypedReference.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TypedReference.GetHashCode
  parent: System.TypedReference
  isExternal: false
  name: GetHashCode()
  nameWithType: TypedReference.GetHashCode()
  fullName: System.TypedReference.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TypedReference.GetTargetType(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: GetTargetType(TypedReference)
  nameWithType: TypedReference.GetTargetType(TypedReference)
  fullName: System.TypedReference.GetTargetType(TypedReference)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.TypedReference
  parent: System
  isExternal: false
  name: TypedReference
  nameWithType: TypedReference
  fullName: System.TypedReference
- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  parent: System.TypedReference
  isExternal: false
  name: MakeTypedReference(Object,FieldInfo[])
  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])
  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  parent: System.TypedReference
  isExternal: false
  name: SetTypedReference(TypedReference,Object)
  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)
  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)
- uid: System.TypedReference.TargetTypeToken(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: TargetTypeToken(TypedReference)
  nameWithType: TypedReference.TargetTypeToken(TypedReference)
  fullName: System.TypedReference.TargetTypeToken(TypedReference)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.TypedReference.ToObject(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: ToObject(TypedReference)
  nameWithType: TypedReference.ToObject(TypedReference)
  fullName: System.TypedReference.ToObject(TypedReference)
- uid: System.TypedReference.Equals*
  parent: System.TypedReference
  isExternal: false
  name: Equals
  nameWithType: TypedReference.Equals
- uid: System.TypedReference.GetHashCode*
  parent: System.TypedReference
  isExternal: false
  name: GetHashCode
  nameWithType: TypedReference.GetHashCode
- uid: System.TypedReference.GetTargetType*
  parent: System.TypedReference
  isExternal: false
  name: GetTargetType
  nameWithType: TypedReference.GetTargetType
- uid: System.TypedReference.MakeTypedReference*
  parent: System.TypedReference
  isExternal: false
  name: MakeTypedReference
  nameWithType: TypedReference.MakeTypedReference
- uid: System.TypedReference.SetTypedReference*
  parent: System.TypedReference
  isExternal: false
  name: SetTypedReference
  nameWithType: TypedReference.SetTypedReference
- uid: System.TypedReference.TargetTypeToken*
  parent: System.TypedReference
  isExternal: false
  name: TargetTypeToken
  nameWithType: TypedReference.TargetTypeToken
- uid: System.TypedReference.ToObject*
  parent: System.TypedReference
  isExternal: false
  name: ToObject
  nameWithType: TypedReference.ToObject
