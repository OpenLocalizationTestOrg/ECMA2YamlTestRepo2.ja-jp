### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SqlDataSource
  id: SqlDataSource
  children:
  - System.Web.UI.WebControls.SqlDataSource.#ctor
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  - System.Web.UI.WebControls.SqlDataSource.CacheDuration
  - System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  - System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  - System.Web.UI.WebControls.SqlDataSource.ConnectionString
  - System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  - System.Web.UI.WebControls.SqlDataSource.Delete
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  - System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  - System.Web.UI.WebControls.SqlDataSource.Deleted
  - System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  - System.Web.UI.WebControls.SqlDataSource.Deleting
  - System.Web.UI.WebControls.SqlDataSource.EnableCaching
  - System.Web.UI.WebControls.SqlDataSource.FilterExpression
  - System.Web.UI.WebControls.SqlDataSource.Filtering
  - System.Web.UI.WebControls.SqlDataSource.FilterParameters
  - System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  - System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  - System.Web.UI.WebControls.SqlDataSource.GetViewNames
  - System.Web.UI.WebControls.SqlDataSource.Insert
  - System.Web.UI.WebControls.SqlDataSource.InsertCommand
  - System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  - System.Web.UI.WebControls.SqlDataSource.Inserted
  - System.Web.UI.WebControls.SqlDataSource.Inserting
  - System.Web.UI.WebControls.SqlDataSource.InsertParameters
  - System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.SqlDataSource.ProviderName
  - System.Web.UI.WebControls.SqlDataSource.SaveViewState
  - System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  - System.Web.UI.WebControls.SqlDataSource.SelectCommand
  - System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  - System.Web.UI.WebControls.SqlDataSource.Selected
  - System.Web.UI.WebControls.SqlDataSource.Selecting
  - System.Web.UI.WebControls.SqlDataSource.SelectParameters
  - System.Web.UI.WebControls.SqlDataSource.SortParameterName
  - System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.SqlDataSource.TrackViewState
  - System.Web.UI.WebControls.SqlDataSource.Update
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  - System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  - System.Web.UI.WebControls.SqlDataSource.Updated
  - System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  - System.Web.UI.WebControls.SqlDataSource.Updating
  langs:
  - csharp
  name: SqlDataSource
  nameWithType: SqlDataSource
  fullName: System.Web.UI.WebControls.SqlDataSource
  type: Class
  summary: "データ バインド コントロールには、SQL データベースを表します。"
  remarks: "このトピックで:-[概要](#introduction)      -   [データ接続](#data_connections)      -   [データ操作の実行](#performing_data_operations)      -   [データ プロバイダー](#data_provider)      -   [キャッシュ](#caching)      -   [追加機能](#additional_features)      -   [データ ソース ビュー](#data_source_view)      -   [宣言構文](#declarative_syntax)<a name=&quot;introduction&quot;> </a> ## データ ソース コントロールの概要、SqlDataSource SQL リレーショナル データベース内のデータをデータ バインド コントロールを表します。       データ バインド コントロールと組み合わせて SqlDataSource コントロールを使用して、リレーショナル データベースからデータを取得して表示、編集、およびほとんどまたはまったくないコードを含む Web ページ上のデータを並べ替えることができます。      <a name=&quot;data_connections&quot;></a>## データ接続をデータベースに接続を設定する必要があります、<xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>プロパティを有効な接続文字列にします</xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>。 SqlDataSource などを使用して、ADO.NET プロバイダーに接続できる SQL リレーショナル データベースをサポートできる、 `SqlClient`、 `OleDb`、 `Odbc`、または`OracleClient`プロバイダー。 接続文字列をセキュリティで保護する方法については、次を参照してください。[操作方法: セキュリティで保護された接続文字列を使用するデータ ソースを制御する際](~/add/includes/ajax-current-ext-md.md)です。       基になるデータベースからデータを取得するには設定、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>SQL クエリを持つプロパティです</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。 SqlDataSource が関連付けられているデータベースは、ストアド プロシージャをサポートする場合は、設定、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>プロパティをストアド プロシージャの名前にします</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。 指定した SQL クエリでは、パラメーター化クエリこともできます。 追加することができます<xref:System.Web.UI.WebControls.Parameter>をパラメーター化クエリに関連付けられているオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>コレクションです</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.Parameter>。 パラメーター化 SQL クエリとその構文の詳細については、次を参照してください。[フィルターのデータ ソース コントロールを持つパラメーターの使用](~/add/includes/ajax-current-ext-md.md)です。       SqlDataSource コントロール データを取得するたびに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドが呼び出されます</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 このメソッドで指定されたメソッドへのプログラムによるアクセスを提供する<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>プロパティ</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドは、SqlDataSource にバインドされたコントロールによって自動的に呼び出されますときにその<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>メソッドが呼び出されます</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A></xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 設定した場合、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A>データ バインド コントロールのプロパティ、コントロールに自動的にデータにバインドされているとおり、データ ソースから</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSourceID%2A>。 設定、`DataSourceID`プロパティは推奨されるメソッドのバインディング、<xref:System.Web.UI.WebControls.ObjectDataSource>コントロールをデータ バインドされたコントロール</xref:System.Web.UI.WebControls.ObjectDataSource>。 また、使用することができます、`DataSource`プロパティ、それをする必要があります明示的に呼び出す、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>データ バインド コントロールのメソッド</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>。 SqlDataSource を使用できるデータ バインド コントロールの例を示します<xref:System.Web.UI.WebControls.DataGrid>、 <xref:System.Web.UI.WebControls.DetailsView>、 <xref:System.Web.UI.WebControls.DataList>、 <xref:System.Web.UI.WebControls.DropDownList></xref:System.Web.UI.WebControls.DropDownList> </xref:System.Web.UI.WebControls.DataList> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.DataGrid> 。 呼び出すことができます、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドを基になるデータベースからデータを取得するためにプログラムによって</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。       宣言とプログラムの ASP.NET シナリオで設定することができます、 <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>SqlDataSource コントロールの ID に、データ バインド コントロールのプロパティ</xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>。 SqlDataSource クラスのインスタンスを割り当てることも、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>データ バインド コントロールのプロパティ</xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>。 データ ソース コントロールにデータ バインド コントロールのバインドの詳細については、次を参照してください。 [ASP.NET データ アクセス オプション](http://msdn.microsoft.com/en-us/a5ff235e-397f-4bbe-9bfe-2720b6e7ab9d)です。      <a name=&quot;performing_data_operations&quot;></a>## を実行するデータの操作によって、基になるの機能に、データベースの製品と SqlDataSource クラスのインスタンスの構成、更新、挿入、および削除などのデータ操作を実行することができます。 これらのデータ操作を実行するには、適切なコマンド テキストと実行する操作に関連するパラメーターを設定します。 たとえば、更新操作では、次のように設定します、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>プロパティを SQL 文字列またはストアド プロシージャの名前に、必要なパラメーターを追加し、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>コレクションです。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> 。 更新プログラムが実行されるときに、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>メソッドが、コードによって明示的にまたは自動的にデータ バインドされたコントロールによって呼び出されます</xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>。 同じ一般的なパターンはの後に<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>操作</xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A></xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>。       SQL クエリとコマンドで使用する、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>、 <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>、 <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>、および<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>プロパティをパラメーター化することができます</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A></xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A></xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A></xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。 つまり、クエリまたはコマンドことができますリテラル値ではなくプレース ホルダーを使用して、プレース ホルダーをアプリケーションまたはユーザー定義変数にバインドします。 セッション変数、Web フォーム ページのクエリ文字列で渡される値、その他のサーバー コントロールと複数のプロパティ値を SQL クエリでパラメーターをバインドできます。 SqlDataSource を含む SQL クエリでパラメーターを使用する方法の詳細については、次を参照してください。[フィルターのデータ ソース コントロールを持つパラメーターの使用](../Topic/Using%20Parameters%20with%20Data%20Source%20Controls%20for%20Filtering.md)と[SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > 既定では、パラメーターの&1; つ`null`を実行すると、`Select`コマンドで返されるデータがないと、例外はスローされません。 この動作を変更するには設定して、<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>プロパティを`false`</xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>。      <a name=&quot;data_provider&quot;></a>## データ プロバイダーによって、SqlDataSource コントロールは、既定値と .NET Framework Data Provider for SQL Server が SqlDataSource いない Microsoft SQL Server 特有です。 SqlDataSource コントロールが管理されている ADO.NET プロバイダーが存在する任意のデータベース製品に接続できます。 使用すると、<xref:System.Data.OleDb?displayProperty=fullName>プロバイダー、SqlDataSource は、OLE DB 準拠のデータベースを使用できます</xref:System.Data.OleDb?displayProperty=fullName>。 使用すると、 <xref:System.Data.Odbc?displayProperty=fullName>SqlDataSource、プロバイダーは、任意の ODBC ドライバーおよび IBM DB2、MySQL、PostgreSQL など、データベースで使用できます</xref:System.Data.Odbc?displayProperty=fullName>。 使用すると、<xref:System.Data.OracleClient?displayProperty=fullName>プロバイダー、SqlDataSource は以降のバージョンと Oracle 8.1.7 データベースを操作できます</xref:System.Data.OracleClient?displayProperty=fullName>。 使用可能なプロバイダーの一覧が登録されている、`DbProviderFactories`は Machine.config または Web.config ファイルのいずれかの構成ファイルのセクションです。 詳細については、次を参照してください。 [SqlDataSource コントロールを使用してデータを選択する](~/add/includes/ajax-current-ext-md.md)です。      <a name=&quot;caching&quot;></a>## キャッシュ、SqlDataSource コントロールを使用して、ページにデータを表示すると、データ ソース コントロールの機能をキャッシュ データを使用して、ページのパフォーマンスを向上させることができます。 Web サーバー上のメモリを犠牲にして、データベース サーバーの処理負荷が軽減キャッシュほとんどの場合、これは適切なトレードオフです。 SqlDataSource が自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>プロパティに設定されている`true`と<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>プロパティが、キャッシュ エントリが破棄される前に、キャッシュがデータを格納する秒数に設定します</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>。 指定することも、<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>と省略可能な<xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A>値</xref:System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency%2A></xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>。      <a name=&quot;additional_features&quot;></a>## 追加の機能、SqlDataSource は、次の表に示すように、追加の機能を提供します。      |機能 |要件 |  |----------------|------------------|  |キャッシュ |<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティを値に設定、<xref:System.Web.UI.WebControls.SqlDataSourceMode><xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>プロパティを`true`、および、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>と、キャッシュされたデータのキャッシュ動作に従って<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>プロパティです |。  |削除する |設定、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>プロパティ データの削除に使用される SQL ステートメントをします</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A></xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A></xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A></xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>。 このステートメントがパラメーター化通常 |。  |フィルタ リング |設定、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティを<xref:System.Web.UI.WebControls.SqlDataSourceMode>値</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>。 <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドが呼び出されたときにデータをフィルター処理するために使用するフィルター式に<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>プロパティを設定します |。  |挿入 |設定、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>プロパティ データの挿入に使用される SQL ステートメントをします</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A></xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A></xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 このステートメントがパラメーター化通常 |。  |ページング |ただし、<xref:System.Web.UI.WebControls.GridView>など、いくつかのデータ バインド コントロールが<xref:System.Web.UI.WebControls.SqlDataSourceMode>値に<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティを設定すると、ページングをサポートは、SqlDataSource で現在サポートされていません |。  |選択 |データの取得に使用される SQL ステートメントに<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>プロパティを設定します |。  |並べ替え |<xref:System.Web.UI.WebControls.SqlDataSourceMode><xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティを設定します |。  |更新 |設定、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>プロパティを使用してデータを更新する SQL ステートメント</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A></xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A></xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.GridView>。 このステートメントがパラメーター化通常 |。     <a name=&quot;data_source_view&quot;> </a> ## データ ソース ビューとしてすべてのデータ ソース コントロール、SqlDataSource コントロールがデータ ソース ビュー クラスに関連付けられています。 SqlDataSource コントロールに関連付けられている&1; つだけがある<xref:System.Web.UI.WebControls.SqlDataSourceView>、という名前が常と`Table`</xref:System.Web.UI.WebControls.SqlDataSourceView>。       SqlDataSource コントロールのビジュアル表示はありません。作成できるようにその宣言し、必要に応じて、状態管理に参加することを許可する、コントロールとして実装されます。 その結果、SqlDataSource がによって提供されるものなどのビジュアル機能をサポートしない、<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>または<xref:System.Web.UI.DataSourceControl.SkinID%2A>プロパティ</xref:System.Web.UI.DataSourceControl.SkinID%2A></xref:System.Web.UI.DataSourceControl.EnableTheming%2A>。      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:SqlDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       CancelSelectOnNullParameter=&quot;True|False&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConnectionString=&quot;string&quot;       DataSourceMode=&quot;DataReader|DataSet&quot;       DeleteCommand=&quot;string&quot;       DeleteCommandType=&quot;Text|StoredProcedure&quot;       EnableCaching=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertCommand=&quot;string&quot;       InsertCommandType=&quot;Text|StoredProcedure&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       ProviderName=&quot;string|System.Data.Odbc|System.Data.OleDb|           System.Data.OracleClient|System.Data.SqlClient|           Microsoft.SqlServerCe.Client&quot;       runat=&quot;server&quot;       SelectCommand=&quot;string&quot;       SelectCommandType=&quot;Text|StoredProcedure&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       UpdateCommand=&quot;string&quot;       UpdateCommandType=&quot;Text|StoredProcedure&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:SqlDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192424).  \n  \n This section contains four code examples:  \n  \n-   The first code example demonstrates how to display data from SQL Server in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The second code example demonstrates how to display data from an ODBC-compliant database in a <xref:System.Web.UI.WebControls.GridView> control using declarative syntax.  \n  \n-   The third code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n-   The fourth code example demonstrates how to display and update data in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n    > [!NOTE]\n    >  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_1.aspx)]  \n  \n The following code example demonstrates how to use a SqlDataSource control declaratively to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is the name of the .NET Framework Data Provider for ODBC, which is <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3odbc#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_2.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.GridView> control. As with the previous examples, data from the Northwind database is displayed in the <xref:System.Web.UI.WebControls.GridView> control. Additionally, because an <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is specified and the <xref:System.Web.UI.WebControls.GridView.AutoGenerateEditButton%2A> property is set to `true`, you can edit and update the records with no additional code. The <xref:System.Web.UI.WebControls.GridView> control automatically handles adding parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** button in the <xref:System.Web.UI.WebControls.GridView> control is clicked.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_3.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_5sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_3.aspx)]  \n  \n The following code example demonstrates a common display and update scenario with the <xref:System.Web.UI.WebControls.DropDownList> and <xref:System.Web.UI.WebControls.TextBox> controls. The <xref:System.Web.UI.WebControls.DropDownList> control does not automatically add update parameters to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection nor call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method, so you must do so. The update parameters are specified declaratively and you can add an event handler to perform the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> operation when an event is raised.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_58_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_58_4.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("SelectQuery")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.SqlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.SqlDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class SqlDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>クラスです。"
  syntax:
    content: public SqlDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>した指定した接続文字列および Select コマンド。"
  remarks: "別のデータベース製品ごとに使用する SQL の構文のため`selectCommand`は、現在使用されている ADO.NET プロバイダーによって異なります、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>。 SQL 文字列がパラメーター化されたクエリまたはコマンドの場合は、パラメーターのプレース ホルダーも使用している ADO.NET プロバイダーに依存します。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=fullName>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`&quot;@parameterName&quot;`</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=fullName>または<xref:System.Data.OleDb?displayProperty=fullName>、パラメーターのプレース ホルダーは`&quot;?&quot;`</xref:System.Data.OleDb?displayProperty=fullName></xref:System.Data.Odbc?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>値から、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。"
  example:
  - "The following code example demonstrates how to create a <xref:System.Web.UI.WebControls.SqlDataSource> control using the SqlDataSource constructor. The example is unusual in that the <xref:System.Web.UI.WebControls.SqlDataSource> control is being used not on a Web Forms page, but in the implementation of a middle-tier object as a simple way for a business object to interact with a database. The example uses a connection string that is stored in the Web.config file.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/csharp/m-system.web.ui.webcontr_142_1.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#3](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_142_1.vb)]"
  syntax:
    content: public SqlDataSource (string connectionString, string selectCommand);
    parameters:
    - id: connectionString
      type: System.String
      description: "基になるデータベースに接続するために使用する接続文字列。"
    - id: selectCommand
      type: System.String
      description: "SQL クエリは、基になるデータベースからデータを取得するために使用します。 SQL クエリがパラメーター化された SQL 文字列の場合は、可能性がありますを追加する必要があります<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>オブジェクトを、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>コレクションです。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> 。"
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>した指定した接続文字列および Select コマンド。"
  remarks: "別のデータベース製品ごとに使用する SQL の構文のため`selectCommand`は、現在使用されている ADO.NET プロバイダーによって異なります、`providerName`パラメーター。 SQL 文字列がパラメーター化されたクエリまたはコマンドの場合は、パラメーターのプレース ホルダーも使用している ADO.NET プロバイダーに依存します。 たとえば、プロバイダーは<xref:System.Data.SqlClient?displayProperty=fullName>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`&quot;@parameterName&quot;`</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=fullName>または<xref:System.Data.OleDb?displayProperty=fullName>、パラメーターのプレース ホルダーは`&quot;?&quot;`</xref:System.Data.OleDb?displayProperty=fullName></xref:System.Data.Odbc?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>プロパティから、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。"
  syntax:
    content: public SqlDataSource (string providerName, string connectionString, string selectCommand);
    parameters:
    - id: providerName
      type: System.String
      description: "データ プロバイダーの名前を<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>を使用します。 プロバイダーが設定されていない場合、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> for Microsoft SQL Server では、既定では、ADO.NET プロバイダーを使用します。"
    - id: connectionString
      type: System.String
      description: "基になるデータベースに接続するために使用する接続文字列。"
    - id: selectCommand
      type: System.String
      description: "SQL クエリは、基になるデータベースからデータを取得するために使用します。 SQL クエリがパラメーター化された SQL 文字列の場合は、可能性がありますを追加する必要があります<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>オブジェクトを、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>コレクションです。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> 。"
  overload: System.Web.UI.WebControls.SqlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定の時間の長さ (秒単位)、データ ソース コントロールがデータをキャッシュすることによって取得される、<xref:System.Web.UI.WebControls.SqlDataSource.Select*>メソッド</xref:System.Web.UI.WebControls.SqlDataSource.Select*>。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.SqlDataSource>。 データがキャッシュされるときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドを基になるデータベースではなく、キャッシュからデータを取得します</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドが、基になるデータベースからデータを取得および再度データをキャッシュします</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。       <xref:System.Web.UI.WebControls.SqlDataSource>コントロールが自動的にデータをキャッシュ時に、<xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A>プロパティに設定されている`true`CacheDuration プロパティが、キャッシュは、キャッシュ エントリが破棄される前にデータを格納する時間を秒数を示す 0 より大きい値に設定します</xref:System.Web.UI.WebControls.SqlDataSource.EnableCaching%2A></xref:System.Web.UI.WebControls.SqlDataSource>。 0 の値では、無限の深さのキャッシュを示します。       キャッシュの動作は、実行時間の組み合わせによって決まりますが、<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>。 場合、<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>プロパティに設定されている、<xref:System.Web.UI.DataSourceCacheExpiry>値、<xref:System.Web.UI.WebControls.SqlDataSource>最初のデータ取得操作にデータをキャッシュ、CacheDuration プロパティで指定されている時間の長さ、最大でのメモリ内に保持します</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.DataSourceCacheExpiry></xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>。 データは、メモリが必要な場合は、継続時間の前にリリースされる可能性があります。 キャッシュは、次の操作中に更新されます。 場合、<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>プロパティに設定されている、<xref:System.Web.UI.DataSourceCacheExpiry>値、データ ソース コントロールは、最初のデータの取得操作上のデータをキャッシュしますが、後続の各操作用のキャッシュが保持している時間枠をリセットします</xref:System.Web.UI.DataSourceCacheExpiry></xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>。 前回 CacheDuration 値に相当する時間のアクティビティがない場合、キャッシュが期限切れ<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>操作</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。       <xref:System.Web.UI.WebControls.SqlDataSource>内にある場合にのみ、コントロールがデータをキャッシュできる<xref:System.Web.UI.WebControls.SqlDataSourceMode>モード</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource>。 A<xref:System.NotSupportedException>によって例外がスローされます、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッド場合、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールに設定されている、<xref:System.Web.UI.WebControls.SqlDataSourceMode>値とキャッシュがも有効にします</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSource.Select%2A></xref:System.NotSupportedException>。      > [!IMPORTANT] > Microsoft Windows 認証ではクライアントの偽装を使用するいると、データは、最初のユーザー データにアクセスするときにキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データへのユーザーのアクセスを確認するデータベースを別の呼び出しを行っては取得されません。 予定の場合、データにアクセスする&1; つ以上のユーザー、データベースのセキュリティ構成を検証するデータが取得されるたびにする、キャッシュを使用しません。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The CacheDuration is set to 20 seconds and, because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_599_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_599_1.aspx)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "秒の数、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>の結果をキャッシュする<xref:System.Web.UI.WebControls.SqlDataSource.Select*>操作</xref:System.Web.UI.WebControls.SqlDataSource.Select*>。 既定値は 0 です。 値を負の値にすることはできません。"
  overload: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定キャッシュ有効期限の動作、期間と組み合わせると、データ ソース コントロールを使用するキャッシュの動作について説明します。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.SqlDataSource>。 データがキャッシュされるときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドを基になるデータベースではなく、キャッシュからデータを取得します</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドが、基になるデータベースからデータを取得および再度データをキャッシュします</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。       キャッシュの動作の組み合わせによって決定されます、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>と CacheExpirationPolicy 設定</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>。 CacheExpirationPolicy プロパティ設定されている場合、<xref:System.Web.UI.DataSourceCacheExpiry>値、<xref:System.Web.UI.WebControls.SqlDataSource>最初のデータ取得操作にデータをキャッシュで指定された時間分のメモリに保持、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>プロパティ、し、時間の有効期限が切れて後に破棄します</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.DataSourceCacheExpiry>。 キャッシュは、次の操作中に更新されます。 CacheExpirationPolicy プロパティ設定されている場合、<xref:System.Web.UI.DataSourceCacheExpiry>値、データ ソース コントロールは、最初のデータの取得操作上のデータをキャッシュしますが、後続の各操作用のキャッシュが保持している時間枠をリセットします</xref:System.Web.UI.DataSourceCacheExpiry>。 等しいときにアクティビティがない場合、キャッシュが期限切れ、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>値、最後に<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>操作</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A></xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>。       <xref:System.Web.UI.WebControls.SqlDataSource>コントロールがデータをキャッシュ時にのみ、<xref:System.Web.UI.WebControls.SqlDataSourceMode>モード</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource>。 A<xref:System.NotSupportedException>によって例外がスローされます、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッド場合、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールに設定されている、<xref:System.Web.UI.WebControls.SqlDataSourceMode>値とキャッシュがも有効にします</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSource.Select%2A></xref:System.NotSupportedException>。      > [!IMPORTANT] > Microsoft Windows 認証ではクライアントの偽装を使用するいると、データは、最初のユーザー データにアクセスするときにキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データへのユーザーのアクセスを確認するデータベースを別の呼び出しを行っては取得されません。 予定の場合、データにアクセスする&1; つ以上のユーザー、データベースのセキュリティ構成を検証するデータが取得されるたびにする、キャッシュを使用しません。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. Because the CacheExpirationPolicy property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> value, users will not see fresh data even though the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> value is 20 seconds. The cached data is refreshed only if there is no activity on the page for more than 20 seconds since the last page load.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_249_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_19sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_249_1.aspx)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "1 つ、 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>値。 既定値は、 <xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>値。"
  overload: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ ソース コントロールによって作成されたキャッシュ オブジェクトのすべてのデータにリンクされているユーザー定義のキー依存関係を設定します。 すべてのキャッシュ オブジェクトには、キーの有効期限が切れてが明示的に期限が切れています。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.SqlDataSource>。 データがキャッシュされるときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドを基になるデータベースではなく、キャッシュからデータを取得します</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドが、基になるデータベースからデータを取得および再度データをキャッシュします</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。       によって作成されるすべてのキャッシュ エントリ間の依存関係を作成する CacheKeyDependency プロパティを設定することができます、<xref:System.Web.UI.WebControls.SqlDataSource>制御とキー</xref:System.Web.UI.WebControls.SqlDataSource> 。 いつでもすべてのキャッシュ エントリを期限切れプログラムで期限切れにして、キーにできます。       <xref:System.Web.UI.WebControls.SqlDataSource>コントロールがデータをキャッシュ時にのみ、<xref:System.Web.UI.WebControls.SqlDataSourceMode>モード</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource>。 A<xref:System.NotSupportedException>によって例外がスローされます、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッド場合、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールに設定されている、<xref:System.Web.UI.WebControls.SqlDataSourceMode>値とキャッシュがも有効にします</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSource.Select%2A></xref:System.NotSupportedException>。       組み合わせごとに一意のキャッシュ エントリが作成された、 <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>、 <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A>、および<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A></xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。 複数<xref:System.Web.UI.WebControls.SqlDataSource>コントロールで使用できる、同じキャッシュ エントリのシナリオで同じ基になるデータベースからのコントロールが、同じデータを読み込む</xref:System.Web.UI.WebControls.SqlDataSource>。      > [!IMPORTANT] > Microsoft Windows 認証ではクライアントの偽装を使用するいると、データは、最初のユーザー データにアクセスするときにキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データへのユーザーのアクセスを確認するデータベースを別の呼び出しを行っては取得されません。 予定の場合、データにアクセスする&1; つ以上のユーザー、データベースのセキュリティ構成を検証するデータが取得されるたびにする、キャッシュを使用しません。"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "によって作成されたすべてのキャッシュ オブジェクトを識別するキーを<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>です。"
  overload: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  id: CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または任意のパラメーターであるときに、データ取得操作が取り消されたかどうかを示す値を設定に含まれている、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>にコレクションが評価される<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref></xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> 。"
  remarks: "ビュー内の状態でプロパティは CancelSelectOnNullParameter の値が格納されています。"
  syntax:
    content: public virtual bool CancelSelectOnNullParameter { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>パラメーターが含まれている場合、データ取得操作が取り消された場合、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*>にコレクションが評価される<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters*> 。 既定値は<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値が、どのように<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>コントロールは、更新プログラムを実行して、操作の期間中に、データベースの変更を基になる行のデータを削除します。"
  remarks: "ConflictDetection プロパティは、新旧の値のパラメーターに適用されるかどうかを判断、`Update`メソッドです。 たとえば、次のコマンドはによって指定された、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>プロパティから返される、 <xref:System.Data.DataTable>、列を持つオブジェクト`Name`と`Number`ConflictDetection プロパティに設定し、 <xref:System.Web.UI.ConflictOptions>、パラメーターが作成された値の`Name`と`Number`の`Update`メソッド</xref:System.Web.UI.ConflictOptions></xref:System.Data.DataTable></xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。 ConflictDetection プロパティ設定されている場合、 <xref:System.Web.UI.ConflictOptions>、パラメーターが作成された値の`Name`、 `Number`、 `original_Name`、および`original_Number`</xref:System.Web.UI.ConflictOptions>。 (元の値のパラメーターの正確な名前が異なります、<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>プロパティです)</xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 。<xref:System.Web.UI.WebControls.SqlDataSource>コントロール場合を決定し、`Update`メソッドで指定されている、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>プロパティが一致するパラメーター</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 。       同時実行制御は、データを読み取るし、複数のクライアントがアクセスして、同じデータを操作するときに、ストアで変更する方法を制御するデータ ストアを使用する手法です。 たとえば、1 つのクライアントは、データを読み取り、別のクライアントが、同じデータを読み取り、別のユーザーに提示中に、ユーザーに提示します。 両方のユーザーは、データ更新、データ ストレージに送信すると、予期しない結果が発生する、両方のクライアントは、同じデータの異なる値を更新するためです。 これは、競合と見なされます。 ConflictDetection プロパティを設定、<xref:System.Web.UI.ConflictOptions>値、`Update`メソッドの競合を検出し、必要に応じて、それらの処理を元のデータ ソースの新旧の値を比較し、</xref:System.Web.UI.ConflictOptions> 。       ConflictDetection プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>。"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "1 つ、 <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref>値。 既定値は、 <xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref>値。"
  overload: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  id: ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または ADO.NET プロバイダー固有の接続文字列を設定、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロールでは、使用して基になるデータベースに接続します。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>で ADO.NET プロバイダーのさまざまなコントロールを使用できるし、基になるデータ ソースへの接続に使用される接続文字列の構文は、プロバイダーに固有です</xref:System.Web.UI.WebControls.SqlDataSource>。       構成するとき、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを設定する、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティをデータベースの種類 (既定値は<xref:System.Data.SqlClient?displayProperty=fullName>)、ConnectionString プロパティをデータベースに接続するために必要な情報を含む接続文字列を設定するとします</xref:System.Data.SqlClient?displayProperty=fullName></xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A></xref:System.Web.UI.WebControls.SqlDataSource>。 接続文字列の内容は、データベースへのアクセスは、データ ソース コントロールの種類によって異なります。 たとえば、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、サーバー名、データベース (カタログ) 名、および SQL Server に接続するときにユーザーを認証する方法に関する情報が必要です</xref:System.Web.UI.WebControls.SqlDataSource>。 接続文字列の内容については、<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A><xref:System.Data.SqlClient.SqlConnection>クラス、<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A><xref:System.Data.OracleClient.OracleConnection>クラス、<xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A>プロパティ<xref:System.Data.OleDb.OleDbConnection>、クラスまたは<xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A><xref:System.Data.Odbc.OdbcConnection>クラス</xref:System.Data.Odbc.OdbcConnection>のプロパティ</xref:System.Data.Odbc.OdbcConnection.ConnectionString%2A></xref:System.Data.OleDb.OleDbConnection></xref:System.Data.OleDb.OleDbConnection.ConnectionString%2A></xref:System.Data.OracleClient.OracleConnection>のプロパティ</xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A></xref:System.Data.SqlClient.SqlConnection>のプロパティ</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>を参照してください。       ConnectionString プロパティを変更する場合、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生原因で、コントロールにバインドされている、<xref:System.Web.UI.WebControls.SqlDataSource>再バインドするコントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.IDataSource.DataSourceChanged>。      > [!IMPORTANT] > 接続文字列を格納する方法については、次を参照してください。[操作方法: を使用するデータ ソース コントロールとの接続文字列をセキュリティで保護](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the ConnectionString property to connect to a Microsoft SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates a more complex scenario, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Microsoft Access database. In each case, the `connectionStrings` element of the Web.config file is shown first, followed by the ASP.NET page that contains the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n The following code example demonstrates how to set the ConnectionString property to connect to a SQL Server database and display the results of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_3sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_2.aspx)]  \n  \n The following code example demonstrates a more complex scenario than the preceding code example, where a <xref:System.Web.UI.WebControls.SqlDataSource> control is used to display and update data in a password-protected Access database. Because the <xref:System.Web.UI.WebControls.SqlDataSource> is used with Access, the <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is set to the <xref:System.Data.OleDb> provider, and the ConnectionString property is set to an appropriate connection string for a UNC-shared Access database. A <xref:System.Web.UI.WebControls.GridView> control displays orders with shipment dates. You can update an order by checking the appropriate check box, and then clicking the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example includes a password in plain text only for illustration purposes. In a production application, connection strings that include passwords should be encrypted. For more information, see [Protecting Connection Information](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_3.aspx)]  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_749_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_22sql#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_749_4.aspx)]"
  syntax:
    content: public virtual string ConnectionString { get; set; }
    return:
      type: System.String
      description: ".NET Framework データ プロバイダー固有の文字列を<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>それが表す SQL database への接続に使用します。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  id: CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データ ソース コントロールに関連付けられているデータ ソース ビュー オブジェクトを作成します。"
  remarks: "派生したクラス、<xref:System.Web.UI.WebControls.SqlDataSource>クラスを厳密に型指定されたデータ ソース ビュー オブジェクトを返す CreateDataSourceView メソッドをオーバーライドします</xref:System.Web.UI.WebControls.SqlDataSource>。"
  syntax:
    content: protected virtual System.Web.UI.WebControls.SqlDataSourceView CreateDataSourceView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "データ ソース ビューの名前。"
    return:
      type: System.Web.UI.WebControls.SqlDataSourceView
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>と関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>です。"
  overload: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  id: DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータ取得のモードを設定、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>データをフェッチするコントロールを使用します。"
  remarks: "データの取得のモードを識別する方法、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、基になるデータベースからデータを取得します</xref:System.Web.UI.WebControls.SqlDataSource>。       DataSourceMode プロパティを設定すると、<xref:System.Web.UI.WebControls.SqlDataSourceMode>値、データを読み込みます、<xref:System.Data.DataSet>オブジェクトとサーバー上に格納されているメモリ</xref:System.Data.DataSet></xref:System.Web.UI.WebControls.SqlDataSourceMode>。 これにより、シナリオ、ユーザー インターフェイスなどのコントロール、 <xref:System.Web.UI.WebControls.GridView>、並べ替え、フィルター、およびページング機能を提供します</xref:System.Web.UI.WebControls.GridView>。       DataSourceMode プロパティを設定すると、<xref:System.Web.UI.WebControls.SqlDataSourceMode>値、データを取得して、<xref:System.Data.IDataReader>順方向専用、読み取り専用カーソルであるオブジェクト</xref:System.Data.IDataReader></xref:System.Web.UI.WebControls.SqlDataSourceMode>。 特定の種類の<xref:System.Data.IDataReader>オブジェクト NET データ プロバイダーに依存する、<xref:System.Web.UI.WebControls.SqlDataSource>によって識別される使用方法は、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A></xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.IDataReader>。 既定では、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、プロバイダーを使用して、Microsoft SQL Server 用、 <xref:System.Data.SqlClient?displayProperty=fullName>、し、データ リーダーが、<xref:System.Data.SqlClient.SqlDataReader>オブジェクト</xref:System.Data.SqlClient.SqlDataReader></xref:System.Data.SqlClient?displayProperty=fullName></xref:System.Web.UI.WebControls.SqlDataSource>。       DataSourceMode プロパティを変更する場合、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生原因で、コントロールにバインドされている、<xref:System.Web.UI.WebControls.SqlDataSource>再バインドする</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.IDataSource.DataSourceChanged>。       ビュー内の状態でプロパティは、DataSourceMode の値が格納されています。"
  example:
  - "The following code example demonstrates how to set the DataSourceMode property of the <xref:System.Web.UI.WebControls.SqlDataSource> control to the <xref:System.Web.UI.WebControls.SqlDataSourceMode> value for a scenario with a <xref:System.Web.UI.WebControls.ListBox> control that requires no sorting, paging, nor filtering.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_5_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_5_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceMode DataSourceMode { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceMode
      description: "1 つ、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref>値。 既定値は、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref>値。"
  overload: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DataSourceMode プロパティで定義されている値のいずれか、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "使用して削除操作を実行、 <> </> *> 内にある SQL 文字列とパラメーター、 <> </> *> コレクション。"
  remarks: "削除操作を実行すると、前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Deleting></xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>。 パラメーターの値を確認し、削除操作の前に処理を実行するこのイベントを処理することができます。       操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Deleted>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Deleted></xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。       Delete メソッドは、プログラムへのアクセス提供、`Delete`メソッドです。 場合、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールがデータ バインド コントロールに関連付け、データ バインド コントロールを自動的に呼び出して、**削除**メソッド</xref:System.Web.UI.WebControls.SqlDataSource>。       Delete メソッドのデリゲートを<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>のメソッド、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>。 操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>ビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>テキストおよび関連<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>値、および実行し、<xref:System.Data.Common.DbCommand>基になるデータベースに対して</xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A></xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSourceView>。"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> property and call the Delete method when using data-bound controls, such as the <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call the Delete method on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the Delete method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_3_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_3_1.aspx)]"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "基になるデータベースから削除された行の数を表す値。"
  overload: System.Web.UI.WebControls.SqlDataSource.Delete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>基になるデータ ソースとの接続を確立することはできません。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  id: DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定、SQL 文字列、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロールを使用して、基になるデータベースからデータを削除します。"
  remarks: "によって使用され、SQL クエリまたはストアド プロシージャの名前を表す、DeleteCommand、<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>メソッド</xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>。       SQL 文字列の構文によって異なりますが、現在使用されている ADO.NET プロバイダーによって別のデータベースの製品では、異なる種類の SQL を使用するため、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>。 SQL 文字列がパラメーター化されたクエリまたはコマンドの場合は、パラメーターの構文も使用している ADO.NET プロバイダーに依存します。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=fullName>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>パラメーターの構文は、クラス、 `&quot;@parameterName&quot;`</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=fullName>または<xref:System.Data.OleDb?displayProperty=fullName>、パラメーターのプレース ホルダーは`&quot;?&quot;`</xref:System.Data.OleDb?displayProperty=fullName></xref:System.Data.Odbc?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       DeleteCommand プロパティは、SQL の文字列またはストアド プロシージャのデータベースをサポートしている場合、ストアド プロシージャの名前。       DeleteCommand プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>。      > [!IMPORTANT] > セキュリティのために、プロパティは使用されません DeleteCommand ビューステートに保存します。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態可能性があります、情報漏えいの脆弱性。"
  example:
  - "The following code example demonstrates how to set the DeleteCommand text to delete an order from the Northwind database Orders table. Data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> renders a **Delete** button automatically when the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`. Additionally, when the **Delete** button is clicked, the <xref:System.Web.UI.WebControls.GridView> control automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method. Finally, because this code example deletes data, an event handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_45_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_45_1.aspx)]"
  syntax:
    content: public string DeleteCommand { get; set; }
    return:
      type: System.String
      description: "SQL の文字列を<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>を使用してデータを削除します。"
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  id: DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうかのテキスト、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>プロパティは、SQL ステートメントまたはストアド プロシージャの名前</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>。"
  remarks: "DeleteCommandType プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType%2A>。"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "1 つ、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。 既定値は、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。"
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "削除操作が完了したときに発生します。"
  remarks: "出力パラメーターの値を確認して、削除操作が完了した後に削除されたイベントを処理します。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって使用されているパラメーターを含むパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>プロパティから、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>オブジェクトに関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロール</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>。"
  remarks: "場合、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>プロパティは、パラメーター化された SQL クエリを含む、deleteparameters の各コレクションには、いずれかが含まれています<xref:System.Web.UI.WebControls.Parameter>SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト</xref:System.Web.UI.WebControls.Parameter></xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>。      > [!NOTE] > ことを確認していない<xref:System.Web.UI.WebControls.BoundField>にバインドするデータ バインド コントロール内のコントロール、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールが deleteparameters の各コレクション内の任意のパラメーター名に一致する名前を持つ</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.BoundField>。 パラメーターをバインドされたフィールドは、SQL コマンドと「パラメーターが指定されませんでした」エラーから除外されるように、同じ名前を持つ可能性があります。       場合、<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions>値、データの新旧両方の値のパラメーターが作成されます</xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>。 古い値のパラメーターがに従って名前付き、<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>。       ADO.NET プロバイダーによって deleteparameters の各コレクションのパラメーターの順序が重要な可能性があります。 <xref:System.Data.OleDb?displayProperty=fullName>と<xref:System.Data.Odbc?displayProperty=fullName>プロバイダーがパラメーター化 SQL クエリでパラメーターが表示される順序に従って、コレクション内のパラメーターを関連付けます</xref:System.Data.Odbc?displayProperty=fullName></xref:System.Data.OleDb?displayProperty=fullName>。 <xref:System.Data.SqlClient?displayProperty=fullName>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリにプレース ホルダーで、パラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       Deleteparameters の各プロパティの取得、<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Deleting>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare DeleteParameters property and call the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method when using data-bound controls, such as <xref:System.Web.UI.WebControls.DropDownList> (unlike other controls, such as <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private `OnDelete` event handler, which explicitly calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_121_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_121_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>によって使用されるパラメーターを格納している、<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand*>。"
  overload: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "削除操作の前に発生します。"
  remarks: "パラメーターの値を検証する、アプリケーションに固有の追加の初期化の操作を実行する、削除すると、イベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、削除操作を実行します</xref:System.Web.UI.WebControls.SqlDataSource>。       基になるデータ ソースへの接続がまだ開いていないイベント ハンドラー デリゲートが呼び出されるとします。 そのため、操作を呼び出すことによって直接取り消すことはできません、<xref:System.Data.Common.DbCommand.Cancel%2A>メソッドを<xref:System.Data.Common.DbCommand>によって公開されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>オブジェクト</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs></xref:System.Data.Common.DbCommand></xref:System.Data.Common.DbCommand.Cancel%2A>。 ただしを設定して、データベースの操作をキャンセルできます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>オブジェクトを`true`</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "The following code example demonstrates how to handle the Deleting event that is raised before a <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation occurs. Because this example deletes data from the Northwind database, an <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> handler is added to attempt to back up the database to disk before the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうか、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロールがデータ キャッシュを有効にします。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、データのキャッシュをサポートしています</xref:System.Web.UI.WebControls.SqlDataSource>。 データがキャッシュされるときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドを基になるデータベースではなく、キャッシュからデータを取得します</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 キャッシュが期限切れになったときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドが、基になるデータベースからデータを取得および再度データをキャッシュします</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。       <xref:System.Web.UI.WebControls.SqlDataSource>EnableCaching プロパティ設定されている場合にコントロールがデータに自動的にキャッシュされる`true`と<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>プロパティが、キャッシュが最新のセットを取得する前にデータを格納する秒数を示す、0 より大きい値に設定します</xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A></xref:System.Web.UI.WebControls.SqlDataSource>。      > [!IMPORTANT] > Microsoft Windows 認証ではクライアントの偽装を使用するいると、データは、最初のユーザー データにアクセスするときにキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データへのユーザーのアクセスを確認するデータベースを別の呼び出しを行っては取得されません。 予定の場合、データにアクセスする&1; つ以上のユーザー、データベースのセキュリティ構成を検証するデータが取得されるたびにする、キャッシュを使用しません。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control, with data caching enabled. The EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A> is set to 20 seconds. Because the <xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> property is set to the <xref:System.Web.UI.DataSourceCacheExpiry> field by default, users of this page will see fresh data every 20 seconds.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_591_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_18sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_591_1.aspx)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>データ ソース コントロールのデータのキャッシュが有効になっている場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "EnableCaching プロパティに設定<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>キャッシュがサポートされていない場合で、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>です。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定するフィルター式が適用されるときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select*>メソッドが呼び出されます</xref:System.Web.UI.WebControls.SqlDataSource.Select*>。"
  remarks: "FilterExpression プロパティの値は、書式指定文字列式 (で処理される文字列、<xref:System.String.Format%2A?displayProperty=fullName>メソッド) FilterExpression コレクション内で文字列に含まれる任意の置換パラメーターの値が使用する</xref:System.String.Format%2A?displayProperty=fullName>。 フィルター式の構文は同じ構文で受け入れを<xref:System.Data.DataView.RowFilter%2A>プロパティ、フィルター式が適用されるので、<xref:System.Data.DataView.RowFilter%2A>のプロパティ、<xref:System.Data.DataView>実行から返されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッド</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A></xref:System.Data.DataView></xref:System.Data.DataView.RowFilter%2A></xref:System.Data.DataView.RowFilter%2A>。 詳細については、 <xref:System.Data.DataColumn.Expression%2A>。</xref:System.Data.DataColumn.Expression%2A>を参照してください。       パラメーターを追加する場合、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>コレクション、書式文字列のプレース ホルダーを含めることもできます (たとえば、`&quot;{0}&quot;)`パラメーター値の代わりに式で</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>。 内のパラメーターのインデックスに従ってプレースは、<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>コレクションです</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>。 オブジェクトの<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>コレクションが`null`オブジェクトは空の文字列で置き換えられます</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>。       FilterExpression プロパティでは、パラメーターを含めることができます。 パラメーターが文字列型または char 型の場合は、パラメーターを単一引用符で囲みます。 パラメーターが数値型の場合、引用符がある場合は、必要ではありません。 <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>FilterExpression プロパティ内にあるプレース ホルダーに評価されるパラメーターがコレクションに含まれています</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>。       <xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、データのフィルター処理をサポートしている時にのみ、<xref:System.Web.UI.WebControls.SqlDataSourceMode>モード</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource>。       FilterExpression プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using a FilterExpression string and the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. The FilterExpression property is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the FilterExpression contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the selection for the <xref:System.Web.UI.WebControls.DropDownList> control causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_89_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_89_1.aspx)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "使用してデータを取得するときに適用されるフィルター式を表す文字列、<xref:System.Web.UI.WebControls.SqlDataSource.Select*>メソッド</xref:System.Web.UI.WebControls.SqlDataSource.Select*>。"
  overload: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FilterExpression プロパティが設定され、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>では、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;> </xref>モード。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "フィルター操作の前に発生します。"
  remarks: "前に、のフィルター パラメーターの値の検証操作を実行する、フィルター イベントを処理、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、フィルター操作を実行します</xref:System.Web.UI.WebControls.SqlDataSource>。 取り消すことができます、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>を設定することによって、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>オブジェクトを`true`</xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A></xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 場合にのみこのイベントは、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>プロパティが設定されています</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>。       フィルター イベントを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName>のイベント、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.Filtering?displayProperty=fullName>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "パラメーターのプレース ホルダー内にある関連付けられているパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>文字列</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>。"
  remarks: "FilterParameters コレクション内のパラメーターがで指定されているすべてのパラメーターで関連付けられた、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>。 指定されているパラメーターのプレース ホルダー、 <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>FilterParameters コレクション内のパラメーター オブジェクトを順序プロパティが一致するときに、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>メソッドが呼び出されます</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A></xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>。       FilterParameters プロパティの取得、<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and FilterParameters properties. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control is applied anytime the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property contains a placeholder for a filter parameter, which is contained in the FilterParameters collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the <xref:System.Web.UI.WebControls.DropDownList> selection causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1207_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1207_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>で見つかったすべてのパラメーター プレース ホルダーに関連付けられているパラメーターのセットを含む、<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression*>。"
  overload: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  id: GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "返します、 <xref href=&quot;System.Data.Common.DbProviderFactory&quot;> </xref>によって識別される ADO.NET プロバイダーに関連付けられているオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName*>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName*>。"
  remarks: "<xref:System.Data.Common.DbProviderFactory>プロパティを使用、<xref:System.Web.UI.WebControls.SqlDataSource>データベースとやり取りするときに正しい ADO.NET 接続、コマンド、およびパラメーター オブジェクトを作成するコントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.Common.DbProviderFactory>。"
  syntax:
    content: protected virtual System.Data.Common.DbProviderFactory GetDbProviderFactory ();
    parameters: []
    return:
      type: System.Data.Common.DbProviderFactory
      description: "A <xref href=&quot;System.Data.Common.DbProviderFactory&quot;> </xref>識別された ADO.NET プロバイダーを表す、それ以外のインスタンスと、 <xref href=&quot;System.Data.SqlClient&quot;></xref>プロバイダーが設定されていない場合は、します。"
  overload: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データ ソース コントロールに関連付けられている名前付きのデータ ソース ビューを取得します。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、1 つだけのデータ ソース ビューをサポートしています</xref:System.Web.UI.WebControls.SqlDataSource>。 すべてのデータ ソース ビュー オブジェクトと同様、 <xref:System.Web.UI.WebControls.SqlDataSourceView>、データ ソース コントロールに関連付けられているオブジェクトは、その機能を定義は、基になるデータベースからデータを取得する必要はし、並べ替え、挿入、削除、および更新などの操作を実行するすべての作業を実行します</xref:System.Web.UI.WebControls.SqlDataSourceView>。"
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "取得するビューの名前。 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>&1; つのビューをサポートしている`viewName`は無視されます。"
    return:
      type: System.Web.UI.DataSourceView
      description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>に関連付けられている&quot;Table&quot;という名前の<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>です。"
  overload: System.Web.UI.WebControls.SqlDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>viewName</code><xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>以外の項目または`Table`です。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "関連付けられているビュー オブジェクトの一覧を表す名前のコレクションを取得、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロール。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>コントロールがその基になるデータ、という名前の&1; つのビューをサポートする`&quot;Table&quot;`</xref:System.Web.UI.WebControls.SqlDataSource>。 GetViewNames メソッドでは、この&1; つのビューの名前の&1; つの要素のコレクションを返します。"
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>に関連付けられているビューの名前を格納している、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref></xref:System.Collections.ICollection> 。"
  overload: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "挿入操作を使用して、実行、 <> </> *> 内にある SQL 文字列とパラメーター、 <> </> *> コレクション。"
  remarks: "挿入操作を実行すると、前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Inserting></xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>。 パラメーターの値を確認して、挿入操作の前に処理を実行するこのイベントを処理することができます。 挿入操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトのビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>テキストと、関連付けられたすべて<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>プロパティ、し、実行、<xref:System.Data.Common.DbCommand>基になるデータベースに対してオブジェクト</xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A></xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSourceView>。       操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Inserted></xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。       Insert メソッドは、プログラムへのアクセス提供、`Insert`メソッドです。 場合、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールがデータ バインド コントロールに関連付け、データ バインド コントロールを自動的に呼び出して、`Insert`メソッド</xref:System.Web.UI.WebControls.SqlDataSource>。       挿入メソッドのデリゲートを<xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>のメソッド、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and then the <xref:System.Web.UI.WebControls.DropDownList> is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_101_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_101_1.aspx)]"
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "基になるデータベースに挿入される行の数を表す値。"
  overload: System.Web.UI.WebControls.SqlDataSource.Insert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>基になるデータ ソースとの接続を確立することはできません。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  id: InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定、SQL 文字列、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>基になるデータベースにデータを挿入するコントロールを使用します。"
  remarks: "によって使用され、SQL クエリまたはストアド プロシージャの名前を表す、insert コマンド、<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>メソッド</xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>。       SQL 文字列の構文によって異なりますが、現在使用されている ADO.NET プロバイダーによって別のデータベースの製品では、異なる種類の SQL を使用するため、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>。 SQL 文字列がパラメーター化されたクエリまたはコマンドの場合は、パラメーターのプレース ホルダーも使用している ADO.NET プロバイダーに依存します。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=fullName>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`&quot;@parameterName&quot;`</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=fullName>または<xref:System.Data.OleDb?displayProperty=fullName>、パラメーターのプレース ホルダーは`&quot;?&quot;`</xref:System.Data.OleDb?displayProperty=fullName></xref:System.Data.Odbc?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       Insert コマンドでは、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。       このプロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>と関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>。      > [!IMPORTANT] > セキュリティのために、プロパティが格納されない InsertCommand がビュー ステート。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態可能性があります、情報漏えいの脆弱性。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The second code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row into the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n> [!NOTE]\n>  These examples show how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values into the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_1.aspx)]  \n  \n The following code example demonstrates how to retrieve data from SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> control and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_805_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_805_2.aspx)]"
  syntax:
    content: public string InsertCommand { get; set; }
    return:
      type: System.String
      description: "SQL の文字列を<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>を使用してデータを挿入します。"
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  id: InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうかのテキスト、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>プロパティは、SQL ステートメントまたはストアド プロシージャの名前</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>。"
  remarks: "InsertCommandType プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType%2A>。"
  example:
  - "The following code example demonstrates how to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.GridView> control. It also demonstrates how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n The <xref:System.Web.UI.WebControls.GridView> control displays a set of data and the <xref:System.Web.UI.WebControls.DetailsView> displays the details for a particular row. If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. The stored procedure name is set in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property and identified as a stored procedure by setting the InsertCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value.  \n  \n After data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_948_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_948_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "1 つ、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。 既定値は、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。"
  overload: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "挿入操作が完了したときに発生します。"
  remarks: "挿入操作が完了した後は、出力パラメーターの値を調べるに挿入したイベントを処理します。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the Inserted event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_73_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_73_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "挿入操作の前に発生します。"
  remarks: "そのため、パラメーターの値を検証する、アプリケーション固有の追加の初期化の操作を実行する挿入イベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、挿入操作を実行します</xref:System.Web.UI.WebControls.SqlDataSource>。 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラー デリゲートが呼び出されるとします。 そのため、操作を呼び出すことによって直接取り消すことはできません、<xref:System.Data.Common.DbCommand.Cancel%2A>メソッドを<xref:System.Data.Common.DbCommand>によって公開されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>プロパティ</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs></xref:System.Data.Common.DbCommand></xref:System.Data.Common.DbCommand.Cancel%2A>。 ただしを設定して、データベースの操作をキャンセルできます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>オブジェクトを`true`</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control and how to use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control, and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensures that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted into the database by the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the `DataBind` method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_151_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_151_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって使用されているパラメーターを含むパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>プロパティから、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>オブジェクトに関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロール</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>。"
  remarks: "InsertParameters プロパティの取得、<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>。       場合、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>プロパティは、パラメーター化された SQL クエリを含む、InsertParameters コレクションには、いずれかが含まれています<xref:System.Web.UI.WebControls.Parameter>SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト</xref:System.Web.UI.WebControls.Parameter></xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>。       ADO.NET プロバイダーによって InsertParameters コレクション内のパラメーターの順序が重要な可能性があります。 <xref:System.Data.OleDb?displayProperty=fullName>と<xref:System.Data.Odbc?displayProperty=fullName>プロバイダーがパラメーター化 SQL クエリで使用されるパラメーターの順序に従って、コレクション内のパラメーターを関連付けます</xref:System.Data.Odbc?displayProperty=fullName></xref:System.Data.OleDb?displayProperty=fullName>。 <xref:System.Data.SqlClient?displayProperty=fullName>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリ内のプレース ホルダーの別名を持つパラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the Data table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database, and the <xref:System.Web.UI.WebControls.DropDownList> control is refreshed.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n> [!NOTE]\n>  This example shows how to use declarative syntax for data access. For information about how to access data by using code instead of markup, see [Accessing data in Visual Studio](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_596_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_596_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>によって使用されるパラメーターを格納している、<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand*>。"
  overload: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定したプロパティの状態を読み込みます、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロールを永続化する必要があります。"
  remarks: "LoadViewState メソッドはの以前に保存したビューステートの読み込みに使用、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource>。"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "状態を表すオブジェクト、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>です。"
  overload: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定に渡されるパラメーターの名前に適用する書式指定文字列、 <> </> *> または<> *> メソッドです。"
  remarks: "OldValuesParameterFormatString 書式指定文字列はによって識別されるものなど、主キーにのみ適用、`DataKeyNames`または delete で関連付けられたデータ バインド コントロールのプロパティ更新シナリオと場所、<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions>値と一連の`oldValues`は対応するデータのメソッドに渡されます</xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>。 各パラメーターの名前に、書式指定文字列を適用するこの例では、`oldValues`コレクション。       OldValuesParameterFormatString プロパティを変更する可能性があります、2 つの一般的なシナリオは、次のとおり: - 更新プログラムの新旧の値を区別するためにします。 ときに、<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>プロパティに設定されている、 <xref:System.Web.UI.ConflictOptions>、パラメーターの値と元の新しい値の両方に追加する、<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>コレクションです</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A></xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>。 書式指定文字列をなしの各データ フィールドの同じ名前の&2; つのパラメーターが作成されます。 元の値パラメーターの名前を変更すると、競合を検出し、キーの値を比較する元のデータ ソースへのデータを比較できます。      いくつかのビジュアル デザイナーでは、元の値とキーの特定の名前付けスキームを実装します。"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "いずれかの名前に適用される書式指定文字列を表す文字列<code> oldValues </code>に渡されるパラメーター、 <> </> *> または<> *> メソッドです。 既定値が必要な場合は、&quot;0&quot;} を使用しています。"
  overload: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "追加、 <xref href=&quot;System.Web.UI.Page.LoadComplete&quot;> </xref>イベント ハンドラーを<xref href=&quot;System.Web.UI.Page&quot;></xref>が含まれるコントロール、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロール。"
  remarks: "イベント ハンドラーで追加される、<xref:System.Web.UI.WebControls.SqlDataSource>オブジェクトの更新プログラム、<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>値</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource>。 値が更新された場合、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生原因で、コントロールにバインドされている、<xref:System.Web.UI.WebControls.SqlDataSource>再バインドするコントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.IDataSource.DataSourceChanged>。"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>イベント データを格納します</xref:System.EventArgs>。"
  overload: System.Web.UI.WebControls.SqlDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  id: ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または .NET Framework データ プロバイダーの名前を設定、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロールを使用して基になるデータ ソースに接続します。"
  remarks: ".NET Framework には、次のデータ プロバイダーが含まれています: -<xref:System.Data.SqlClient?displayProperty=fullName>プロバイダーは、.NET Framework Data Provider for SQL Server の既定値です</xref:System.Data.SqlClient?displayProperty=fullName>。      -<xref:System.Data.OleDb?displayProperty=fullName>プロバイダーは、.NET Framework Data Provider for OLE DB</xref:System.Data.OleDb?displayProperty=fullName> 。      -<xref:System.Data.Odbc?displayProperty=fullName>プロバイダーは、.NET Framework Data Provider for ODBC</xref:System.Data.Odbc?displayProperty=fullName> 。      -<xref:System.Data.OracleClient?displayProperty=fullName>プロバイダーは、.NET Framework Data Provider for Oracle</xref:System.Data.OracleClient?displayProperty=fullName> 。       ProviderName プロパティがなど、アンマネージの ADO.NET プロバイダーの名前に設定しないで`MSDAORA`です。 詳細については、次を参照してください。 [SqlDataSource コントロールを使用してデータを選択する](~/add/includes/ajax-current-ext-md.md)です。       ProviderName プロパティを変更する場合、<xref:System.Web.UI.IDataSource.DataSourceChanged>イベントが発生原因で、コントロールにバインドされている、<xref:System.Web.UI.WebControls.SqlDataSource>再バインドする</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.IDataSource.DataSourceChanged>。       使用可能なプロバイダーの一覧を指定する、`DbProviderFactories`のサブセクション、 `system.data` Machine.config ファイルのセクションです。"
  example:
  - "This section contains two code examples. The first code demonstrates how to connect to a SQL Server database using the default .NET Framework Data Provider for SQL Server for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. The second code example demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>.  \n  \n The following code example demonstrates how to connect to a SQL Server database using the default data provider for the <xref:System.Web.UI.WebControls.SqlDataSource> control, the <xref:System.Data.SqlClient?displayProperty=fullName>. Whenever the ProviderName property is not explicitly set, the default provider is used. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is provider-specific.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_1.aspx)]  \n  \n The following code example, which is functionally the same as the preceding code example, demonstrates how to connect to an ODBC database using the .NET Framework Data Provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>. The <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN) that is used to connect to the ODBC database.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1309_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_1odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1309_2.aspx)]"
  syntax:
    content: public virtual string ProviderName { get; set; }
    return:
      type: System.String
      description: "データ プロバイダーの名前を<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref> ; を使用してそれ以外の場合、プロバイダーが設定されていない場合、Microsoft SQL Server 用の ADO.NET プロバイダー。 既定値は、Microsoft SQL Server の ADO.NET プロバイダーです。"
  overload: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "現在のビューステートを保存、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロール。"
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "保存された状態を格納しているオブジェクト、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>です。"
  overload: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  id: Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "使用して、基になるデータベースからデータを取得、 <> </> *> 内にある SQL 文字列とパラメーター、 <> </> *> コレクション。"
  remarks: "Select メソッドが中に自動的に呼び出されます、<xref:System.Web.UI.Control.PreRender>ページ ライフ サイクルの段階</xref:System.Web.UI.Control.PreRender>。 アタッチされているデータ バインドされたコントロールによって呼び出されます、<xref:System.Web.UI.WebControls.SqlDataSource>を介して制御、<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>プロパティ</xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A></xref:System.Web.UI.WebControls.SqlDataSource>。       <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>メソッドを返します、<xref:System.Data.DataView>オブジェクトの場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティに設定されている、<xref:System.Web.UI.WebControls.SqlDataSourceMode>値</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A></xref:System.Data.DataView></xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>。 <xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>メソッドを返します、<xref:System.Data.IDataReader>オブジェクトの場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティに設定されている、<xref:System.Web.UI.WebControls.SqlDataSourceMode>値</xref:System.Web.UI.WebControls.SqlDataSourceMode></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A></xref:System.Data.IDataReader></xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>。 閉じる、<xref:System.Data.IDataReader>オブジェクトのデータの読み取りが完了したら</xref:System.Data.IDataReader>。       選択操作を実行する前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Selecting></xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>。 パラメーターの値を確認して、Select 操作の前に処理を実行するこのイベントを処理することができます。       Select 操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Selected>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Selected></xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。       場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティに設定されている<xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName>キャッシュが有効になっていると、<xref:System.Web.UI.WebControls.SqlDataSource>オブジェクトからデータを取得し、Select 操作中にデータをキャッシュに保存します</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>。 キャッシュが作成、破棄、または更新の組み合わせで指定されているキャッシュの動作に基づいて、<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>と<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A></xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>。      > [!IMPORTANT] > Microsoft Windows 認証ではクライアントの偽装を使用するいると、データは、最初のユーザー データにアクセスするときにキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データへのユーザーのアクセスを確認するデータベースを別の呼び出しを行っては取得されません。 予定の場合、データにアクセスする&1; つ以上のユーザー、データベースのセキュリティ構成を検証するデータの取得されるたび、キャッシュを使用しません。       場合、<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>プロパティに設定されている<xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName>と<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>プロパティが指定されて、指定されたいずれかと、フィルター式が評価される<xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A>プロパティとその結果のフィルター適用のデータの一覧に、Select 操作中に</xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A></xref:System.Web.UI.WebControls.SqlDataSourceMode?displayProperty=fullName></xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>。       Select メソッドのデリゲートを<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>のメソッド、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>。 データの取得操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>ビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>テキストと、関連付けられたすべて<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>値、および実行し、<xref:System.Data.Common.DbCommand>基になるデータベースに対して</xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A></xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSourceView>。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following examples show how to programmatically call the Select method and set values based on the result of the query. The following example shows the declarative code for the Web controls.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#1](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_1.aspx)]  \n  \n The following example shows how to programmatically call the Select method. The <xref:System.Web.UI.WebControls.SqlDataSource> control returns an integer. The value of the integer is used to set the text of a <xref:System.Web.UI.WebControls.Label> control and to determine whether to display a <xref:System.Web.UI.WebControls.HyperLink> control.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/visualbasic/475f4e1e-4832-4407-9121-_2.vb)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource.Select#2](~/add/codesnippet/csharp/475f4e1e-4832-4407-9121-_2.cs)]"
  syntax:
    content: public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;> </xref>基本的なデータの取得を超えたデータ操作を要求するために使用できるオブジェクト。"
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>データ行のリスト</xref:System.Collections.IEnumerable>。"
  overload: System.Web.UI.WebControls.SqlDataSource.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>オブジェクトは、基になるデータ ソースとの接続を確立できません。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  id: SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定、SQL 文字列、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロールを使用して基になるデータベースからデータを取得します。"
  remarks: "によって使用され、SQL クエリまたはストアド プロシージャの名前を表す、SelectCommand プロパティ、<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>を SQL Server データベースからデータを取得する方法</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>。 Select コマンドのアスタリスク (*) を使用して、すべての列を選択して、自動コード生成を使用して更新を実施するか、操作を削除する場合、以下のことを確認する場合列にはスペースが含まれていない、名前にします。       SQL 文字列の構文によって異なりますが、現在使用されている ADO.NET プロバイダーによって別のデータベースの製品では、異なる種類の SQL を使用するため、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>。 SQL 文字列がパラメーター化されたクエリまたはコマンドの場合は、パラメーターのプレース ホルダーも使用している ADO.NET プロバイダーに依存します。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=fullName>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`&quot;@parameterName&quot;`</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=fullName>または<xref:System.Data.OleDb?displayProperty=fullName>、パラメーターのプレース ホルダーは`&quot;?&quot;`</xref:System.Data.OleDb?displayProperty=fullName></xref:System.Data.Odbc?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       SelectCommand プロパティには、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。       SelectCommand プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>。      > [!IMPORTANT] > セキュリティのために、プロパティが格納されない SelectCommand がビュー ステート。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態可能性があります、情報漏えいの脆弱性。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n In both examples, there is no need to explicitly call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method because the data-bound controls that are attached to the data source control through the <xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A> property will automatically call the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method during the <xref:System.Web.UI.Control.PreRender> phase.  \n  \n The following code example demonstrates how to set the SelectCommand text to a basic SQL query to retrieve data from an ODBC-compliant database and display it in a <xref:System.Web.UI.WebControls.GridView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_4odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_1.aspx)]  \n  \n The following code example demonstrates how to set the SelectCommand text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The SelectCommand property can be an SQL query or the name of a stored procedure, if the data source supports stored procedures.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1253_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1253_2.aspx)]"
  syntax:
    content: public string SelectCommand { get; set; }
    return:
      type: System.String
      description: "SQL 文字列またはストアド プロシージャの名前を<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>を使用してデータを取得します。"
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  id: SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうかのテキスト、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>プロパティは、SQL クエリまたはストアド プロシージャの名前</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>。"
  remarks: "SelectCommandType プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType%2A>。"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure and the SelectCommandType property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value, in order to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_358_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_358_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "1 つ、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。 既定値は、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。"
  overload: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データ取得操作が完了したときに発生します。"
  remarks: "データ取得操作が完了した後、出力パラメーターの値を調べ、選択したイベントを処理します。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "データの取得操作の前に発生します。"
  remarks: "そのため、パラメーターの値を検証する、アプリケーション固有の追加の初期化の操作を実行するを選択するとイベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、select 操作を実行します</xref:System.Web.UI.WebControls.SqlDataSource>。 Select の引数は、<xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって使用されているパラメーターを含むパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>プロパティから、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>オブジェクトに関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロール</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>。"
  remarks: "場合、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>プロパティは、パラメーター化された SQL クエリを含む、selectparameters のどのコレクションには、いずれかが含まれています<xref:System.Web.UI.WebControls.Parameter>SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト</xref:System.Web.UI.WebControls.Parameter></xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>。       ADO.NET プロバイダーによって SelectParameters コレクション内のパラメーターの順序が重要な可能性があります。 <xref:System.Data.OleDb?displayProperty=fullName>と<xref:System.Data.Odbc?displayProperty=fullName>プロバイダーがパラメーター化 SQL クエリで使用されるパラメーターの順序に従って、コレクション内のパラメーターを関連付けます</xref:System.Data.Odbc?displayProperty=fullName></xref:System.Data.OleDb?displayProperty=fullName>。 <xref:System.Data.SqlClient?displayProperty=fullName>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリ内のプレース ホルダーの別名を持つパラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       Selectparameters のどのプロパティを取得、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Selecting>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server by setting the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL query. The SQL query is parameterized and the placeholder in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property is matched to the <xref:System.Web.UI.WebControls.ControlParameter> object that is added to the SelectParameters collection. The <xref:System.Web.UI.WebControls.DropDownList> control, which the <xref:System.Web.UI.WebControls.ControlParameter> is bound to, acts as a filter for what is displayed in the <xref:System.Web.UI.WebControls.ListBox> control.  \n  \n For information about other types of parameters you can use, see the <xref:System.Web.UI.WebControls.Parameter> class overview.  \n  \n> [!NOTE]\n>  Because the parameter is used in a WHERE clause, the use of the SelectParameters property in the code example is functionally equivalent to using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1230_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1230_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>によって使用されるパラメーターを格納している、<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand*>。"
  overload: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはストアド プロシージャを使用してデータの取得が実行されるときに取得したデータの並べ替えに使用するストアド プロシージャ パラメーターの名前を設定します。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>プロパティが評価されるだけで、SQL コマンドに含まれる、<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>プロパティは、ストアド プロシージャの名前</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A></xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>。 この場合、SortParameterName プロパティが設定されている場合は、ストアド プロシージャの結果の並べ替えに使用されるパラメーターの名前を表します。       場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>プロパティが設定されて、前に付加、<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A></xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>。"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "ストアド プロシージャを使用してデータの取得が実行されるときに取得したデータの並べ替えに使用されるストアド プロシージャのパラメーターの名前。"
  overload: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得またはデータベースと Microsoft SQL Server のキャッシュ依存のために使用するテーブルを示す、セミコロンで区切られた文字列を設定します。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSource>コントロールに基づくオプションの有効期限ポリシーをサポートしている、 <xref:System.Web.Caching.SqlCacheDependency>(データベース サーバーのサービスを構成する必要があります)、データ キャッシュのオブジェクト</xref:System.Web.Caching.SqlCacheDependency></xref:System.Web.UI.WebControls.SqlDataSource>。       データベースと同じ形式で使用されるに従ってテーブルを識別する SqlCacheDependency 文字列、`@ Page`ディレクティブについては、ここで、文字列の最初の部分は、Microsoft SQL Server データベースへの接続文字列とそれに続くコロン区切り記号、および最後に、データベース テーブルの名前 (たとえば、 `&quot;connectionstring1:table1&quot;`)。 接続文字列とテーブル名のペアをセミコロンで区切られた SqlCacheDependency プロパティは、複数のテーブルに依存している場合 (たとえば、 `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`)。      > [!IMPORTANT] > Microsoft Windows 認証ではクライアントの偽装を使用するいると、データは、最初のユーザー データにアクセスするときにキャッシュされます。 別のユーザーは、同じデータを要求している場合は、データがキャッシュから取得されます。 データは、データへのユーザーのアクセスを確認するデータベースを別の呼び出しを行っては取得されません。 予定の場合、データにアクセスする&1; つ以上のユーザー、データベースのセキュリティ構成を検証するデータが取得されるたびにする、キャッシュを使用しません。"
  example:
  - "The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.SqlDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.SqlDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is refreshed by the <xref:System.Web.UI.WebControls.SqlDataSource> control the next time the database is polled.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_795_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_23sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_795_1.aspx)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "SQL Server のキャッシュの依存関係を使用するテーブルのどのデータベースを示す文字列。"
  overload: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "トラック状態の変更の表示、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>制御に変更を格納できるように、 <xref href=&quot;System.Web.UI.StateBag&quot;> </xref>コントロールのオブジェクト。"
  remarks: "TrackViewState メソッドをオーバーライドするコントロールのビュー ステートの一部としてコントロールに対する変更の追跡と保存を開始する開始位置をマークします。"
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "更新操作を使用して、実行、 <> </> *> 内にある SQL 文字列とパラメーター、 <> </> *> コレクション。"
  remarks: "Update メソッドは自動的に呼び出されます、 <xref:System.Web.UI.WebControls.GridView>、 <xref:System.Web.UI.WebControls.DetailsView>、および<xref:System.Web.UI.WebControls.FormView>ポストバック中にデータが変更されている場合を制御します</xref:System.Web.UI.WebControls.FormView></xref:System.Web.UI.WebControls.DetailsView></xref:System.Web.UI.WebControls.GridView>。 、その他のコントロールが変更されているデータの Update メソッドを明示的に呼び出せるポストバック中に、<xref:System.Windows.Forms.Form.Load>イベント。</xref:System.Windows.Forms.Form.Load>       更新操作を実行すると、前に、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Updating>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Updating></xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>。 パラメーターの値を確認し、更新操作の前に処理を実行するこのイベントを処理することができます。       更新操作の完了後、<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>させるメソッドが呼び出された、<xref:System.Web.UI.WebControls.SqlDataSource.Updated>イベント</xref:System.Web.UI.WebControls.SqlDataSource.Updated></xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>。 任意の戻り値およびエラー コードを調べ、後処理を実行するこのイベントを処理することができます。       更新メソッドのデリゲートを<xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>のメソッド、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>。 更新操作を実行する、<xref:System.Web.UI.WebControls.SqlDataSourceView>ビルド、<xref:System.Data.Common.DbCommand>オブジェクトを使用して、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>テキストと、関連付けられたすべて<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>プロパティ、し、実行、<xref:System.Data.Common.DbCommand>基になるデータベースに対してオブジェクト</xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A></xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A></xref:System.Data.Common.DbCommand></xref:System.Web.UI.WebControls.SqlDataSourceView>。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Updating>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Updating>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The second code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is set with a parameterized SQL statement, and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the Update method explicitly.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_1.aspx)]  \n  \n The following code example demonstrates how to display data that is retrieved from a SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_109_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_109_2.aspx)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "基になるデータベースで更新された行の数を表す値。"
  overload: System.Web.UI.WebControls.SqlDataSource.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>基になるデータ ソースとの接続を確立することはできません。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  id: UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定、SQL 文字列、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロールを使用して基になるデータベース内のデータを更新します。"
  remarks: "によって使用され、SQL クエリまたはストアド プロシージャの名前を表す、UpdateCommand、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>メソッド</xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>。       SQL 文字列の構文によって異なりますが、現在使用されている ADO.NET プロバイダーによって別のデータベースの製品では、異なる種類の SQL を使用するため、<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>。 SQL 文字列がパラメーター化されたクエリまたはコマンドの場合は、パラメーターのプレース ホルダーも使用している ADO.NET プロバイダーに依存します。 たとえば、プロバイダーは、<xref:System.Data.SqlClient?displayProperty=fullName>の既定のプロバイダーは、<xref:System.Web.UI.WebControls.SqlDataSource>クラス、パラメーターのプレース ホルダーは`&quot;@parameterName&quot;`</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 ただし、プロバイダーに設定されている場合、<xref:System.Data.Odbc?displayProperty=fullName>または<xref:System.Data.OleDb?displayProperty=fullName>、パラメーターのプレース ホルダーは`&quot;?&quot;`</xref:System.Data.OleDb?displayProperty=fullName></xref:System.Data.Odbc?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       UpdateCommand プロパティには、データ ソースには、ストアド プロシージャがサポートされている場合、SQL 文字列またはストアド プロシージャの名前を指定できます。       UpdateCommand プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>。      > [!IMPORTANT] > セキュリティのために、プロパティが格納されない UpdateCommand がビュー ステート。 クライアント上のビュー ステートの内容をデコードできるため、データベース構造に関する機密情報を格納すると、ビューに状態可能性があります、情報漏えいの脆弱性。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a Microsoft SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control.  \n  \n The following code example demonstrates how to set the UpdateCommand property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection, inferring the parameters from the <xref:System.Web.UI.WebControls.BoundField> objects, and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method when the **Update** link on the editable <xref:System.Web.UI.WebControls.GridView> is selected. This example also includes some post-processing: after a record is updated, a notification e-mail message is sent.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_1.aspx)]  \n  \n The following code example, which is functionally identical to the preceding code example, demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> is set to the ADO.NET provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>, and the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_301_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_301_2.aspx)]"
  syntax:
    content: public string UpdateCommand { get; set; }
    return:
      type: System.String
      description: "SQL の文字列を<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>を使用してデータを更新します。"
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  id: UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "取得または設定を示す値かどうかのテキスト、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>プロパティは、SQL ステートメントまたはストアド プロシージャの名前</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>。"
  remarks: "UpdateCommandType プロパティを委任する場合、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType%2A>。"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "1 つ、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。 既定値は、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;> </xref>値。"
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "更新操作が完了したときに発生します。"
  remarks: "出力パラメーターの値を確認して、更新操作が完了した後に更新されたイベントを処理します。 出力パラメーターは、<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>イベントに関連付けられているオブジェクト</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。"
  example:
  - "The following code example demonstrates how to display and update data that is retrieved from an ODBC database in a <xref:System.Web.UI.WebControls.GridView> control. After a record is successfully updated, the Updated event is handled by an event handler to perform a post-processing step where an e-mail notification is sent.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_103_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_103_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "によって使用されているパラメーターを含むパラメーターのコレクションを取得、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>プロパティから、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;> </xref>コントロールに関連付けられている、 <xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>コントロール</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>。"
  remarks: "場合、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>プロパティは、パラメーター化された SQL クエリを含む、UpdateParameters コレクションには、いずれかが含まれています<xref:System.Web.UI.WebControls.Parameter>SQL 文字列のパラメーターのプレース ホルダーに対応するオブジェクト</xref:System.Web.UI.WebControls.Parameter></xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>。       パラメーター名の影響を受ける、<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>具体的には、名前を使用して指定したキーなどの主キーを識別する場合は、プロパティ、`DataKeyNames`プロパティ、または削除、データ バインド コントロールの更新シナリオと場所、<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>プロパティに設定されている、<xref:System.Web.UI.ConflictOptions>値と一連の`oldValues`は対応するデータのメソッドに渡されます</xref:System.Web.UI.ConflictOptions></xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A></xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>。 各パラメーターの名前に、書式指定文字列を適用するこの例では、`oldValues`コレクション。       UpdateParameters コレクション内のパラメーターの順序は、ADO.NET プロバイダーによって、重要な可能性があります。 <xref:System.Data.OleDb?displayProperty=fullName>と<xref:System.Data.Odbc?displayProperty=fullName>プロバイダーがパラメーター化 SQL クエリで使用されるパラメーターの順序に従って、コレクション内のパラメーターを関連付けます</xref:System.Data.Odbc?displayProperty=fullName></xref:System.Data.OleDb?displayProperty=fullName>。 <xref:System.Data.SqlClient?displayProperty=fullName>プロバイダーは、既定の ADO.NET プロバイダーは、の<xref:System.Web.UI.WebControls.SqlDataSource>コントロールを SQL クエリ内のプレース ホルダーの別名を持つパラメーターの名前を照合することによって、コレクション内のパラメーターに関連付けます</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Data.SqlClient?displayProperty=fullName>。 パラメーター化された SQL クエリとコマンドの詳細については、次を参照してください。 [SqlDataSource コントロールを使用してパラメーター](~/add/includes/ajax-current-ext-md.md)です。       UpdateParameters プロパティの取得、<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>プロパティに含まれています、<xref:System.Web.UI.WebControls.SqlDataSourceView>オブジェクトに関連付けられている、<xref:System.Web.UI.WebControls.SqlDataSource>コントロール</xref:System.Web.UI.WebControls.SqlDataSource></xref:System.Web.UI.WebControls.SqlDataSourceView></xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 使用して、<xref:System.Web.UI.WebControls.SqlDataSource.Filtering>クエリを実行する前にパラメーター値を検証するイベントです</xref:System.Web.UI.WebControls.SqlDataSource.Filtering>。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> is set with a parameterized SQL statement and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the UpdateParameters collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method explicitly.  \n  \n> [!IMPORTANT]\n>  This example includes a text box that accepts user input, which is a potential security threat, and values are inserted into parameters without validation, which is also a potential security threat. Use the <xref:System.Web.UI.WebControls.SqlDataSource.Inserting> event to validate parameter values before executing the query. For more information, see [Script Exploits Overview](../Topic/Script%20Exploits%20Overview.md).  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1200_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1200_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>によって使用されるパラメーターを格納している、<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>プロパティ</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand*>。"
  overload: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "更新操作の前に発生します。"
  remarks: "そのため、パラメーターの値を検証する、アプリケーション固有の追加の初期化の操作を実行する、更新イベントを処理またはパラメーターを変更する前に値、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールは、更新操作を実行します</xref:System.Web.UI.WebControls.SqlDataSource>。 基になるデータ ソースへの接続がまだ開いていないイベント ハンドラー デリゲートが呼び出されるとします。 そのため、直接はキャンセルできません、<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>データベース操作を呼び出すことによって、<xref:System.Data.Common.DbCommand.Cancel%2A>メソッドを<xref:System.Data.Common.DbCommand>によって公開されるオブジェクト、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>オブジェクト</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs></xref:System.Data.Common.DbCommand></xref:System.Data.Common.DbCommand.Cancel%2A></xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>。 ただしを設定して、データベースの操作をキャンセルできます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>に`true`</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A>。       イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。      > [!IMPORTANT] > 潜在的なセキュリティ上の脅威が検証を伴わないパラメーターに値が挿入されます。 クエリを実行する前にパラメーター値を検証するのにには、更新イベントを使用します。 詳細については、次を参照してください。[スクリプト悪用概要](~/add/includes/ajax-current-ext-md.md)です。"
  example:
  - "The following code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_75_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_75_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource()
  nameWithType: SqlDataSource.SqlDataSource()
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource()
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor(System.String,System.String,System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource(String,String,String)
  nameWithType: SqlDataSource.SqlDataSource(String,String,String)
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlDataSource(String,String,String)
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
  fullName: System.Web.UI.WebControls.SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView(String)
  nameWithType: SqlDataSource.CreateDataSourceView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView(String)
- uid: System.Web.UI.WebControls.SqlDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceView
  nameWithType: SqlDataSourceView
  fullName: System.Web.UI.WebControls.SqlDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSourceMode
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceMode
  nameWithType: SqlDataSourceMode
  fullName: System.Web.UI.WebControls.SqlDataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete()
  nameWithType: SqlDataSource.Delete()
  fullName: System.Web.UI.WebControls.SqlDataSource.Delete()
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceCommandType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandType
  nameWithType: SqlDataSourceCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Deleted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleted
  nameWithType: SqlDataSource.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleted
- uid: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceStatusEventHandler
  nameWithType: SqlDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.SqlDataSource.Deleting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Deleting
  nameWithType: SqlDataSource.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSource.Deleting
- uid: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandEventHandler
  nameWithType: SqlDataSourceCommandEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.Filtering
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Filtering
  nameWithType: SqlDataSource.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSource.Filtering
- uid: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceFilteringEventHandler
  nameWithType: SqlDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory()
  nameWithType: SqlDataSource.GetDbProviderFactory()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory()
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: SqlDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.SqlDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: SqlDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.SqlDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.SqlDataSource.Insert
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert()
  nameWithType: SqlDataSource.Insert()
  fullName: System.Web.UI.WebControls.SqlDataSource.Insert()
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Inserted
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserted
  nameWithType: SqlDataSource.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserted
- uid: System.Web.UI.WebControls.SqlDataSource.Inserting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Inserting
  nameWithType: SqlDataSource.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSource.Inserting
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: SqlDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: SqlDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
  fullName: System.Web.UI.WebControls.SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: SqlDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSource.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSource.Select(DataSourceSelectArguments)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.DataSourceSelectArguments
  parent: System.Web.UI
  isExternal: false
  name: DataSourceSelectArguments
  nameWithType: DataSourceSelectArguments
  fullName: System.Web.UI.DataSourceSelectArguments
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Selected
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selected
  nameWithType: SqlDataSource.Selected
  fullName: System.Web.UI.WebControls.SqlDataSource.Selected
- uid: System.Web.UI.WebControls.SqlDataSource.Selecting
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Selecting
  nameWithType: SqlDataSource.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSource.Selecting
- uid: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceSelectingEventHandler
  nameWithType: SqlDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: SqlDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.SqlDataSource.Update
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update()
  nameWithType: SqlDataSource.Update()
  fullName: System.Web.UI.WebControls.SqlDataSource.Update()
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.Updated
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updated
  nameWithType: SqlDataSource.Updated
  fullName: System.Web.UI.WebControls.SqlDataSource.Updated
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.SqlDataSource.Updating
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Updating
  nameWithType: SqlDataSource.Updating
  fullName: System.Web.UI.WebControls.SqlDataSource.Updating
- uid: System.Web.UI.WebControls.SqlDataSource.#ctor*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlDataSource
  nameWithType: SqlDataSource.SqlDataSource
- uid: System.Web.UI.WebControls.SqlDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: SqlDataSource.CacheDuration
- uid: System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: SqlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.SqlDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: SqlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSource.CancelSelectOnNullParameter
- uid: System.Web.UI.WebControls.SqlDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.SqlDataSource.ConnectionString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ConnectionString
  nameWithType: SqlDataSource.ConnectionString
- uid: System.Web.UI.WebControls.SqlDataSource.CreateDataSourceView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: CreateDataSourceView
  nameWithType: SqlDataSource.CreateDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSource.DataSourceMode*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DataSourceMode
  nameWithType: SqlDataSource.DataSourceMode
- uid: System.Web.UI.WebControls.SqlDataSource.Delete*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Delete
  nameWithType: SqlDataSource.Delete
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSource.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSource.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.SqlDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: SqlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.SqlDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSource.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSource.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSource.GetDbProviderFactory*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetDbProviderFactory
  nameWithType: SqlDataSource.GetDbProviderFactory
- uid: System.Web.UI.WebControls.SqlDataSource.GetView*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetView
  nameWithType: SqlDataSource.GetView
- uid: System.Web.UI.WebControls.SqlDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: SqlDataSource.GetViewNames
- uid: System.Web.UI.WebControls.SqlDataSource.Insert*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Insert
  nameWithType: SqlDataSource.Insert
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSource.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSource.InsertCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSource.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSource.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: SqlDataSource.LoadViewState
- uid: System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSource.OnInit*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: OnInit
  nameWithType: SqlDataSource.OnInit
- uid: System.Web.UI.WebControls.SqlDataSource.ProviderName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: ProviderName
  nameWithType: SqlDataSource.ProviderName
- uid: System.Web.UI.WebControls.SqlDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: SqlDataSource.SaveViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Select*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Select
  nameWithType: SqlDataSource.Select
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSource.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSource.SelectCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSource.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSource.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSource.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: SqlDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.SqlDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: SqlDataSource.TrackViewState
- uid: System.Web.UI.WebControls.SqlDataSource.Update*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: Update
  nameWithType: SqlDataSource.Update
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommand*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSource.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateCommandType*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSource.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.SqlDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSource.UpdateParameters
