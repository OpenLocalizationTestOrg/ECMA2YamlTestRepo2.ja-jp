### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowInstance
  id: WorkflowInstance
  children:
  - System.Workflow.Runtime.WorkflowInstance.Abort
  - System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  - System.Workflow.Runtime.WorkflowInstance.GetHashCode
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  - System.Workflow.Runtime.WorkflowInstance.InstanceId
  - System.Workflow.Runtime.WorkflowInstance.Load
  - System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  - System.Workflow.Runtime.WorkflowInstance.Resume
  - System.Workflow.Runtime.WorkflowInstance.Start
  - System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  - System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  - System.Workflow.Runtime.WorkflowInstance.TryUnload
  - System.Workflow.Runtime.WorkflowInstance.Unload
  - System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  langs:
  - csharp
  name: WorkflowInstance
  nameWithType: WorkflowInstance
  fullName: System.Workflow.Runtime.WorkflowInstance
  type: Class
  summary: "ワークフロー インスタンスを表します。"
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]WorkflowInstance クラス メソッドと、ワークフロー インスタンスの実行を制御するために使用するプロパティを公開します。ワークフロー ランタイム エンジンによって使用される実際のワークフロー インスタンスのプロキシ本質的にすることをお勧めします。 ホストまたはサービスは、WorkflowInstance クラスに含まれている適切なメソッドを呼び出すことによって、ワークフロー インスタンスで操作を行うとき、ワークフロー ランタイム エンジンに指示できます。  要求された操作が無効な場合、たとえば、ホストが呼び出した場合<xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>で既に完了しているワークフロー インスタンス、ワークフロー ランタイム エンジンで適切な例外が発生します</xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>。      > [!NOTE] > インスタンスを修復する唯一の方法は、ランタイムを再起動する場合は、ホスト アプリケーションで呼び出しても返されないために、ワークフロー インスタンスが応答しなくなった、します。 ただし場合は、インスタンスが強制的にアンロードされました、中止、または中断すると、それを続行できますを呼び出して、<xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>メソッド</xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>。"
  example:
  - "The following code example demonstrates how you can create and start a WorkflowInstance in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a WorkflowInstance object. The code initializes WorkflowInstance by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The WorkflowInstance is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class WorkflowInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  id: Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "ワークフロー インスタンスを中止します。"
  remarks: "同期的にワークフロー インスタンスが中止されましたつまり、このメソッドは、ワークフロー インスタンスが中止された後を返します。 ワークフロー ランタイム エンジンは、メモリ内のワークフロー インスタンスを無効にし、 <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>。</xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>をクリア 永続性サービスが、ワークフロー インスタンスによって使用された場合は、最後の永続化ポイントが破棄後にすべての作業が行わします。 ワークフロー ランタイム エンジンが発生したワークフロー インスタンスが中止された後、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>イベント</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>。 呼び出すことができます<xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>をワークフロー インスタンスを再読み込みしてその最後の永続性ポイントから開始します</xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>。       `Abort`異なる<xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>で`Abort`単にメモリ内のワークフロー インスタンスをクリアし、再開できる、最後の永続性ポイントから Terminate はメモリ内のワークフロー インスタンスをクリアし、永続性サービス インスタンスがメモリからクリアされたことが通知されます</xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>。 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>、つまりそのワークフロー インスタンスのすべての状態情報は、終了時にデータベースから削除します</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>。 以前に保存された永続性ポイントからワークフロー インスタンスを再度読み込んでできなきます。"
  example:
  - "The following example demonstrates calling Abort on a workflow instance of type Workflow1.  \n  \n [!code-cs[WF_Samples#13](~/add/codesnippet/csharp/wf_snippets/snippets.cs#13)]\n [!code-vb[WF_Samples#13](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#13)]"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "指定したワークフロー インスタンスに変更を適用、 <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref>オブジェクト。"
  remarks: "ワークフロー インスタンスが既に中断されていない場合、ワークフロー ランタイム エンジンは、変更を適用する前にインスタンスを一時的に中断します。"
  example:
  - "The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#89](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#89)]\n [!code-vb[WF_Samples#89](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#89)]"
  syntax:
    content: public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);
    parameters:
    - id: workflowChanges
      type: System.Workflow.ComponentModel.WorkflowChanges
      description: "A <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref>ワークフロー インスタンスの動的更新を指定します。"
  overload: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "指定したワークフロー キューへのメッセージを同期的に送信します。"
  remarks: "送信、`item`指定<xref:System.Workflow.Runtime.WorkflowQueue></xref:System.Workflow.Runtime.WorkflowQueue>。 メッセージが配信されたときに通知する場合は、実装<xref:System.Workflow.Runtime.IPendingWork>サービスおよびパスで、`workItem`と<xref:System.Workflow.Runtime.IPendingWork>EnqueueItem するオブジェクト</xref:System.Workflow.Runtime.IPendingWork></xref:System.Workflow.Runtime.IPendingWork>。 このような通知したくない場合は、null 参照を渡すことができます (`Nothing` Visual Basic で) の`pendingWork`と`workItem`です。       このメソッドをステート マシン ワークフローを使用する場合は、メッセージで「キュー &quot;&0;&quot;} は無効です」例外をする可能性があります。 これは、ステート マシンの現在の状態が特定のイベントを処理する方法を認識していない場合に発生します。 たとえば、現在の状態以外の状態が含まれる場合、<xref:System.Workflow.Activities.EventDrivenActivity>を格納している、 <xref:System.Workflow.Activities.HandleExternalEventActivity>&quot;&0;&quot;} キューによって表される</xref:System.Workflow.Activities.HandleExternalEventActivity></xref:System.Workflow.Activities.EventDrivenActivity>。      > [!NOTE] > メッセージが送信された順序でワークフロー インスタンスによって受信される保証はありません。 たとえば、既存のメッセージの受信キュー (キュー A) の原因として、別のメッセージをリッスンしている別のキュー (キュー B) を作成するためのワークフローが最初のメッセージの後に送信されたが場合、可能性&2; 番目のメッセージが届きます。 最初に、そのキューがまだ作成されていないためが受信されずです。 この問題を防ぐためには、2 番目のメッセージは送信されません&2; 番目のキューの存在を確認するまで (を使用して<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>"
  example:
  - "The following code example demonstrates how to use EnqueueItem. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the EnqueueItem method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "名前、 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>です。"
    - id: item
      type: System.Object
      description: "エンキューするオブジェクト。"
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref>送信者をできるようにするときに通知する`item`配信されます。"
    - id: workItem
      type: System.Object
      description: "渡されるオブジェクトの<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;></xref>メソッドです。"
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。       - または -、 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>によって指定された<code> queueName </code>存在しません。       - または -、 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>によって指定された<code> queueName </code>有効ではありません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "ワークフローがアイドル状態のときは、指定したワークフロー キューへのメッセージをポストします。 EnqueueItemOnIdle、ワークフローがワークフローのスケジューラがアイドル状態であることを確認したら、アイドル ポイントとのキューに入れますに到達するまでの待機 (つまり、アクティブな操作が実行されていない)。"
  remarks: "ワークフロー インスタンスをアイドル状態になるを待機し、送信、`item`指定<xref:System.Workflow.Runtime.WorkflowQueue></xref:System.Workflow.Runtime.WorkflowQueue>。 EnqueueItemOnIdle を呼び出すと、ワークフロー インスタンスが中断されている間、ワークフロー ランタイム エンジンが<xref:System.InvalidOperationException>。</xref:System.InvalidOperationException>スローされます。 メッセージが配信されたときに通知する場合は、実装<xref:System.Workflow.Runtime.IPendingWork>サービスおよびパスで、`workItem`と<xref:System.Workflow.Runtime.IPendingWork><xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A></xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>オブジェクト</xref:System.Workflow.Runtime.IPendingWork></xref:System.Workflow.Runtime.IPendingWork>。 このような通知したくない場合は、null 参照を渡すことができます (`Nothing` Visual Basic で) の`pendingWork`と`workItem`です。       このメソッドをステート マシン ワークフローを使用しているときに、「キュー &quot;&0;&quot;} は無効です」メッセージを含む例外を取得する可能性があります。 これは、ステート マシンの現在の状態が特定のイベントを処理する方法を認識していない場合に発生します。 たとえば、現在の状態以外の状態が含まれる場合、<xref:System.Workflow.Activities.EventDrivenActivity>を格納している、 <xref:System.Workflow.Activities.HandleExternalEventActivity>&quot;&0;&quot;} キューによって表される</xref:System.Workflow.Activities.HandleExternalEventActivity></xref:System.Workflow.Activities.EventDrivenActivity>。"
  example:
  - "The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method. First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created. `EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  \n  \n [!code-cs[WF_Samples#12](~/add/codesnippet/csharp/wf_snippets/snippets.cs#12)]\n [!code-vb[WF_Samples#12](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#12)]"
  syntax:
    content: public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "名前、 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;></xref>です。"
    - id: item
      type: System.Object
      description: "エンキューするオブジェクト。"
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref>送信者をできるようにするときに通知する`item`配信されます。"
    - id: workItem
      type: System.Object
      description: "渡されるオブジェクトの<xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;></xref>メソッドです。"
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>null 参照 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> Visual Basic で)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。       または、ワークフロー インスタンスを中断します。       - または -、 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>によって指定された<code> queueName </code>存在しません。       - または -、 <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>によって指定された<code> queueName </code>有効ではありません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "指定したオブジェクトが等しいかどうかを示す値を返します、 <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref>です。"
  remarks: "オブジェクトの<xref:System.Workflow.Runtime.WorkflowInstance>クラスし同じ<xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A><xref:System.Workflow.Runtime.WorkflowInstance>。</xref:System.Workflow.Runtime.WorkflowInstance></xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>がある</xref:System.Workflow.Runtime.WorkflowInstance>インスタンスでなければなりません"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "比較するオブジェクト。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定したオブジェクトがこれに等しい場合<xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Workflow.Runtime.WorkflowInstance.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  id: GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "このワークフロー インスタンスのハッシュ コードを返します。"
  remarks: "GetHashCode は<xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>。</xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>値に基づいてハッシュ コードを返します"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "ハッシュ コードをこの<xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref>です。"
  overload: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  id: GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "このワークフロー インスタンスのルート アクティビティを取得します。"
  remarks: "ルート アクティビティを使用すると、ワークフローのアクティビティ階層を移動します。       このメソッドはスレッド セーフである、ホストはこのメソッドの呼び出しを同期するためです。"
  example:
  - "The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#86](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#86)]\n [!code-vb[WF_Samples#86](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#86)]"
  syntax:
    content: public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();
    parameters: []
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "<xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref>オブジェクト。"
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  id: GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "次の特定時点を返します。 時刻のこの<xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref>タイマー メッセージを配信するようにスケジュールします。"
  remarks: ''
  example:
  - "The following example demonstrates using the GetWorkflowNextTimerExpiration method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  \n  \n [!code-cs[WF_Samples#284](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#284)]\n [!code-vb[WF_Samples#284](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#284)]"
  syntax:
    content: public DateTime GetWorkflowNextTimerExpiration ();
    parameters: []
    return:
      type: System.DateTime
      description: "次を表す DateTime 値<xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>この時間を計測<xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;></xref>タイマー メッセージを配信する</xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>。"
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  id: GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "コレクションを取得<xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;></xref>で保留中の項目を含み、ワークフロー キューの活動がサブスクライブしているオブジェクトは、このワークフロー インスタンスに関連付けられています。"
  remarks: "GetWorkflowQueueData がのコレクションを返します<xref:System.Workflow.Runtime.WorkflowQueueInfo>オブジェクト、それぞれがこのワークフロー インスタンスに関連付けられたワークフロー キューのいずれかの状態に関する情報が含まれています</xref:System.Workflow.Runtime.WorkflowQueueInfo>。 <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName><xref:System.Workflow.Runtime.WorkflowQueue> <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> <xref:System.Workflow.Runtime.WorkflowQueue>。</xref:System.Workflow.Runtime.WorkflowQueue>項目配信のサブスクライブされたをアクティビティのリスト</xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName>が含まれる</xref:System.Workflow.Runtime.WorkflowQueue>保留中の項目が含まれています</xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can use the GetWorkflowQueueData method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the GetWorkflowQueueData method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo> GetWorkflowQueueData ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;の<xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;></xref>オブジェクト。"
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  id: InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "ワークフロー インスタンスの一意の識別子を取得します。"
  remarks: "InstanceId を使用して、ワークフロー インスタンスを参照することができます。"
  example:
  - "The following code example demonstrates how you can use the InstanceId property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object. The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.  \n  \n [!code-cs[WF_Samples#210](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#210)]\n [!code-vb[WF_Samples#210](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#210)]  \n  \n The second snippet uses the InstanceId property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.  \n  \n This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see [Listen Sample](http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f).  \n  \n [!code-cs[WF_Samples#211](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#211)]\n [!code-vb[WF_Samples#211](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#211)]"
  syntax:
    content: public Guid InstanceId { get; }
    return:
      type: System.Guid
      description: "<xref:System.Guid>ワークフロー インスタンスの</xref:System.Guid>。"
  overload: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  id: Load
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "以前にアンロードされたワークフロー インスタンスを読み込みます。"
  remarks: "負荷が同期的です。ワークフロー インスタンスを読み込むことができるの負荷では、ワークフロー インスタンスがメモリに読み込まれてワークフロー ランタイム エンジンによってスケジュールされた後に返します。 ランタイムを発生させる、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>永続性サービスが、メモリ内のワークフロー インスタンスに復元が、ワークフローの前にランタイム エンジン インスタンスをスケジュールし、後で、イベント</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>。"
  example:
  - "The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#10](~/add/codesnippet/csharp/wf_snippets/snippets.cs#10)]\n [!code-vb[WF_Samples#10](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#10)]"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Load*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  id: ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "このワークフロー インスタンスの追跡プロファイルを再読み込みされます。"
  remarks: "各ランタイム追跡インフラストラクチャは再読み込み<xref:System.Workflow.Runtime.Tracking.TrackingProfile>追跡チャネルに関連付けられているこのワークフロー インスタンスに関して</xref:System.Workflow.Runtime.Tracking.TrackingProfile>。 そうでない既に中断状態の場合、ランタイム追跡インフラストラクチャが追跡プロファイルが再度読み込まれるときに、ワークフローが一時的に中断します。"
  syntax:
    content: public void ReloadTrackingProfiles ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  id: Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "以前に中断されたワークフロー インスタンスの実行を再開します。"
  remarks: "ホストは、以前に中断するワークフロー インスタンスの実行を再開する Resume を呼び出すことができます。 ワークフロー インスタンスが中断状態にない場合は、処理は行われません。 ランタイムを発生させる、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>イベント、ワークフロー インスタンスの実行を再開する前にします</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>。"
  example:
  - "The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  \n  \n [!code-cs[WF_Samples#172](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#172)]\n [!code-vb[WF_Samples#172](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#172)]"
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Resume*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  id: Start
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "ワークフロー インスタンスの実行を開始します。"
  remarks: "呼び出しを開始<xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>このワークフロー インスタンスのルート アクティビティ上</xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>。 開始には、例外が発生すると、呼び出すことによって、ワークフロー インスタンスを終了<xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>で、<xref:System.Exception.Message%2A>は終了の理由として渡された例外のプロパティ</xref:System.Exception.Message%2A></xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>。"
  example:
  - "The following code example demonstrates how you can use the Start method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the Start method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。       または、ワークフロー インスタンスが既に開始されています。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  id: Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "ワークフロー インスタンスを中断します。"
  remarks: "ワークフロー インスタンスは同期式で中断します。 ワークフロー インスタンスが既に中断されている場合、アクションは実行されません。それ以外の場合、ワークフロー ランタイム エンジンが発生し、ワークフロー インスタンスを中断、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>イベントおよびパス`reason` <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs></xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> 。      > [!NOTE] > 中断では、ワークフロー インスタンスはアンロードされません。"
  example:
  - "The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#9](~/add/codesnippet/csharp/wf_snippets/snippets.cs#9)]\n [!code-vb[WF_Samples#9](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#9)]"
  syntax:
    content: public void Suspend (string error);
    parameters:
    - id: error
      type: System.String
      description: "ワークフロー インスタンスを中断する理由の説明です。"
  overload: System.Workflow.Runtime.WorkflowInstance.Suspend*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  id: Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "ワークフロー インスタンスを同期式で終了します。"
  remarks: "ワークフロー インスタンスは同期式で終了します。 ホストが呼び出したワークフロー インスタンスを終了する終了します。 ワークフロー ランタイム エンジンは、メモリ内のワークフロー インスタンスをクリアし、インスタンスがメモリからクリアされたことを永続性サービスに通知します。 <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>、つまりそのワークフロー インスタンスのすべての状態情報は、終了時にデータベースから削除します</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>。 以前に保存された永続性ポイントからワークフロー インスタンスを再度読み込んでできなきます。       メモリ内のワークフロー インスタンスがクリアされ、永続性サービスは、終了の通知後、`Terminate`メソッドが発生し、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>イベントを渡します`reason` <xref:System.Exception.Message%2A> <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>内</xref:System.Workflow.ComponentModel.WorkflowTerminatedException>のプロパティ</xref:System.Exception.Message%2A>で</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>       `Terminate`異なる<xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>を終了することで、メモリ内のワークフロー インスタンスをクリアし、終了の永続性サービスに通知`Abort`最後の永続性ポイントから再開することができますし、メモリ内のワークフローのインスタンスをクリアするだけです</xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>。"
  example:
  - "The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#8](~/add/codesnippet/csharp/wf_snippets/snippets.cs#8)]\n [!code-vb[WF_Samples#8](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#8)]"
  syntax:
    content: public void Terminate (string error);
    parameters:
    - id: error
      type: System.String
      description: "ワークフロー インスタンスを終了する理由の説明です。"
  overload: System.Workflow.Runtime.WorkflowInstance.Terminate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンが実行されていません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  id: TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "インスタンスが中断状態またはアイドル状態のときは、ワークフロー インスタンスをメモリから永続化ストアをアンロードします。"
  remarks: "ワークフロー インスタンスがアイドル状態または中断された場合、TryUnload はメモリからワークフロー インスタンスを削除し、データ ストアに保持できる永続性サービスを使用します。 この<xref:System.Workflow.Runtime.WorkflowRuntime>、TryUnload スロー <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Workflow.Runtime.WorkflowRuntime>に登録されている永続性サービスがないかどうか ランタイムを発生させる場合は、ワークフロー インスタンスが正常に永続化、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>イベント、および返します`true`</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>。 <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>返します`false`が終了した場合は、ワークフロー インスタンスが既にアンロードされてが中止されました。 または、既に完了します。</xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>       ホストは、システム リソースがアイドル状態のワークフローを再利用を TryUnload を使用できます。"
  example:
  - "The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  \n  \n [!code-cs[WF_Samples#280](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#280)]\n [!code-vb[WF_Samples#280](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#280)]"
  syntax:
    content: public bool TryUnload ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ワークフロー インスタンスが読み込まれた場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンに登録されている永続性サービスはありません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  id: Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "永続化ストアにメモリからワークフロー インスタンスをアンロードします。 現在のスケジュール済み作業が完了したら、までこの呼び出しをブロックまたはトランザクション スコープの最後。"
  remarks: "Unload は同期式です。つまりを実行するアクションが完了した後を返します。 ワークフロー インスタンスがアイドル状態でない場合、ランタイムは、インスタンスを中断できるまで待機します。 現在のスケジュール済み作業項目の完了後に、インスタンスを中断できることができますのみこれは、通常、現在実行中のアクティビティがから返されるときにその<xref:System.Workflow.ComponentModel.Activity.Execute%2A>メソッド</xref:System.Workflow.ComponentModel.Activity.Execute%2A>。 ただし、インスタンスが実行されている場合、 <xref:System.Workflow.ComponentModel.TransactionScopeActivity>、インスタンスを中断する前に、トランザクション スコープが実行を完了する必要があります</xref:System.Workflow.ComponentModel.TransactionScopeActivity>。 アンロードは、永続性サービスを使用して、ワークフロー インスタンスをメモリから削除し、データ ストアに永続化します。 この<xref:System.Workflow.Runtime.WorkflowRuntime>、アンロード スロー <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Workflow.Runtime.WorkflowRuntime>に登録されている永続性サービスがないかどうか ランタイムを発生させる場合は、ワークフロー インスタンスが正常に永続化、<xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>イベント</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>。       ホストは、アンロードを使用して、システム リソースがアイドル状態のワークフローを再利用できます。"
  example:
  - "The following example demonstrates calling Unload on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#11](~/add/codesnippet/csharp/wf_snippets/snippets.cs#11)]\n [!code-vb[WF_Samples#11](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#11)]"
  syntax:
    content: public void Unload ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Unload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ワークフロー ランタイム エンジンに登録されている永続性サービスはありません。"
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  id: WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "取得、 <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref>このワークフロー インスタンスのです。"
  remarks: ''
  example:
  - "The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#7](~/add/codesnippet/csharp/wf_snippets/snippets.cs#7)]\n [!code-vb[WF_Samples#7](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#7)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }
    return:
      type: System.Workflow.Runtime.WorkflowRuntime
      description: "A <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref>このワークフロー インスタンスが実行されている実行環境を表すです。"
  overload: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
- uid: System.Workflow.ComponentModel.WorkflowChanges
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowChanges
  nameWithType: WorkflowChanges
  fullName: System.Workflow.ComponentModel.WorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.IPendingWork
  parent: System.Workflow.Runtime
  isExternal: false
  name: IPendingWork
  nameWithType: IPendingWork
  fullName: System.Workflow.Runtime.IPendingWork
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<WorkflowQueueInfo>
  nameWithType: ReadOnlyCollection<WorkflowQueueInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Runtime.WorkflowQueueInfo
    name: WorkflowQueueInfo
    nameWithType: WorkflowQueueInfo
    fullName: WorkflowQueueInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowRuntime
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowInstance.Abort*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort
  nameWithType: WorkflowInstance.Abort
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges
  nameWithType: WorkflowInstance.ApplyWorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem
  nameWithType: WorkflowInstance.EnqueueItem
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle
  nameWithType: WorkflowInstance.EnqueueItemOnIdle
- uid: System.Workflow.Runtime.WorkflowInstance.Equals*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals
  nameWithType: WorkflowInstance.Equals
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode
  nameWithType: WorkflowInstance.GetHashCode
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition
  nameWithType: WorkflowInstance.GetWorkflowDefinition
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData
  nameWithType: WorkflowInstance.GetWorkflowQueueData
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
- uid: System.Workflow.Runtime.WorkflowInstance.Load*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load
  nameWithType: WorkflowInstance.Load
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles
  nameWithType: WorkflowInstance.ReloadTrackingProfiles
- uid: System.Workflow.Runtime.WorkflowInstance.Resume*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume
  nameWithType: WorkflowInstance.Resume
- uid: System.Workflow.Runtime.WorkflowInstance.Start*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start
  nameWithType: WorkflowInstance.Start
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend
  nameWithType: WorkflowInstance.Suspend
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate
  nameWithType: WorkflowInstance.Terminate
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload
  nameWithType: WorkflowInstance.TryUnload
- uid: System.Workflow.Runtime.WorkflowInstance.Unload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload
  nameWithType: WorkflowInstance.Unload
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
