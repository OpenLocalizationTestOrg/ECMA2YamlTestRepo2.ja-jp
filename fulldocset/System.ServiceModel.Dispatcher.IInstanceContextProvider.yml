### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider
  id: IInstanceContextProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  langs:
  - csharp
  name: IInstanceContextProvider
  nameWithType: IInstanceContextProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider
  type: Interface
  summary: "作成または選択に参加するために実装する&lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;共有セッションを有効にするには、特にのオブジェクト。"
  remarks: "適切なを提供する IInstanceContextProvider インターフェイスを実装して<xref:System.ServiceModel.InstanceContext?displayProperty=fullName>をシステム オブジェクトです</xref:System.ServiceModel.InstanceContext?displayProperty=fullName>。 通常、このインターフェイスは、共有セッションのサポート、サービス インスタンス プールを有効にする、またはクライアントの間でのコンテキストのグループにサービス インスタンスの有効期間の制御に実装されます。       たとえば、共有を実装するどのセッションまたはクライアントからの呼び出しに関連付けられているかを決定するカスタム IInstanceContextProvider を挿入<xref:System.ServiceModel.InstanceContext>オブジェクト</xref:System.ServiceModel.InstanceContext>。 インスタンス コンテキストの共有の例は、次を参照してください。 [InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)です。      > [!NOTE] > ときの IInstanceContextProvider が挿入される[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]の作成を制御する通常のプロパティ<xref:System.ServiceModel.InstanceContext>オブジェクト (、<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>プロパティ) は検査されなくなり、影響を与えません</xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName></xref:System.ServiceModel.InstanceContext>。       初期化することができますより汎用的なメカニズム<xref:System.ServiceModel.InstanceContext>オブジェクト作成時に (たとえば、それぞれにカスタム拡張機能をアタッチする<xref:System.ServiceModel.InstanceContext>) <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName>.</xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=fullName>は、</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public interface IInstanceContextProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "新しいメッセージが受信したときに呼び出されます。"
  remarks: "GetExistingInstanceContext メソッドは、メッセージが受信したときに呼び出されます。 返す、<xref:System.ServiceModel.InstanceContext>メッセージを処理することをオブジェクトまたは`null`</xref:System.ServiceModel.InstanceContext>。 場合、 `null`、[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]新たに作成<xref:System.ServiceModel.InstanceContext>オブジェクトをメッセージを呼び出し、続いて、<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A>メソッド</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A></xref:System.ServiceModel.InstanceContext>。       返す場合`null`、新しい<xref:System.ServiceModel.InstanceContext>オブジェクトがスロットル システムが組まれ<xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName>.</xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName>のカウントをインクリメント</xref:System.ServiceModel.InstanceContext>"
  syntax:
    content: public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "受信メッセージ。"
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "メッセージを受信したチャネル。"
    return:
      type: System.ServiceModel.InstanceContext
      description: "&lt;Xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;返し以外のメッセージを処理するために使用できるオブジェクト<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>に指示する[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]新しい<xref:System.ServiceModel.InstanceContext>オブジェクト</xref:System.ServiceModel.InstanceContext>。"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  id: InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "ときに呼び出されます<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>から返される、<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>メソッド</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*>。"
  remarks: "InitializeInstanceContext ときに呼び出される<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>返します`null`され、新しい<xref:System.ServiceModel.InstanceContext>オブジェクトを作成します</xref:System.ServiceModel.InstanceContext></xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A>。 通知するようにこのメソッドを新しい<xref:System.ServiceModel.InstanceContext>が作成されました</xref:System.ServiceModel.InstanceContext>。"
  syntax:
    content: public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "新しい&lt;xref:System.ServiceModel.InstanceContext?displayProperty=fullName&gt;オブジェクト。"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "受信メッセージ。"
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "メッセージを受信したチャネル。"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  id: IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "ときに呼び出されますすべて<xref:System.ServiceModel.InstanceContext>を防ぐために実装を有効にするアクティビティが完了した、<xref:System.ServiceModel.InstanceContext>がリサイクルされない</xref:System.ServiceModel.InstanceContext></xref:System.ServiceModel.InstanceContext>。"
  remarks: "ときに呼び出される[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]が閉じてリサイクル、アイドル状態の<xref:System.ServiceModel.InstanceContext>オブジェクトのランタイム切らないでの作業を続行するかどうか必ず知らせておくように</xref:System.ServiceModel.InstanceContext>しよう       インスタンス コンテキストの共有の例は、次を参照してください。 [InstanceContextSharing](http://msdn.microsoft.com/en-us/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230)です。"
  syntax:
    content: public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "<xref:System.ServiceModel.InstanceContext>アイドル状態になっているオブジェクト</xref:System.ServiceModel.InstanceContext>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]を閉じてリサイクルし、<xref:System.ServiceModel.InstanceContext>オブジェクトし、の値を調整&lt;xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=fullName&gt;、それ以外の<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref></xref:System.ServiceModel.InstanceContext> 。"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  id: NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  langs:
  - csharp
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "ときに呼び出されます、<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*>メソッドを返します<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>に通知するコールバックを提供する実装を有効にする[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]ときに、<xref:System.ServiceModel.InstanceContext>オブジェクトが完了した。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*> 。"
  remarks: "NotifyIdle メソッドが呼び出されます、<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>メソッドを返します`false`を提供するために[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]で、<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>オブジェクトのランタイムを通知するために使用することを、<xref:System.ServiceModel.InstanceContext>作業を完了した。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName> </xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> 。 ときに、<xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>オブジェクト、ランタイムに通知する、 <xref:System.ServiceModel.InstanceContext>、作業を完了した[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]呼び出し<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>もう一度</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A></xref:System.ServiceModel.InstanceContext></xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=fullName>。 このサイクルまで<xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>を返します`true`コンテキストが閉じられ、再利用されるとします</xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A>。"
  syntax:
    content: public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: callback
      type: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
      description: "<xref href=&quot;System.ServiceModel.Dispatcher.InstanceContextIdleCallback&quot;> </xref>オブジェクトに通知する[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]ときに、<xref:System.ServiceModel.InstanceContext>オブジェクトが閉じ、再利用する</xref:System.ServiceModel.InstanceContext>。"
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "現在<xref:System.ServiceModel.InstanceContext>。</xref:System.ServiceModel.InstanceContext>"
  overload: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext(Message,IContextChannel)
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message,IContextChannel)
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.IContextChannel
  parent: System.ServiceModel
  isExternal: true
  name: IContextChannel
  nameWithType: IContextChannel
  fullName: System.ServiceModel.IContextChannel
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  nameWithType: IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext,Message,IContextChannel)
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle(InstanceContext)
  nameWithType: IInstanceContextProvider.IsIdle(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  nameWithType: IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback,InstanceContext)
- uid: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: InstanceContextIdleCallback
  nameWithType: InstanceContextIdleCallback
  fullName: System.ServiceModel.Dispatcher.InstanceContextIdleCallback
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: GetExistingInstanceContext
  nameWithType: IInstanceContextProvider.GetExistingInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: InitializeInstanceContext
  nameWithType: IInstanceContextProvider.InitializeInstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: IsIdle
  nameWithType: IInstanceContextProvider.IsIdle
- uid: System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle*
  parent: System.ServiceModel.Dispatcher.IInstanceContextProvider
  isExternal: false
  name: NotifyIdle
  nameWithType: IInstanceContextProvider.NotifyIdle
