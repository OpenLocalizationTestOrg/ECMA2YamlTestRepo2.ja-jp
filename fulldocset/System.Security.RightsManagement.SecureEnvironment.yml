### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.SecureEnvironment
  id: SecureEnvironment
  children:
  - System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  - System.Security.RightsManagement.SecureEnvironment.Dispose
  - System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  - System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  - System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.User
  langs:
  - csharp
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
  type: Class
  summary: "ユーザーのアクティブ化、ライセンスのバインディング、およびその他の権限管理操作のセキュリティで保護されたクライアント セッションを表します。"
  remarks: "その他の同様<xref:System.Security.RightsManagement>型、SecureEnvironment は完全信頼アプリケーションでは使用できません</xref:System.Security.RightsManagement>。"
  example:
  - "The following example shows use of the SecureEnvironment class  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class SecureEnvironment : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  id: ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "取得、ApplicationManifest 時に指定された、 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>作成されました。"
  remarks: ''
  example:
  - "The following example shows use of the ApplicationManifest method.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public string ApplicationManifest { get; }
    return:
      type: System.String
      description: "指定されているアプリケーション マニフェスト、<xref:System.Security.RightsManagement.SecureEnvironment.Create*>メソッドと、 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>が作成されます</xref:System.Security.RightsManagement.SecureEnvironment.Create*>。"
  overload: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  id: Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "指定された権限マニフェストを指定したユーザーのセキュリティで保護されたクライアント セッションを作成します。"
  remarks: "この Create メソッドは使用するものがまだアクティブ化して、ユーザーと<xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>。</xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>から返されるリストで提供されるなど、  代替サーバーを使用して<xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>ユーザーがまだアクティブ化する方法</xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>。"
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "アプリケーションの権利マニフェストします。"
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "ユーザーまたはユーザー グループの権限管理コンテンツにアクセスを許可します。"
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "アクティブ化、ライセンスのバインディング、およびその他の権限管理操作にとって安全なクライアント セッション。"
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  id: Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "アプリケーションの権利マニフェストを指定したセキュリティで保護されたクライアント セッションを作成<xref href=&quot;System.Security.RightsManagement.AuthenticationType&quot;> </xref>、および<xref href=&quot;System.Security.RightsManagement.UserActivationMode&quot;></xref>です。"
  remarks: "この Create メソッドは新しいユーザーがまだアクティブ化するものです。       新しいユーザーをアクティブ化するには、ユーザー証明書およびクライアント ライセンスの証明書の取得にラウンドト リップ サーバー トランザクションが含まれます。       代替の<xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>場合は、ユーザーが既にアクティブになる<xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>。</xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>から返されるリストで提供されるなど、メソッドを使用できます。</xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>"
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.AuthenticationType authentication, System.Security.RightsManagement.UserActivationMode userActivationMode);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "アプリケーションの権利マニフェストします。"
    - id: authentication
      type: System.Security.RightsManagement.AuthenticationType
      description: "認証の方法。"
    - id: userActivationMode
      type: System.Security.RightsManagement.UserActivationMode
      description: "ユーザーの権利アカウント証明書の種類。"
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "アクティブ化、ライセンスのバインディング、およびその他の権限管理操作にとって安全なクライアント セッション。"
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  id: Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "によって使用されるすべてのリソースを解放、 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>です。"
  remarks: "アプリケーションが<xref:System.Security.RightsManagement.SecureEnvironment>。</xref:System.Security.RightsManagement.SecureEnvironment>を終了すると、Dispose を呼び出す必要があります。  リソースを割り当てる Dispose が呼び出された後、<xref:System.Security.RightsManagement.SecureEnvironment>ガベージ コレクターによって解放されます</xref:System.Security.RightsManagement.SecureEnvironment>。  詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/add/includes/ajax-current-ext-md.md)と[Dispose メソッドの実装](~/add/includes/ajax-current-ext-md.md)です。      > [!NOTE] > に対する最後の参照の前に常に呼び出しを破棄、<xref:System.Security.RightsManagement.SecureEnvironment>を解放します</xref:System.Security.RightsManagement.SecureEnvironment>。  リソースを割り当てる Dispose が呼び出されない場合、<xref:System.Security.RightsManagement.SecureEnvironment>ガベージ コレクターが、インスタンスを呼び出すまで解放されません<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.Security.RightsManagement.SecureEnvironment>。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "によって使用されるアンマネージ リソースを解放、 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>し、必要に応じてマネージ リソースを解放します。"
  remarks: "このメソッドは、パブリック<xref:System.Security.RightsManagement.SecureEnvironment.Dispose>メソッドおよび<xref:System.Object.Finalize%2A>メソッド</xref:System.Object.Finalize%2A></xref:System.Security.RightsManagement.SecureEnvironment.Dispose>。 <xref:System.Security.RightsManagement.SecureEnvironment.Dispose>保護された Dispose メソッドを呼び出し、`disposing`パラメーターに設定`true`です。</xref:System.Security.RightsManagement.SecureEnvironment.Dispose> <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`&quot;éý&quot;`false`です。</xref:System.Object.Finalize%2A>       ときに、`disposing`パラメーターは`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放しますこの<xref:System.Security.RightsManagement.SecureEnvironment>参照。</xref:System.Security.RightsManagement.SecureEnvironment> 。 このメソッドを呼び出して、`Dispose()`参照される各オブジェクトのメソッドです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  id: GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "アクティブ化されたユーザーの一覧を返します。"
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser> GetActivatedUsers ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
      description: "現在アクティブ化されたユーザーの一覧です。"
  overload: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  id: IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "権限管理コンテンツにアクセスするため、特定のユーザーがアクティブになっているかどうかを示します。"
  remarks: ''
  example:
  - "The following example shows use of the IsUserActivated method to determine if given user has been authorized to access rights managed content.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static bool IsUserActivated (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "ユーザーまたはユーザー グループの権限管理コンテンツにアクセスを許可します。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定された<code> user </code>がアクティブになっている、それ以外のコンテンツ管理権限にアクセスする<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  id: RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "指定したユーザーのライセンス アクティベーションを削除します。"
  remarks: "Windows 認証または Passport 認証では、ユーザー認証を実行する必要があります。"
  syntax:
    content: public static void RemoveActivatedUser (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "ライセンス アクティベーションを削除するユーザー。"
  overload: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>user</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定された<code> user </code>が Windows 認証または Passport 認証で認証されていません。"
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.User
  id: User
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "ユーザーまたはユーザー グループの場合に指定を取得、 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>作成されました。"
  remarks: ''
  example:
  - "The following example shows use of the User property  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewsecenv)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewsecenv)]"
  syntax:
    content: public System.Security.RightsManagement.ContentUser User { get; }
    return:
      type: System.Security.RightsManagement.ContentUser
      description: "ユーザーまたはユーザー グループに指定された、<xref:System.Security.RightsManagement.SecureEnvironment.Create*>メソッドときに、 <xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>作成されました</xref:System.Security.RightsManagement.SecureEnvironment.Create*>。"
  overload: System.Security.RightsManagement.SecureEnvironment.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.ContentUser
  parent: System.Security.RightsManagement
  isExternal: false
  name: ContentUser
  nameWithType: ContentUser
  fullName: System.Security.RightsManagement.ContentUser
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
- uid: System.Security.RightsManagement.AuthenticationType
  parent: System.Security.RightsManagement
  isExternal: false
  name: AuthenticationType
  nameWithType: AuthenticationType
  fullName: System.Security.RightsManagement.AuthenticationType
- uid: System.Security.RightsManagement.UserActivationMode
  parent: System.Security.RightsManagement
  isExternal: false
  name: UserActivationMode
  nameWithType: UserActivationMode
  fullName: System.Security.RightsManagement.UserActivationMode
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ContentUser>
  nameWithType: ReadOnlyCollection<ContentUser>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.RightsManagement.ContentUser
    name: ContentUser
    nameWithType: ContentUser
    fullName: ContentUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.User
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
- uid: System.Security.RightsManagement.SecureEnvironment.Create*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create
  nameWithType: SecureEnvironment.Create
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose
  nameWithType: SecureEnvironment.Dispose
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers
  nameWithType: SecureEnvironment.GetActivatedUsers
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated
  nameWithType: SecureEnvironment.IsUserActivated
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser
  nameWithType: SecureEnvironment.RemoveActivatedUser
- uid: System.Security.RightsManagement.SecureEnvironment.User*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
