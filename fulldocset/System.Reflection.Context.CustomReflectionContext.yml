### YamlMime:ManagedReference
items:
- uid: System.Reflection.Context.CustomReflectionContext
  id: CustomReflectionContext
  children:
  - System.Reflection.Context.CustomReflectionContext.#ctor
  - System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  - System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  - System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  langs:
  - csharp
  name: CustomReflectionContext
  nameWithType: CustomReflectionContext
  fullName: System.Reflection.Context.CustomReflectionContext
  type: Class
  summary: "カスタマイズ可能なリフレクション コンテキストを表します。"
  remarks: "CustomReflectionContext は、追加またはリフレクション オブジェクトからカスタム属性を削除するか、完全なリフレクション モデルを再実装せず、それらのオブジェクトにダミーのプロパティを追加する方法を提供します。 CustomReflectionContext 既定値は、変更を加えずにリフレクション オブジェクトをラップするだけでサブクラス化して関連するメソッドのオーバーライドで、したりすることが追加、削除、またはリフレクションされたパラメーターまたはのメンバーに適用される属性を変更するリフレクションされた型に新しいプロパティを追加します。       たとえば、コードが、特定の属性を適用するファクトリ メソッドへの規則に従うことが、属性が欠落しているサード パーティのコードを使用する必要があります。 属性は、オブジェクトを識別するための規則を指定して、コードから表示したときにこれらの属性を持つオブジェクトを指定するには、CustomReflectionContext を使用することができます。       CustomReflectionContext を効果的に使用するには、反映されたオブジェクトを使用するコードを指定することなリフレクション コンテキストの代わりに反映されたすべてのオブジェクトはランタイム リフレクション コンテキストに関連付けられていると想定されるという概念をサポートする必要があります。 .NET Framework の多くのリフレクション メソッドを提供する<xref:System.Reflection.ReflectionContext>この目的のためのパラメーターです</xref:System.Reflection.ReflectionContext>。       リフレクションされたパラメーターまたはメンバーに適用される属性を変更するには、上書き、<xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.ParameterInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29>または<xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.MemberInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29>メソッド</xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.MemberInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29></xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%28System.Reflection.ParameterInfo%2CSystem.Collections.Generic.IEnumerable%7BSystem.Object%7D%29>。 これらのメソッドは、リフレクションされたオブジェクトとその現在のリフレクション コンテキストで属性の一覧を取得し、属性があるカスタムのリフレクション コンテキストの下の一覧を返します。      > [!WARNING] > CustomReflectionContext メソッドは、リフレクションされたオブジェクトまたはメソッドの属性の一覧を呼び出すことによって直接アクセスしないでください、<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>メソッドを指定した<xref:System.Reflection.MemberInfo>または<xref:System.Reflection.ParameterInfo>のインスタンスが代わりに使用する必要があります、 `declaredAttributes`  ボックスの一覧は、パラメーターとして渡される、<xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%2A>メソッドのオーバー ロード</xref:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes%2A></xref:System.Reflection.ParameterInfo></xref:System.Reflection.MemberInfo></xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>。       リフレクションされた型にプロパティを追加するには、上書き、<xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A>メソッド</xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A>。 このメソッドは、リフレクションされた型を指定し、追加のプロパティの一覧を返しますパラメーターを受け取ります。 使用する必要があります、<xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A>を返すプロパティ オブジェクトを作成するメソッド</xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A>。 プロパティのアクセサーとして機能するプロパティを作成すると、読み取り専用または書き込み専用プロパティを作成するアクセサーのいずれかを省略することができます、デリゲートを指定できます。 このようなダミー プロパティがあるないメタデータまたは共通中間言語 (CIL) バッキングに注意してください。      > [!WARNING] > リフレクション オブジェクト間の等値に関するリフレクション コンテキストを使用するときにあるため注意してオブジェクトが複数のコンテキスト内の同一のリフレクションされたオブジェクトを表す可能性があります。 使用することができます、<xref:System.Reflection.Context.CustomReflectionContext.MapType%2A>リフレクション オブジェクトの特定のリフレクション コンテキストのバージョンを取得します</xref:System.Reflection.Context.CustomReflectionContext.MapType%2A>。      > [!WARNING] > A CustomReflectionContext オブジェクトで取得されたなどの特定のリフレクション オブジェクトによって返される属性の変更、<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>メソッド</xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>。 によって返されるカスタム属性データが変わらない、<xref:System.Reflection.MemberInfo.GetCustomAttributesData%2A>メソッド、およびこれら&2; つのリストと一致しない、カスタムのリフレクション コンテキストを使用する場合</xref:System.Reflection.MemberInfo.GetCustomAttributesData%2A>。"
  example:
  - "The following example demonstrates how to subclass  CustomReflectionContext to add a custom attribute to all the members of a given type whose names begin with \"To\". To run this code, paste it into an empty console project, and make sure to include a reference to System.Reflection.Context.dll.  \n  \n [!code-cs[System.Reflection.Context.CustomReflectionContext#1](~/add/codesnippet/csharp/system.reflection.context.customreflectioncontext.consoleapplication1/program.cs#1)]"
  syntax:
    content: 'public abstract class CustomReflectionContext : System.Reflection.ReflectionContext'
  inheritance:
  - System.Reflection.ReflectionContext
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.#ctor
  id: '#ctor'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CustomReflectionContext()
  nameWithType: CustomReflectionContext.CustomReflectionContext()
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext()
  type: Constructor
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Reflection.Context.CustomReflectionContext&quot;> </xref>クラスです。"
  syntax:
    content: protected CustomReflectionContext ();
    parameters: []
  overload: System.Reflection.Context.CustomReflectionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  id: '#ctor(System.Reflection.ReflectionContext)'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CustomReflectionContext(ReflectionContext)
  nameWithType: CustomReflectionContext.CustomReflectionContext(ReflectionContext)
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext(ReflectionContext)
  type: Constructor
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Reflection.Context.CustomReflectionContext&quot;> </xref>ベースとして指定されたリフレクション コンテキストを持つクラス。"
  syntax:
    content: protected CustomReflectionContext (System.Reflection.ReflectionContext source);
    parameters:
    - id: source
      type: System.Reflection.ReflectionContext
      description: "ベースとして使用するリフレクション コンテキスト。"
  overload: System.Reflection.Context.CustomReflectionContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  id: AddProperties(System.Type)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: AddProperties(Type)
  nameWithType: CustomReflectionContext.AddProperties(Type)
  fullName: System.Reflection.Context.CustomReflectionContext.AddProperties(Type)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "派生クラスでオーバーライドされると、このリフレクション コンテキストで表されるように、指定した型の追加のプロパティのコレクションを提供します。"
  remarks: "このメソッドをオーバーライドするプロパティを指定された型に追加する必要がありますを指定します。 プロパティを作成するには、<xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A>メソッド</xref:System.Reflection.Context.CustomReflectionContext.CreateProperty%2A>。"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> AddProperties (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "プロパティを追加する型。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: "指定した型の追加のプロパティのコレクション。"
  overload: System.Reflection.Context.CustomReflectionContext.AddProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "使用される、型に追加するプロパティを表すオブジェクトを作成、<xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>メソッド</xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>。"
  remarks: "このメソッドによって返されるオブジェクトは、不完全な<xref:System.Reflection.PropertyInfo>オブジェクトし、のコンテキストでのみ使用する必要があります、<xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A>メソッド</xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A></xref:System.Reflection.PropertyInfo>。"
  syntax:
    content: protected System.Reflection.PropertyInfo CreateProperty (Type propertyType, string name, Func<object,object> getter, Action<object,object> setter);
    parameters:
    - id: propertyType
      type: System.Type
      description: "作成するプロパティの型。"
    - id: name
      type: System.String
      description: "作成するプロパティの名前。"
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "オブジェクトを表すプロパティの<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>アクセサー。"
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "オブジェクトを表すプロパティの<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>アクセサー。"
    return:
      type: System.Reflection.PropertyInfo
      description: "プロパティを表すオブジェクト。"
  overload: System.Reflection.Context.CustomReflectionContext.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "使用される、型に追加するプロパティを表すオブジェクトを作成、<xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>メソッドと指定されたカスタム属性を使用します</xref:System.Reflection.Context.CustomReflectionContext.AddProperties*>。"
  remarks: "このメソッドによって返されるオブジェクトは、不完全な<xref:System.Reflection.PropertyInfo>オブジェクトし、のコンテキストでのみ使用する必要があります、<xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A>メソッド</xref:System.Reflection.Context.CustomReflectionContext.AddProperties%2A></xref:System.Reflection.PropertyInfo>。"
  syntax:
    content: protected System.Reflection.PropertyInfo CreateProperty (Type propertyType, string name, Func<object,object> getter, Action<object,object> setter, System.Collections.Generic.IEnumerable<Attribute> propertyCustomAttributes, System.Collections.Generic.IEnumerable<Attribute> getterCustomAttributes, System.Collections.Generic.IEnumerable<Attribute> setterCustomAttributes);
    parameters:
    - id: propertyType
      type: System.Type
      description: "作成するプロパティの型。"
    - id: name
      type: System.String
      description: "作成するプロパティの名前。"
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "オブジェクトを表すプロパティの<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>アクセサー。"
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "オブジェクトを表すプロパティの<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>アクセサー。"
    - id: propertyCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "プロパティに適用するカスタム属性のコレクション。"
    - id: getterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "プロパティに適用するカスタム属性のコレクション<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>アクセサー。"
    - id: setterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "プロパティに適用するカスタム属性のコレクション<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>アクセサー。"
    return:
      type: System.Reflection.PropertyInfo
      description: "プロパティを表すオブジェクト。"
  overload: System.Reflection.Context.CustomReflectionContext.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "派生クラスでオーバーライドされると、このリフレクション コンテキストで表されるように、指定されたメンバーのカスタム属性の一覧を提供します。"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable<object> declaredAttributes);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "カスタム属性を持つが返されるメンバー。"
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "現在のコンテキストにあるメンバーの属性のコレクション。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "このリフレクション コンテキストで指定されたメンバーのカスタム属性を表すコレクション。"
  overload: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "派生クラスでオーバーライドされると、このリフレクション コンテキストで表されるように、指定されたパラメーターのカスタム属性の一覧を提供します。"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<object> GetCustomAttributes (System.Reflection.ParameterInfo parameter, System.Collections.Generic.IEnumerable<object> declaredAttributes);
    parameters:
    - id: parameter
      type: System.Reflection.ParameterInfo
      description: "カスタム属性を持つが返されるパラメーター。"
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "現在のコンテキストにあるパラメーターの属性のコレクション。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "このリフレクション コンテキストで指定されたパラメーターのカスタム属性を表すコレクション。"
  overload: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  id: MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: MapAssembly(Assembly)
  nameWithType: CustomReflectionContext.MapAssembly(Assembly)
  fullName: System.Reflection.Context.CustomReflectionContext.MapAssembly(Assembly)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "別のリフレクション コンテキストからのオブジェクトによって表されるアセンブリのこのリフレクション コンテキストでの表現を取得します。"
  syntax:
    content: public override System.Reflection.Assembly MapAssembly (System.Reflection.Assembly assembly);
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "このコンテキストで表記するアセンブリの外部表現。"
    return:
      type: System.Reflection.Assembly
      description: "このリフレクション コンテキストでアセンブリの表現。"
  overload: System.Reflection.Context.CustomReflectionContext.MapAssembly*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  id: MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  name: MapType(TypeInfo)
  nameWithType: CustomReflectionContext.MapType(TypeInfo)
  fullName: System.Reflection.Context.CustomReflectionContext.MapType(TypeInfo)
  type: Method
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "別のリフレクション コンテキストから、オブジェクトによって表される型のこのリフレクション コンテキストでの表現を取得します。"
  syntax:
    content: public override System.Reflection.TypeInfo MapType (System.Reflection.TypeInfo type);
    parameters:
    - id: type
      type: System.Reflection.TypeInfo
      description: "このコンテキストを表す型の外部表現。"
    return:
      type: System.Reflection.TypeInfo
      description: "このリフレクション コンテキストでの型の表現。"
  overload: System.Reflection.Context.CustomReflectionContext.MapType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.ReflectionContext
  isExternal: false
  name: System.Reflection.ReflectionContext
- uid: System.Reflection.Context.CustomReflectionContext.#ctor
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CustomReflectionContext()
  nameWithType: CustomReflectionContext.CustomReflectionContext()
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext()
- uid: System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CustomReflectionContext(ReflectionContext)
  nameWithType: CustomReflectionContext.CustomReflectionContext(ReflectionContext)
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext(ReflectionContext)
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: AddProperties(Type)
  nameWithType: CustomReflectionContext.AddProperties(Type)
  fullName: System.Reflection.Context.CustomReflectionContext.AddProperties(Type)
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<PropertyInfo>
  nameWithType: IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Reflection.PropertyInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.Object,System.Object}
  parent: System
  isExternal: true
  name: Func<Object,Object>
  nameWithType: Func<Object,Object>
  fullName: System.Func<System.Object,System.Object>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Object,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action{System.Object,System.Object}
  parent: System
  isExternal: true
  name: Action<Object,Object>
  nameWithType: Action<Object,Object>
  fullName: System.Action<System.Object,System.Object>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<System.Object,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  nameWithType: CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(Type,String,Func<Object,Object>,Action<Object,Object>,IEnumerable<Attribute>,IEnumerable<Attribute>,IEnumerable<Attribute>)
- uid: System.Collections.Generic.IEnumerable{System.Attribute}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Attribute>
  nameWithType: IEnumerable<Attribute>
  fullName: System.Collections.Generic.IEnumerable<System.Attribute>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Attribute>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(MemberInfo,IEnumerable<Object>)
- uid: System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(ParameterInfo,IEnumerable<Object>)
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: true
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapAssembly(Assembly)
  nameWithType: CustomReflectionContext.MapAssembly(Assembly)
  fullName: System.Reflection.Context.CustomReflectionContext.MapAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapType(TypeInfo)
  nameWithType: CustomReflectionContext.MapType(TypeInfo)
  fullName: System.Reflection.Context.CustomReflectionContext.MapType(TypeInfo)
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: true
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.Context.CustomReflectionContext.#ctor*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CustomReflectionContext
  nameWithType: CustomReflectionContext.CustomReflectionContext
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: AddProperties
  nameWithType: CustomReflectionContext.AddProperties
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: CreateProperty
  nameWithType: CustomReflectionContext.CreateProperty
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: GetCustomAttributes
  nameWithType: CustomReflectionContext.GetCustomAttributes
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapAssembly
  nameWithType: CustomReflectionContext.MapAssembly
- uid: System.Reflection.Context.CustomReflectionContext.MapType*
  parent: System.Reflection.Context.CustomReflectionContext
  isExternal: false
  name: MapType
  nameWithType: CustomReflectionContext.MapType
