### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.Package
  id: Package
  children:
  - System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  - System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  - System.IO.Packaging.Package.Close
  - System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  - System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  - System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  - System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  - System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  - System.IO.Packaging.Package.DeletePart(System.Uri)
  - System.IO.Packaging.Package.DeletePartCore(System.Uri)
  - System.IO.Packaging.Package.DeleteRelationship(System.String)
  - System.IO.Packaging.Package.Dispose(System.Boolean)
  - System.IO.Packaging.Package.FileOpenAccess
  - System.IO.Packaging.Package.Flush
  - System.IO.Packaging.Package.FlushCore
  - System.IO.Packaging.Package.GetPart(System.Uri)
  - System.IO.Packaging.Package.GetPartCore(System.Uri)
  - System.IO.Packaging.Package.GetParts
  - System.IO.Packaging.Package.GetPartsCore
  - System.IO.Packaging.Package.GetRelationship(System.String)
  - System.IO.Packaging.Package.GetRelationships
  - System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  - System.IO.Packaging.Package.Open(System.IO.Stream)
  - System.IO.Packaging.Package.Open(System.String)
  - System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  - System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.Packaging.Package.PackageProperties
  - System.IO.Packaging.Package.PartExists(System.Uri)
  - System.IO.Packaging.Package.RelationshipExists(System.String)
  - System.IO.Packaging.Package.System#IDisposable#Dispose
  langs:
  - csharp
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
  type: Class
  summary: "複数のデータ オブジェクトを格納できるコンテナーを表します。"
  remarks: "パッケージは、移植性と効率的にアクセスする場合は、定義されている物理形式の&1; つのエンティティにオブジェクトを整理するために使用する抽象クラスです。       ZIP ファイルは、パッケージのプライマリの物理的な形式です。  その他のパッケージの実装では、XML ドキュメント、データベース、または Web サービスなどの物理的なその他の形式を使用できます。       ファイル システムのようなパッケージに含まれるアイテムはフォルダーとファイルの階層構造で参照されます。       パッケージ自体が抽象クラスで、<xref:System.IO.Packaging.ZipPackage>派生クラスによって既定として使用される、<xref:System.IO.Packaging.Package.Open%2A>メソッド</xref:System.IO.Packaging.Package.Open%2A></xref:System.IO.Packaging.ZipPackage>。       A <xref:System.IO.Packaging.PackagePart>(&quot;&quot;) は、パッケージに格納されているオブジェクトを表す抽象クラス</xref:System.IO.Packaging.PackagePart>。       A <xref:System.IO.Packaging.PackageRelationship>(「リレーションシップ」) がソース パッケージとの間の関連付けを定義または<xref:System.IO.Packaging.PackagePart>と、ターゲット オブジェクト</xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackageRelationship>。  A<xref:System.IO.Packaging.PackageRelationship>それぞれできる&2; つの形式のいずれかの&2; 種類のいずれかを指定できます:-パッケージ レベルの関係 (によって作成された、<xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=fullName>メソッド) パッケージがいずれかに関連する: - パッケージ内のパーツをターゲットします</xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=fullName></xref:System.IO.Packaging.PackageRelationship>。          -外部のターゲット リソース パッケージです。      A パーツ レベルの関係 (によって作成された、<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=fullName>メソッド) が関連するソース<xref:System.IO.Packaging.PackagePart>いずれかに: 別 - パッケージ内のパーツをターゲットします</xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=fullName>。          -外部のターゲット リソース パッケージです。       リレーションシップのソースのパッケージまたはソース<xref:System.IO.Packaging.PackagePart>リレーションシップの「所有者」と見なされます</xref:System.IO.Packaging.PackagePart>。  ソース オブジェクトが削除されると、ソース オブジェクトによって所有されているすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスが任意の方法でソースまたはターゲットのいずれかのオブジェクトを物理的に変更することはできません。       A<xref:System.IO.Packaging.PackageDigitalSignature>パーツとパッケージに含まれているデジタル署名を表すリレーションシップの合成である (「デジタル署名」)</xref:System.IO.Packaging.PackageDigitalSignature> 。  デジタル署名は、発信元を識別し、署名済みパーツとパッケージに含まれる関係が変更されていないことを検証します。       パッケージでは、デジタル著作権管理 (DRM) これにより、承認されたユーザーに付与された特定のアクセス権を持つ暗号化されるパッケージ内のコンテンツの要素もサポートします。       パッケージのアーキテクチャに基づく、<xref:System.Windows.Xps.Packaging.XpsDocument>開くに基づいてドキュメントを格納するために設計されたパッケージの種類は、 [XPS XML Paper Specification ()](http://go.microsoft.com/fwlink/?LinkID=65761)</xref:System.Windows.Xps.Packaging.XpsDocument> 。       [!INCLUDE[TLA#tla_avalonwinfx](~/add/includes/tlasharptla-avalonwinfx-md.md)]パッケージを使用して、コンテンツ、リソース、およびページおよび既定では、標準の ZIP ファイルを使用してドキュメントのリレーションシップを格納します。 ZIP ファイルとアプリケーションで使用できるよう、<xref:System.IO.Packaging>クラスを格納し、必要に応じて任意の&1; つの効率的なアクセス コンテナー内のデータ ファイルの数または種類を保護します</xref:System.IO.Packaging>。       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows the basic steps for creating a Package.  In this example, a package is created to contain a document together with a graphic image that is displayed as part of the document.  (This is similar to the case in which an HTML file has an \\<IMG> tag that references an external image file.)  Two <xref:System.IO.Packaging.PackageRelationship> elements are also included in the package.  The first, a \"package-level\" relationship, defines the document part as the package's root element.  A second, \"part-level\" relationship defines the association between the document part (the \"source\" of the part-level relationship) and its use of the image part (the \"target\" of the part-level relationship).  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: 'public abstract class Package : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  id: '#ctor(System.IO.FileAccess)'
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Package(FileAccess)
  nameWithType: Package.Package(FileAccess)
  fullName: System.IO.Packaging.Package.Package(FileAccess)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>クラスを使用する、指定された<xref href=&quot;System.IO.FileAccess&quot;></xref>です。"
  remarks: "パッケージは、<xref:System.IO.Packaging.Package>抽象基本クラス</xref:System.IO.Packaging.Package>のプロテクト コンス トラクターです。 派生クラスで呼び出されると、パッケージ コンス トラクターには、派生クラスの新しいインスタンスを初期化します。"
  syntax:
    content: protected Package (System.IO.FileAccess openFileAccess);
    parameters:
    - id: openFileAccess
      type: System.IO.FileAccess
      description: "パッケージのファイル IO アクセス許可。"
  overload: System.IO.Packaging.Package.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値は、 <code> openFileAccess </code>が無効です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  id: '#ctor(System.IO.FileAccess,System.Boolean)'
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Package(FileAccess,Boolean)
  nameWithType: Package.Package(FileAccess,Boolean)
  fullName: System.IO.Packaging.Package.Package(FileAccess,Boolean)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IO.Packaging.Package&quot;> </xref>クラスを使用する、指定された<xref href=&quot;System.IO.FileAccess&quot;></xref>とオプションをストリーミングします。"
  remarks: "パッケージは、<xref:System.IO.Packaging.Package>抽象基本抽象基本クラス</xref:System.IO.Packaging.Package>のプロテクト コンス トラクターです。 派生クラスで呼び出されると、パッケージ コンス トラクターには、派生クラスの新しいインスタンスを初期化します。"
  syntax:
    content: protected Package (System.IO.FileAccess openFileAccess, bool streaming);
    parameters:
    - id: openFileAccess
      type: System.IO.FileAccess
      description: "パッケージのファイル IO アクセス許可。"
    - id: streaming
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>開くには、パッケージをストリーミング用それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Packaging.Package.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値は、 <code> openFileAccess </code>が無効です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Close
  id: Close
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Close()
  nameWithType: Package.Close()
  fullName: System.IO.Packaging.Package.Close()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "保存し、パッケージと一部のすべての基になるストリームを閉じます。"
  remarks: "<xref:System.IO.Packaging.Package>閉じるのクラスと<xref:System.IO.Packaging.Package.Dispose%2A>同じ操作を実行: を呼び出す必要はありません<xref:System.IO.Packaging.Package.Dispose%2A>閉じる、またはその逆を呼び出す場合</xref:System.IO.Packaging.Package.Dispose%2A></xref:System.IO.Packaging.Package.Dispose%2A></xref:System.IO.Packaging.Package>。       閉じると<xref:System.IO.Packaging.Package.Dispose%2A><xref:System.IO.Packaging.Package.Flush%2A>。</xref:System.IO.Packaging.Package.Flush%2A>を内部的に呼び出す</xref:System.IO.Packaging.Package.Dispose%2A>      > [!NOTE] >、`using`ステートメント (異なる、`using`名前空間ディレクティブ) を閉じることをお勧めと<xref:System.IO.Packaging.Package.Dispose%2A>パッケージ</xref:System.IO.Packaging.Package.Dispose%2A>。  [パッケージ サンプルの書き込み](http://go.microsoft.com/fwlink/?LinkID=160055)と[パッケージ サンプルの読み取り](http://go.microsoft.com/fwlink/?LinkID=160034)を閉じてを使用してパッケージを破棄する方法を示して、`using`ステートメントです。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Packaging.Package.Close*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  id: CreatePart(System.Uri,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePart(Uri,String)
  nameWithType: Package.CreatePart(Uri,String)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定された URI とコンテンツの種類を新しい圧縮されていない部分を作成します。"
  remarks: "CreatePart は、空<xref:System.IO.Stream>の新しいパーツ</xref:System.IO.Stream>を初期化します  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>パートに関連付けられているストリームのインスタンスへの参照を取得するメソッドを使用できます</xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>       <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> <xref:System.IO.Packaging.CompressionOption?displayProperty=fullName>。</xref:System.IO.Packaging.CompressionOption?displayProperty=fullName></xref:System.IO.Packaging.PackagePart.CompressionOption%2A>部分       パッケージ パーツの追加については、セクションを参照して 1.1 ダウンロード可能な Open Packaging Conventions (OPC) 仕様で[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.PackagePart> and then store data into the part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepart)]\n [!code-cs[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepart)]"
  syntax:
    content: public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]新しいパーツです。"
    - id: contentType
      type: System.String
      description: "データ ストリームのコンテンツの種類。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "新規作成されたパート。"
  overload: System.IO.Packaging.Package.CreatePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>or <code>contentType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した部分<code> partUri </code>はパッケージに既に存在します。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは読み取り専用 (新しいパーツを追加できません)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  id: CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePart(Uri,String,CompressionOption)
  nameWithType: Package.CreatePart(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String,CompressionOption)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した URI、コンテンツ タイプ、および圧縮オプションを新しいパーツを作成します。"
  remarks: "既定の<xref:System.IO.Packaging.ZipPackage>派生クラスでは、2 つ CreatePart メソッドのみサポート`compressionOption`値、<xref:System.IO.Packaging.CompressionOption>または<xref:System.IO.Packaging.CompressionOption>圧縮します</xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.ZipPackage>。  その他の<xref:System.IO.Packaging.CompressionOption>の値<xref:System.IO.Packaging.CompressionOption>、 <xref:System.IO.Packaging.CompressionOption>、または<xref:System.IO.Packaging.CompressionOption>使用<xref:System.IO.Packaging.CompressionOption>圧縮します</xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption>。       CreatePart を作成、空<xref:System.IO.Stream>の新しいパーツ</xref:System.IO.Stream>  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>パートに関連付けられているストリームのインスタンスへの参照を取得するメソッドを使用できます</xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.PackagePart> and then store data into the part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepart)]\n [!code-cs[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepart)]"
  syntax:
    content: public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]新しいパーツです。"
    - id: contentType
      type: System.String
      description: "データ ストリームのコンテンツの種類。"
    - id: compressionOption
      type: System.IO.Packaging.CompressionOption
      description: "データ ストリームの圧縮オプション<xref href=&quot;System.IO.Packaging.CompressionOption&quot;></xref>または<xref href=&quot;System.IO.Packaging.CompressionOption&quot;></xref>圧縮します。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "新規作成されたパート。"
  overload: System.IO.Packaging.Package.CreatePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>or <code>contentType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した部分<code> partUri </code>はパッケージに既に存在します。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> compressionOption </code>値が無効です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは読み取り専用 (新しいパーツを追加できません)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  id: CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePartCore(Uri,String,CompressionOption)
  nameWithType: Package.CreatePartCore(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePartCore(Uri,String,CompressionOption)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "派生クラスでオーバーライドされると、パッケージ内に新しいパートを作成します。"
  remarks: "派生 CreatePartCore メソッドは<xref:System.IO.Packaging.Package.CreatePart%2A>、物理的な形式に基づくパーツを作成するメソッドが派生クラスで実装</xref:System.IO.Packaging.Package.CreatePart%2A>によって呼び出されます       既定では、<xref:System.IO.Packaging.ZipPackage>の抽象クラスの実装を派生<xref:System.IO.Packaging.Package>クラスが提供される、使用できます</xref:System.IO.Packaging.Package></xref:System.IO.Packaging.ZipPackage>。  既定の操作で<xref:System.IO.Packaging.Package.CreatePart%2A>の CreatePartCore を内部的に呼び出して、 <xref:System.IO.Packaging.ZipPackage>ZIP ファイルに新しいパートを作成するクラス</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package.CreatePart%2A>。       既定の<xref:System.IO.Packaging.ZipPackage>派生クラスでは、2 つ CreatePartCore メソッドのみサポート`compressionOption`値、<xref:System.IO.Packaging.CompressionOption>または<xref:System.IO.Packaging.CompressionOption>圧縮します</xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.ZipPackage>。  その他の<xref:System.IO.Packaging.CompressionOption>の値<xref:System.IO.Packaging.CompressionOption>、 <xref:System.IO.Packaging.CompressionOption>、または<xref:System.IO.Packaging.CompressionOption>使用<xref:System.IO.Packaging.CompressionOption>圧縮します</xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption></xref:System.IO.Packaging.CompressionOption>。       パッケージのモデルとパッケージ パーツの詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様の第 1 章を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]パートが作成されるためです。"
    - id: contentType
      type: System.String
      description: "データ ストリームのコンテンツの種類。"
    - id: compressionOption
      type: System.IO.Packaging.CompressionOption
      description: "データ ストリームの圧縮オプション。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "作成されたパート。"
  overload: System.IO.Packaging.Package.CreatePartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  id: CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreateRelationship(Uri,TargetMode,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した URI、ターゲット モード、およびリレーションシップの種類をパーツへのパッケージ レベルのリレーションシップを作成します。"
  remarks: "パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット部品またはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。      間、<xref:System.IO.Packaging.Package>パッケージではパーツをターゲットにします</xref:System.IO.Packaging.Package>。      間、<xref:System.IO.Packaging.Package>パッケージの外部のターゲット リソースにします</xref:System.IO.Packaging.Package>。       パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。       CreateRelationship は物理的に、ターゲットのパーツまたは任意の方法でリソースは変更されません。       リレーションシップのターゲットは、別のリレーションシップをすることはできません。       場合`targetMode`として指定された<xref:System.IO.Packaging.TargetMode>、`targetUri`に従って形成される相対 URI である必要があります、 [RFC 3986](http://tools.ietf.org/html/rfc3986) (Uniform Resource Identifier) の一般的な構文の仕様</xref:System.IO.Packaging.TargetMode>。  内部の相対 URI か、絶対パスを指定できますなどの文字をスラッシュ (「/」) で起動&quot;/page1.xaml&quot;または&quot;/images/picture4.jpg&quot;、またはなどの相対パス&quot;../imagespicture1.jpg&quot;パッケージのルートに対して (「/」) として、ベース URI を解決します。       場合`targetMode`として指定された<xref:System.IO.Packaging.TargetMode>、`targetUri`は、絶対または相対 URI の形式に従って、 [RFC 3986](http://tools.ietf.org/html/rfc3986) (Uniform Resource Identifier) の一般的な構文の仕様</xref:System.IO.Packaging.TargetMode>。  &quot;http://www.microsoft.com/page2.xml&quot;は、外部の対象リソース「page2.xml」を参照する絶対 URI の例を示します。  &quot;images/picture1.jpg&quot;は、外部の対象リソース&quot;1.jpg&quot;が解決される、に対して、パッケージ自体の URI を参照する相対 URI の例を示します。       `relationshipType`必要があります、[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]に従って形式ですが、 [RFC 3986](http://tools.ietf.org/html/rfc3986) (Uniform Resource Identifier) の一般的な構文の仕様です。  次の表は、パッケージ レベル`relationshipType`Open Packaging Conventions (OPC) 仕様で定義されている Uri。      |パッケージ レベル リレーションシップ |リレーションシップ型の URI |  |---------------------------------|---------------------------|  |主要プロパティ | http://schemas.openxmlformats.org/package/2006/relationships/meta データ/コア-プロパティ |  |デジタル署名 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 署名/署名 |  |デジタル署名の証明書 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-署名/証明書 |  |デジタル署名元 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 署名/オリジン |  | サムネイル | http://schemas.openxmlformats.org/package/2006/relationships/meta データ/サムネイル |      パッケージとパッケージ リレーションシップの詳細についてを参照してくださいでダウンロード可能な Open Packaging Conventions (OPC) 仕様のセクション 1.3 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example illustrates how to use CreateRelationship to create a <xref:System.IO.Packaging.PackageRelationship> between a <xref:System.IO.Packaging.Package> and a root document part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackagerelationship)]\n [!code-cs[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackagerelationship)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);
    parameters:
    - id: targetUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]ターゲット部品のです。"
    - id: targetMode
      type: System.IO.Packaging.TargetMode
      description: "かどうかをターゲット部品<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>または<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>パッケージにします。"
    - id: relationshipType
      type: System.String
      description: "リレーションシップのロールを一意に定義する URI。"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "指定した部分をパッケージ レベルのリレーションシップ。"
  overload: System.IO.Packaging.Package.CreateRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetUri</code>or <code>relationshipType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>targetUri</code> part is a <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>, or <code>targetMode</code> is <xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref> and <code>targetUri</code> is an absolute URI."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値は、 <code> targetMode </code>が無効です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、読み取り専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  id: CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreateRelationship(Uri,TargetMode,String,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "ターゲット モード、リレーションシップ型では、特定の URI を持つパートをパッケージ レベル リレーションシップを作成し、[!INCLUDE[TLA#tla_id](~/add/includes/tlasharptla-id-md.md)]です。"
  remarks: "パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット部品またはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。      間、<xref:System.IO.Packaging.Package>パッケージではパーツをターゲットにします</xref:System.IO.Packaging.Package>。      間、<xref:System.IO.Packaging.Package>パッケージの外部のターゲット リソースにします</xref:System.IO.Packaging.Package>。       パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。       CreateRelationship は物理的に、ターゲットのパーツまたは任意の方法でリソースは変更されません。       リレーションシップのターゲットは、別のリレーションシップをすることはできません。       `id`有効な XML 識別子である必要があります。  `id`型は、XML スキーマ第 2 部に規定された名前付け規則に従う必要があります、xsd:ID: データ型の仕様 (を参照してください[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/))。       場合`id`として指定された`null`一意の ID を自動的に生成されます。  `id`空で指定された文字列が無効です。       場合`targetMode`として指定された<xref:System.IO.Packaging.TargetMode>、`targetUri`に従って形成される相対 URI である必要があります、 [RFC 3986](http://tools.ietf.org/html/rfc3986) (Uniform Resource Identifier) の一般的な構文の仕様</xref:System.IO.Packaging.TargetMode>。  内部の相対 URI か、絶対パスを指定できますなどの文字をスラッシュ (「/」) で起動&quot;/page1.xaml&quot;または&quot;/images/picture4.jpg&quot;、またはなどの相対パス&quot;../imagespicture1.jpg&quot;パッケージのルートに対して (「/」) として、ベース URI を解決します。       場合`targetMode`として指定された<xref:System.IO.Packaging.TargetMode>、`targetUri`は、絶対または相対 URI の形式に従って、 [RFC 3986](http://tools.ietf.org/html/rfc3986) (Uniform Resource Identifier) の一般的な構文の仕様</xref:System.IO.Packaging.TargetMode>。  &quot;http://www.microsoft.com/page2.xml&quot;は、外部の対象リソース「page2.xml」を参照する絶対 URI の例を示します。  &quot;images/picture1.jpg&quot;は、外部の対象リソース&quot;1.jpg&quot;が解決される、に対して、パッケージ自体の URI を参照する相対 URI の例を示します。       `relationshipType`に従って形成される URI である必要があります、 [RFC 3986](http://tools.ietf.org/html/rfc3986) (Uniform Resource Identifier) の一般的な構文の仕様です。  次の表は、パッケージ レベル`relationshipType`Open Packaging Conventions (OPC) 仕様で定義されている Uri。      |パッケージ レベル リレーションシップ |リレーションシップ型の URI |  |---------------------------------|---------------------------|  |主要プロパティ | http://schemas.openxmlformats.org/package/2006/relationships/meta データ/コア-プロパティ |  |デジタル署名 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 署名/署名 |  |デジタル署名の証明書 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-署名/証明書 |  |デジタル署名元 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 署名/オリジン |  | サムネイル | http://schemas.openxmlformats.org/package/2006/relationships/meta データ/サムネイル |      パッケージとパッケージ リレーションシップに関する詳細についてを参照してくださいでダウンロード可能な Open Packaging Conventions (OPC) 仕様のセクション 1.3 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example illustrates how to use <xref:System.IO.Packaging.Package.CreateRelationship%2A> to create a <xref:System.IO.Packaging.PackageRelationship> between a <xref:System.IO.Packaging.Package> and a root document part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackagerelationship)]\n [!code-cs[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackagerelationship)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);
    parameters:
    - id: targetUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]ターゲット部品のです。"
    - id: targetMode
      type: System.IO.Packaging.TargetMode
      description: "かどうかをターゲット部品<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>または<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>パッケージにします。"
    - id: relationshipType
      type: System.String
      description: "リレーションシップのロールを一意に定義する URI。"
    - id: id
      type: System.String
      description: "一意な XML 識別子です。"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "指定した部分をパッケージ レベルのリレーションシップ。"
  overload: System.IO.Packaging.Package.CreateRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetUri</code>or <code>relationshipType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>targetUri</code> part is a <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>, or <code>targetMode</code> is <xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref> and <code>targetUri</code> is an absolute URI."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値は、 <code> targetMode </code>が無効です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、読み取り専用です。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>有効な XML 識別子ではありません。または、指定された一部<code>id</code>パッケージに既に存在します。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeletePart(System.Uri)
  id: DeletePart(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeletePart(Uri)
  nameWithType: Package.DeletePart(Uri)
  fullName: System.IO.Packaging.Package.DeletePart(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した URI を持つパートをパッケージから削除します。"
  remarks: "`partUri`文字、スラッシュ (「/」) で始まる絶対パスで構成される相対 URI である必要があります。  絶対パスはパッケージのルートに対する相対とに従っての形式が、 [RFC 3986](http://tools.ietf.org/html/rfc3986) (Uniform Resource Identifier) の一般的な構文の仕様です。  &quot;/page1.xaml&quot;と&quot;/images/picture4.jpg&quot;有効なパーツ Uri の例を示します。       場合、指定した部分に例外が発生しなかった`partUri`がパッケージ内にありません。  (使用することができます、<xref:System.IO.Packaging.Package.PartExists%2A>と指定した一部かどうかを調べます`partUri`パッケージにします)</xref:System.IO.Packaging.Package.PartExists%2A> 。     詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public void DeletePart (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]の一部を削除します。"
  overload: System.IO.Packaging.Package.DeletePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、読み取り専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeletePartCore(System.Uri)
  id: DeletePartCore(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeletePartCore(Uri)
  nameWithType: Package.DeletePartCore(Uri)
  fullName: System.IO.Packaging.Package.DeletePartCore(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "派生クラスでオーバーライドされると、指定した URI を持つパートを削除します。"
  remarks: "既定では、<xref:System.IO.Packaging.ZipPackage>の抽象クラスの実装を派生<xref:System.IO.Packaging.Package>クラスが提供される、使用できます</xref:System.IO.Packaging.Package></xref:System.IO.Packaging.ZipPackage>。  既定の操作で<xref:System.IO.Packaging.Package.DeletePart%2A>内部的に<xref:System.IO.Packaging.ZipPackage>、物理的な形式に基づく実際の削除操作を実行するクラスが派生クラスで実装されている</xref:System.IO.Packaging.ZipPackage>と DeletePartCore を呼び出します</xref:System.IO.Packaging.Package.DeletePart%2A>       パッケージのモデルとパッケージ パーツの詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様の第 1 章を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: protected abstract void DeletePartCore (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "<xref:System.IO.Packaging.PackagePart.Uri*>の<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>を削除します</xref:System.IO.Packaging.PackagePart.Uri*>。"
  overload: System.IO.Packaging.Package.DeletePartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeleteRelationship(System.String)
  id: DeleteRelationship(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeleteRelationship(String)
  nameWithType: Package.DeleteRelationship(String)
  fullName: System.IO.Packaging.Package.DeleteRelationship(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "パッケージ レベルのリレーションシップを削除します。"
  remarks: "パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット部品またはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。      間、<xref:System.IO.Packaging.Package>パッケージではパーツをターゲットにします</xref:System.IO.Packaging.Package>。      間、<xref:System.IO.Packaging.Package>パッケージの外部のターゲット リソースにします</xref:System.IO.Packaging.Package>。       パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。       場合、指定されたリレーションシップに例外が発生しなかった`id`がパッケージ内にありません。       DeleteRelationship が任意の方法でターゲットの部品を物理的に変更することはできません。       パッケージのリレーションシップの詳細についてを参照してくださいでダウンロード可能な Open Packaging Conventions (OPC) 仕様のセクション 1.3 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public void DeleteRelationship (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>の<xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>を削除します</xref:System.IO.Packaging.PackageRelationship.Id*>。"
  overload: System.IO.Packaging.Package.DeleteRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、読み取り専用です。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>有効な XML 識別子ではありません。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Package.Dispose(Boolean)
  fullName: System.IO.Packaging.Package.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "フラッシュしすべてのパーツとリレーションシップの内容を保存、パッケージを閉じ、すべてのリソースを解放します。"
  remarks: "すべての変更が正しく保存されていることを確認するには、Dispose も終了、フラッシュ、およびすべてのパーツとパッケージに含まれているリレーションシップを終了します。       <xref:System.IO.Packaging.Package>クラスで Dispose および<xref:System.IO.Packaging.Package.Close%2A>、同じ操作を実行します - を呼び出す場合は、Dispose を呼び出す必要はありません<xref:System.IO.Packaging.Package.Close%2A>、またはその逆</xref:System.IO.Packaging.Package.Close%2A></xref:System.IO.Packaging.Package.Close%2A></xref:System.IO.Packaging.Package>。       <xref:System.IO.Packaging.Package.Close%2A>Dispose が内部的に<xref:System.IO.Packaging.Package.Flush%2A>。</xref:System.IO.Packaging.Package.Flush%2A>を呼び出します</xref:System.IO.Packaging.Package.Close%2A>       割り当てし、非メモリ リソースを管理する派生クラスでは、Dispose が呼び出されたときに、リソースを解放するには、このメソッドをオーバーライドする必要があります。 派生クラスのオーバーライドを呼び出す必要もあります<xref:System.IO.Packaging.Package.Flush%2A>と、基底クラス Dispose メソッドをその基本クラス クリーンアップは常に実行されているかどうかを確認します</xref:System.IO.Packaging.Package.Flush%2A>。      > [!NOTE] >、`using`ステートメント (異なる、`using`名前空間ディレクティブ) することをお勧め<xref:System.IO.Packaging.Package.Close%2A>とパッケージを破棄します</xref:System.IO.Packaging.Package.Close%2A>。 [パッケージ サンプルの書き込み](http://go.microsoft.com/fwlink/?LinkID=160055)を閉じてを使用してパッケージを破棄する方法を示しています、`using`ステートメントです。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>マネージ コードとアンマネージ リソースを解放するには<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>アンマネージ リソースだけを解放します。"
  overload: System.IO.Packaging.Package.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.FileOpenAccess
  id: FileOpenAccess
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
  fullName: System.IO.Packaging.Package.FileOpenAccess
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "ファイル アクセスは、パッケージの設定を取得します。"
  remarks: "FileOpenAccess プロパティには、既定値はありません。  ファイル アクセスの設定がで指定された、<xref:System.IO.Packaging.Package.%23ctor%2A>コンス トラクターを呼び出すまたは新しいパッケージを作成する場合に、<xref:System.IO.Packaging.Package.Open%2A>既存のパッケージを開くときに呼び出します</xref:System.IO.Packaging.Package.Open%2A></xref:System.IO.Packaging.Package.%23ctor%2A>。"
  syntax:
    content: public System.IO.FileAccess FileOpenAccess { get; }
    return:
      type: System.IO.FileAccess
      description: 'One of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values: <xref href=&quot;System.IO.FileAccess&quot;></xref>, <xref href=&quot;System.IO.FileAccess&quot;></xref>, or <xref href=&quot;System.IO.FileAccess&quot;></xref>.'
  overload: System.IO.Packaging.Package.FileOpenAccess*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Flush
  id: Flush
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Flush()
  nameWithType: Package.Flush()
  fullName: System.IO.Packaging.Package.Flush()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "パッケージ内のすべてのパーツとリレーションシップに含まれる内容を保存します。"
  remarks: "派生クラスのフラッシュを内部的に呼び出します<xref:System.IO.Packaging.Package.FlushCore%2A>の実際のファイル形式に固有のフラッシュ操作を実行する実装</xref:System.IO.Packaging.Package.FlushCore%2A>。  派生クラスの<xref:System.IO.Packaging.Package.FlushCore%2A>メソッドは、実際には、特定の物理的な派生クラスの実装をパーツとリレーションシップのコンテンツを保存するために行います</xref:System.IO.Packaging.Package.FlushCore%2A>。       既定では、<xref:System.IO.Packaging.ZipPackage>抽象の実装を派生<xref:System.IO.Packaging.Package>基底クラスが提供され、使用できます</xref:System.IO.Packaging.Package></xref:System.IO.Packaging.ZipPackage>。 既定の操作でフラッシュする内部的に呼び出し<xref:System.IO.Packaging.Package.FlushCore%2A>を ZIP ファイルのパッケージ内のパーツとリレーションシップを保存します</xref:System.IO.Packaging.Package.FlushCore%2A>。       フラッシュがによって自動的と呼ばれる、<xref:System.IO.Packaging.Package.Close%2A>と<xref:System.IO.Packaging.Package.Dispose%2A>メソッド</xref:System.IO.Packaging.Package.Dispose%2A></xref:System.IO.Packaging.Package.Close%2A>。  ときに<xref:System.IO.Packaging.Package.Close%2A>または<xref:System.IO.Packaging.Package.Dispose%2A>が呼び出された Flush を呼び出すとは別にする必要はありません</xref:System.IO.Packaging.Package.Dispose%2A></xref:System.IO.Packaging.Package.Close%2A>。"
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.IO.Packaging.Package.Flush*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは読み取り専用と変更できません。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.FlushCore
  id: FlushCore
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: FlushCore()
  nameWithType: Package.FlushCore()
  fullName: System.IO.Packaging.Package.FlushCore()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "派生クラスでオーバーライドされると、すべてのパーツとリレーションシップの内容を派生クラス ストアに保存します。"
  remarks: "FlushCore は、<xref:System.IO.Packaging.Package.Flush%2A>派生クラスで実装されている物理的な形式に基づくの実際のフラッシュ操作を実行するメソッド</xref:System.IO.Packaging.Package.Flush%2A>によって呼び出されます。"
  syntax:
    content: protected abstract void FlushCore ();
    parameters: []
  overload: System.IO.Packaging.Package.FlushCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPart(System.Uri)
  id: GetPart(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPart(Uri)
  nameWithType: Package.GetPart(Uri)
  fullName: System.IO.Packaging.Package.GetPart(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した URI を持つ部分を返します。"
  remarks: "<xref:System.InvalidOperationException>がスローされる場合に、指定した部分`partUri`存在しません</xref:System.InvalidOperationException>。       <xref:System.IO.Packaging.Package.PartExists%2A>を決定するメソッドを使用できるかどうか`partUri`既存のパーツを参照して</xref:System.IO.Packaging.Package.PartExists%2A>       既定では、<xref:System.IO.Packaging.ZipPackage>抽象の実装を派生<xref:System.IO.Packaging.Package>基底クラスが提供され、使用できます</xref:System.IO.Packaging.Package></xref:System.IO.Packaging.ZipPackage>。  既定の操作、GetPart で<xref:System.IO.Packaging.Package.GetPartCore%2A>の<xref:System.IO.Packaging.ZipPackage>ZIP ファイルから要求の一部を返したりするクラス</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package.GetPartCore%2A>。       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to locate, retrieve, and read parts that are contained in a package.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public System.IO.Packaging.PackagePart GetPart (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]の部分を返します。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "指定した部分<code> partUri</code>です。"
  overload: System.IO.Packaging.Package.GetPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定した部分<code> partUri </code>がパッケージ内にありません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、書き込み専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPartCore(System.Uri)
  id: GetPartCore(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPartCore(Uri)
  nameWithType: Package.GetPartCore(Uri)
  fullName: System.IO.Packaging.Package.GetPartCore(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "派生クラスでオーバーライドされると、指定した URI によってアドレス指定された部分を返します。"
  remarks: "既定では、<xref:System.IO.Packaging.ZipPackage>抽象の実装を派生<xref:System.IO.Packaging.Package>クラスが提供される、使用できます</xref:System.IO.Packaging.Package></xref:System.IO.Packaging.ZipPackage>。  既定の操作で<xref:System.IO.Packaging.Package.GetPart%2A>の GetPartCore を内部的に呼び出して、 <xref:System.IO.Packaging.ZipPackage>ZIP ファイルから一部を取得するクラス</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package.GetPart%2A>。       パッケージのモデルとパッケージ パーツの詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様の第 1 章を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]の一部を取得します。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "要求された部分または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>場合、指定された部分、 <code> partUri </code>がパッケージ内にありません。"
  overload: System.IO.Packaging.Package.GetPartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetParts
  id: GetParts
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetParts()
  nameWithType: Package.GetParts()
  fullName: System.IO.Packaging.Package.GetParts()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "パッケージ内のすべての部分のコレクションを返します。"
  remarks: "GetParts がなど、パッケージに含まれているすべての部分のコレクションを返します<xref:System.IO.Packaging.PackageRelationship>部分</xref:System.IO.Packaging.PackageRelationship>。       GetParts を返さない`null`。 ただし、パッケージに部分が含まれていない場合、返されるコレクションは要素がゼロには。       既定では、<xref:System.IO.Packaging.ZipPackage>抽象の実装を派生<xref:System.IO.Packaging.Package>基底クラスが提供され、使用できます</xref:System.IO.Packaging.Package></xref:System.IO.Packaging.ZipPackage>。  GetParts を呼び出す既定の操作で、<xref:System.IO.Packaging.Package.GetPartsCore%2A>のメソッド、<xref:System.IO.Packaging.ZipPackage>クラスを ZIP ファイルからの部分を返します</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package.GetPartsCore%2A>。       パッケージとパッケージ パーツの詳細についてを参照してください 1.1 のダウンロード可能な Open Packaging Conventions (OPC) 仕様で[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to use the GetParts method to obtain a collection of the parts that are contained in a <xref:System.IO.Packaging.Package>.  For the complete program source code, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.IO.Packaging.PackagePartCollection GetParts ();
    parameters: []
    return:
      type: System.IO.Packaging.PackagePartCollection
      description: "すべてのコレクション、 <xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref>パッケージに含まれる要素です。"
  overload: System.IO.Packaging.Package.GetParts*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、書き込み専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPartsCore
  id: GetPartsCore
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPartsCore()
  nameWithType: Package.GetPartsCore()
  fullName: System.IO.Packaging.Package.GetPartsCore()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "派生クラスでオーバーライドされると、パッケージ内のすべての部分配列を返します。"
  remarks: "派生クラス GetPartsCore 実装<xref:System.IO.Packaging.Package.GetParts%2A>にアクセスし、物理的な形式に基づく構成要素の配列を返すメソッドが派生クラスで実装</xref:System.IO.Packaging.Package.GetParts%2A>によって呼び出されます。       既定では、<xref:System.IO.Packaging.ZipPackage>抽象の実装を派生<xref:System.IO.Packaging.Package>クラスが提供される、使用できます</xref:System.IO.Packaging.Package></xref:System.IO.Packaging.ZipPackage>。  既定の操作で<xref:System.IO.Packaging.Package.GetParts%2A>内部的に呼び出す<xref:System.IO.Packaging.Package.GetPartCore%2A>の<xref:System.IO.Packaging.ZipPackage>ZIP ファイルからの部分を取得するクラス</xref:System.IO.Packaging.ZipPackage></xref:System.IO.Packaging.Package.GetPartCore%2A></xref:System.IO.Packaging.Package.GetParts%2A>。       パッケージのモデルとパッケージ パーツの詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様の第 1 章を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();
    parameters: []
    return:
      type: System.IO.Packaging.PackagePart[]
      description: "パッケージに含まれているすべての部分の配列。"
  overload: System.IO.Packaging.Package.GetPartsCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationship(System.String)
  id: GetRelationship(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationship(String)
  nameWithType: Package.GetRelationship(String)
  fullName: System.IO.Packaging.Package.GetRelationship(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した id とパッケージ レベルの関係を返します。"
  remarks: "`id`有効な XML 識別子である必要があります。  `id`型は、XML スキーマ第 2 部に規定された名前付け規則に従う必要があります、xsd:ID: データ型の仕様 (を参照してください[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/#ID))。       パッケージとパッケージ リレーションシップに関する詳細についてを参照してくださいでダウンロード可能な Open Packaging Conventions (OPC) 仕様のセクション 1.3 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public System.IO.Packaging.PackageRelationship GetRelationship (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>を返す、リレーションシップの</xref:System.IO.Packaging.PackageRelationship.Id*>。"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "指定したパッケージ レベル リレーションシップ<code> id</code>です。"
  overload: System.IO.Packaging.Package.GetRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>有効な XML 識別子ではありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定されたリレーションシップ<code> id </code>がパッケージ内にありません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、書き込み専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationships
  id: GetRelationships
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationships()
  nameWithType: Package.GetRelationships()
  fullName: System.IO.Packaging.Package.GetRelationships()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "パッケージ レベルのすべてのリレーションシップのコレクションを返します。"
  remarks: "GetRelationships を返さない`null`; が、返されるコレクションが、パッケージにパッケージ レベルのリレーションシップが含まれていない場合に&0; 個の要素が含まれます。       パッケージ レベルのリレーションシップでは、パッケージと関連付けられているターゲット部品またはリソース間のアソシエーションを定義します。  パッケージ レベルのリレーションシップは、2 つの形式のいずれかを指定できます。      間、<xref:System.IO.Packaging.Package>パッケージではパーツをターゲットにします</xref:System.IO.Packaging.Package>。      間、<xref:System.IO.Packaging.Package>パッケージの外部のターゲット リソースにします</xref:System.IO.Packaging.Package>。       パッケージのリレーションシップでは、パッケージが、リレーションシップの「所有者」と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  作成するか、リレーションシップの削除のプロセスも物理的に、ターゲットのパーツまたは任意の方法でリソースは変更されません。       パッケージとパッケージ リレーションシップに関する詳細についてを参照してくださいでダウンロード可能な Open Packaging Conventions (OPC) 仕様のセクション 1.3 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();
    parameters: []
    return:
      type: System.IO.Packaging.PackageRelationshipCollection
      description: "パッケージに含まれているすべてのパッケージ レベルのリレーションシップのコレクション。"
  overload: System.IO.Packaging.Package.GetRelationships*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、書き込み専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  id: GetRelationshipsByType(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationshipsByType(String)
  nameWithType: Package.GetRelationshipsByType(String)
  fullName: System.IO.Packaging.Package.GetRelationshipsByType(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定された<xref:System.IO.Packaging.PackageRelationship.RelationshipType*>。</xref:System.IO.Packaging.PackageRelationship.RelationshipType*>に一致するすべてのパッケージ レベル リレーションシップのコレクションを返します"
  remarks: "<xref:System.IO.Packaging.Package.GetRelationships%2A>返すことは`null`以外の場合は、返されるコレクションが、指定された一致するパッケージ レベルのリレーションシップが存在しない場合に&0; 個の要素が含まれますが、`relationshipType`です。</xref:System.IO.Packaging.Package.GetRelationships%2A>       次の表は、パッケージ レベル`relationshipType`Open Packaging Conventions (OPC) 仕様で定義されている Uri。      |パッケージ レベル リレーションシップ |リレーションシップ型の URI |  |---------------------------------|---------------------------|  |主要プロパティ | http://schemas.openxmlformats.org/package/2006/relationships/meta データ/コア-プロパティ |  |デジタル署名 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 署名/署名 |  |デジタル署名の証明書 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-署名/証明書 |  |デジタル署名元 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 署名/オリジン |  | サムネイル | http://schemas.openxmlformats.org/package/2006/relationships/meta データ/サムネイル |      詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to retrieve the relationships that have been defined for the package.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);
    parameters:
    - id: relationshipType
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.RelationshipType*>と一致し、コレクション内の取得します</xref:System.IO.Packaging.PackageRelationship.RelationshipType*>。"
    return:
      type: System.IO.Packaging.PackageRelationshipCollection
      description: "指定された一致するパッケージ レベルのリレーションシップのコレクション<code> relationshipType</code>です。"
  overload: System.IO.Packaging.Package.GetRelationshipsByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>relationshipType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>relationshipType</code>空の文字列です。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、書き込み専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream)
  id: Open(System.IO.Stream)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream)
  nameWithType: Package.Open(Stream)
  fullName: System.IO.Packaging.Package.Open(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定された IO ストリームにパッケージを開きます。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>Open メソッドによって使用される既定のパッケージ型です。</xref:System.IO.Packaging.ZipPackage>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "パッケージを開く IO ストリーム。"
    return:
      type: System.IO.Packaging.Package
      description: "開かれたパッケージです。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージを開くには、読み取りまたは読み取り/書き込みアクセス許可と、指定したが必要です。 <code> stream </code>が書き込み専用で、パッケージを開くには、書き込みまたは読み取り/書き込みアクセス許可と指定された必要があります。 または、 <code> stream </code>は読み取り専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String)
  id: Open(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String)
  nameWithType: Package.Open(String)
  fullName: System.IO.Packaging.Package.Open(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定されたパスとファイル名にパッケージを開きます。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>Open メソッドによって使用される既定のパッケージ型です。</xref:System.IO.Packaging.ZipPackage>       これは、<xref:System.IO.Packaging.Package.Open%2A>メソッドは、既定の属性を持つパッケージを開きます<xref:System.IO.FileMode>、 <xref:System.IO.FileAccess>、および<xref:System.IO.FileShare>(をさまざまな属性を使用して、他の Open メソッドのオーバー ロードのいずれかを指定).</xref:System.IO.FileShare> </xref:System.IO.FileAccess> </xref:System.IO.FileMode> </xref:System.IO.Packaging.Package.Open%2A>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path);
    parameters:
    - id: path
      type: System.String
      description: "パッケージのパスとファイル名。"
    return:
      type: System.IO.Packaging.Package
      description: "開かれたパッケージです。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  id: Open(System.IO.Stream,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream,FileMode)
  nameWithType: Package.Open(Stream,FileMode)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定された IO ストリームおよびファイル モードでパッケージを開きます。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>Open メソッドによって使用される既定のパッケージ型です。</xref:System.IO.Packaging.ZipPackage>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "パッケージを開く IO ストリーム。"
    - id: packageMode
      type: System.IO.FileMode
      description: "パッケージを開くファイル モード。"
    return:
      type: System.IO.Packaging.Package
      description: "開かれたパッケージです。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>packageMode</code>値が有効ではありません。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージを開くには、読み取りまたは読み取り/書き込みアクセス許可と、指定したが必要です。 <code> stream </code>が書き込み専用で、パッケージを開くには、書き込みまたは読み取り/書き込みアクセス許可と指定された必要があります。 または、 <code> stream </code>は読み取り専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  id: Open(System.String,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode)
  nameWithType: Package.Open(String,FileMode)
  fullName: System.IO.Packaging.Package.Open(String,FileMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定したファイル モードを使用して、指定したパスにパッケージを開きます。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>Open メソッドによって使用される既定のパッケージ型です。</xref:System.IO.Packaging.ZipPackage>       この Open メソッドが既定の属性を持つパッケージを開いた<xref:System.IO.FileAccess>と<xref:System.IO.FileShare>(をさまざまな属性を使用して、他の Open メソッドのオーバー ロードのいずれかを指定).</xref:System.IO.FileShare> </xref:System.IO.FileAccess>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);
    parameters:
    - id: path
      type: System.String
      description: "パッケージのパスとファイル名。"
    - id: packageMode
      type: System.IO.FileMode
      description: "パッケージを開くファイル モード。"
    return:
      type: System.IO.Packaging.Package
      description: "開かれたパッケージです。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "値を<code> packageMode </code>が無効です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream,FileMode,FileAccess)
  nameWithType: Package.Open(Stream,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した IO ストリーム、ファイル モード、およびファイル アクセスの設定でパッケージを開きます。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>Open メソッドによって使用される既定のパッケージ型です。</xref:System.IO.Packaging.ZipPackage>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "パッケージを開く IO ストリーム。"
    - id: packageMode
      type: System.IO.FileMode
      description: "パッケージを開くファイル モード。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "パッケージを開くときにファイル アクセスします。"
    return:
      type: System.IO.Packaging.Package
      description: "開かれたパッケージです。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value for <code>packageMode</code> or <code>packageAccess</code> is not valid."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "開くには、パッケージは、読み取りまたは読み取り/書き込みアクセス許可と、指定したが必要です。 <code> stream </code>が書き込み専用で、パッケージを開くには、書き込みまたは読み取り/書き込みアクセス許可と指定された必要があります。 または<code> stream </code>は読み取り専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess)
  nameWithType: Package.Open(String,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定したファイル モードおよびファイル アクセスの設定を使用して指定されたパスにパッケージを開きます。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>Open メソッドによって使用される既定のパッケージ型です。</xref:System.IO.Packaging.ZipPackage>       この Open メソッドが、既定値はパッケージを開いた<xref:System.IO.FileShare>属性 (別の属性の使用を指定する、<xref:System.IO.Packaging.Package.Open%2A>メソッドのオーバー ロード).</xref:System.IO.Packaging.Package.Open%2A> </xref:System.IO.FileShare>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to open and read a <xref:System.IO.Packaging.Package> that contains <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);
    parameters:
    - id: path
      type: System.String
      description: "パッケージのパスとファイル名。"
    - id: packageMode
      type: System.IO.FileMode
      description: "パッケージを開くファイル モード。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "パッケージを開くときにファイル アクセスします。"
    return:
      type: System.IO.Packaging.Package
      description: "開かれたパッケージです。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Value for <code>packageMode</code> or <code>packageAccess</code> is not valid."
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: Package.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess,FileShare)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定したファイル モード、ファイルへのアクセスとファイル共有の設定を使用して指定されたパスにパッケージを開きます。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>Open メソッドによって使用される既定のパッケージ型です。</xref:System.IO.Packaging.ZipPackage>       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);
    parameters:
    - id: path
      type: System.String
      description: "パッケージのパスとファイル名。"
    - id: packageMode
      type: System.IO.FileMode
      description: "パッケージを開くファイル モード。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "パッケージを開くときにファイル アクセスします。"
    - id: packageShare
      type: System.IO.FileShare
      description: "ファイル共有をパッケージを開くときのモード。"
    return:
      type: System.IO.Packaging.Package
      description: "開かれたパッケージです。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value for <code>packageMode</code>, <code>packageAccess</code>, or <code>packageShare</code> is not valid."
  platform:
  - net462
- uid: System.IO.Packaging.Package.PackageProperties
  id: PackageProperties
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: PackageProperties
  nameWithType: Package.PackageProperties
  fullName: System.IO.Packaging.Package.PackageProperties
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "パッケージの主要プロパティを取得します。"
  remarks: "主要パッケージ プロパティの追加についてを参照してくださいでダウンロード可能な Open Packaging Conventions (OPC) 仕様のセクション 3.1 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public System.IO.Packaging.PackageProperties PackageProperties { get; }
    return:
      type: System.IO.Packaging.PackageProperties
      description: "パッケージの主要プロパティ。"
  overload: System.IO.Packaging.Package.PackageProperties*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.PartExists(System.Uri)
  id: PartExists(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: PartExists(Uri)
  nameWithType: Package.PartExists(Uri)
  fullName: System.IO.Packaging.Package.PartExists(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した URI を持つパートがパッケージ内にあるかどうかを示します。"
  remarks: "`partUri`スラッシュ文字で始まる必要があります「/」パッケージのルートからの絶対を指定します。       詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public virtual bool PartExists (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "<xref:System.Uri>データ型をチェックするパートの</xref:System.Uri>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定した部分<code> partUri </code>パッケージでは、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Packaging.Package.PartExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは書き込み専用 (情報を読み取ることはできません)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.RelationshipExists(System.String)
  id: RelationshipExists(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: RelationshipExists(String)
  nameWithType: Package.RelationshipExists(String)
  fullName: System.IO.Packaging.Package.RelationshipExists(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指定した ID とパッケージ レベルの関係がパッケージに含まれているかどうかを示します。"
  remarks: "詳細については、ダウンロード、Open Packaging Conventions (OPC) 仕様を参照してください。 [http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)です。"
  syntax:
    content: public bool RelationshipExists (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>データ型をチェックするリレーションシップの</xref:System.IO.Packaging.PackageRelationship.Id*>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合、指定したパッケージ レベル リレーションシップ<code> id </code>パッケージでは、それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IO.Packaging.Package.RelationshipExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>有効な XML 識別子ではありません。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "パッケージが開かれていない (<>*> または<> *> が呼び出された)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "パッケージは、書き込み専用です。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: Package.System.IDisposable.Dispose()
  fullName: System.IO.Packaging.Package.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "このメンバーをサポートしている、[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]インフラストラクチャ アプリケーションが使用できるものではありません。  タイプ セーフを使用して<xref:System.IO.Packaging.Package.Dispose*>メソッド代わりにします</xref:System.IO.Packaging.Package.Dispose*>。"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.IO.Packaging.Package.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package(FileAccess)
  nameWithType: Package.Package(FileAccess)
  fullName: System.IO.Packaging.Package.Package(FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package(FileAccess,Boolean)
  nameWithType: Package.Package(FileAccess,Boolean)
  fullName: System.IO.Packaging.Package.Package(FileAccess,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.Package.Close
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Close()
  nameWithType: Package.Close()
  fullName: System.IO.Packaging.Package.Close()
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart(Uri,String)
  nameWithType: Package.CreatePart(Uri,String)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String)
- uid: System.IO.Packaging.PackagePart
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePart
  nameWithType: PackagePart
  fullName: System.IO.Packaging.PackagePart
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart(Uri,String,CompressionOption)
  nameWithType: Package.CreatePart(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String,CompressionOption)
- uid: System.IO.Packaging.CompressionOption
  parent: System.IO.Packaging
  isExternal: false
  name: CompressionOption
  nameWithType: CompressionOption
  fullName: System.IO.Packaging.CompressionOption
- uid: System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePartCore(Uri,String,CompressionOption)
  nameWithType: Package.CreatePartCore(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePartCore(Uri,String,CompressionOption)
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship(Uri,TargetMode,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String)
- uid: System.IO.Packaging.PackageRelationship
  parent: System.IO.Packaging
  isExternal: false
  name: PackageRelationship
  nameWithType: PackageRelationship
  fullName: System.IO.Packaging.PackageRelationship
- uid: System.IO.Packaging.TargetMode
  parent: System.IO.Packaging
  isExternal: false
  name: TargetMode
  nameWithType: TargetMode
  fullName: System.IO.Packaging.TargetMode
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship(Uri,TargetMode,String,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String,String)
- uid: System.IO.Packaging.Package.DeletePart(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePart(Uri)
  nameWithType: Package.DeletePart(Uri)
  fullName: System.IO.Packaging.Package.DeletePart(Uri)
- uid: System.IO.Packaging.Package.DeletePartCore(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePartCore(Uri)
  nameWithType: Package.DeletePartCore(Uri)
  fullName: System.IO.Packaging.Package.DeletePartCore(Uri)
- uid: System.IO.Packaging.Package.DeleteRelationship(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeleteRelationship(String)
  nameWithType: Package.DeleteRelationship(String)
  fullName: System.IO.Packaging.Package.DeleteRelationship(String)
- uid: System.IO.Packaging.Package.Dispose(System.Boolean)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Package.Dispose(Boolean)
  fullName: System.IO.Packaging.Package.Dispose(Boolean)
- uid: System.IO.Packaging.Package.FileOpenAccess
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
  fullName: System.IO.Packaging.Package.FileOpenAccess
- uid: System.IO.Packaging.Package.Flush
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Flush()
  nameWithType: Package.Flush()
  fullName: System.IO.Packaging.Package.Flush()
- uid: System.IO.Packaging.Package.FlushCore
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FlushCore()
  nameWithType: Package.FlushCore()
  fullName: System.IO.Packaging.Package.FlushCore()
- uid: System.IO.Packaging.Package.GetPart(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPart(Uri)
  nameWithType: Package.GetPart(Uri)
  fullName: System.IO.Packaging.Package.GetPart(Uri)
- uid: System.IO.Packaging.Package.GetPartCore(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartCore(Uri)
  nameWithType: Package.GetPartCore(Uri)
  fullName: System.IO.Packaging.Package.GetPartCore(Uri)
- uid: System.IO.Packaging.Package.GetParts
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetParts()
  nameWithType: Package.GetParts()
  fullName: System.IO.Packaging.Package.GetParts()
- uid: System.IO.Packaging.PackagePartCollection
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePartCollection
  nameWithType: PackagePartCollection
  fullName: System.IO.Packaging.PackagePartCollection
- uid: System.IO.Packaging.Package.GetPartsCore
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartsCore()
  nameWithType: Package.GetPartsCore()
  fullName: System.IO.Packaging.Package.GetPartsCore()
- uid: System.IO.Packaging.PackagePart[]
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePart
  nameWithType: PackagePart
  fullName: System.IO.Packaging.PackagePart[]
  spec.csharp:
  - uid: System.IO.Packaging.PackagePart
    name: PackagePart
    nameWithType: PackagePart
    fullName: PackagePart[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Packaging.Package.GetRelationship(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationship(String)
  nameWithType: Package.GetRelationship(String)
  fullName: System.IO.Packaging.Package.GetRelationship(String)
- uid: System.IO.Packaging.Package.GetRelationships
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationships()
  nameWithType: Package.GetRelationships()
  fullName: System.IO.Packaging.Package.GetRelationships()
- uid: System.IO.Packaging.PackageRelationshipCollection
  parent: System.IO.Packaging
  isExternal: false
  name: PackageRelationshipCollection
  nameWithType: PackageRelationshipCollection
  fullName: System.IO.Packaging.PackageRelationshipCollection
- uid: System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationshipsByType(String)
  nameWithType: Package.GetRelationshipsByType(String)
  fullName: System.IO.Packaging.Package.GetRelationshipsByType(String)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream)
  nameWithType: Package.Open(Stream)
  fullName: System.IO.Packaging.Package.Open(Stream)
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Packaging.Package.Open(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String)
  nameWithType: Package.Open(String)
  fullName: System.IO.Packaging.Package.Open(String)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream,FileMode)
  nameWithType: Package.Open(Stream,FileMode)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode)
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode)
  nameWithType: Package.Open(String,FileMode)
  fullName: System.IO.Packaging.Package.Open(String,FileMode)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream,FileMode,FileAccess)
  nameWithType: Package.Open(Stream,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode,FileAccess)
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode,FileAccess)
  nameWithType: Package.Open(String,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess)
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: Package.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.Packaging.Package.PackageProperties
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PackageProperties
  nameWithType: Package.PackageProperties
  fullName: System.IO.Packaging.Package.PackageProperties
- uid: System.IO.Packaging.PackageProperties
  parent: System.IO.Packaging
  isExternal: false
  name: PackageProperties
  nameWithType: PackageProperties
  fullName: System.IO.Packaging.PackageProperties
- uid: System.IO.Packaging.Package.PartExists(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PartExists(Uri)
  nameWithType: Package.PartExists(Uri)
  fullName: System.IO.Packaging.Package.PartExists(Uri)
- uid: System.IO.Packaging.Package.RelationshipExists(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: RelationshipExists(String)
  nameWithType: Package.RelationshipExists(String)
  fullName: System.IO.Packaging.Package.RelationshipExists(String)
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose
  parent: System.IO.Packaging.Package
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: Package.System.IDisposable.Dispose()
  fullName: System.IO.Packaging.Package.System.IDisposable.Dispose()
- uid: System.IO.Packaging.Package.#ctor*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package
  nameWithType: Package.Package
- uid: System.IO.Packaging.Package.Close*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Close
  nameWithType: Package.Close
- uid: System.IO.Packaging.Package.CreatePart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart
  nameWithType: Package.CreatePart
- uid: System.IO.Packaging.Package.CreatePartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePartCore
  nameWithType: Package.CreatePartCore
- uid: System.IO.Packaging.Package.CreateRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship
  nameWithType: Package.CreateRelationship
- uid: System.IO.Packaging.Package.DeletePart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePart
  nameWithType: Package.DeletePart
- uid: System.IO.Packaging.Package.DeletePartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePartCore
  nameWithType: Package.DeletePartCore
- uid: System.IO.Packaging.Package.DeleteRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeleteRelationship
  nameWithType: Package.DeleteRelationship
- uid: System.IO.Packaging.Package.Dispose*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Dispose
  nameWithType: Package.Dispose
- uid: System.IO.Packaging.Package.FileOpenAccess*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
- uid: System.IO.Packaging.Package.Flush*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Flush
  nameWithType: Package.Flush
- uid: System.IO.Packaging.Package.FlushCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FlushCore
  nameWithType: Package.FlushCore
- uid: System.IO.Packaging.Package.GetPart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPart
  nameWithType: Package.GetPart
- uid: System.IO.Packaging.Package.GetPartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartCore
  nameWithType: Package.GetPartCore
- uid: System.IO.Packaging.Package.GetParts*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetParts
  nameWithType: Package.GetParts
- uid: System.IO.Packaging.Package.GetPartsCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartsCore
  nameWithType: Package.GetPartsCore
- uid: System.IO.Packaging.Package.GetRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationship
  nameWithType: Package.GetRelationship
- uid: System.IO.Packaging.Package.GetRelationships*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationships
  nameWithType: Package.GetRelationships
- uid: System.IO.Packaging.Package.GetRelationshipsByType*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationshipsByType
  nameWithType: Package.GetRelationshipsByType
- uid: System.IO.Packaging.Package.Open*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open
  nameWithType: Package.Open
- uid: System.IO.Packaging.Package.PackageProperties*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PackageProperties
  nameWithType: Package.PackageProperties
- uid: System.IO.Packaging.Package.PartExists*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PartExists
  nameWithType: Package.PartExists
- uid: System.IO.Packaging.Package.RelationshipExists*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: RelationshipExists
  nameWithType: Package.RelationshipExists
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: Package.System.IDisposable.Dispose
