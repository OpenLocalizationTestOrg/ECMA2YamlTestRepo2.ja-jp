### YamlMime:ManagedReference
items:
- uid: System.Web.Management.WebEventProvider
  id: WebEventProvider
  children:
  - System.Web.Management.WebEventProvider.#ctor
  - System.Web.Management.WebEventProvider.Flush
  - System.Web.Management.WebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)
  - System.Web.Management.WebEventProvider.Shutdown
  langs:
  - csharp
  name: WebEventProvider
  nameWithType: WebEventProvider
  fullName: System.Web.Management.WebEventProvider
  type: Class
  summary: "非バッファー イベント プロバイダーの基本クラスを提供します。"
  remarks: "配置済みの Web アプリケーションの管理を運用環境と運用スタッフは、ASP.NET の状態監視できます。 <xref:System.Web.Management>名前空間には、アプリケーションの正常性状態のデータおよびプロバイダーの種類は、このデータ処理をパッケージ化する正常性イベントの種類が含まれています</xref:System.Web.Management>。 正常性イベントの管理を支援するサポート型も含まれています。       正常性イベントの処理をカスタマイズする場合は、独自のカスタム プロバイダーを作成する WebEventProvider クラスから派生できます。      > [!NOTE] > ほとんどの場合はできる実装されると、ASP.NET の稼働状況の監視の種類を使用して、内の値を指定することで、稼働状況の監視システムを制御する、`healthMonitoring`構成セクション。 独自のカスタム イベントおよびプロバイダーを作成する正常性の監視の種類からも派生できます。 WebEventProvider クラスから派生するの例は、このトピックで例を参照してください。"
  example:
  - "The following code example shows how to derive from the WebEventProvider class to create a custom provider that writes the configured events to a local file for which appropriate access rights must be granted. This custom provider example is simple and its main intent is to give you as developer full control of its basic mechanisms. In a real-world scenario, you could use this provider and especially the example buffered provider available at <xref:System.Web.Management.BufferedWebEventProvider>, as a preliminary probe into the behavior of an application. This can help you during the design stage to gain an understanding of the information available; then later you can direct this information to a more complex provider.  \n  \n The following configuration file excerpt shows a `healthMonitoring` section configuration that enables ASP.NET to use the custom provider defined above to process all health-monitoring events.  \n  \n```  \n<healthMonitoring   \n  heartBeatInterval=\"0\"   \n  enabled=\"true\">  \n  \n    <providers>  \n  \n      <add name=\"SampleWebEventProvider\"   \n        type=\"SamplesAspNet.SampleEventProvider,webeventprovider, Version=1.0.1773.33989, Culture=neutral, PublicKeyToken=cf85aa6c978d9dea, processorArchitecture=MSIL\" />  \n  \n    </providers>  \n  \n    <rules>  \n  \n      <rule   \n        name=\"Custom Event Provider\"  \n        eventName=\"All Events\"  \n        provider=\"SampleWebEventProvider\"  \n        profile=\"Default\" />  \n    </rules>  \n  \n</healthMonitoring>  \n```  \n  \n [!code-vb[System.Web.Management.WebEventProvider#1](~/add/codesnippet/visualbasic/t-system.web.management._8_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#1](~/add/codesnippet/csharp/t-system.web.management._8_1.cs)]"
  syntax:
    content: 'public abstract class WebEventProvider : System.Configuration.Provider.ProviderBase'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.#ctor
  id: '#ctor'
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: WebEventProvider()
  nameWithType: WebEventProvider.WebEventProvider()
  fullName: System.Web.Management.WebEventProvider.WebEventProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Web.Management.WebEventProvider&quot;> </xref>クラスです。"
  remarks: "WebEventProvider コンス トラクターは、コードから直接使用するものではありません。 ASP.NET によって呼び出されます。 <xref:System.Web.Management.WebEventProvider>クラス</xref:System.Web.Management.WebEventProvider>から派生している場合は、WebEventProvider コンス トラクターを呼び出すことができます。"
  example:
  - "The following code example shows how to use this constructor in a custom event provider.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#2](~/add/codesnippet/visualbasic/m-system.web.management._4_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#2](~/add/codesnippet/csharp/m-system.web.management._4_1.cs)]"
  syntax:
    content: protected WebEventProvider ();
    parameters: []
  overload: System.Web.Management.WebEventProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.Flush
  id: Flush
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: Flush()
  nameWithType: WebEventProvider.Flush()
  fullName: System.Web.Management.WebEventProvider.Flush()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "プロバイダーのバッファーからイベントをイベント ログに移動します。"
  remarks: "このメソッドが呼び出されると、バッファー内の最後の書き込みまたはイベントの数からバッファー内のイベントがバッファーからどれだけ時間に関係なく、イベント ログにすぐに移動したすべての経過します。 最後の書き込みの時間は、フラッシュ操作の時間にリセットされます。"
  example:
  - "The following code example shows how to use the Flush method.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#3](~/add/codesnippet/visualbasic/m-system.web.management._8_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#3](~/add/codesnippet/csharp/m-system.web.management._8_1.cs)]"
  syntax:
    content: public abstract void Flush ();
    parameters: []
  overload: System.Web.Management.WebEventProvider.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)
  id: ProcessEvent(System.Web.Management.WebBaseEvent)
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: ProcessEvent(WebBaseEvent)
  nameWithType: WebEventProvider.ProcessEvent(WebBaseEvent)
  fullName: System.Web.Management.WebEventProvider.ProcessEvent(WebBaseEvent)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "プロバイダーに渡されたイベントを処理します。"
  remarks: "これは、イベントの処理を開始するを呼び出す ASP.NET 正常性の監視方法です。"
  example:
  - "The following code example shows how to implement the ProcessEvent method. This method appends the customized string representation of the event to a specific log file.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#5](~/add/codesnippet/visualbasic/c7aedb1e-f1f1-4da6-99cd-_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#5](~/add/codesnippet/csharp/c7aedb1e-f1f1-4da6-99cd-_1.cs)]"
  syntax:
    content: public abstract void ProcessEvent (System.Web.Management.WebBaseEvent raisedEvent);
    parameters:
    - id: raisedEvent
      type: System.Web.Management.WebBaseEvent
      description: "<xref href=&quot;System.Web.Management.WebBaseEvent&quot;> </xref>オブジェクトを処理します。"
  overload: System.Web.Management.WebEventProvider.ProcessEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.Shutdown
  id: Shutdown
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: Shutdown()
  nameWithType: WebEventProvider.Shutdown()
  fullName: System.Web.Management.WebEventProvider.Shutdown()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "プロバイダーのシャット ダウンに関連付けられているタスクを実行します。"
  remarks: "ASP.NET の呼び出し、<xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A>メソッドは、Web アプリケーションをホストしているアプリケーション ドメインが終了するとします</xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A>。 メソッドが呼び出されて、リソースを閉じるなどを正常に終了するアプリケーションを許可するタスクを実行します。"
  example:
  - "The following code example shows how to use the Shutdown method.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#4](~/add/codesnippet/visualbasic/m-system.web.management._0_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#4](~/add/codesnippet/csharp/m-system.web.management._0_1.cs)]"
  syntax:
    content: public abstract void Shutdown ();
    parameters: []
  overload: System.Web.Management.WebEventProvider.Shutdown*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Web.Management.WebEventProvider.#ctor
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: WebEventProvider()
  nameWithType: WebEventProvider.WebEventProvider()
  fullName: System.Web.Management.WebEventProvider.WebEventProvider()
- uid: System.Web.Management.WebEventProvider.Flush
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Flush()
  nameWithType: WebEventProvider.Flush()
  fullName: System.Web.Management.WebEventProvider.Flush()
- uid: System.Web.Management.WebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: ProcessEvent(WebBaseEvent)
  nameWithType: WebEventProvider.ProcessEvent(WebBaseEvent)
  fullName: System.Web.Management.WebEventProvider.ProcessEvent(WebBaseEvent)
- uid: System.Web.Management.WebBaseEvent
  parent: System.Web.Management
  isExternal: false
  name: WebBaseEvent
  nameWithType: WebBaseEvent
  fullName: System.Web.Management.WebBaseEvent
- uid: System.Web.Management.WebEventProvider.Shutdown
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Shutdown()
  nameWithType: WebEventProvider.Shutdown()
  fullName: System.Web.Management.WebEventProvider.Shutdown()
- uid: System.Web.Management.WebEventProvider.#ctor*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: WebEventProvider
  nameWithType: WebEventProvider.WebEventProvider
- uid: System.Web.Management.WebEventProvider.Flush*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Flush
  nameWithType: WebEventProvider.Flush
- uid: System.Web.Management.WebEventProvider.ProcessEvent*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: ProcessEvent
  nameWithType: WebEventProvider.ProcessEvent
- uid: System.Web.Management.WebEventProvider.Shutdown*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Shutdown
  nameWithType: WebEventProvider.Shutdown
