### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.IWebPart
  id: IWebPart
  children:
  - System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl
  - System.Web.UI.WebControls.WebParts.IWebPart.Description
  - System.Web.UI.WebControls.WebParts.IWebPart.Subtitle
  - System.Web.UI.WebControls.WebParts.IWebPart.Title
  - System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl
  - System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl
  langs:
  - csharp
  name: IWebPart
  nameWithType: IWebPart
  fullName: System.Web.UI.WebControls.WebParts.IWebPart
  type: Interface
  summary: "ASP.NET で使用される共通のユーザー インターフェイス (UI) プロパティを定義<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref>コントロール。"
  remarks: "IWebPart インターフェイスの操作のユーザー エクスペリエンスを強化する UI 指向プロパティをいくつかの提供<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>。 ベースから派生したコントロールを作成するとき<xref:System.Web.UI.WebControls.WebParts.WebPart>クラス、取得するすべてのプロパティの実装 IWebPart インターフェイスのため、<xref:System.Web.UI.WebControls.WebParts.WebPart>基底クラスは、このインターフェイスを実装します</xref:System.Web.UI.WebControls.WebParts.WebPart></xref:System.Web.UI.WebControls.WebParts.WebPart>。       既存のユーザー コントロール、ASP.NET コントロール、またはカスタム サーバー コントロールから継承していないことを使用することができます、<xref:System.Web.UI.WebControls.WebParts.WebPart>クラスは、Web パーツ アプリケーションの一部として、IWebPart インターフェイスで宣言されたこれらの UI 指向プロパティを使用することもできます</xref:System.Web.UI.WebControls.WebParts.WebPart>。 内の既存のサーバー コントロールを配置する場合、<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>でラップされる実行時に、ゾーン、<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>オブジェクト</xref:System.Web.UI.WebControls.WebParts.GenericWebPart></xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>。 <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>クラスから継承、<xref:System.Web.UI.WebControls.WebParts.WebPart>基底クラスは、これを有効に機能する既存のサーバー コントロールとして true<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールとそのに追加して IWebPart インターフェイスのプロパティ</xref:System.Web.UI.WebControls.WebParts.WebPart></xref:System.Web.UI.WebControls.WebParts.WebPart></xref:System.Web.UI.WebControls.WebParts.GenericWebPart>。       ないサーバー コントロールを配置する場合<xref:System.Web.UI.WebControls.WebParts.WebPart>ゾーンでのコントロールを実行時に IWebPart プロパティを使用でき、(ページ永続形式) 内のページのマークアップ内のサーバー コントロールでこれらのプロパティの値を宣言することもできます</xref:System.Web.UI.WebControls.WebParts.WebPart>。 ただし、実行時にこれらのプロパティをサーバー コントロールで使用できるだけであるため IntelliSense などのデザイン時のコーディング機能を認識しません IWebPart プロパティは宣言されているサーバー コントロール。 これらのコントロールに宣言されたプロパティは、Microsoft Visual Studio は認識されませんプロパティとして有効なデザイン時に、ページを読み込むときに引き続き動作します。 IWebPart プロパティの既存のサーバーと、デザイン時のユーザー エクスペリエンスを強化するためにユーザー コントロールを追加する場合は、サーバー コントロールに IWebPart インターフェイスを実装することができます。       おそらく IWebPart インターフェイスを実装する主な理由は、(カスタム) の expando プロパティの使用をサポートしないコントロールです。 Expando プロパティは、追加できるクラスを動的にプロパティとしての文字列、<xref:System.Web.UI.IAttributeAccessor>インターフェイス</xref:System.Web.UI.IAttributeAccessor>。 このインターフェイスを実装するコントロールを含む、<xref:System.Web.UI.WebControls.WebControl>クラスとその子 expando プロパティを使用できます</xref:System.Web.UI.WebControls.WebControl>。 そのため、すべての ASP.NET サーバー コントロール、カスタム コントロールを派生させて、Web ユーザー コントロールと<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロールが expando プロパティの使用をサポートします</xref:System.Web.UI.WebControls.WebParts.WebPart>。 基数から直接継承する、カスタム コントロール<xref:System.Web.UI.Control>クラスは expando プロパティをサポートしていません</xref:System.Web.UI.Control>。 したがってに<xref:System.Web.UI.WebControls.WebParts.WebPartZone><xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A>や<xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A>.</xref:System.Web.UI.WebControls.WebParts.IWebPart.Description%2A></xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A>などのプロパティ、コントロールの一般的な IWebPart プロパティを宣言することはできません、</xref:System.Web.UI.WebControls.WebParts.WebPartZone>これらのコントロールを宣言するかどうか このようなコントロールでこれらのプロパティを使用する場合は、IWebPart インターフェイスを実装する必要があります。"
  example:
  - "The following code example demonstrates how to implement the IWebPart interface in a user control. This is a simple implementation that shows minimally how to implement the properties.  \n  \n The first part of the code example shows the user control. The user control implements all the properties of the IWebPart interface, plus two additional public properties tied to controls in the user interface. The two custom properties each use the `Personalizable` attribute, which enables the values in those properties to be saved across browser sessions. Note that in the base <xref:System.Web.UI.WebControls.WebParts.WebPart> class implementation, all the properties of the IWebPart interface are implemented as personalizable as well, though they are not in this code example.  \n  \n [!code-cs[WebParts_IWebPart_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_228_1.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_228_1.ascx)]  \n  \n The second part of the code example shows the Web page that hosts the user control. The page has a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, within which the user control is referenced. Notice that several of the IWebPart interface's property values are set declaratively in the markup for the user control, which enables it to both behave and appear similar to a <xref:System.Web.UI.WebControls.WebParts.WebPart> control at design time and run time. If you load the page in a browser, you can use the UI on the page to demonstrate the ability to programmatically change the values of the implemented IWebPart properties at run time. When you change some of the property values, the changes are not evident on the page, but are visible in the page source (the <xref:System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl%2A> property), or are stored in the application's state data (the <xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A> property).  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_IWebPart_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_228_2.aspx)]\n [!code-cs[WebParts_IWebPart_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_228_2.aspx)]"
  syntax:
    content: public interface IWebPart
  implements: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl
  id: CatalogIconImageUrl
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  langs:
  - csharp
  name: CatalogIconImageUrl
  nameWithType: IWebPart.CatalogIconImageUrl
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得または設定の URL を表すイメージ、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>コントロールのカタログ内のコントロールです。"
  remarks: "多くの場合、web パーツ アプリケーションは、ユーザーがページに追加できるコントロールのカタログ (または一覧) を提供します。 コントロールの CatalogIconImageUrl プロパティには、コントロールを表すカタログで表示されるイメージの URL が含まれています。"
  example:
  - "The following code example demonstrates declarative and programmatic use of the CatalogIconImageUrl property. The complete source code for the example is found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.IWebPart> class overview.  \n  \n The first part of the code example shows how the user control implements the CatalogIconImageUrl property.  \n  \n [!code-cs[WebParts_IWebPart_Overview#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_305_1.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_305_1.ascx)]  \n  \n The second part of the code example demonstrates the method in the user control that programmatically sets the value of the CatalogIconImageUrl property when a user selects the appropriate property name from the radio buttons on the page, sets a new value in the text box, and then clicks the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPart_Overview#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_305_2.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_305_2.ascx)]  \n  \n The third part of the code example shows how the user control that implements the <xref:System.Web.UI.WebControls.WebParts.IWebPart> interface is referenced in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, and how the CatalogIconImageUrl property is set declaratively on the control. Note that because there is no catalog of Web Parts controls provided with this example, you cannot see the actual effect of setting this property.  \n  \n [!code-vb[WebParts_IWebPart_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_305_3.aspx)]\n [!code-cs[WebParts_IWebPart_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_305_3.aspx)]"
  syntax:
    content: public string CatalogIconImageUrl { get; set; }
    return:
      type: System.String
      description: "カタログ内のコントロールを表すために使用されるイメージの URL を表す文字列。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Description
  id: Description
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  langs:
  - csharp
  name: Description
  nameWithType: IWebPart.Description
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.Description
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得または設定のツールヒントやカタログで使用する、コントロールの動作をまとめた簡単な語句<xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;></xref>コントロール。"
  remarks: "一覧を提供するカタログ内のコントロールの説明の文字列として Description プロパティの値が通常使用される<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール、およびコントロールのタイトル バーのツールヒントとして</xref:System.Web.UI.WebControls.WebParts.WebPart> プロパティのコンテンツは、ユーザーがコントロールのタイトル バーのタイトル テキストの上にマウス ポインターを置いたときに、ツールヒントに表示されます。"
  example:
  - "The following code example demonstrates declarative and programmatic use of the Description property. The complete source code for the example is found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.IWebPart> class overview.  \n  \n The first part of the code example shows how the user control implements the Description property.  \n  \n [!code-cs[WebParts_IWebPart_Overview#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_284_1.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_284_1.ascx)]  \n  \n The second part of the code example demonstrates the method in the user control that programmatically sets the value of the Description property when a user selects the appropriate property name from the radio buttons on the page, sets a new value in the text box, and then clicks the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPart_Overview#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_284_2.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_284_2.ascx)]  \n  \n The third part of the code example shows how the user control that implements the <xref:System.Web.UI.WebControls.WebParts.IWebPart> interface is referenced in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, and how the Description property is set declaratively on the control. Note that you can see the value of this property by positioning your mouse pointer over the title text in the control's title bar, after you have loaded the page in a browser. You can also experiment with changing the property value programmatically at run time by loading the Web page and using the provided user interface (UI) to change the property value.  \n  \n [!code-vb[WebParts_IWebPart_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_284_3.aspx)]\n [!code-cs[WebParts_IWebPart_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_284_3.aspx)]"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "文字列には、コントロールの機能を簡単に説明をまとめたものです。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.WebParts.IWebPart.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Subtitle
  id: Subtitle
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  langs:
  - csharp
  name: Subtitle
  nameWithType: IWebPart.Subtitle
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.Subtitle
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "連結した文字列を取得、<xref:System.Web.UI.WebControls.WebParts.IWebPart.Title*>の完全なタイトルを形成するプロパティ値、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>コントロール</xref:System.Web.UI.WebControls.WebParts.IWebPart.Title*>。"
  remarks: "<xref:System.Web.UI.WebControls.WebParts.WebPart>タイトル バーにコントロールのタイトルに追加するコントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>の既定の字幕文字列を返すため、字幕プロパティに使用します。       実装するコントロールで字幕プロパティの既定値を指定する場合、<xref:System.Web.UI.WebControls.WebParts.IWebPart>インターフェイスを自動的に設定するコントロールの値に追加の Web パーツ、<xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A>実行時にコントロールのプロパティ</xref:System.Web.UI.WebControls.WebParts.IWebPart.Title%2A></xref:System.Web.UI.WebControls.WebParts.IWebPart>。"
  example:
  - "The following code example demonstrates declarative and programmatic use of the Subtitle property. The complete source code for the example is found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.IWebPart> class overview.  \n  \n The first part of the code example shows how the user control implements the Subtitle property. Note that the property is read-only and is meant to be used to provide a default subtitle that is appended to the main title of a control.  \n  \n [!code-cs[WebParts_IWebPart_Overview#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_11_1.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_11_1.ascx)]  \n  \n The second part of the code example shows how the user control that implements the <xref:System.Web.UI.WebControls.WebParts.IWebPart> interface is referenced in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, and how the writable properties from <xref:System.Web.UI.WebControls.WebParts.IWebPart> are set declaratively on the control. After you load the page in a browser, note that the default value of the Subtitle property, which was set in the user control's implementation code, is appended to the title in the control's title bar.  \n  \n [!code-vb[WebParts_IWebPart_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_11_2.aspx)]\n [!code-cs[WebParts_IWebPart_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_11_2.aspx)]"
  syntax:
    content: public string Subtitle { get; }
    return:
      type: System.String
      description: "コントロールのサブタイトルとして機能する文字列。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.WebParts.IWebPart.Subtitle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Title
  id: Title
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  langs:
  - csharp
  name: Title
  nameWithType: IWebPart.Title
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.Title
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得または設定のタイトル、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>コントロール。"
  remarks: "コントロールのタイトル バーに表示されるタイトルのテキストは、Title プロパティによって設定されます。       コントロールのタイトルを指定しない場合、Web パーツ コントロール セットを自動的には、タイトルとして使用する既定の文字列を計算します。 詳細については、 <xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A>。</xref:System.Web.UI.WebControls.WebParts.WebPart.DisplayTitle%2A>を参照してください。 また、タイトル文字列に追加される既定のサブタイトルを指定することができます。 詳細については、 <xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A>。</xref:System.Web.UI.WebControls.WebParts.IWebPart.Subtitle%2A>を参照してください。"
  example:
  - "The following code example demonstrates declarative and programmatic use of the Title property. The complete source code for the example is found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.IWebPart> class overview.  \n  \n The first part of the code example shows how the user control implements the Title property.  \n  \n [!code-cs[WebParts_IWebPart_Overview#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_801_1.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_801_1.ascx)]  \n  \n The second part of the code example demonstrates the method in the user control that programmatically sets the value of the Title property when a user selects the appropriate property name from the radio buttons on the page, sets a new value in the text box, and then clicks the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPart_Overview#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_801_2.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_801_2.ascx)]  \n  \n The third part of the code example shows how the user control that implements the <xref:System.Web.UI.WebControls.WebParts.IWebPart> interface is referenced in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, and how the Title property is set declaratively on the control.  \n  \n [!code-vb[WebParts_IWebPart_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_801_3.aspx)]\n [!code-cs[WebParts_IWebPart_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_801_3.aspx)]"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "コントロールのタイトルを含む文字列です。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.WebParts.IWebPart.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl
  id: TitleIconImageUrl
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  langs:
  - csharp
  name: TitleIconImageUrl
  nameWithType: IWebPart.TitleIconImageUrl
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得またはコントロールのタイトル バーに Web パーツ コントロールを表すために使用されるイメージの URL を設定します。"
  remarks: "TitleIconImageUrl プロパティをアイコンに関連付ける方法を提供する、<xref:System.Web.UI.WebControls.WebParts.WebPart>コントロール</xref:System.Web.UI.WebControls.WebParts.WebPart>。 コントロールのタイトル バーにアイコンが表示されます。 テーマの一貫性を保つのため、アプリケーション開発者がこのアイコンを Web パーツ コントロールのカタログでコントロールを表す画像のようにする可能性があります (で参照されている画像、<xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A>プロパティ).</xref:System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl%2A>       Web パーツ コントロールで実装されている設定、TitleIconImageUrl のプロパティは、イメージまたはコントロールのタイトル バーに表示されるアイコンを変更するのには、エンドユーザーがカスタマイズできます。"
  example:
  - "The following code example demonstrates declarative and programmatic use of the TitleIconImageUrl property. The complete source code for the example is found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.IWebPart> class overview.  \n  \n The first part of the code example shows how the user control implements the TitleIconImageUrl property.  \n  \n [!code-cs[WebParts_IWebPart_Overview#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_309_1.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_309_1.ascx)]  \n  \n The second part of the code example demonstrates the method in the user control that programmatically sets the value of the TitleIconImageUrl property when a user selects the appropriate property name from the radio buttons on the page, sets a new value in the text box, and then clicks the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPart_Overview#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_309_2.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_309_2.ascx)]  \n  \n The third part of the code example shows how the user control that implements the <xref:System.Web.UI.WebControls.WebParts.IWebPart> interface is referenced in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, and how the TitleIconImageUrl property is set declaratively on the control. Note that if you do not provide the URL to a real image, a placeholder for the icon appears in the title bar.  \n  \n [!code-vb[WebParts_IWebPart_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_309_3.aspx)]\n [!code-cs[WebParts_IWebPart_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_309_3.aspx)]"
  syntax:
    content: public string TitleIconImageUrl { get; set; }
    return:
      type: System.String
      description: "イメージの URL を表す文字列。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl
  id: TitleUrl
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  langs:
  - csharp
  name: TitleUrl
  nameWithType: IWebPart.TitleUrl
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "取得または補足情報への URL を設定、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>コントロール。"
  remarks: "URL を TitleUrl プロパティに割り当てると、コントロールのタイトルはリンクになります。 このプロパティの目的では、コントロールに関する追加情報にアクセスするエンドユーザーの便利な手段です。 詳細については、著作権データ、連絡先情報は、コントロールの作成者やコントロールの用途の概要の詳細を提供できます。      > [!NOTE] > 通常はありません、TitleUrl プロパティを使用するヘルプ コンテンツにリンクします。 コントロールが使用するには、ヘルプへのリンクを提供する最善の方法、<xref:System.Web.UI.WebControls.WebParts.WebPart.HelpUrl%2A>プロパティ</xref:System.Web.UI.WebControls.WebParts.WebPart.HelpUrl%2A>。"
  example:
  - "The following code example demonstrates declarative and programmatic use of the TitleUrl property. The complete source code for the example is found in the Example section of the <xref:System.Web.UI.WebControls.WebParts.IWebPart> class overview.  \n  \n The first part of the code example shows how the user control implements the TitleUrl property.  \n  \n [!code-cs[WebParts_IWebPart_Overview#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_189_1.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_189_1.ascx)]  \n  \n The second part of the code example demonstrates the method in the user control that programmatically sets the value of the TitleUrl property when a user selects the appropriate property name from the radio buttons on the page, sets a new value in the text box, and then clicks the **Update** button.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_IWebPart_Overview#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_189_2.ascx)]\n [!code-vb[WebParts_IWebPart_Overview#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_189_2.ascx)]  \n  \n The third part of the code example shows how the user control that implements the <xref:System.Web.UI.WebControls.WebParts.IWebPart> interface is referenced in a <xref:System.Web.UI.WebControls.WebParts.WebPartZone> control, and how the TitleUrl property is set declaratively on the control. Note that if you do not provide a URL to a real page, and then a user clicks the link in the title bar, an error message appears.  \n  \n [!code-vb[WebParts_IWebPart_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_189_3.aspx)]\n [!code-cs[WebParts_IWebPart_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_189_3.aspx)]"
  syntax:
    content: public string TitleUrl { get; set; }
    return:
      type: System.String
      description: "についての詳細情報への URL を表す文字列、 <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>コントロール。 既定値は空の文字列 (&quot;&quot;) です。"
  overload: System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: CatalogIconImageUrl
  nameWithType: IWebPart.CatalogIconImageUrl
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Description
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: Description
  nameWithType: IWebPart.Description
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.Description
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Subtitle
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: Subtitle
  nameWithType: IWebPart.Subtitle
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.Subtitle
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Title
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: Title
  nameWithType: IWebPart.Title
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.Title
- uid: System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: TitleIconImageUrl
  nameWithType: IWebPart.TitleIconImageUrl
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl
- uid: System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: TitleUrl
  nameWithType: IWebPart.TitleUrl
  fullName: System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl
- uid: System.Web.UI.WebControls.WebParts.IWebPart.CatalogIconImageUrl*
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: CatalogIconImageUrl
  nameWithType: IWebPart.CatalogIconImageUrl
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Description*
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: Description
  nameWithType: IWebPart.Description
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Subtitle*
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: Subtitle
  nameWithType: IWebPart.Subtitle
- uid: System.Web.UI.WebControls.WebParts.IWebPart.Title*
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: Title
  nameWithType: IWebPart.Title
- uid: System.Web.UI.WebControls.WebParts.IWebPart.TitleIconImageUrl*
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: TitleIconImageUrl
  nameWithType: IWebPart.TitleIconImageUrl
- uid: System.Web.UI.WebControls.WebParts.IWebPart.TitleUrl*
  parent: System.Web.UI.WebControls.WebParts.IWebPart
  isExternal: false
  name: TitleUrl
  nameWithType: IWebPart.TitleUrl
