### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Services.SessionAuthenticationModule
  id: SessionAuthenticationModule
  children:
  - System.IdentityModel.Services.SessionAuthenticationModule.#ctor
  - System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  - System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  - System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  - System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  - System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  - System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie
  - System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  - System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration
  - System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  - System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])
  - System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  - System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  - System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  - System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  - System.IdentityModel.Services.SessionAuthenticationModule.SignOut
  - System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  - System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  - System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  langs:
  - csharp
  name: SessionAuthenticationModule
  nameWithType: SessionAuthenticationModule
  fullName: System.IdentityModel.Services.SessionAuthenticationModule
  type: Class
  summary: "WS フェデレーション シナリオでセッション cookie を処理する ASP.NET モジュールを実装します。"
  remarks: "When present in the ASP.NET pipeline, the SessionAuthenticationModule (SAM) processes session cookies in WS-Federation scenarios. It uses the cookie handler specified by the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property to read the raw session cookie from the HTTP request and write it to the HTTP response. It uses the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> that is configured for an application to deserialize the raw session cookie into <xref:System.IdentityModel.Tokens.SessionSecurityToken> objects. The session security token contains the claims (<xref:System.Security.Claims.Claim>) and principal (<xref:System.Security.Claims.ClaimsPrincipal>) associated with the entity for which the request is being served.  \n  \n The SAM adds its <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> event handler to the <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> event in the ASP.NET pipeline. This handler intercepts sign-in requests, and, if there is a session cookie, deserializes it into a session token, and sets the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> and <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> properties to the claims principal contained in the session token. It invokes several of the other methods exposed by the SAM during this process.  \n  \n The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method can be invoked to sign the user out of a session (for example, in a SignOut.aspx.cs code-behind file).  \n  \n The SAM exposes several events that provide access to its processing pipeline. The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> events enable you to modify session tokens that are read from cookies or created during processing. Typically, this is done to add, remove, or transform claims in the token or to adjust its expiration time. The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut>, <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut>, and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> events provide hooks into the processing of sign-out requests. For many scenarios, simply adding handlers for these events, often to the global.asax.cs file, will be sufficient.  \n  \n For more complicated scenarios, you can derive from SessionAuthenticationModule to implement a custom SAM. To this end, many of the methods that are invoked during <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> are exposed so that you can provide custom behavior at specific stages of the session processing lifecycle.  \n  \n You can add the SAM to the ASP.NET pipeline in a configuration file by adding it to the HTTP modules under either the `<system.webServer>` element for IIS version 7 and later or under the `<system.web>` element for versions prior to IIS 7. The cookie handler used by the SAM can be configured with the [\\&lt;cookieHandler\\&gt;](../Topic/%3CcookieHandler%3E.md) element."
  example:
  - "[!code-cs[WifSAM#1](~/add/codesnippet/csharp/sam/global.asax.cs#1)]  \n  \n The following XML shows how to configure the SAM in the ASP.NET pipeline. Many other elements that are present in a typical configuration are omitted here for brevity.  \n  \n```xml  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <!--WIF 4.5 modules -->  \n      <add name=\"SessionAuthenticationModule\" type=\"System.IdentityModel.Services.SessionAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>  \n      <add name=\"WsFederationAuthenticationModule\" type=\"System.IdentityModel.Services.WSFederationAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>  \n    </modules>  \n  </system.webServer>  \n</configuration>  \n```"
  syntax:
    content: 'public class SessionAuthenticationModule : System.IdentityModel.Services.HttpModuleBase'
  inheritance:
  - System.Object
  - System.IdentityModel.Services.HttpModuleBase
  implements: []
  inheritedMembers:
  - System.IdentityModel.Services.HttpModuleBase.Dispose
  - System.IdentityModel.Services.HttpModuleBase.FederationConfiguration
  - System.IdentityModel.Services.HttpModuleBase.Init(System.Web.HttpApplication)
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SessionAuthenticationModule()
  nameWithType: SessionAuthenticationModule.SessionAuthenticationModule()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionAuthenticationModule()
  type: Constructor
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule&quot;> </xref>クラスです。"
  remarks: "<xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A>プロパティに設定されている`false`<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>プロパティは、<xref:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler%2A>クラス</xref:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler%2A>の既定のインスタンスを初期化</xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>および</xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A>"
  syntax:
    content: public SessionAuthenticationModule ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  id: AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  nameWithType: SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "入力方向のセッション トークンを検証することにより、受信要求を認証します。 検証の成功時に更新スレッドのプリンシパルと現在の HTTP コンテキストに、指定した<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>です。"
  remarks: "AuthenticateSessionSecurityToken メソッドから、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>。 呼び出す、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken%2A>受信トークンと更新プログラムを検証するメソッド、<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>と<xref:System.Web.HttpContext.User%2A?displayProperty=fullName>プロパティ</xref:System.Web.HttpContext.User%2A?displayProperty=fullName></xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName></xref:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken%2A>。 場合、`writeCookie`パラメーターは`true`、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie%2A>cookie にセッション トークンを書き込むメソッドが呼び出されます</xref:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie%2A>。"
  syntax:
    content: public virtual void AuthenticateSessionSecurityToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool writeCookie);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "受信 HTTP 要求を認証に使用するセッション セキュリティ トークンです。"
    - id: writeCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>セッションの cookie を作成するにはそれ以外の場合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  id: ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ContainsSessionTokenCookie(HttpCookieCollection)
  nameWithType: SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "セッションの cookie が指定された cookie のコレクションかどうかを判断します。"
  syntax:
    content: public bool ContainsSessionTokenCookie (System.Web.HttpCookieCollection httpCookieCollection);
    parameters:
    - id: httpCookieCollection
      type: System.Web.HttpCookieCollection
      description: "検索する cookie のコレクション。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>セッションの cookie が見つかった場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>httpCookieCollection</code>null です。"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  id: ContextSessionSecurityToken
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ContextSessionSecurityToken
  nameWithType: SessionAuthenticationModule.ContextSessionSecurityToken
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "アクティブな取得<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>現在の<xref href=&quot;System.Web.HttpContext&quot;></xref>です。"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SessionSecurityToken ContextSessionSecurityToken { get; }
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "アクティブなセッション セキュリティ トークンです。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  id: CookieHandler
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: CookieHandler
  nameWithType: SessionAuthenticationModule.CookieHandler
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "読み取り、書き込み、およびセッション cookie の削除に使用されるクッキー ハンドラーを取得します。"
  remarks: "CookieHandler プロパティはによって初期化、<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration%2A>。 このメソッドで指定されたクッキー ハンドラーに基づき、このプロパティは初期化、<xref:System.IdentityModel.Services.Configuration.FederationConfiguration>に設定されているオブジェクト、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName>プロパティ</xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName></xref:System.IdentityModel.Services.Configuration.FederationConfiguration>。 構成ファイルで、クッキー ハンドラーを設定することができます、 [ \\&lt; cookieHandler\\&gt;](../Topic/%3CcookieHandler%3E.md)要素。"
  syntax:
    content: public System.IdentityModel.Services.CookieHandler CookieHandler { get; set; }
    return:
      type: System.IdentityModel.Services.CookieHandler
      description: "クッキー ハンドラー。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  id: CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  nameWithType: SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "作成、 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>構成されているセッション トークン ハンドラーを使用して、指定したパラメーターからです。"
  syntax:
    content: public System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, DateTime validFrom, DateTime validTo, bool isPersistent);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "トークンでキャプチャするプリンシパルです。"
    - id: context
      type: System.String
      description: "コンテキストのアプリケーションで定義された文字列。"
    - id: validFrom
      type: System.DateTime
      description: "このトークンの有効開始時点です。"
    - id: validTo
      type: System.DateTime
      description: "このトークンが有効で最後の時点です。"
    - id: isPersistent
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>ユーザー エージェントによって、値を永続化する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "セッション トークンです。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "有効なセッションのトークン ハンドラーが構成されていません。 (がない<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>で構成されている、<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>プロパティです)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*> 。"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie
  id: DeleteSessionTokenCookie
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: DeleteSessionTokenCookie()
  nameWithType: SessionAuthenticationModule.DeleteSessionTokenCookie()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "セッションの cookie を削除し、キャッシュから削除します。"
  remarks: "指定されたクッキー ハンドラーを使用して、セッションの cookie を削除、<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>プロパティ</xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>。 中にこのメソッドは、サインアウト、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。"
  syntax:
    content: public void DeleteSessionTokenCookie ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  id: InitializeModule(System.Web.HttpApplication)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: InitializeModule(HttpApplication)
  nameWithType: SessionAuthenticationModule.InitializeModule(HttpApplication)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(HttpApplication)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "モジュールを初期化し、モジュールからイベントを処理するために準備[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]アプリケーション オブジェクトです。"
  remarks: "追加、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>と<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A>ハンドラーを<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName>と<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName>で指定されたアプリケーション オブジェクトのイベント、`context`パラメーター</xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName> </xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> 。"
  syntax:
    content: protected override void InitializeModule (System.Web.HttpApplication context);
    parameters:
    - id: context
      type: System.Web.HttpApplication
      description: "このモジュールを含む HTTP アプリケーション オブジェクト。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration
  id: InitializePropertiesFromConfiguration
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: InitializePropertiesFromConfiguration()
  nameWithType: SessionAuthenticationModule.InitializePropertiesFromConfiguration()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "構成ファイル内の定義に基づくモジュールのプロパティを初期化します。"
  remarks: "初期化、<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>プロパティによって構成で指定したハンドラーから、<xref:System.IdentityModel.Services.Configuration.FederationConfiguration?displayProperty=fullName>に設定されているオブジェクト、<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName>プロパティ</xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName></xref:System.IdentityModel.Services.Configuration.FederationConfiguration?displayProperty=fullName></xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>。 クッキー ハンドラーをから構成ファイルで指定することができます、 [ \\&lt; cookieHandler\\&gt;](../Topic/%3CcookieHandler%3E.md)要素。"
  syntax:
    content: protected override void InitializePropertiesFromConfiguration ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  id: IsReferenceMode
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: IsReferenceMode
  nameWithType: SessionAuthenticationModule.IsReferenceMode
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "取得またはセッションの情報 (要求の値など) をセッションの cookie や参照だけを保存する cookie を使用して、サーバー側でセッションの内容を保存するかどうかに保存するかどうかを指定する値を設定します。"
  remarks: "参照モードで、<xref:System.IdentityModel.Tokens.SessionSecurityToken>サーバー側のキャッシュに格納されます (オブジェクトから派生した<xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>).</xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> </xref:System.IdentityModel.Tokens.SessionSecurityToken> 発行された cookie には、キャッシュからトークンの取得に使用されるコンテキスト識別子にはのみが含まれます。      > [!IMPORTANT] > のハンドラーを提供することをお勧め参照モードで動作する、 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=fullName>global.asax.cs ファイルと設定でイベント、<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>に渡されたトークンのプロパティ、<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName>プロパティ</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName></xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName></xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=fullName>。 これはセッション トークンが要求ごとに参照モードで動作し、優先される上だけで、セッションの認証モジュールで IsReferenceMode プロパティを設定であることを確認します。"
  syntax:
    content: public bool IsReferenceMode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>発行された cookie の参照モードである場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。 既定値は<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>cookie を発行したに含まれていない参照モードを指定します。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  id: OnAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "処理、 <xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>からイベントを[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]パイプライン。"
  remarks: "このメソッドは、次を実行します。 1。  呼び出す、<xref:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie%2A>を読み取る方法、<xref:System.IdentityModel.Tokens.SessionSecurityToken>が存在する場合、セッション クッキーから</xref:System.IdentityModel.Tokens.SessionSecurityToken></xref:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie%2A>。      2.  場合、セッション セキュリティ トークンにすることはできません (ほとんどの場合、セッションが確立されていないため、読み取りを返します。      3.  呼び出す、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived%2A>させる方法、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>イベント</xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived></xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived%2A>。 これにより、変更する cookie から読み取られたトークンのまたは要求のキャンセルに、営業案件が提供します。 ハンドラーは、トークンを再発行を設定しても指定できます、<xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName>プロパティ</xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName>。      4.  トークンを再発行する場合は、キャッシュから削除しを呼び出す、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated%2A>させる方法、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>イベント</xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated></xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated%2A>。 これは、もう一度変更するトークンの機会を提供します。 設定して再発行動作を変更することも、 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName>、イベント ハンドラーのプロパティ</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName>。      5.  呼び出す、<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>ユーザーを認証する方法</xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>。 かどうかは成功すると、これは、設定の<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>プロパティに含まれているプリンシパルを<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A?displayProperty=fullName>着信トークンのプロパティ</xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A?displayProperty=fullName></xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>。      6.  セッションの有効期限が切れて場合を呼び出して、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。       ハンドラーに OnAuthenticateRequest メソッドを追加、<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName>内のイベント、<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A></xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName>。"
  syntax:
    content: protected virtual void OnAuthenticateRequest (object sender, EventArgs eventArgs);
    parameters:
    - id: sender
      type: System.Object
      description: "イベントのソース。 これになります、 <xref href=&quot;System.Web.HttpApplication&quot;> </xref>オブジェクト。"
    - id: eventArgs
      type: System.EventArgs
      description: "イベントのデータ。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "有効なセッションのトークン ハンドラーが構成されていません。 (がない<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>で構成されている、<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>プロパティです)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*> 。"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  id: OnPostAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnPostAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "処理、 <xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref>からイベントを[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]パイプライン。"
  remarks: "既定の実装は空です。       ハンドラーに OnPostAuthenticateRequest ハンドラーが追加された、<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName>内のイベント、<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A></xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName>。"
  syntax:
    content: protected virtual void OnPostAuthenticateRequest (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "イベントのソース。 これになります、 <xref href=&quot;System.Web.HttpApplication&quot;> </xref>オブジェクト。"
    - id: e
      type: System.EventArgs
      description: "イベントのデータ。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  id: OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "発生させる、 <xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated&quot;> </xref>イベント。"
  remarks: "呼び出される、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>。"
  syntax:
    content: protected virtual void OnSessionSecurityTokenCreated (System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
      description: "イベントのデータ。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  id: OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "発生させる、 <xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived&quot;> </xref>イベント。"
  remarks: "呼び出される、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>。"
  syntax:
    content: protected virtual void OnSessionSecurityTokenReceived (System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
      description: "イベントのデータ。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)
  id: OnSignedOut(System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSignedOut(EventArgs)
  nameWithType: SessionAuthenticationModule.OnSignedOut(EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "発生させる、 <xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SignedOut&quot;> </xref>イベント。"
  remarks: "このメソッドが呼び出されて、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>メソッド、サインアウトが実行されているし、セッションの cookie が削除されました</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。"
  syntax:
    content: protected virtual void OnSignedOut (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "イベントのデータ。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  id: OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSigningOut(SigningOutEventArgs)
  nameWithType: SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "発生させる、 <xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SigningOut&quot;> </xref>イベント。"
  remarks: "このメソッドが呼び出されて、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>サインアウトを実行するメソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。 セッションの cookie が削除される前に呼び出されます。"
  syntax:
    content: protected virtual void OnSigningOut (System.IdentityModel.Services.SigningOutEventArgs e);
    parameters:
    - id: e
      type: System.IdentityModel.Services.SigningOutEventArgs
      description: "イベントのデータ。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  id: OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSignOutError(ErrorEventArgs)
  nameWithType: SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "発生させる、 <xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SignOutError&quot;> </xref>イベント。"
  remarks: "このメソッドが呼び出されて、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>メソッド サインアウト時にエラーが発生した場合</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。"
  syntax:
    content: protected virtual void OnSignOutError (System.IdentityModel.Services.ErrorEventArgs e);
    parameters:
    - id: e
      type: System.IdentityModel.Services.ErrorEventArgs
      description: "イベントのデータ。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])
  id: ReadSessionTokenFromCookie(System.Byte[])
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ReadSessionTokenFromCookie(Byte[])
  nameWithType: SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "読み取り、 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>指定したセッション cookie からです。"
  syntax:
    content: public System.IdentityModel.Tokens.SessionSecurityToken ReadSessionTokenFromCookie (byte[] sessionCookie);
    parameters:
    - id: sessionCookie
      type: System.Byte[]
      description: "セッション トークンを含む、生の形式でのクッキー。"
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "Cookie から読み取られたセッション トークンです。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "有効なセッションのトークン ハンドラーが構成されていません。 (がない<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>で構成されている、<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>プロパティです)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*> 。"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  id: SessionSecurityTokenCreated
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SessionSecurityTokenCreated
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenCreated
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "セッションのセキュリティ トークンが作成された場合に発生します。"
  remarks: "このイベントを使用して、cookie に書き込まれる前に、セッション セキュリティ トークンを変更することができます。       内から SessionSecurityTokenCreated このイベントは、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>セッション トークンの後にメソッド (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) が作成されました</xref:System.IdentityModel.Tokens.SessionSecurityToken></xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>。 これは、場合に発生、たとえば、イベント ハンドラーを<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>イベントは、トークンを変更します</xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>。       このイベントを使用して、パイプラインに沿ってさらに渡されるして、エンティティ (ユーザー) の要求の認証に使用する前にセッション トークンのプロパティを変更することができます。       イベント ハンドラー内からトークンを表示できます、<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName>プロパティ</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName>。 変更した後、トークン、ことができますを確認することに書き込まれるバックアップ cookie を設定して、<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName>プロパティを`true`</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName>。 異なり、SessionSecurityTokenCreated イベント、SessionSecurityTokenCreated は取り消し可能なイベントではありません。"
  example:
  - "The following code shows a handler for the SessionSecurityTokenCreated event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#6](~/add/codesnippet/csharp/sam/global.asax.cs#6)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs> SessionSecurityTokenCreated;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  id: SessionSecurityTokenReceived
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SessionSecurityTokenReceived
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenReceived
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "セッションのセキュリティ トークンがクッキーから読み取られたときに発生します。"
  remarks: "The SessionSecurityTokenReceived event is raised from within the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method after a session token (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) has been successfully read from the session cookie.  \n  \n You can use this event to modify properties of the session token before it is passed further along the pipeline and is used to authenticate the entity making the request (user). One of the most common scenarios involves modifying the session expiration time (accessible through the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A?displayProperty=fullName> property) to override the session expiration time set in configuration through the `lifetime` attribute of the [\\&lt;sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) element. By modifying this property on each request, you can implement a sliding session; that is, a session in which the lifetime is extended each time the user accesses the site.  \n  \n In an event handler, you can access the token through the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.SessionToken%2A?displayProperty=fullName> property. After modifying the token, you can ensure that it is written back to the cookie by setting the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName> to `true`. Finally, the SessionSecurityTokenReceived event is a cancelable event, and you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs> to abort further processing of the request."
  example:
  - "The following code shows a handler for the SessionSecurityTokenReceived event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#5](~/add/codesnippet/csharp/sam/global.asax.cs#5)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs> SessionSecurityTokenReceived;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  id: SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SetPrincipalFromSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "プリンシパルを設定、 <xref href=&quot;System.Web.HttpContext&quot;> </xref>と<xref href=&quot;System.Threading.Thread&quot;></xref>指定したセッション トークンに含まれているプリンシパルにします。"
  remarks: "呼び出す、<xref:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken%2A>メソッドとセット、<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>プロパティおよび<xref:System.Web.HttpContext.User%2A?displayProperty=fullName>プロパティ<xref:System.Web.HttpContext.Current%2A?displayProperty=fullName>返される id を使用して</xref:System.Web.HttpContext.Current%2A?displayProperty=fullName></xref:System.Web.HttpContext.User%2A?displayProperty=fullName></xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName></xref:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken%2A>。       このメソッドは、<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>。"
  syntax:
    content: protected virtual void SetPrincipalFromSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);
    parameters:
    - id: sessionSecurityToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "元のプリンシパルを設定するセッション トークンです。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  id: SignedOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SignedOut
  nameWithType: SessionAuthenticationModule.SignedOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "ユーザーがサインアウトした後に発生します。"
  remarks: "発生した、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>メソッド直後、<xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>メソッドが呼び出されます</xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A></xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。       このイベントは、すべてのセッションに対して呼び出されるようには保証されません。 クライアント側で、cookie を削除する可能性がありますなどの場合は、このとしないイベント セッションを削除するためのサーバー側のイベントが存在しないためです。"
  example:
  - "The following code shows a handler for the SignedOut event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#3](~/add/codesnippet/csharp/sam/global.asax.cs#3)]"
  syntax:
    content: public event EventHandler SignedOut;
    return:
      type: System.EventHandler
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  id: SigningOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SigningOut
  nameWithType: SessionAuthenticationModule.SigningOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "サインインしているセッションを削除する前に発生します。"
  remarks: "発生した、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>メソッド直前に、<xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>メソッドが呼び出されます</xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A></xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。       このイベントは、すべてのセッションに対して呼び出されるようには保証されません。 クライアント側で、cookie を削除する可能性がありますなどの場合は、このとしないイベント セッションを削除するためのサーバー側のイベントが存在しないためです。"
  example:
  - "The following code shows a handler for the SigningOut event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#4](~/add/codesnippet/csharp/sam/global.asax.cs#4)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SigningOutEventArgs> SigningOut;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SigningOutEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOut
  id: SignOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SignOut()
  nameWithType: SessionAuthenticationModule.SignOut()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOut()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "現在のユーザーがサインアウトし、関連するイベントを発生させます。"
  remarks: "呼び出す、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut%2A>、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>、および<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut%2A>サインアウトを実行するメソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut%2A></xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A></xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut%2A>。 例外が発生する場合、<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError%2A>させるメソッドが呼び出され、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError>イベント</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError></xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError%2A>。 設定することができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、 <xref:System.IdentityModel.Services.ErrorEventArgs>、サインアウトを取り消すし、例外がクライアントに反映されないようにするには、このイベントのイベント ハンドラーに渡されたオブジェクト</xref:System.IdentityModel.Services.ErrorEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A>。       アプリケーション固有の動作を追加するには、このメソッドをオーバーライドすることができます。"
  example:
  - "The following code shows code for invoking the SignOut method from a SignOut.aspx page (SignOut.aspx.cs) in an ASP.NET web application. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#7](~/add/codesnippet/csharp/sam/global.asax.cs#7)]"
  syntax:
    content: public virtual void SignOut ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.SignOut*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  id: SignOutError
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SignOutError
  nameWithType: SessionAuthenticationModule.SignOutError
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "サインアウト時にエラーがある場合に発生します。"
  remarks: "発生した、<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>メソッド サインアウト時にエラーが発生したときにします</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>。       イベント ハンドラー内から発生するイベントの原因となった例外を取得できます、<xref:System.IdentityModel.Services.ErrorEventArgs.Exception%2A?displayProperty=fullName>プロパティ</xref:System.IdentityModel.Services.ErrorEventArgs.Exception%2A?displayProperty=fullName>。 さらに設定して、クライアントに例外が伝達されませんの結果のある例外の処理を取り消すことができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.IdentityModel.Services.ErrorEventArgs>に`true`</xref:System.IdentityModel.Services.ErrorEventArgs></xref:System.ComponentModel.CancelEventArgs.Cancel%2A>。       このイベントは、すべてのセッションに対して呼び出されるようには保証されません。 クライアント側で、cookie を削除する可能性がありますなどの場合は、このとしないイベント セッションを削除するためのサーバー側のイベントが存在しないためです。"
  example:
  - "The following code shows a handler for the SignOutError event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#2](~/add/codesnippet/csharp/sam/global.asax.cs#2)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.ErrorEventArgs> SignOutError;
    return:
      type: System.EventHandler{System.IdentityModel.Services.ErrorEventArgs}
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  id: TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: TryReadSessionTokenFromCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "読み取ろうとすると、 <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>セッション クッキーからセッションの cookie が正常に読み取られたかどうかを示す値を返します。"
  remarks: "構成されているクッキー ハンドラーを使用して cookie を読み取って、<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>プロパティが呼び出され、および、 <xref:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie%2A>cookie のトークンを読み取ります</xref:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie%2A></xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>。"
  syntax:
    content: public bool TryReadSessionTokenFromCookie (out System.IdentityModel.Tokens.SessionSecurityToken sessionToken);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "このメソッドが戻るときに、セッション クッキーから読み取られたセッションのセキュリティ トークンが含まれています。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>場合は、セッションの cookie は要求から正常に読み取られましたそれ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  id: ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ValidateSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "指定された検証<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>し、その id を返します。"
  remarks: "このメソッドは、<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>メソッド</xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>。 呼び出す、<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A?displayProperty=fullName>トークンを検証し、その id を抽出する構成済みのセッション トークン ハンドラーのメソッド</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A?displayProperty=fullName>。"
  syntax:
    content: protected System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);
    parameters:
    - id: sessionSecurityToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "検証トークンです。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "トークンに含まれる id のコレクション。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken*
  exceptions:
  - type: System.IdentityModel.Services.FederatedSessionExpiredException
    commentId: T:System.IdentityModel.Services.FederatedSessionExpiredException
    description: "トークンの有効期限が切れています。"
  - type: System.IdentityModel.Services.FederationException
    commentId: T:System.IdentityModel.Services.FederationException
    description: "トークンの開始時刻はまだ有効ではありません。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "有効なセッションのトークン ハンドラーが構成されていません。 (がない<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>で構成されている、<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>プロパティです)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*> 。"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  id: WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: WriteSessionTokenToCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "指定した書き込み<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>セッション cookie にします。"
  remarks: "構成されているクッキー ハンドラーを使用して cookie を書き込みます、<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>プロパティ</xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>。"
  syntax:
    content: public void WriteSessionTokenToCookie (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "書き込むセッション セキュリティ トークンです。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sessionToken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "有効なセッションのトークン ハンドラーが構成されていません。 (がない<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>で構成されている、<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>プロパティです)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*> 。"
  platform:
  - net462
references:
- uid: System.IdentityModel.Services.HttpModuleBase
  isExternal: false
  name: System.IdentityModel.Services.HttpModuleBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Services.FederatedSessionExpiredException
  parent: System.IdentityModel.Services
  isExternal: false
  name: FederatedSessionExpiredException
  nameWithType: FederatedSessionExpiredException
  fullName: System.IdentityModel.Services.FederatedSessionExpiredException
- uid: System.IdentityModel.Services.FederationException
  parent: System.IdentityModel.Services
  isExternal: false
  name: FederationException
  nameWithType: FederationException
  fullName: System.IdentityModel.Services.FederationException
- uid: System.IdentityModel.Services.SessionAuthenticationModule.#ctor
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionAuthenticationModule()
  nameWithType: SessionAuthenticationModule.SessionAuthenticationModule()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionAuthenticationModule()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  nameWithType: SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
- uid: System.IdentityModel.Tokens.SessionSecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SessionSecurityToken
  nameWithType: SessionSecurityToken
  fullName: System.IdentityModel.Tokens.SessionSecurityToken
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContainsSessionTokenCookie(HttpCookieCollection)
  nameWithType: SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
- uid: System.Web.HttpCookieCollection
  parent: System.Web
  isExternal: false
  name: HttpCookieCollection
  nameWithType: HttpCookieCollection
  fullName: System.Web.HttpCookieCollection
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContextSessionSecurityToken
  nameWithType: SessionAuthenticationModule.ContextSessionSecurityToken
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CookieHandler
  nameWithType: SessionAuthenticationModule.CookieHandler
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
- uid: System.IdentityModel.Services.CookieHandler
  parent: System.IdentityModel.Services
  isExternal: false
  name: CookieHandler
  nameWithType: CookieHandler
  fullName: System.IdentityModel.Services.CookieHandler
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  nameWithType: SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: DeleteSessionTokenCookie()
  nameWithType: SessionAuthenticationModule.DeleteSessionTokenCookie()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializeModule(HttpApplication)
  nameWithType: SessionAuthenticationModule.InitializeModule(HttpApplication)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializePropertiesFromConfiguration()
  nameWithType: SessionAuthenticationModule.InitializePropertiesFromConfiguration()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: IsReferenceMode
  nameWithType: SessionAuthenticationModule.IsReferenceMode
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnPostAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
- uid: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SessionSecurityTokenCreatedEventArgs
  nameWithType: SessionSecurityTokenCreatedEventArgs
  fullName: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
- uid: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SessionSecurityTokenReceivedEventArgs
  nameWithType: SessionSecurityTokenReceivedEventArgs
  fullName: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignedOut(EventArgs)
  nameWithType: SessionAuthenticationModule.OnSignedOut(EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(EventArgs)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSigningOut(SigningOutEventArgs)
  nameWithType: SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
- uid: System.IdentityModel.Services.SigningOutEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SigningOutEventArgs
  nameWithType: SigningOutEventArgs
  fullName: System.IdentityModel.Services.SigningOutEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignOutError(ErrorEventArgs)
  nameWithType: SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
- uid: System.IdentityModel.Services.ErrorEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IdentityModel.Services.ErrorEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ReadSessionTokenFromCookie(Byte[])
  nameWithType: SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionSecurityTokenCreated
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenCreated
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
- uid: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SessionSecurityTokenCreatedEventArgs>
  nameWithType: EventHandler<SessionSecurityTokenCreatedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
    name: SessionSecurityTokenCreatedEventArgs
    nameWithType: SessionSecurityTokenCreatedEventArgs
    fullName: SessionSecurityTokenCreatedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionSecurityTokenReceived
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenReceived
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
- uid: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SessionSecurityTokenReceivedEventArgs>
  nameWithType: EventHandler<SessionSecurityTokenReceivedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
    name: SessionSecurityTokenReceivedEventArgs
    nameWithType: SessionSecurityTokenReceivedEventArgs
    fullName: SessionSecurityTokenReceivedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SetPrincipalFromSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignedOut
  nameWithType: SessionAuthenticationModule.SignedOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SigningOut
  nameWithType: SessionAuthenticationModule.SigningOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
- uid: System.EventHandler{System.IdentityModel.Services.SigningOutEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SigningOutEventArgs>
  nameWithType: EventHandler<SigningOutEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SigningOutEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SigningOutEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SigningOutEventArgs
    name: SigningOutEventArgs
    nameWithType: SigningOutEventArgs
    fullName: SigningOutEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignOut()
  nameWithType: SessionAuthenticationModule.SignOut()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOut()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignOutError
  nameWithType: SessionAuthenticationModule.SignOutError
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
- uid: System.EventHandler{System.IdentityModel.Services.ErrorEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ErrorEventArgs>
  nameWithType: EventHandler<ErrorEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.ErrorEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.ErrorEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.ErrorEventArgs
    name: ErrorEventArgs
    nameWithType: ErrorEventArgs
    fullName: ErrorEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: TryReadSessionTokenFromCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ValidateSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: WriteSessionTokenToCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.#ctor*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionAuthenticationModule
  nameWithType: SessionAuthenticationModule.SessionAuthenticationModule
- uid: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: AuthenticateSessionSecurityToken
  nameWithType: SessionAuthenticationModule.AuthenticateSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContainsSessionTokenCookie
  nameWithType: SessionAuthenticationModule.ContainsSessionTokenCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContextSessionSecurityToken
  nameWithType: SessionAuthenticationModule.ContextSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CookieHandler
  nameWithType: SessionAuthenticationModule.CookieHandler
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CreateSessionSecurityToken
  nameWithType: SessionAuthenticationModule.CreateSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: DeleteSessionTokenCookie
  nameWithType: SessionAuthenticationModule.DeleteSessionTokenCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializeModule
  nameWithType: SessionAuthenticationModule.InitializeModule
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializePropertiesFromConfiguration
  nameWithType: SessionAuthenticationModule.InitializePropertiesFromConfiguration
- uid: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: IsReferenceMode
  nameWithType: SessionAuthenticationModule.IsReferenceMode
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnAuthenticateRequest
  nameWithType: SessionAuthenticationModule.OnAuthenticateRequest
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnPostAuthenticateRequest
  nameWithType: SessionAuthenticationModule.OnPostAuthenticateRequest
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenCreated
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenCreated
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenReceived
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenReceived
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignedOut
  nameWithType: SessionAuthenticationModule.OnSignedOut
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSigningOut
  nameWithType: SessionAuthenticationModule.OnSigningOut
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignOutError
  nameWithType: SessionAuthenticationModule.OnSignOutError
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ReadSessionTokenFromCookie
  nameWithType: SessionAuthenticationModule.ReadSessionTokenFromCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SetPrincipalFromSessionToken
  nameWithType: SessionAuthenticationModule.SetPrincipalFromSessionToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOut*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignOut
  nameWithType: SessionAuthenticationModule.SignOut
- uid: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: TryReadSessionTokenFromCookie
  nameWithType: SessionAuthenticationModule.TryReadSessionTokenFromCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ValidateSessionToken
  nameWithType: SessionAuthenticationModule.ValidateSessionToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: WriteSessionTokenToCookie
  nameWithType: SessionAuthenticationModule.WriteSessionTokenToCookie
