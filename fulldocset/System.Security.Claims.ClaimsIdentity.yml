### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsIdentity
  id: ClaimsIdentity
  children:
  - System.Security.Claims.ClaimsIdentity.#ctor
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.AuthenticationType
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.Claims
  - System.Security.Claims.ClaimsIdentity.Clone
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultIssuer
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.IsAuthenticated
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.Name
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  type: Class
  summary: "クレーム ベース id を表します。"
  remarks: "ClaimsIdentity クラスは、クレーム ベース id; の具体的な実装クレームのコレクションで説明されている id は、します。 クレームは、右、プロパティを説明する発行者またはそのエンティティの他のいくつかの品質によって行われたエンティティに関するステートメントを示します。 このようなエンティティは、クレームのサブジェクトと呼ばれます。 <xref:System.Security.Claims.Claim>クラス</xref:System.Security.Claims.Claim>によって表されるクレーム ClaimsIdentity に含まれる要求は、対応する id を表す、エンティティを記述し、認証と承認の決定を行うために使用できます。 アクセスのクレームに基づくモデルには、ロールのみに基づいてアクセス モデルは従来の多くの利点があります。 たとえば、クレームは、表しがはるかに特定の方法で評価の承認、認証 id に関するより豊富な情報を提供できます。       .NET Framework 4.5 以降、Windows Identity Foundation (WIF) とクレーム ベース id が完全に統合されて、.NET Framework。 つまり、多くのクラスを .NET Framework 内で id を表すようになりました ClaimsIdentity から派生クレームのコレクションをそのプロパティについて説明します。 これは、これらのクラスが実装されている、.NET Framework の以前のバージョンと異なる、<xref:System.Security.Principal.IIdentity>インターフェイスを直接</xref:System.Security.Principal.IIdentity>。 を通じて id を表すクレームのコレクションにアクセスできる、<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>プロパティ</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>。 ClaimsIdentity クラスを検索して、要求の変更のいくつかのメソッドを提供し、完全に統合言語クエリ (LINQ) をサポートします。 アプリケーション コードで ClaimsIdentity オブジェクトは、通常アクセスを介して<xref:System.Security.Claims.ClaimsPrincipal>オブジェクト; <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>。</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>によって返されたプリンシパルなど</xref:System.Security.Claims.ClaimsPrincipal>      > [!NOTE] >、<xref:System.Security.Claims.ClaimsPrincipal>クラスには、<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>プロパティも</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A></xref:System.Security.Claims.ClaimsPrincipal>。 ほとんどの場合を通過するユーザーの要求をアクセスする必要があります、<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>コレクションではなくを通じて、<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです</xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>。 ここで、プリンシパルには、1 つ以上の ClaimsIdentity が含まれています。 と評価されるか、特定の id を変更する必要がありますの場合にのみ ClaimsIdentity を個々 の信頼性情報にアクセスする必要があります。      > [!IMPORTANT] > を追加または削除からの要求を<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクション、呼び出し元は完全な信頼が必要です</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>。       クレームに基づくモデルで、<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>プロパティおよび<xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName>メソッドは、id が含まれる要求を評価することによって実装されます</xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName></xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>。 クレームに基づくモデルの基本実装は、によって提供される、<xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName>プロパティおよび<xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName>メソッド</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName></xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName>。 <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>プロパティを使用すると、これらの操作を実行するときに、id が含まれる要求の評価に使用されるクレームの種類を指定します</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>。       委任シナリオを通じてサポートされます、<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>と<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>プロパティ</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsIdentity : System.Security.Principal.IIdentity
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IIdentity
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>クレームのコレクションを空のクラスです。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空のコレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity ();
    parameters: []
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>クラスの列挙のコレクションを使用して<xref href=&quot;System.Security.Claims.Claim&quot;></xref>オブジェクト。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初期化された、`claims`パラメーターです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "要求の id を作成するために要求します。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "追加します。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>クラスを使用して作成されたシリアル化されたストリームから<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>です。"
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "シリアル化されたデータ。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected ClaimsIdentity (System.Security.Claims.ClaimsIdentity other);
    parameters:
    - id: other
      type: System.Security.Claims.ClaimsIdentity
      description: "追加します。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>指定<xref:System.Security.Principal.IIdentity></xref:System.Security.Principal.IIdentity>名と認証の種類を使用してクラス。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.Actor`プロパティ、それ以外の`null`|。  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|値、 `identity.AuthenticationType` (<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) プロパティを使用します |。  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.BootStrapContext`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることが要求を`identity`が追加された新しいインスタンスをそれ以外は空のコレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.Label`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|場合`identity`から割り当てることはできません<xref:System.Security.Claims.ClaimsIdentity>は`null`があり、<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>プロパティが`null`以外の場合は、名前要求がの値を使用して、新しいインスタンスを追加、<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>プロパティ</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName></xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>。 **注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.NameClaimType`プロパティはそれ以外の場合、<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>が使用されます。 |。  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|場合`identity`から割り当てることは<xref:System.Security.Claims.ClaimsIdentity>の値、`identity.RoleClaimType`プロパティが使用されますそれ以外の場合、<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>を使用します。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> 。"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "新しい要求の id を基になるから id。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>空のクラスはクレームのコレクションと、指定した認証の種類。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|値、`authenticationType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 。 場合、`authenticationType`パラメーターは`null`か、空の文字列プロパティに設定する`null`|。  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空のコレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (string authenticationType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "使用する認証の種類。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>指定したクレームと認証の種類を持つクラス。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|値、`authenticationType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 。 場合、`authenticationType`パラメーターは`null`か、空の文字列プロパティに設定する`null`|。  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初期化された、`claims`パラメーターです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "要求の id を作成するために要求します。"
    - id: authenticationType
      type: System.String
      description: "使用する認証の種類。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>クラスを使用して作成されたシリアル化されたストリームから<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>です。"
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "シリアル化されたデータ。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "シリアル化のコンテキスト。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>クラスの指定したクレームと、指定した<xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity>を使用して"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.Actor`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`authenticationType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 。 場合、`authenticationType`パラメーターは`null`または空の文字列の値、 `identity.AuthenticationType` (<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) プロパティを使用します |。  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.BootStrapContext`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初期化された、`claims`パラメーター</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 。 場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることが要求を`identity`で指定されたものの前に、新しいインスタンスを追加、`claims`パラメーターです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.Label`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|場合`identity`から割り当てることはできません<xref:System.Security.Claims.ClaimsIdentity>は`null`があり、<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>プロパティが`null`以外の場合は、名前要求がの値を使用して、新しいインスタンスを追加、<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>プロパティ</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName></xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity>。 **注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.NameClaimType`プロパティはそれ以外の場合、<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>が使用されます。 |。  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|場合`identity`から割り当てることは<xref:System.Security.Claims.ClaimsIdentity>の値、`identity.RoleClaimType`プロパティが使用されますそれ以外の場合、<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>を使用します。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> 。"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "新しい要求の id を基になるから id。"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "要求の id を作成するために要求します。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>要求の種類を指定した認証の種類、名前の要求の種類、およびロールを持つクラス。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|値、`authenticationType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 。 場合、`authenticationType`パラメーターは`null`か、空の文字列プロパティに設定する`null`|。  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空のコレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|値、`nameType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 。 場合、`nameType`パラメーターが null または空の文字列プロパティは、<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>に設定されます |。  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|値、`roleType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 。 場合、`roleType`パラメーターが null または空の文字列プロパティに設定が<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>. |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (string authenticationType, string nameType, string roleType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "使用する認証の種類。"
    - id: nameType
      type: System.String
      description: "名の要求に使用するクレームの種類。"
    - id: roleType
      type: System.String
      description: "ロール要求に使用するクレームの種類。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>指定した信頼性情報、認証の種類、名前の要求の種類、およびロールを持つクラスの要求の種類。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|値、`authenticationType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 。 場合、`authenticationType`パラメーターは`null`か、空の文字列プロパティに設定する`null`|。  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初期化された、`claims`パラメーターです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|値、`nameType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 。 ただし場合、`nameType`パラメーターは`null`か、空の文字列プロパティに設定する<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>|。  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|値、`roleClaimType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 。 ただし場合、`roleClaimType`パラメーター`null`か、空の文字列プロパティに設定する<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>. |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "要求の id を作成するために要求します。"
    - id: authenticationType
      type: System.String
      description: "使用する認証の種類。"
    - id: nameType
      type: System.String
      description: "名の要求に使用するクレームの種類。"
    - id: roleType
      type: System.String
      description: "ロール要求に使用するクレームの種類。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいインスタンスを初期化、 <xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;> </xref>から、指定したクラス<xref:System.Security.Principal.IIdentity>、指定した信頼性情報、認証の種類、名前の要求の種類、およびロールを使用して要求の種類</xref:System.Security.Principal.IIdentity>。"
  remarks: "次の表は、<xref:System.Security.Claims.ClaimsIdentity>クラス</xref:System.Security.Claims.ClaimsIdentity>のインスタンスの初期プロパティ値を示しています。      |プロパティ |値 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.Actor`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`authenticationType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 。 場合、`authenticationType`パラメーターは`null`または空の文字列の値、 `identity.AuthenticationType` (<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) プロパティを使用します |。  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.BootStrapContext`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初期化された、`claims`パラメーター</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 。 場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることが要求を`identity`で指定されたものの前に、新しいインスタンスを追加、`claims`パラメーターです |。  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>プロパティの値に基づいて返された<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティの値です |。  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|場合`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.Label`プロパティ以外の場合、 `null`|。  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|場合`identity`から割り当てることはできません<xref:System.Security.Claims.ClaimsIdentity>は`null`があり、<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>プロパティが`null`以外の場合は、名前要求がの値を使用して、新しいインスタンスを追加、<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>プロパティ</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName></xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity>。 **注:**アクセスする場合、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティの値に基づいて返された、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>と<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです |。  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|値、`nameType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> 。 ただし場合の値、`nameType`パラメーターが`null`または空の文字列と`identity`<xref:System.Security.Claims.ClaimsIdentity>から割り当てることはの値、`identity.NameClaimType`プロパティはそれ以外の場合、<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>が使用されます。 |。  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|値、`roleClaimType`パラメーター</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> 。 ただし場合の値、`roleClaimType`パラメーターは`null`または空の文字列と id が割り当て可能な<xref:System.Security.Claims.ClaimsIdentity>の値、`identity.RoleClaimType`プロパティが使用されますそれ以外の場合、<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>を使用します。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> 。"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "新しい要求の id を基になるから id。"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "新しい要求の id を作成するために要求します。"
    - id: authenticationType
      type: System.String
      description: "使用する認証の種類。"
    - id: nameType
      type: System.String
      description: "名の要求に使用するクレームの種類。"
    - id: roleType
      type: System.String
      description: "ロール要求に使用するクレームの種類。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Actor
  id: Actor
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得または委任権限が付与された呼び出し元のパーティの id を設定します。"
  remarks: "アプリケーションは、再帰的にアクター プロパティを調べることによって、現在の呼び出しの原因となった委任チェーンにアクセスできます。 呼び出しが委任されているに代わってトークンを介してアクセスできる、<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>プロパティ</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>。"
  syntax:
    content: public System.Security.Claims.ClaimsIdentity Actor { get; set; }
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "委任権限が与えられた呼び出し側パーティです。"
  overload: System.Security.Claims.ClaimsIdentity.Actor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "現在のインスタンスにプロパティを設定しようとすると、発生します。"
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  id: AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "これを&1; つの要求の要求 id を追加します。"
  remarks: "要求が確認され、id をこの要求のサブジェクトが異なる場合、<xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>メソッドが呼び出されると正しいサブジェクトに、新しい要求を作成するパラメーターとしてこの要求 id</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName> 。       このメソッドは、`SecurityCritical`クレーム id を追加するエンティティ コントロールに適用される属性です。 さらに、パイプを承認決定を下しますベースでは、要求に存在する、<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>。"
  syntax:
    content: public virtual void AddClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "追加する要求。"
  overload: System.Security.Claims.ClaimsIdentity.AddClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claim</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "このクレームのリストの要求 id を追加します。"
  remarks: "各要求が確認され、id をこの要求のサブジェクトが異なる場合、<xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>メソッドが呼び出されると正しいサブジェクトに、新しい要求を作成するパラメーターとしてこの要求 id</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName> 。       このメソッドは、`SecurityCritical`クレーム id を追加するエンティティ コントロールに適用される属性です。 さらに、パイプを承認決定を下しますベースでは、要求に存在する、<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>。"
  syntax:
    content: public virtual void AddClaims (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "追加するクレーム。"
  overload: System.Security.Claims.ClaimsIdentity.AddClaims*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claims</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "認証の種類を取得します。"
  remarks: "<xref:System.Security.Claims.AuthenticationTypes>クラス</xref:System.Security.Claims.AuthenticationTypes>によって定義されている値のいずれかの通常"
  syntax:
    content: public virtual string AuthenticationType { get; }
    return:
      type: System.String
      description: "認証の種類。"
  overload: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  id: BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得または設定、トークン作成に使用されたこの要求 id。"
  remarks: "The underlying object is an instance of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class.  \n  \n Set the `saveBootstrapContext` attribute on either the [\\&lt;identityConfiguration\\&gt;](../Topic/%3CidentityConfiguration%3E.md) or the [\\&lt;securityTokenHandlerConfiguration\\&gt;](../Topic/%3CsecurityTokenHandlerConfiguration%3E.md) element in a configuration file to specify whether the token used to generate the <xref:System.Security.Claims.ClaimsIdentity> should be preserved in the BootstrapContext property.  \n  \n If the BootstrapContext property is not `null`, applications can access the original token and the claims it produced through the properties and methods of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class."
  syntax:
    content: public object BootstrapContext { get; set; }
    return:
      type: System.Object
      description: "ブートス トラップのコンテキスト。"
  overload: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "関連付けられたクレームを取得します。 この要求 id。"
  remarks: "コレクションには、エントリが含まれる場合があります`null`です。       基本的には、クレームのコレクションに含まれる要求<xref:System.Security.Claims.ClaimsIdentity>。</xref:System.Security.Claims.ClaimsIdentity>で表されるエンティティを記述します。 クレームは、プロパティと、エンティティが保有する権限について説明し、認証と承認に関する決定を行うアプリケーションで調べることができます。      > [!NOTE] >、<xref:System.Security.Claims.ClaimsPrincipal>クラスには、<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>プロパティも</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A></xref:System.Security.Claims.ClaimsPrincipal>。 ほとんどの場合を通過するユーザーの要求をアクセスする必要があります、<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>コレクション クレームのコレクションではなく</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>。 個々 の信頼性情報にアクセスする必要があります<xref:System.Security.Claims.ClaimsIdentity>プリンシパルにある&1; つ以上の場合にのみ<xref:System.Security.Claims.ClaimsIdentity>評価または特定の id を変更する必要があります</xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsIdentity>。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "関連付けられているクレームのコレクションこの要求 id。"
  overload: System.Security.Claims.ClaimsIdentity.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "新しいを返します<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>からコピーされたこの要求 id。"
  syntax:
    content: public virtual System.Security.Claims.ClaimsIdentity Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "現在のインスタンスのコピー。"
  overload: System.Security.Claims.ClaimsIdentity.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  id: CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual System.Security.Claims.Claim CreateClaim (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "追加します。"
    return:
      type: System.Security.Claims.Claim
      description: "追加します。"
  overload: System.Security.Claims.ClaimsIdentity.CreateClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "既定の発行者です。&quot;LOCAL AUTHORITY&quot;です。"
  syntax:
    content: public const string DefaultIssuer;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  id: DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "既定の名前の要求の種類です。<xref href=&quot;System.Security.Claims.ClaimTypes.Name&quot;></xref>."
  syntax:
    content: public const string DefaultNameClaimType;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  id: DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "既定のロールの要求の種類です。<xref href=&quot;System.Security.Claims.ClaimTypes.Role&quot;></xref>."
  syntax:
    content: public const string DefaultRoleClaimType;
    return:
      type: System.String
      description: "追加します。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "すべての指定された述語と一致する要求を取得します。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "一致するロジックを実行する関数。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "一致する要求。 一覧は、読み取り専用です。"
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "すべての要求を持つ、指定したクレームの種類を取得します。"
  remarks: "序数に基づく大文字と小文字の区別の比較が行われた`type`です。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "信頼性情報と一致するクレームの種類。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "一致する要求。 一覧は、読み取り専用です。"
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "指定された述語と一致した最初の要求を取得します。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "一致するロジックを実行する関数。"
    return:
      type: System.Security.Claims.Claim
      description: "最初の一致する要求または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>一致が検出されない場合。"
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "指定したクレームの種類で初回要求を取得します。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "一致するクレームの種類。"
    return:
      type: System.Security.Claims.Claim
      description: "最初の一致する要求または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>一致が検出されない場合。"
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "追加、 <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> 、現在のシリアル化に必要なデータと<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>オブジェクト。"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "データを設定するオブジェクト。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "このシリアル化のシリアル化先。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsIdentity.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求 id が指定された述語と一致するクレームを持っているかどうかを判断します。"
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "一致するロジックを実行する関数。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>一致する要求が存在する場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求 id が要求の種類と値、指定したクレームを持っているかどうかを判断します。"
  remarks: "チェックしません、<xref:System.Security.Claims.Claim.Issuer%2A>または<xref:System.Security.Claims.Claim.OriginalIssuer%2A>プロパティ</xref:System.Security.Claims.Claim.OriginalIssuer%2A></xref:System.Security.Claims.Claim.Issuer%2A>。 値の大文字小文字を区別、序数を使用して、比較が行われます型に依存で大文字にします。"
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "一致する要求の種類。"
    - id: value
      type: System.String
      description: "一致する要求の値。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>一致が見つかった場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "Id が認証されているかどうかを示す値を取得します。"
  remarks: '`true`場合、<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>プロパティは使用されません`null`または空の文字列</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>。'
  syntax:
    content: public virtual bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>id は認証されている場合それ以外の場合、 **false**です。"
  overload: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Label
  id: Label
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得またはこの要求 id のラベルを設定します。"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "ラベルです。"
  overload: System.Security.Claims.ClaimsIdentity.Label*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Name
  id: Name
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "取得要求 id をこの名前。"
  remarks: "要求で設定された型の名前に一致する種類で初回要求の値を返します、<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>プロパティ</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>。 クレームが見つからない場合、名クレームの種類に一致するを返します`null`です。"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "名前または<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsIdentity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  id: NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "値を提供する要求を決定するために使用されるクレームの種類を取得、<xref:System.Security.Claims.ClaimsIdentity.Name*>このプロパティの要求 id</xref:System.Security.Claims.ClaimsIdentity.Name*> 。"
  remarks: "NameClaimType プロパティが要求の種類を指定します (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>) この id の名前を指定するために使用されます</xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>。 名前は、<xref:System.Security.Claims.ClaimsIdentity.Name%2A>プロパティ</xref:System.Security.Claims.ClaimsIdentity.Name%2A>。       このプロパティは、コンス トラクターによって設定します。"
  syntax:
    content: public string NameClaimType { get; }
    return:
      type: System.String
      description: "名前の要求の種類。"
  overload: System.Security.Claims.ClaimsIdentity.NameClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  id: RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "要求の id からクレームを削除しようとしています。"
  remarks: "Id によって所有されていないため、要求を削除することはできません。 たとえば、プリンシパルが所有するロール要求の場合になります。 異なり、<xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>クレームが削除されたかどうかを示すブール値を返すメソッド RemoveClaim は例外をスロー、要求を削除できませんでしたオブジェクト参照で指定したクレームが一致 (<xref:System.Object.ReferenceEquals%2A>).</xref:System.Object.ReferenceEquals%2A> </xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>       このメソッドは、`SecurityCritical`エンティティは、信頼性情報を削除する id からコントロールに適用される属性です。 さらに、パイプを承認決定を下しますベースでは、要求に存在する、<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>。"
  syntax:
    content: public virtual void RemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "削除する要求。"
  overload: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "要求を削除することはできません。"
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  id: RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "この要求の間での .NET Framework ロール要求の id として解釈されます要求の種類を取得します。"
  remarks: "ロール クレームの種類は、クレームの種類 (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>) に対してこの id を評価するときに使用される、<xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>メソッド</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName></xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>。 <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>メソッドが呼び出され、現在のプリンシパルが、指定されたロールにあるかどうかを調べます</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>。 クレームに基づくモデルでは、プリンシパルによって提示されるクレームを使用するには、このチェックを拡張します。 A<xref:System.Security.Claims.ClaimsPrincipal>オブジェクトは、1 つまたは複数を含めることができます<xref:System.Security.Claims.ClaimsIdentity>オブジェクトと各 id オブジェクトには、複数<xref:System.Security.Claims.Claim>オブジェクト</xref:System.Security.Claims.Claim></xref:System.Security.Claims.ClaimsIdentity></xref:System.Security.Claims.ClaimsPrincipal>。 これを評価するときに、ロールの値を提供するために使用する必要がある要求の要求の種類を指定する RoleClaimType プロパティ<xref:System.Security.Claims.ClaimsIdentity>オブジェクト</xref:System.Security.Claims.ClaimsIdentity>。 コンス トラクターによって設定されます。 一般的な値は<xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>.</xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>"
  syntax:
    content: public string RoleClaimType { get; }
    return:
      type: System.String
      description: "ロール要求の種類。"
  overload: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  id: TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "要求の id からクレームを削除しようとしています。"
  remarks: "Id によって所有されていないため、要求を削除することはできません。 たとえば、プリンシパルが所有するロール要求の場合になります。       オブジェクト参照で指定したクレームが一致 (<xref:System.Object.ReferenceEquals%2A>).</xref:System.Object.ReferenceEquals%2A>       このメソッドは、`SecurityCritical`エンティティは、信頼性情報を削除する id からコントロールに適用される属性です。 さらに、パイプを承認決定を下しますベースでは、要求に存在する、<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>コレクションです</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>。"
  syntax:
    content: public virtual bool TryRemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "削除する要求。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要求が正常に削除された場合それ以外の場合、 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>です。"
  overload: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "追加します。"
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "追加します。"
    - id: userData
      type: System.Byte[]
      description: "追加します。"
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.Actor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsIdentity.#ctor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.Actor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim
  nameWithType: ClaimsIdentity.AddClaim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims
  nameWithType: ClaimsIdentity.AddClaims
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone
  nameWithType: ClaimsIdentity.Clone
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim
  nameWithType: ClaimsIdentity.CreateClaim
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
- uid: System.Security.Claims.ClaimsIdentity.FindAll*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll
  nameWithType: ClaimsIdentity.FindAll
- uid: System.Security.Claims.ClaimsIdentity.FindFirst*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsIdentity.FindFirst
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsIdentity.GetObjectData
- uid: System.Security.Claims.ClaimsIdentity.HasClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsIdentity.HasClaim
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim
  nameWithType: ClaimsIdentity.RemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim
  nameWithType: ClaimsIdentity.TryRemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.WriteTo*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsIdentity.WriteTo
